{"name":"stdlib","description":"The fundamental numerical library for JavaScript","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/stdlib","ideas_url":"https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md","logo":"https://summerofcode.withgoogle.com/media/org/stdlib/7ornclj6w5zz9fca-360.png","technologies":["c","javascript","node.js","typescript","webassembly"],"topics":["mathematics","web","scientific computing","numerical computing","statistics"],"projects":[{"project_name":"Implement a broader range of statistical distributions","summary":"Develop APIs for all statistical distributions found in SciPy, focusing on calculating key properties like PDFs and CDFs, and allowing sampling from these distributions.","difficulty":"Intermediate"},{"project_name":"Provide APIs for computing Fast Fourier Transforms","summary":"Expose FFT interfaces similar to NumPy, with potential reference implementations for backend processing.","difficulty":"Hard"},{"project_name":"Developer dashboard for tracking ecosystem build failures","summary":"Create a dashboard to visualize ongoing build failures across various repositories in the stdlib ecosystem, improving developer efficiency.","difficulty":"Intermediate"},{"project_name":"Expand support for additional pseudorandom number generators","summary":"Implement a variety of PRNGs beyond Mersenne Twister, allowing users a broader selection for statistical simulations.","difficulty":"Intermediate/Hard"},{"project_name":"Add support for visualizing benchmark results","summary":"Develop tools for parsing TAP results and visualizing benchmark data to enhance comparison of different implementations.","difficulty":"Intermediate"},{"project_name":"Develop a project test runner","summary":"Migrate away from 'tape' and create an in-house test runner tailored to stdlib conventions, enhancing testing consistency.","difficulty":"Intermediate"},{"project_name":"Reimagine the stdlib plot API","summary":"Refactor the plot API to support more complex visualizations, potentially using the Vega library for rendering.","difficulty":"Intermediate/Hard"},{"project_name":"Achieve feature parity with async.js","summary":"Expand stdlib's async functionality to match the capabilities of async.js, improving performance and usability.","difficulty":"Beginner"},{"project_name":"Achieve feature parity with Node.js 'fs' module","summary":"Implement additional methods in stdlib that are equivalent to those provided by Node.js's native 'fs' module.","difficulty":"Intermediate"},{"project_name":"Add support for the multivariate normal distribution","summary":"Develop functionality for the multivariate normal distribution, enhancing statistical operations in stdlib.","difficulty":"Intermediate"},{"project_name":"Develop a Google Sheets extension for stdlib","summary":"Create an extension allowing the use of stdlib APIs directly from Google Sheets, enhancing productivity in data manipulation.","difficulty":"Beginner/Intermediate"},{"project_name":"Stdlib API dependency explorer","summary":"Implement a visual dependency graph to aid in understanding and navigating the stdlib codebase more effectively.","difficulty":"Beginner/Intermediate"},{"project_name":"Add support for bootstrapping and jackknife resampling","summary":"Implement statistical resampling techniques useful for confidence intervals and variance estimation.","difficulty":"Beginner/Intermediate"},{"project_name":"Develop a Jupyter backend for stdlib","summary":"Allow users to run stdlib operations directly within Jupyter notebooks through a custom backend.","difficulty":"Hard"},{"project_name":"Implement additional statistical tests","summary":"Broaden the range of statistical tests available in stdlib, incorporating those commonly used in Python, R, etc.","difficulty":"Hard"},{"project_name":"Generate documentation from JSDoc comments","summary":"Create an in-house parser for generating comprehensive documentation from existing JSDoc comments in stdlib.","difficulty":"Intermediate"},{"project_name":"Refactor TypeScript interface documentation","summary":"Enhance the process of generating TypeScript documentation by integrating it seamlessly with existing documentation.","difficulty":"Intermediate"},{"project_name":"Use ES6 modules for running unit tests","summary":"Shift from UMD bundles to ES6 modules for testing and benchmarking within the stdlib API documentation.","difficulty":"Intermediate"},{"project_name":"Migrate API documentation analytics to matomo","summary":"Transition the analytics for stdlib API documentation from GA to Matomo for improved privacy and data handling.","difficulty":"Intermediate"},{"project_name":"Improve REPL presentation framework","summary":"Enhance the existing REPL presentation framework with new features like ASCII plotting and syntax highlighting.","difficulty":"Intermediate"},{"project_name":"Functions for numerical integration and differentiation","summary":"Introduce foundational functions for numerical integration and differentiation, supporting complex mathematical calculations.","difficulty":"Intermediate"},{"project_name":"Add support for symbolic math","summary":"Enable basic symbolic math operations, allowing users to perform algebra symbolic computations in JavaScript.","difficulty":"Intermediate"},{"project_name":"Make documentation code blocks interactive","summary":"Innovate the static code blocks in documentation to allow for real-time editing and interactive execution.","difficulty":"Hard"},{"project_name":"Optimization algorithms","summary":"Implement various optimization algorithms to facilitate a broad range of problem-solving capabilities.","difficulty":"Hard"},{"project_name":"Linear algebra functionality","summary":"Expand support for linear algebra operations to make stdlib a more comprehensive mathematical tool.","difficulty":"Hard"},{"project_name":"Achieve ndarray API parity with built-in arrays","summary":"Create functional analogs of JavaScript array methods for ndarrays, enhancing the usability of these data structures.","difficulty":"Intermediate"},{"project_name":"Develop C implementations for mathematical functions","summary":"Port existing JavaScript mathematical functions to optimized C implementations for performance gains.","difficulty":"Intermediate"},{"project_name":"Develop an Excel addon for stdlib","summary":"Create an extension that brings stdlib functionality into Excel for enhanced data analysis capabilities within spreadsheets.","difficulty":"Beginner/Intermediate"},{"project_name":"Add BLAS bindings for linear algebra","summary":"Implement bindings for BLAS routines in stdlib, improving linear algebra support.","difficulty":"Intermediate"},{"project_name":"Implement incremental machine learning algorithms","summary":"Enhance stdlib's machine learning capabilities by adding incremental learning algorithms for real-time data processing.","difficulty":"Intermediate"},{"project_name":"Add support for string arrays","summary":"Introduce a string data structure to facilitate better handling of string data in stdlib.","difficulty":"Intermediate/Advanced"},{"project_name":"ESLint 9 Migration for JSON and YAML linting","summary":"Migrate the codebase to ESLint 9 to improve code quality and support additional file types such as JSON and YAML.","difficulty":"Intermediate"},{"project_name":"Improve stdlib publishing pipeline","summary":"Refactor the publishing workflow of stdlib to streamline package management and enhance maintainability.","difficulty":"Intermediate"},{"project_name":"Add support for Float16Array","summary":"Implement a new Float16Array type for better data handling in numerical computations.","difficulty":"Intermediate"},{"project_name":"Add LAPACK bindings for linear algebra","summary":"Integrate LAPACK routines into stdlib to elevate the level of available linear algebra functionality.","difficulty":"Hard"},{"project_name":"Extend doctesting to C examples","summary":"Implement a doctesting solution for C source code to ensure robustness in examples and documentation.","difficulty":"Hard"},{"project_name":"Add WebAssembly implementations for extended BLAS routines","summary":"Implement WebAssembly support for extended BLAS routines to enhance performance in numerical computations.","difficulty":"Intermediate"},{"project_name":"Add WebAssembly implementations for stats routines","summary":"Extend WebAssembly support for statistical routines, allowing users to leverage performance improvements.","difficulty":"Intermediate"},{"project_name":"Prototype for TypeScript to C transpiler","summary":"Develop a prototype for transpiling a subset of TypeScript to C to boost performance in Node.js applications.","difficulty":"Hard"},{"project_name":"Matrix format parsers and data loaders","summary":"Implement parsers for various matrix formats to facilitate data interoperability with other computing environments.","difficulty":"Hard"},{"project_name":"Support for memory-mapped files","summary":"Add memory-mapped file support to typed arrays for efficient memory use and inter-process communication.","difficulty":"Hard"},{"project_name":"Improve project supply chain security","summary":"Reduce external dependencies by implementing in-house equivalents, enhancing security and adherence to stdlib standards.","difficulty":"Intermediate"},{"project_name":"Automated code reviews via LLM-powered stdlib-bot","summary":"Enhance the stdlib-bot to automate code reviews, improving the efficiency and consistency of the code review process.","difficulty":"Intermediate"}],"jina_response":"Title: google-summer-of-code/ideas.md at main Â· stdlib-js/google-summer-of-code\n\nURL Source: https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md\n\nMarkdown Content:\n> List of potential project ideas.\n\nBefore working on your GSoC application, please review our list of ideas to see if you find a project which excites you. The list of existing ideas is provided to serve as inspiration and to indicate which directions may be good for stdlib.\n\nIf you do find an existing idea that you'd like to pursue, please be sure to contact us in our [Element](https://gitter.im/stdlib-js/stdlib) channel to discuss it first! **Always be sure to ask about these ideas prior to working on application in order to get the latest information about what is already implemented and what exactly must be done.**\n\nPriority, difficulty, technology, and topic area have no bearing on the chances of an idea being accepted. All ideas are equally good, and your chances of being accepted depend solely on the **quality of your application**.\n\n**Project Length**\n\nGSoC allows three different project lengths: **90** hours, **175** hours, and **350** hours. Each idea must indicate whether the idea is a better fit for 90, 175, or 350 hours.\n\nIn some cases, we may be able to extend a 175 hour project to a 350 hour project by extending the ideas of what can be done. Similarly, in some cases, a 350 hour project can be shortened to a 175 hour project by only implementing part of an idea and leaving the rest for a future project. In either case, if you want to adjust the project length, please be sure to contact us in our [Element](https://gitter.im/stdlib-js/stdlib) channel to discuss it first!\n\nYour Own Idea\n-------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#your-own-idea)\n\nIf you'd like to submit your own idea, that is also welcome; just be sure to propose your idea to stdlib mentors first! After reaching out, we'll inform you whether the idea has already been implemented, if the idea will entail enough work to last the duration of the GSoC program, if the idea requires too much work to be meaningfully pursued during GSoC, and if the idea is within the scope of stdlib. **Unsolicited, undiscussed ideas are less likely to get accepted.**\n\nThe best project for you is the one you are most interested in and knowledgeable about. Excitement and aptitude are two key ingredients of a successful project and help ensure your commitment and ability to see a project through to completion. So if there is something you are especially passionate about and that you believe aligns with the scope and goals of stdlib, we'd be happy to hear your pitch!\n\nAfter discussing with us in our [Element](https://gitter.im/stdlib-js/stdlib) channel and receiving approval to submit your idea, please open an [issue](https://github.com/stdlib-js/google-summer-of-code/issues/new?assignees=&labels=idea&template=idea.yml&title=%5BIdea%5D%3A+) which describes your idea using the [**idea issue template**](https://github.com/stdlib-js/google-summer-of-code/issues/new?assignees=&labels=idea&template=idea.yml&title=%5BIdea%5D%3A+).\n\nMentors\n-------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#mentors)\n\nTo learn who might mentor one of the projects listed below, consult the list of potential project [mentors](https://github.com/stdlib-js/google-summer-of-code/blob/main/mentors.md). For each mentor, the list includes a mentor's preferred project(s) and/or general interest area.\n\n* * *\n\nImplement a broader range of statistical distributions\n------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#implement-a-broader-range-of-statistical-distributions)\n\nLinked issue: [#2](https://github.com/stdlib-js/google-summer-of-code/issues/2)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea)\n\nThe goal of this idea is to implement all distributions found in SciPy [stats](https://docs.scipy.org/doc/scipy/reference/stats.html#statsrefmanual). Distribution support will entail implementing APIs for computing PDFs, CDFs, quantiles, and other distribution properties. Additionally, stdlib should support APIs for drawing random variates from any implemented distributions.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes)\n\nstdlib users will be able to construct, and compute various properties of, every statistical distribution present in SciPy in JavaScript.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software)\n\nNo runtime dependencies should be necessary. SciPy will be necessary in order to provide reference test results.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge)\n\nJavaScript, Node.js. Familiarity with C/C++/Fortran would help.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty)\n\nIntermediate. Difficulties may arise for distributions whose properties and moments have complicated formulations. Developing JavaScript implementations will likely require consulting C/C++ and possibly Fortran code.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length)\n\n350 hours.\n\n* * *\n\nProvide APIs for computing Fast Fourier Transforms\n--------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#provide-apis-for-computing-fast-fourier-transforms)\n\nLinked issue: [#3](https://github.com/stdlib-js/google-summer-of-code/issues/3)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-1)\n\nThe goal of this idea is to expose a set of Fast Fourier Transform (FFT) interfaces similar to those available in NumPy and as documented in the [Data APIs Array API specification](https://data-apis.org/array-api/latest/extensions/fourier_transform_functions.html). Similar to stdlib's BLAS interfaces, we may want to allow switching out the FFT backend.\n\nOne potential reference implementation which could form the basis of this idea is pocketfft, as done in NumPy:\n\n*   [https://github.com/mreineck/pocketfft](https://github.com/mreineck/pocketfft)\n*   [https://gitlab.mpcdf.mpg.de/mtr/pocketfft](https://gitlab.mpcdf.mpg.de/mtr/pocketfft)\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-1)\n\nstdlib users would be able to evaluate FFT operations on stdlib ndarrays. Ideally, we'd also provide a set of C APIs.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-1)\n\nWill need to consult reference implementations in C/Fortran.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-1)\n\nJavaScript, Node.js, C/C++/Fortran\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-1)\n\nHard. This may be a straightforward port, or it may not be. More R&D is needed.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-1)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors)\n\n@kgryte @Planeshifter @rreusser @Pranavchiku @czgdp1807\n\n* * *\n\nDeveloper dashboard for tracking ecosystem build failures\n---------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#developer-dashboard-for-tracking-ecosystem-build-failures)\n\nLinked issue: [#4](https://github.com/stdlib-js/google-summer-of-code/issues/4)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-2)\n\nThe [stdlib](https://github.com/stdlib-js/stdlib) project encompasses over 3500 repositories which are orchestrated via a centralized repository. While orchestration largely works as intended, build failures do happen, and quickly detecting and resolving build failures in standalone repositories is critical to prevent downstream breakages and ensure ecosystem integrity.\n\nThe goal of this idea is to build a developer dashboard to display in real-time standalone repository build failures. We currently have the backend database which collects build results in real-time; however, we have yet to build a frontend for viewing and analyzing such data.\n\nThe expected roadmap is as follows:\n\n*   Build a Node.js backend for querying a PostgreSQL database.\n*   Build a frontend dashboard which interfaces with the backend. As this will be a developer facing application, the choice of technologies is greenfield. Potential options may include ESBuild, tailwind, etc.\n*   Add support for filtering the dashboard based on build status and other features.\n*   Allow for quick navigation to repository resources and build artifacts.\n*   Extend the dashboard to support historical overviews and other drill down metrics.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-2)\n\nstdlib developers will be able to navigate to a webpage and see the build status for all repositories at once.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-2)\n\nThis will involve building a frontend application and interfacing with a backend for querying a PostgreSQL database. We may want to try more \"cutting edge\" technology here, such as ESBuild, tailwind, etc.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-2)\n\nJavaScript, Node.js, CSS, HTML, JSX.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-2)\n\nIntermediate. Requires a fair amount of frontend engineering knowledge and modern frontend application development.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-2)\n\n175/350 hours. A skilled contributor may be able to execute on this faster. If so, scope could be expanded to include analytics and historical overviews.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-1)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nExpand support for additional pseudorandom number generators\n------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expand-support-for-additional-pseudorandom-number-generators)\n\nLinked issue: [#5](https://github.com/stdlib-js/google-summer-of-code/issues/5)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-3)\n\nThe goal of this idea is to implement a variety of PRNGs for use within stdlib to generate pseudorandom numbers. The project currently uses Mersenne Twister as its default PRNG; however, this PRNG, while common, is not ideal given its comparatively large internal state. Would be great to have a collection of PRNGs, such as PCG, Philox, Xorshift, and more.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-3)\n\nstdlib users will have a wide selection of PRNGs from which to choose from based on their individual needs and considerations. Having a large selection of PRNGs will useful when replicating the results of numerical simulations which may use a PRNG which is not one of the currently supported stdlib PRNGs. Additionally, a desired outcome would be if we could replace MT19937 with a new default PRNG.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-3)\n\nNo other software should be necessary. We may be a bit constrained based on 32-bit limitations in JS. This would not, however, stop us from implementing in C for use in generating arrays of random numbers.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-3)\n\nJavaScript, Node.js. Familiarity with C/C++/Fortran would help.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-3)\n\nIntermediate/Hard. Depends. Some PRNGs may be straightforward to implement. Others, not so much.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-3)\n\n175/350 hours. This idea can be adjusted according to needs and availability.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-2)\n\n@kgryte @Planeshifter @Pranavchiku\n\n* * *\n\nAdd support for visualizing benchmark results\n---------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-support-for-visualizing-benchmark-results)\n\nLinked issue: [#6](https://github.com/stdlib-js/google-summer-of-code/issues/6)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-4)\n\nWhile we currently support running benchmarks, we have yet to provide a means for easily visualizing and comparing benchmark results. Previously, when wanting to visualize and compare benchmark results, one has needed to manually parse TAP results and then plug into some other software (e.g., vega or Plotly).\n\nThe idea for this project would be to 1) implement a TAP parser with support for the latest TAP specification and 2) provide a plot frontend for consuming parsed TAP results. The plot frontend could be as simple as a Unicode bar chart plotter, which would be in line with our existing Unicode plotting facilities.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-4)\n\nDevelopers will be able to run benchmarks and visually compare benchmark results based on the namespace and parameterization. Ideally, the plot would include small multiple/facet visualizations.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-4)\n\nNo other software or dependencies should be necessary. Will need to consult a reference TAP parser implementation (e.g., `node-tap`).\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-4)\n\nJavaScript and Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-4)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-4)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-3)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nDevelop a project test runner\n-----------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#develop-a-project-test-runner)\n\nLinked issue: [#7](https://github.com/stdlib-js/google-summer-of-code/issues/7)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-5)\n\nCurrently, stdlib uses `tape`. The goal of this idea is to migrate away from `tape` and develop a test runner in-house, similar to `@stdlib/bench/harness`. This has long been on our TODO list and would allow us to have a simple test runner which is oriented toward stdlib conventions (e.g., we don't use most of the assertion methods in `tape`).\n\nBonus points if we can migrate away from `istanbul` to `nyc` or `c8`; however, this may be tricky if we want to support older Node.js versions.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-5)\n\nAll unit tests have migrated to the in-house runner.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-5)\n\nNo additional runtime deps. Will need to consult `tape` as a reference implementation, along with our existing `@stdlib/bench/harness` implementation.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-5)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-5)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-5)\n\n175/350 hours. The scope of this idea can be adjusted depending on availability.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-4)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nReimagine the stdlib plot API and implementation\n------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#reimagine-the-stdlib-plot-api-and-implementation)\n\nLinked issue: [#8](https://github.com/stdlib-js/google-summer-of-code/issues/8)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-6)\n\nCurrently, stdlib has a bespoke plot API which is useful for fast static rendering. However, our implementation is quite limited in the types of plots it can produce. The goal of this idea is to refactor our plot API to build atop of `vega` (or its specifications). For this, we'd need to migrate to an async plot generation API, which is probably necessary regardless if we want to support WebGL or some other async rendering engine.\n\nIdeally, we would retain the same plot API and internally generate a vega specification.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-6)\n\nWe can generate simple plots using the new plot implementation.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-6)\n\nThis will involve using `vega` (or something similar depending on whether `vega` is sufficiently maintained). We will want to transpile to ES5 and vendor in order to ensure that we can support our supported Node.js versions.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-6)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-6)\n\nIntermediate/Hard.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-6)\n\n350 hours. This project has the potential to spiral out of control, as there are many unknowns we'd need to answer. Mentor would likely need to be actively involved in order to perform R&D and properly scope.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-5)\n\n@kgryte @Planeshifter @rreusser\n\n* * *\n\nAchieve feature parity with async.js\n------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#achieve-feature-parity-with-asyncjs)\n\nLinked issue: [#9](https://github.com/stdlib-js/google-summer-of-code/issues/9)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-7)\n\nCurrently, stdlib has a limited set of dedicated \"async\" APIs for performing various utility operations. The goal of this idea is to achieve feature parity with [`async.js`](https://caolan.github.io/async/v3/), a popular library providing callback-based async APIs.\n\nMotivation for this idea stems from certain advantages afforded by callback-based asynchronous programming. Notable among them is superior performance and the ability to more readily return and inspect status objects.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-7)\n\nstdlib will have more or less 1:1 feature parity with `async.js` APIs.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-7)\n\n`async.js` will serve as a reference implementation for API design. Will want to modify to match stdlib conventions.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-7)\n\nJavaScript.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-7)\n\nBeginner. Would benefit from someone with JavaScript experience.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-7)\n\n175/350 hours. Can be scoped accordingly.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-6)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nAchieve feature parity with builtin Node.js `fs` module\n-------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#achieve-feature-parity-with-builtin-nodejs-fs-module)\n\nLinked issue: [#10](https://github.com/stdlib-js/google-summer-of-code/issues/10)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-8)\n\nAchieve feature parity with Node.js `fs` package. We currently only support a limited selection of `fs` methods. Would be useful to support more.\n\nPart of this work involves providing an abstraction layer of Node.js built-ins in order to support newer functionality (e.g., options and/or behavior) not present in older Node.js versions. This is similar in concept to the userland `readable-stream` package.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-8)\n\nstdlib will have complete feature parity with Node.js built-ins.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-8)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-8)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-8)\n\nIntermediate. Could require some creative solutions to ensure that abstractions work for older Node.js versions.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-8)\n\n175/350 hours. Can be scoped accordingly.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-7)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nAdd support for the multivariate normal distribution\n----------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-support-for-the-multivariate-normal-distribution)\n\nLinked issue: [#11](https://github.com/stdlib-js/google-summer-of-code/issues/11)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-9)\n\nThe goal of this idea is to implement the multivariate normal distribution. This distribution is fundamental in a wide variety of statistical applications and will help unblock stdlib in offering additional statistics APIs.\n\nAs a starting point, SciPy's multivariate normal distribution API and implementation could provide a suitable point of reference:\n\n*   [https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.multivariate\\_normal.html](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.multivariate_normal.html)\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-9)\n\nUsers will be able to evaluate the PDF, CDF, logPDF, and logCDF and be able to draw random variates from a specified distribution.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-9)\n\nNo other software is necessary. Will require reading reference implementations written in Python, R, and Julia.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-9)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-9)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-9)\n\n175/350 hours. Can be scoped accordingly. A skilled contributor should be able to complete in 175 hours with the potential of using their implementation to implement higher order statistics APIs.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-8)\n\n@kgryte @Planeshifter @Pranavchiku\n\n* * *\n\nDevelop a Google Sheets extension which exposes stdlib functionality\n--------------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#develop-a-google-sheets-extension-which-exposes-stdlib-functionality)\n\nLinked issue: [#13](https://github.com/stdlib-js/google-summer-of-code/issues/13)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-10)\n\nThe goal of this idea is to allow users to call stdlib APIs from within Google Sheets. This will allow users to perform linear algebra and various machine learning operations directly on spreadsheet data and all within the browser.\n\nIn order to execute on this idea, we'll want to support\n\n*   two-dimensional array broadcasting semantics\n*   performant element-wise iteration APIs\n*   input argument validation tailored to the Sheets context\n*   Fused operations to avoid unnecessary network calls\n*   documentation and tutorials demonstrating API usage\n*   good generation and automation for creating extension builds\n*   testing and performance measurement to guard against regressions\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-10)\n\nGoogle Sheets users will be able to install an extension which exposes stdlib functionality, run statistical tests, evaluate mathematical functions, and perform linear algebra operations using stdlib.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-10)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-10)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-10)\n\nBeginner/Intermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-10)\n\n175/350 hours. Can be scoped accordingly. A skilled contributor can work on a strategy for performant fused operations.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-9)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nStdlib API dependency explorer\n------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#stdlib-api-dependency-explorer)\n\nLinked issue: [#14](https://github.com/stdlib-js/google-summer-of-code/issues/14)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-11)\n\nstdlib is a large (and growing!) project, which can make project navigation challenging. The goal of this idea is to provide a visual representation of an API's dependency graph directly in the stdlib API documentation. Initial thinking is that would be an interactive network diagram in which nodes present package dependencies and allow for navigation; however, other visual representations may be possible.\n\nBy providing such a means for navigating the project, users could more readily deepen their understanding of the `stdlib` code base, identify potential issues, and better understand how underlying APIs are used.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-11)\n\nA user will be able to navigate to a package's documentation page, click to display a network graph, and then click on nodes within that graph to explore the documentation of package dependencies.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-11)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-11)\n\nJavaScript, Node.js, HTML/CSS, JSX.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-11)\n\nBeginner/Intermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-11)\n\n175 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-10)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nAdd support for bootstrap and jackknife resampling\n--------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-support-for-bootstrap-and-jackknife-resampling)\n\nLinked issue: [#15](https://github.com/stdlib-js/google-summer-of-code/issues/15)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-12)\n\nManually constructing confidence intervals and other statistical properties can be useful when no analytic solution exists. The goal of this idea to implement APIs for bootstrap and jackknife resampling.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-12)\n\nUsers will be to resample provided datasets.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-12)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-12)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-12)\n\nBeginner/Intermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-12)\n\n175/350 hours. Can be scoped accordingly. Scope can be expanded to implement different bootstrap algorithms.\n\n* * *\n\nDevelop a Jupyter backend for interfacing with the stdlib REPL\n--------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#develop-a-jupyter-backend-for-interfacing-with-the-stdlib-repl)\n\nLinked issue: [#16](https://github.com/stdlib-js/google-summer-of-code/issues/16)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-13)\n\nJupyter is a dominate force in scientific computing. While some effort has been done to expose JavaScript kernels to Jupyter/JupyterLab, most of these kernels are under-developed or lack numerical functionality.\n\nThe goal of this idea would be to develop a Jupyter backend based on stdlib.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-13)\n\nA JupyterLab user will be able to connect to a stdlib kernel and invoke stdlib operations.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-13)\n\nThis goal will require interfacing with the Jupyter technology stack, including ZeroMQ and implementing messaging protocols.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-13)\n\nJavaScript, Node.js. Experience with Python would be very helpful.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-13)\n\nHard.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-13)\n\n350 hours. This idea has many unknowns and will be hard to scope.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-11)\n\n@kgryte @Planeshifter\n\n* * *\n\nImplement additional statistical tests\n--------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#implement-additional-statistical-tests)\n\nLinked issue: [#17](https://github.com/stdlib-js/google-summer-of-code/issues/17)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-14)\n\nImplement various statistical tests which are not currently implemented in stdlib, but are implemented in other envs such as R, Python (SciPy, statsmodels), Julia, and MATLAB.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-14)\n\nstdlib will have a broader array of statistical tests which can operate on ndarrays.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-14)\n\nNo other software should be necessary. However, we will need to do a needs analysis to determine which prerequisite packages/functionality is necessary in order to allow these tests to be implemented (e.g., BLAS, ndarray slicing, etc).\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-14)\n\nJavaScript, Node.js. Familiarity with R, Python, C/C++ would be very useful, as will need to consult reference implementations.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-14)\n\nHard. Depends on the reference implementation requirements and algorithmic difficulty.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-14)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-12)\n\n@kgryte @Planeshifter @Pranavchiku\n\n* * *\n\nGenerate web documentation from JSDoc comments\n----------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#generate-web-documentation-from-jsdoc-comments)\n\nLinked issue: [#19](https://github.com/stdlib-js/google-summer-of-code/issues/19)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-15)\n\nstdlib relies heavily on JSDoc comments to document its source code. Currently, the project has only rudimentary support for generating HTML docs from those comments. The goal of this idea would be to\n\n1.  Write an in-house JSDoc parser.\n2.  Generate HTML documentation from the parsed comments which is capable of supporting project conventions and its embrace of radical modularity.\n\nJSDoc comments are oriented toward JavaScript source files; however, stdlib also uses similar documentation practices for documenting C source files and `make` files. A possible extension to the in-house JSDoc parser would be to support these other source file types. As those file types may require separate AST parsers, supporting other file types is likely to require writing separate comment parsers for each source type.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-15)\n\nIn addition to the current API documentation, a user will be able to navigate to a package's JSDoc documentation to gain more insight into supported input and output dtypes and implemented algorithms. This would be especially useful for rendering the extended JSDoc comment of elementary mathematical functions.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-15)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-15)\n\nJavaScript, Node.js, HTML/CSS.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-15)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-15)\n\n350 hours. The length can likely be scaled down; however, there are several unknowns, and it may not be straightforward to develop an in-house parser which caters to the unique structure and setup of stdlib. For advanced contributors, possibility to explore support for source file types other than JavaScript (e.g., C and `make`).\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-13)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nRefactor generated TypeScript interface documentation\n-----------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#refactor-generated-typescript-interface-documentation)\n\nLinked issue: [#20](https://github.com/stdlib-js/google-summer-of-code/issues/20)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-16)\n\nCurrently, stdlib publishes TypeScript interface documentation in its web-based API documentation. The generated documentation monkey-patches `tsdoc` to handle generating documentation across the entire mono-repo. The goal of this project is to refactor/rethink this approach and provide a solution capable of addressing the unique constraints of the stdlib project.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-16)\n\nAt a base level, it would be great if we had a working documentation render which did not require monkey-patching. A more difficult, but potentially more desirable, outcome would be if TypeScript documentation was not rendered as a separate website, but rather was integrated within the docs as simply another page/fragment.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-16)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-16)\n\nJavaScript, Node.js, HTML/CSS, TypeScript, JSX/React.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-16)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-16)\n\n175/350 hours. Length will depend on the nature of the proposed solution (e.g., needing to write a custom TypeScript parser vs modifying the existing tsdoc library).\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-14)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nUse ES6 modules for running unit tests and benchmarks in web browsers\n---------------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#use-es6-modules-for-running-unit-tests-and-benchmarks-in-web-browsers)\n\nLinked issue: [#21](https://github.com/stdlib-js/google-summer-of-code/issues/21)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-17)\n\nCurrently, when generating stdlib API documentation, we generate UMD bundles for unit tests and benchmarks. When a user navigates to our package documentation, they can load unit tests and benchmarks and have those run without needing to setup a local environment. The pain point here is that creating separate bundles for each package is time consuming and adds significant heft to the `www` repo.\n\nThe goal of this idea is to refactor the way we support unit tests and benchmarks to use ES6 modules and potentially skip bundling altogether. This has the downside of not supporting older browsers which don't support the `<module>` tag, but is probably fine considering that running package unit tests and benchmarks is likely a forward looking concern.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-17)\n\nUsers will be able to run unit tests and benchmarks directly in their web browsers by navigating to project API documentation and what is loaded are ES6 modules, not UMD bundles.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-17)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-17)\n\nJavaScript, Node.js, HTML/CSS, JSX/React.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-17)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-17)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-15)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nMigrate web API documentation to use matomo and instrument for better understanding user navigation behavior\n------------------------------------------------------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#migrate-web-api-documentation-to-use-matomo-and-instrument-for-better-understanding-user-navigation-behavior)\n\nLinked issue: [#22](https://github.com/stdlib-js/google-summer-of-code/issues/22)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-18)\n\nCurrently, the stdlib web-based API docs use GA for analytics and have only minimal integration. E.g., the API docs application is a SPA which uses React and the app does not record changes in page views; we only record first hits.\n\nThe goal of this idea is to migrate to using matomo and take advantage of its privacy features. The work will involve instrumenting the API documentation application and integrating with matomo. A potential stretch goal would be to setup dashboards for reporting so that we can better understand user behavior and continue to improve project documentation.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-18)\n\nAll user interaction data is logged to matomo and stored in a hosted database.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-18)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-18)\n\nJavaScript, Node.js, HTML/CSS, JSX/React.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-18)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-18)\n\n350 hours. Can be adjusted depending on skill and ability.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-16)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nImprove the REPL presentation framework\n---------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#improve-the-repl-presentation-framework)\n\nLinked issue: [#23](https://github.com/stdlib-js/google-summer-of-code/issues/23)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-19)\n\nstdlib currently offers a REPL presentation framework for authoring presentations for use directly in the REPL. This is particularly useful for creating interactive tutorials illustrating how to use stdlib functionality for data analysis and visualization from the terminal. Some functionality is missing which would be quite useful. E.g.,\n\n*   ASCII plotting\n*   ASCII animations\n*   syntax highlighting\n*   pretty printing tables\n*   speaker notes\n*   multiplexing\n*   theming\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-19)\n\nThe REPL presentation framework will have additional features similar to those in WYSIWYG presentation applications.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-19)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-19)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-19)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-19)\n\n175/350 hours. Can be scoped according to project length.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-17)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nFunctions for numerical integration and differentiation\n-------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#functions-for-numerical-integration-and-differentiation)\n\nLinked issue: [#24](https://github.com/stdlib-js/google-summer-of-code/issues/24)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-20)\n\nThe goal of this idea is to add functions for numerical integration or differentiation to stdlib as building blocks for downstream algorithms. The functions could be ported from permissively licensed open-source libraries in other languages such as C or Fortran or alternatively be implemented from scratch by consulting the literature and reference implementations from various languages.\n\nSome work along these lines has been started in the scijs ecosystem, which can be used for initial inspiration (e.g., [https://github.com/scijs/ode45-cash-karp](https://github.com/scijs/ode45-cash-karp)), and more generally in SciPy (e.g., [https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.ode.html)).\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-20)\n\nstdlib will have a range of robust functions for performing numerical integration or differentiation\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-20)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-20)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-20)\n\nIntermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-20)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-18)\n\n@kgryte @Planeshifter @rreusser @Pranavchiku @czgdp1807\n\n* * *\n\nSymbolic Math\n-------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#symbolic-math)\n\nLinked issue: [#25](https://github.com/stdlib-js/google-summer-of-code/issues/25)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-21)\n\nThe goal of this idea is to add basic support for symbolic math operations in stdlib.\n\n### Expected Outcome\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcome)\n\nUsers have the ability to perform basic symbolic math operations in JavaScript, such as solving equations, simplifying expressions, and using mathematical functions.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-21)\n\nNo other software should be necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-21)\n\nJavaScript, Node.js, and an understanding of mathematics and calculus.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-21)\n\nIntermediate\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-21)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-19)\n\n@kgryte @Planeshifter @rreusser\n\n* * *\n\nMake code blocks on website documentation interactive\n-----------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#make-code-blocks-on-website-documentation-interactive)\n\nLinked issue: [#26](https://github.com/stdlib-js/google-summer-of-code/issues/26)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-22)\n\nCurrently, all code blocks in the documentation at [https://stdlib.io/docs/api/latest](https://stdlib.io/docs/api/latest) are static. To make example code more useful and engaging, it would be nice to have interactive code shells on the website that could be edited and would provide real-time return annotations.\n\nSome initial brainstorming has been done to inform how this would work, but, at minimum, we'd need to\n\n*   convert READMEs to structured data to allow for more straightforward transformation\n*   support dynamic loading of relevant stdlib packages used in example code blocks\n*   lazily integrate a code editor into documentation pages\n*   implement security measures to prevent malicious usage\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-21)\n\nImproved user experience on the website, as the code examples would become editable and interactive. Return annotations would have to update in real-time, and additional contextual help could be provided via overlays etc. Another outcome would be to make it easy to switch between ES5 and ES6 for code blocks.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-22)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-22)\n\nJavaScript, HTML/CSS, React + JSX\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-22)\n\nHard.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-22)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-20)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nOptimization Algorithms\n-----------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#optimization-algorithms)\n\nLinked issue: [#27](https://github.com/stdlib-js/google-summer-of-code/issues/27)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-23)\n\nWe currently do not have optimization algorithms in stdlib. Having support for Linear Programming, Convex Optimization, Quadratic Programming, and/or Non-Linear Optimization algorithms would be a great addition.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-22)\n\nstdlib will have a broad array of optimization algorithms for solving problems.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-23)\n\nNo other software should be necessary. However, we will need to do a needs analysis to determine which prerequisite packages/functionality is necessary in order to allow these algorithms to be implemented (e.g., BLAS).\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-23)\n\nJavaScript, Node.js. Familiarity with R, Python, C/C++ would be very useful, as will need to consult reference implementations.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-23)\n\nHard. Depends on the reference implementation requirements and algorithmic difficulty.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-23)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-21)\n\n@kgryte @Planeshifter @rreusser @Pranavchiku @czgdp1807\n\n* * *\n\nLinear Algebra Functionality\n----------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#linear-algebra-functionality)\n\nLinked issue: [#28](https://github.com/stdlib-js/google-summer-of-code/issues/28)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-24)\n\nCurrently, support for linear algebra operations in stdlib is limited. The goal of this idea would be to implement algorithms for linear algebra operations such as matrix multiplication, calculating the matrix inverse, eigenvalue calculation, singular value decomposition, Cholesky & LU Decomposition, and the like. This overlaps with the goal of increasing the amount of BLAS and LAPACK that is available in stdlib.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-23)\n\nstdlib will have extended support for linear algebra operations which can be used to solve problems involving matrices and vectors.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-24)\n\nNo other software should be necessary. However, we will need to do a needs analysis to determine which prerequisite packages/functionality is necessary in order to allow these operations to be implemented (e.g., BLAS, ndarray slicing, etc).\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-24)\n\nJavaScript, Node.js. C, Fortran. Familiarity with linear algebra would be very useful, as will need to consult and understand reference implementations.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-24)\n\nHard. Depends on the reference implementation requirements and algorithmic difficulty.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-24)\n\n350 hours.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-22)\n\n@kgryte @Planeshifter @Pranavchiku @czgdp1807 @rreusser\n\n* * *\n\nAchieve ndarray API parity with built-in JavaScript arrays\n----------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#achieve-ndarray-api-parity-with-built-in-javascript-arrays)\n\nLinked issue: [#33](https://github.com/stdlib-js/google-summer-of-code/issues/33)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-25)\n\nBuilt-in JavaScript [arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) (and typed arrays) have a number of methods for creating, transforming, and manipulating array contents (e.g., `forEach`, `map`, `reverse`, `slice`, `filter`, etc). These APIs provide base level functionality forming a default vocabulary for working with array data.\n\nThe goal of this idea is to create functional analogs of array methods for working with [ndarrays](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/ndarray/ctor), which are efficient data structures for operating on multi-dimensional data. The main difficulty in implementing analogs is in ensuring efficient iteration of non-contiguous data. The main patterns for such iteration have been established in stdlib, but work remains to apply such patterns for top-level array-equivalent APIs.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-24)\n\nUsers will be able to use functional APIs (exposed as part of individual packages) for operating on ndarrays in a manner similar to how users can use prototype methods available on built-in arrays and typed arrays.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-25)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-25)\n\nJavaScript, Node.js.\n\nFor APIs not accepting callbacks, certain kernels can be implemented in C, as time and scope allow.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-25)\n\nIntermediate. Writing the loop kernels can be involved, but, once understood, are straightforward to apply.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-25)\n\n90/175/350 hours. Can be scoped accordingly. Scope can be expanded to implement additional ndarray kernels outside of Array method equivalents.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-23)\n\n@kgryte @Planeshifter @steff456 @rreusser\n\n* * *\n\nDevelop C implementations for base special mathematical functions\n-----------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#develop-c-implementations-for-base-special-mathematical-functions)\n\nLinked issue: [#34](https://github.com/stdlib-js/google-summer-of-code/issues/34)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-26)\n\nThis idea builds on the work outlined in [stdlib-js/stdlib#649](https://github.com/stdlib-js/stdlib/issues/649). Namely, implementing base special mathematical functions in C. Currently, all special mathematical functions have JavaScript implementations, which are often ports from other languages.\n\nThe goal of this idea is to port all JavaScript implementations to C. Having such implementations will allow stdlib to provide Node.js native add-ons for higher performance ndarray computation and is more generally necessary for achieving NumPy/SciPy parity.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-25)\n\nUsers will be able to leverage C implementations for use in Node.js native add-ons, and stdlib will be able to expose element-wise APIs for evaluating base special math functions over ndarrays.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-26)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-26)\n\nC, JavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-26)\n\nIntermediate. Familiarity with C is beneficial. This idea mainly involves porting existing implementations (many of which are written in C/C++) and doing so in a manner which conforms with stdlib conventions.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-26)\n\n90/175/350 hours. Can be scoped accordingly. Scope can be expanded to implement new special mathematical functions.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-24)\n\n@kgryte @Planeshifter @steff456 @rreusser @Pranavchiku @czgdp1807\n\n* * *\n\nDevelop an Excel add-on which exposes stdlib functionality\n----------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#develop-an-excel-add-on-which-exposes-stdlib-functionality)\n\nLinked issue: [#35](https://github.com/stdlib-js/google-summer-of-code/issues/35)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-27)\n\nThe goal of this idea is to allow users to call stdlib APIs from within Excel. This will allow users to perform linear algebra and various machine learning operations directly on spreadsheet data and all within the browser.\n\nIn order to execute on this idea, we'll want to support\n\n*   two-dimensional array broadcasting semantics\n*   performant element-wise iteration APIs\n*   input argument validation tailored to the Sheets context\n*   Fused operations to avoid unnecessary network calls\n*   documentation and tutorials demonstrating API usage\n*   good generation and automation for creating extension builds\n*   testing and performance measurement to guard against regressions\n\nThis idea is the Excel version of [#13](https://github.com/stdlib-js/google-summer-of-code/issues/13).\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-26)\n\nExcel users will be able to install an extension which exposes stdlib functionality, run statistical tests, evaluate mathematical functions, and perform linear algebra operations using stdlib.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-27)\n\nNo other software is necessary; however, access to a local copy of Excel will be beneficial. While Microsoft 360 can be used, debugging is more difficult and less stable.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-27)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-27)\n\nBeginner/Intermediate.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-27)\n\n175/350 hours. Can be scoped accordingly. A skilled contributor can work on a strategy for performant fused operations.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-25)\n\n@kgryte @Planeshifter @steff456\n\n* * *\n\nAdd BLAS bindings and implementations for linear algebra\n--------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-blas-bindings-and-implementations-for-linear-algebra)\n\nLinked issue: [#36](https://github.com/stdlib-js/google-summer-of-code/issues/36)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-28)\n\n[BLAS](https://netlib.org/blas/) routines are standard building blocks for performing basic vector and matrix operations. These building blocks are leveraged by most modern numerical programming languages and libraries, including NumPy, SciPy, Julia, MATLAB, R, and others.\n\nThe goal of this idea is to\n\n*   reimplement reference BLAS routines in free-form Fortran 95\n*   port reference BLAS routines to C\n*   port reference BLAS routines to JavaScript\n*   write Node.js bindings to allow calling BLAS routines in compiled C/ Fortran from JavaScript\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-27)\n\nUsers will be able to call BLAS routines from JavaScript. In web browsers, BLAS routines will be in JavaScript. In Node.js, provided native bindings have been compiled, BLAS routines will either be ported reference implementations or hardware optimized system libraries.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-28)\n\nNo other software is necessary apart from standard compilers (GCC, gfortran).\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-28)\n\nC, Fortran, JavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-28)\n\nIntermediate. Familiarity with C and Fortran will be beneficial. This idea mainly involves porting existing implementations and doing so in a manner which conforms with stdlib conventions.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-28)\n\n90/175/350 hours. Can be scoped accordingly.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-26)\n\n@kgryte @Planeshifter @steff456 @rreusser @Pranavchiku @czgdp1807\n\n* * *\n\nImplement incremental (online) machine learning algorithms\n----------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#implement-incremental-online-machine-learning-algorithms)\n\nLinked issue: [#37](https://github.com/stdlib-js/google-summer-of-code/issues/37)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-29)\n\nThe goal of this idea is to implement incremental machine learning algorithms to allow for real-time regression and classification. Such online algorithms would allow for point-by-point data processing and avoid the sometimes costly overhead of batch processing. Online algorithms are particularly useful in data streaming contexts (e.g., user clicks, photon collection, etc).\n\nWhile stdlib includes some incremental algorithms ([binary classification](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/ml/incr/binary-classification), [k-means](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/ml/incr/kmeans), and [stochastic gradient descent regression](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/ml/incr/sgd-regression)), the project would benefit from additional algorithms.\n\nIndividuals interested in pursuing this idea should be prepared to research possible algorithms and propose specific APIs.\n\n### Expected Outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-28)\n\nstdlib will expose one or more additional APIs for incremental machine learning.\n\n### Involved Software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-29)\n\nNo other software is necessary.\n\n### Prerequisite Knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-29)\n\nJavaScript, Node.js.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-29)\n\nIntermediate. In order to implement ML algorithms, individuals will likely need to consult reference implementations written in other languages. Porting from these implementations may not be straightforward depending on the features involved.\n\n### Project Length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-29)\n\n90/175/350 hours. Can be scoped accordingly.\n\n### Potential Mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-27)\n\n@kgryte @Planeshifter\n\n* * *\n\nAdd support for string arrays in stdlib\n---------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-support-for-string-arrays-in-stdlib)\n\nLinked issue: [#44](https://github.com/stdlib-js/google-summer-of-code/issues/44)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-30)\n\nSimilar to what's described in [#43](https://github.com/stdlib-js/google-summer-of-code/issues/43), a need exists to expand array data type support beyond numeric data types. One such data type is a `string` data type. The rationale for having a dedicated string data type is for better interoperation between JavaScript and C, and this is particularly paramount for supporting ndarrays having a string data type, as much of ndarray iteration machinery is written in C.\n\nAccordingly, the goal of this project is to add a dedicated string typed array called a `StringArray`, which will support variable-length strings. This new array type should follow a similar path to that of [@stdlib/array/complex64](https://github.com/stdlib-js/stdlib/tree/5dbb01dba2b1b305c6a11b66652ee2e4ccac15e2/lib/node_modules/%40stdlib/array/complex64), which provides a typed array dedicated to single-precision complex floating-point numbers; namely, `StringArray` should support standard typed array methods, as well as provide accessors for getting and setting array elements.\n\nNote, however, that a `StringArray` should be a typed array. A `StringArray` should not wrap a \"generic\" array. Instead, the array should be backed by fixed length memory, similar to how [@stdlib/array/complex64](https://github.com/stdlib-js/stdlib/tree/5dbb01dba2b1b305c6a11b66652ee2e4ccac15e2/lib/node_modules/%40stdlib/array/complex64) is backed by a `Float32Array`. One possibility is backing `StringArray` instances with Node.js `Buffer` objects, which are, in turn, `Uint8Array`s.\n\nThere are, however, some design considerations; namely, how to handle setting of array elements. In particular, what happens when a user attempts to update a `StringArray` element with a larger string? Does that lead to a new memory allocation and data copy? Or should elements have a fixed allocation to allow for elements to grow until some maximum size?\n\nAs part of this project, not only will a new `StringArray` be added to the project, but it will be integrated throughout stdlib. This will entail adding support for `StringArray`s wherever arrays are accepted/used, following the same precedent established by [@stdlib/array/complex64](https://github.com/stdlib-js/stdlib/tree/5dbb01dba2b1b305c6a11b66652ee2e4ccac15e2/lib/node_modules/%40stdlib/array/complex64) and other custom array types in stdlib. This includes adding support for string arrays in ndarray APIs.\n\n**Prior Art**\n\n*   Recent work in NumPy adding UTF-8 variable length string support: [https://numpy.org/neps/nep-0055-string\\_dtype.html](https://numpy.org/neps/nep-0055-string_dtype.html)\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-29)\n\nThe expected outcomes of this idea should be (1) creation of a new `@stdlib/array/string` package exposing a new typed array constructor, (2) support for `StringArray` instances throughout `@stdlib/array/*`, (3) support for `StringArray` instances as backing arrays for ndarrays (which may involve working with various C APIs), and (4) any other integration opportunities.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status)\n\nWhile no work has been done to create a new `@stdlib/array/string` package, there exists prior art for adding custom typed arrays to stdlib; namely, `Complex64Array` and `Complex128Array`.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-30)\n\nNo special software for initial work. Once work has progressed to ndarray support, will need access to a C compiler, as documented in the project development guide.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology)\n\nJavaScript, C, nodejs, native addons\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology)\n\nn/a\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-30)\n\nIntermediate/Advanced\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification)\n\nThis project is ambitious, as there are many design considerations which need to be addressed in order to ensure performance and allow for efficient JS/C interoperation.\n\nAdditionally, there will be difficulty beyond the creation of a new `StringArray` class in finding all the various bits of code throughout the project which need to be updated in order to more universally support `StringArray` instances throughout stdlib on equal footing with other array data types.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-30)\n\nFamiliarity and comfort with JavaScript would be highly recommended, given that this project will require considerable programming in JavaScript. Some familiarity with C would also be good, especially for string array integration with ndarrays.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-30)\n\n350hrs, as will likely involve a decent amount of R&D.\n\n### Potential mentors\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#potential-mentors-28)\n\n@kgryte @Planeshifter\n\n* * *\n\nESLint 9 Migration for JSON and YAML Linting\n--------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#eslint-9-migration-for-json-and-yaml-linting)\n\nLinked issue: [#90](https://github.com/stdlib-js/google-summer-of-code/issues/90)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-31)\n\nWe will migrate stdlib-js to ESLint 9 to take advantage of new features, performance improvements, and enhanced file type support (including JSON and YAML). Additionally, this idea posits that we will create new ESLint rules that enforce project-specific coding standards for stdlib. This dual approach ensures both modern linting capabilities and adherence to stdlibâs code expectations and style guidelines.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-30)\n\n*   ESLint 9 Integration: A full migration of the linting infrastructure to ESLint 9.\n*   Extended File Support: Ability to lint not just JavaScript but also JSON and YAML files with the help of ESLint.\n*   New Custom Rules: New rules to enforce more of stdlibâs conventions.\n*   Enhanced Code Quality: Improved consistency and code quality by enforcing additional project-specific standards across the codebase.\n*   Updated Configurations: Comprehensive configuration updates that incorporate both ESLint 9 changes and the new custom rules.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-1)\n\nstdlib currently uses ESLint 8. The stdlib project already has an [extensive collection of custom lint rules](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/_tools/eslint/rules).\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-31)\n\nNo additional external dependencies aside from ESLint.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-1)\n\nnodejs, JavaScript\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-1)\n\nn/a\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-31)\n\n3\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-1)\n\nMigrating to ESLint 9 requires a detailed review of current linting configurations and potential refactoring of custom rules. The project will involve understanding new semantics and breaking changes introduced in ESLint 9, addressing compatibility issues, and integrating support for additional file types such as JSON and YAML and bespoke rules for these new file types. Additionally, thorough testing across various scenarios is necessary to ensure stability, making this a task that is intermediate in complexity.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-31)\n\nA thorough understanding of ESLint, including its configuration system and plugin architecture, is essential. Familiarity with JavaScript and Node.js is required, along with experience in developing custom linting rules. Additionally, knowledge of continuous integration and automated testing practices is recommended to ensure that any new linting rules integrate smoothly into stdlibâs development workflow.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-31)\n\n175\n\n* * *\n\nImprove `stdlib` publishing pipeline\n------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#improve-stdlib-publishing-pipeline)\n\nLinked issue: [#92](https://github.com/stdlib-js/google-summer-of-code/issues/92)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-32)\n\nstdlib is composed of thousands of individual packages. Managing this complexity requires an intricate publishing pipeline that handles automatic updates to repositories, generation of various bundle types, publishing packages to the npm registry, changelog generation, and more.\n\nThe project aims to refactor the current workflows by breaking down the monolithic, feature-rich scripts ([example](https://github.com/stdlib-js/stdlib/blob/develop/lib/node_modules/%40stdlib/_tools/scripts/publish_packages.js)) into discrete, standalone tooling packages in the [\\_tools](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/_tools) namespace, which can be independently tested and maintained.\n\nIn addition, while we still will lean on GitHub Actions for the publishing flow, this project will ensure that our publishing pipeline will not be tightly coupled with it anymore.\n\nGoals of the refactoring will also include to improve logging and observability, enable rigorous testing and checkpointing, and the ability to trigger all steps locally via a CLI tool.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-31)\n\n*   Having the publishing pipeline fully composed into modular packages.\n*   Each module having its own suite of unit tests.\n*   Integration tests and end-to-end tests for the entire workflow.\n*   Enhanced observability and diagnostic tools integrated into the publishing process.\n*   A reduction in the complexity of the existing scripts by making GitHub Actions interactions explicit and manageable.\n*   Better error recovery, collection of statistics, and a more maintainable architecture.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-2)\n\nNo effort has been undertaken to start modularizing the publishing pipeline architecture, but there is agreement among the TSC that this is a desirable goal.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-32)\n\nGitHub Actions, Bash.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-2)\n\nJavaScript, nodejs\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-2)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-32)\n\n3\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-2)\n\nThe project involves a large refactor of an existing, complex system.\n\n*   Decoupling the interwoven dependencies of the current monolithic script requires careful planning and modular design.\n*   Handling platform variability between local development and GitHub Actions orchestration, including differences between Linux and MacOS, adds complexity.\n*   Introducing enhanced testing and observability requires integrating new tools and extending the current functionality.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-32)\n\n*   Proficiency in JavaScript and Node.js development as well as Bash scripting.\n*   Familiarity with GitHub Actions and CI/CD pipeline design.\n*   Understanding of modular design principles and software refactoring techniques.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-32)\n\n350\n\n* * *\n\nAdd support for `Float16Array`\n------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-support-for-float16array)\n\nLinked issue: [#94](https://github.com/stdlib-js/google-summer-of-code/issues/94)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-33)\n\nWith `Float16Array` now on track for stage 4 approval in JavaScript (see [tc39/proposal-float16array#7](https://github.com/tc39/proposal-float16array/issues/7)), it is time we start thinking about adding support for `Float16Array` in stdlib. We have prior experience adding new array types, such as `array/bool`, `array/complex128`, and `array/complex64`, and this idea is a continuation of those efforts.\n\nThe expected roadmap is as follows:\n\n*   add a new `array/float16` package which includes a polyfill for backward compatibility support. The polyfill should expose all common methods and properties as found on other typed array constructors. This package should contain complete tests, documentation, and benchmarks, as found in other typed array packages (e.g., `array/bool`).\n*   add support for `float16` array dtypes throughout the `array/*` namespace.\n*   add support for `float16` array dtypes throughout the `strided/*` namespace.\n*   add support for `float16` array dtypes throughout the `ndarray/*` namespace.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-32)\n\nstdlib users will be able to create and operate on `Float16Array` instances the same way they do throughout the project, with `Float16Array` on equal footing with all other typed array classes.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-3)\n\nNo work has been done on this idea; however, we expect that this should follow as similar path to `array/bool` and its integration throughout the project.\n\nRelated: [#43](https://github.com/stdlib-js/google-summer-of-code/issues/43)\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-33)\n\nNo special software for initial work. Once work has progressed to ndarray support, will need access to a C compiler, as documented in the project development guide.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-3)\n\nJavaScript, C, nodejs, native addons\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-3)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-33)\n\n4\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-3)\n\nImplementing the polyfill will likely take some time, with the need for adding additional functionality to support the implementation (e.g., bit manipulation utilities, math utils, etc).\n\nThis project is ambitious, as arrays are fundamental to a lot of stdlib functionality; however, many of the more difficult integration aspects have already addressed given the widespread support for other array types throughout the project. The main project difficulty beyond the creation of a new `Float16Array` class will be finding all the various bits of code throughout the project which need to be updated.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-33)\n\nFamiliarity and comfort with JavaScript would be highly recommended, given that this project will require considerable programming in JavaScript. Some familiarity with C would also be good, especially for float16 array integration with ndarrays.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-33)\n\n350\n\n* * *\n\nAdd LAPACK bindings and implementations for linear algebra\n----------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-lapack-bindings-and-implementations-for-linear-algebra)\n\nLinked issue: [#95](https://github.com/stdlib-js/google-summer-of-code/issues/95)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-34)\n\n[LAPACK](https://netlib.org/lapack/) routines are standard building blocks for performing basic vector and matrix operations. These building blocks are leveraged by most modern numerical programming languages and libraries, including NumPy, SciPy, Julia, MATLAB, R, and others.\n\nThe goal of this idea is to\n\n*   reimplement reference LAPACK routines in free-form Fortran 95\n*   port reference LAPACK routines to pure C\n*   port reference LAPACK routines to pure JavaScript\n*   write Node.js bindings to allow calling LAPACK routines in compiled C/ Fortran from JavaScript\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-33)\n\nUsers will be able to call LAPACK routines from JavaScript. In web browsers, LAPACK routines will be in JavaScript. In Node.js, provided native bindings have been compiled, LAPACK routines will either be ported reference implementations or hardware optimized system libraries.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-4)\n\nSome work has begun toward this effort. See [https://github.com/stdlib-js/stdlib/tree/develop/lib/node\\_modules/%40stdlib/lapack/base](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/lapack/base).\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-34)\n\nNo other software is necessary apart from standard compilers (GCC, gfortran).\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-4)\n\nC, JavaScript, Fortran, nodejs, native addons\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-4)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-34)\n\n4\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-4)\n\nFamiliarity with C and Fortran will be beneficial. This idea mainly involves porting existing implementations and doing so in a manner which conforms with stdlib conventions. Some of the reference implementations are likely to be quite involved and testing the correct output can be tricky, especially for lower-level helper routines.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-34)\n\nC, Fortran, JavaScript, Node.js.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-34)\n\n350\n\n* * *\n\nExtend stdlib's doctesting approach to C examples\n-------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#extend-stdlibs-doctesting-approach-to-c-examples)\n\nLinked issue: [#96](https://github.com/stdlib-js/google-summer-of-code/issues/96)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-35)\n\nWe heavily rely on doctesting (see [https://github.com/stdlib-js/stdlib/blob/develop/docs/doctest.md](https://github.com/stdlib-js/stdlib/blob/develop/docs/doctest.md)) to ensure that our Markdown and JSDoc examples are correct and do not become out-of-date. However, we currently have no such framework for ensuring that our C source code and Markdown examples are correct.\n\nThe goal of this project would be to implement doctesting for C source code and associated Markdown examples. While the approach is likely to be similar (e.g., parsing source code in scripts, Markdown code blocks, and in DOXYGEN examples), the technology stack is likely to be different and will require some R&D, especially as we won't be able to rely on things like ESLint. Instead, we'll need other tooling for identifying `// returns` annotations, instrumenting examples to collect return values, resolving source files to compile, compiling source files, executing scripts, and asserting that the output results match expectation.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-34)\n\nAs part of our CI workflows and in local development, developers will be able to test that their C examples are correct.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-5)\n\nstdlib has its own doctesting framework for checking JavaScript examples. This should serve as inspiration and provide an idea of what we are looking for.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-35)\n\nC compilers, AST generators, and stdlib tooling.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-5)\n\nC\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-5)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-35)\n\n5\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-5)\n\nThere is likely a need for R&D to determine the best tools and approach. For JavaScript examples, we are able to rely on the fact that we can lint and execute within the same JavaScript runtime. In this case, there will be additional steps needed to separately instrument, create temporary files, compile, execute, and collect.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-35)\n\nExperience with C and creating tooling will be beneficial.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-35)\n\n350\n\n* * *\n\nAdd WebAssembly implementations for extended BLAS routines\n----------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-webassembly-implementations-for-extended-blas-routines)\n\nLinked issue: [#97](https://github.com/stdlib-js/google-summer-of-code/issues/97)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-36)\n\nWe've worked toward compiling BLAS routines to WebAssembly and offering ergonomic APIs for interfacing between JavaScript and WebAssembly binaries (see [https://github.com/stdlib-js/stdlib/tree/develop/lib/node\\_modules/%40stdlib/blas/base/wasm](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/blas/base/wasm)). The goal of this project would be to extend these efforts to the `blas/ext/base` namespace, such that, for each typed interface in `blas/ext/base/(d|s|c|z|)*`, there would be a corresponding WebAssembly package in `blas/ext/base/wasm/*`.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-35)\n\nUsers wanting to potentially accelerate computation of extended BLAS routines will be able to consume a corresponding WebAssembly API.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-6)\n\nWork has primarily happened in [https://github.com/stdlib-js/stdlib/tree/develop/lib/node\\_modules/%40stdlib/blas/base/wasm](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/blas/base/wasm). The efforts there would need to be replicated for the `blas/ext/base/wasm/*` namespace.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-36)\n\nEmscripten, which is necessary for compiling C to WebAssembly. stdlib already offers tooling for automatically installing the emsdk and getting things up and running.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-6)\n\nC, JavaScript\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-6)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-36)\n\n3\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-6)\n\nGiven that most `blas/ext/base/*` routines are straightforward one-dimensional strided array interfaces, developing the wasm packages should be similarly straightforward. The main time-consuming task will be writing tests and documentation.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-36)\n\nSome familiarity with WebAssembly will be helpful. Experience with JavaScript.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-36)\n\n90/175/350. Can be scoped accordingly.\n\n* * *\n\nAdd WebAssembly implementations for `stats/strided` routines\n------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-webassembly-implementations-for-statsstrided-routines)\n\nLinked issue: [#98](https://github.com/stdlib-js/google-summer-of-code/issues/98)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-37)\n\nWe've worked toward compiling BLAS routines to WebAssembly and offering ergonomic APIs for interfacing between JavaScript and WebAssembly binaries (see [https://github.com/stdlib-js/stdlib/tree/develop/lib/node\\_modules/%40stdlib/blas/base/wasm](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/blas/base/wasm)). The goal of this project would be to extend these efforts to the `stats/strided` namespace, such that, for each typed interface in `stats/strided/(d|s|c|z|)*`, there would be a corresponding WebAssembly package in `stats/strided/wasm/*`.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-36)\n\nUsers wanting to potentially accelerate computation of strided statistics routines will be able to consume a corresponding WebAssembly API.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-7)\n\nWork has primarily happened in [https://github.com/stdlib-js/stdlib/tree/develop/lib/node\\_modules/%40stdlib/blas/base/wasm](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/blas/base/wasm). The efforts there would need to be replicated for the `stats/strided/*` namespace.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-37)\n\nEmscripten, which is necessary for compiling C to WebAssembly. stdlib already offers tooling for automatically installing the emsdk and getting things up and running.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-7)\n\nC, JavaScript\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-7)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-37)\n\n3\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-7)\n\nGiven that most `stats/strided/*` routines are straightforward one-dimensional strided array interfaces, developing the wasm packages should be similarly straightforward. The main time-consuming task will be writing tests and documentation.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-37)\n\nSome familiarity with WebAssembly will be helpful. Experience with JavaScript.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-37)\n\n90/175/350. Can be scoped accordingly.\n\n* * *\n\nCreate a prototype for transpiling a subset of TypeScript to C with automatic add-on generation\n-----------------------------------------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#create-a-prototype-for-transpiling-a-subset-of-typescript-to-c-with-automatic-add-on-generation)\n\nLinked issue: [#99](https://github.com/stdlib-js/google-summer-of-code/issues/99)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-38)\n\nDrawing on some of the recent innovations in the numerical Python ecosystem (e.g., see [`pyccel`](https://github.com/pyccel/pyccel/tree/devel)), the goal of this project would be to see if we can define a restricted subset of TypeScript which can be transpiled to C for faster execution in Node.js and other server runtimes.\n\nThere is some prior art here; namely, [AssemblyScript](https://www.assemblyscript.org/), which provides a TypeScript-like language which compiles to WebAssembly. However, we should be able to go farther here, especially in leveraging stdlib's richer collection of types (in particular, complex number dtypes). From this restricted subset, we can then automate transpilation of TypeScript to C, with the ability to automatically generate Node.js native add-ons bindings similar to what can be found in, e.g., [https://github.com/stdlib-js/stdlib/blob/954e7c1e1716bfdd15903b4be7039741396927eb/lib/node\\_modules/%40stdlib/blas/base/dcopy/src/addon.c](https://github.com/stdlib-js/stdlib/blob/954e7c1e1716bfdd15903b4be7039741396927eb/lib/node_modules/%40stdlib/blas/base/dcopy/src/addon.c).\n\nThere would be some puzzle pieces to put together here. Namely,\n\n*   defining a richer set of numeric types. Currently, stdlib uses `number`, `boolean`, `Float64Array`, and other built-in types, along with a couple of custom types, such as `Complex128` and `Complex64`. We'd like want to create named aliases for specific numeric types, such as `int64`, `int32`, etc (similar to AssemblyScript). These would not impact consumption of project type declarations in TypeScript; although, they would have the benefit of signaling expected types.\n*   updating the TypeScript declarations for various packages (e.g., `blas/ext/base`) to use the newly defined types.\n*   creating tooling which can resolve and read a TypeScript declaration for an exported function and then automatically generate an `addon.c` file. If we can reproduce the [`addon.c`](https://github.com/stdlib-js/stdlib/blob/954e7c1e1716bfdd15903b4be7039741396927eb/lib/node_modules/%40stdlib/blas/base/dcopy/src/addon.c) file in `blas/base/dcopy`, that would be a win.\n*   potentially porting a subset of JavaScript implementations to TypeScript using the aliases defined above.\n*   from the ports, creating tooling which can, with high fidelity, generate one or more JavaScript implementations.\n*   from the ports, creating tooling which can, with high fidelity, generate one or more C implementations.\n\nNote that, when transpiling from TypeScript to C, we'd need to properly determine appropriate stdlib includes and dependencies. If we could auto-generate a basic `manifest.json` file, that could also be useful.\n\nWe could also explore a TypeScript to Fortran transpiler.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-37)\n\nA working end-to-end prototype which is capable of transpiling stdlib-flavored TypeScript to C and which can reproduce hand-authored C and JavaScript code.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-8)\n\nNo work has begun on this.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-38)\n\nTypeScript and C/Fortran compilers.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-8)\n\nC, JavaScript, native addons, Fortran\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-8)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-38)\n\n4\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-8)\n\nThis idea is exploratory, and, while conceptually straightforward, the project does involve a number of unknowns, particularly around how easy it will be to reproduce hand-optimized code. Given that the `blas/base/*`, `blas/ext/base/*`, and `stats/strided/*` namespaces provide a relatively contained environment for API design, it's possible that this will be achievable, but we won't know the best approach until after some R&D.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-38)\n\nTypeScript, C, and JavaScript experience would be beneficial.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-38)\n\n350\n\n* * *\n\nAdd matrix format parsers and data loaders\n------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-matrix-format-parsers-and-data-loaders)\n\nLinked issue: [#100](https://github.com/stdlib-js/google-summer-of-code/issues/100)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-39)\n\nThe goal of this project would be to implement various matrix and multi-dimensional format parsers and data loaders. E.g.,\n\n*   [Matrix Market](https://math.nist.gov/MatrixMarket/formats.html#MMformat)\n*   [NumPy `npy`](https://numpy.org/doc/stable/reference/generated/numpy.lib.format.html#module-numpy.lib.format)\n*   [DLPack](https://dmlc.github.io/dlpack/latest/)\n*   [MATLAB `mat`](https://www.mathworks.com/help/pdf_doc/matlab/matfile_format.pdf)\n*   others?\n\nImplementing these parsers and loaders would facilitate array data interchange with other numerical computing ecosystems.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-38)\n\nUsers will be able to load multi-dimensional array data saved in other numerical computing environments into stdlib's `ndarray` data structure.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-9)\n\nNo work has begun on this.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-39)\n\nAccess to MATLAB/Octave would be useful for implementing the MAT-file parser. One would likely need to use Python and NumPy in order to save and work with `npy` files.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-9)\n\nJavaScript\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-9)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-39)\n\n4\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-9)\n\nSome of the file format specifications can be quite involved. It is also likely that we may encounter situations in which we cannot support particular formats in full due to dtype incompatibility, etc.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-39)\n\nFamiliarity with JavaScript, Python, and MATLAB would be useful. Experience writing parsers and performing IO will also be beneficial.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-39)\n\n90/175/350. Can be scoped accordingly.\n\n* * *\n\nAdd support for working with arrays backed by memory-mapped files\n-----------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#add-support-for-working-with-arrays-backed-by-memory-mapped-files)\n\nLinked issue: [#101](https://github.com/stdlib-js/google-summer-of-code/issues/101)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-40)\n\nMemory-mapped files allow accessing small segments of large disks stored on disk, without reading the entire file into memory. Not only can this be advantageous for memory performance, but it also facilitates shared memory between processes (e.g., operating on the same array in both Node.js and Python running in two separate processes).\n\nThe goal of this project is to add support for working with typed arrays backed by memory-mapped files. Memory-mapped-backed typed arrays should support all the APIs of built-in typed arrays, with the exceptions that the constructors will need to support `mmap`\\-related arguments (e.g., filename, mode, offset) and indexing will require accessors, not square bracket syntax. The project is well-prepared to support accessors (see `array/bool`, `array/complex128`, etc), such that, provided a memory-mapped typed array supports the accessor protocol, passing to downstream utilities should just work.\n\nSimilar to how we've approached fixed-endian typed arrays (see [`array/fixed-endian-factory`](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/array/fixed-endian-factory)), we can likely create a package exposing a constructor factory and then create lightweight wrappers for type-specific constructors (e.g., [`array/little-endian-float64`](https://github.com/stdlib-js/stdlib/tree/develop/lib/node_modules/%40stdlib/array/little-endian-float64)).\n\nThis project may require figuring out a strategy for C-JS iterop which can be used across constructors.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-39)\n\nIdeally, we would have the following constructors:\n\n*   `Float64ArrayMMap`\n*   `Float32ArrayMMap`\n*   `Int32ArrayMMap`\n*   `Int16ArrayMMap`\n*   `Int8ArrayMMap`\n*   `Uint32ArrayMMap`\n*   `Uint16ArrayMMap`\n*   `Uint8ArrayMMap`\n*   `Uint8ClampedArrayMMap`\n*   `BooleanArrayMMap`\n*   `Complex128ArrayMMap`\n*   `Complex64ArrayMMap`\n\nAdditionally, the following constructors would also be useful:\n\n*   `DataViewMMap`\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-10)\n\nNone.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-40)\n\nC compiler such as GCC or Clang.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-10)\n\nC, JavaScript, nodejs, native addons\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-10)\n\nNone\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-40)\n\n5\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-10)\n\nFiguring out an effective bridge between JavaScript and C for working with memory-mapped files will likely require some R&D. It is not clear whether we'd need to first develop separate dedicated `mmap(2)`\\-like functionality in JavaScript or whether we can directly interface into C. Once the lower-level details are determined, the next steps will be implementing all the user-facing APIs expected from typed arrays. This should be straightforward; however, there may be some unexpected challenges and constraints surrounding read-only access, etc.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-40)\n\nC, JavaScript, and Node.js experience will be useful.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-40)\n\n350\n\n* * *\n\nImprove project supply chain security by bringing production dependencies in-house\n----------------------------------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#improve-project-supply-chain-security-by-bringing-production-dependencies-in-house)\n\nLinked issue: [#102](https://github.com/stdlib-js/google-summer-of-code/issues/102)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-41)\n\nstdlib currently depends on [`14`](https://github.com/stdlib-js/stdlib/blob/develop/package.json#L55) external packages. Ideally, we'd reduce this number to `0` in order to (a) reduce the risk of supply-chain security vulnerabilities and (b) ensure that all production code used within stdlib follows the \"stdlib way\" (i.e., docs, tests, examples, benchmarks, backward-compatibility guarantees, etc).\n\nAccordingly, this project seeks to bring external packages \"in-house\" by implementing stdlib equivalents which can replace their usage within stdlib. Immediate targets are dependencies such as `debug`, `glob`, `resolve`, and `minimist` which we'd like to bring in-house for their own sake.\n\nBringing `acorn` and friends in-house would likely require more work and impose an increased maintenance burden, so we'd want to be careful in determining whether we want to prioritize a stdlib implementation. That said, having a stdlib suite of JavaScript AST manipulators would be useful. The main concern is simply keeping up with yearly ECMAScript versions. If we stayed close enough to `acorn`, we could potentially just mirror changes into stdlib. Regardless, some thought would be required to determine whether we want to model any stdlib implementation after acorn or some other high-quality and performant AST parser third-party package.\n\nFor `d3-*` and friends, these would likely go away once we migrated our plot functionality to use `vega`. So their priority is lower.\n\nFor `vdom-to-html` and `virtual-dom`, these have been useful in the past; however, it is not clear whether these deserve inclusion in stdlib. They are currently used in the stdlib plot API. Similar to the `d3-*` packages, they might just naturally go away after migrating plot functionality to `vega`.\n\n`readable-stream` is a harder package to migrate. First and foremost, one should evaluate how much we actually need `readable-stream` and whether we can still retain desired backward compatible behavior with built-in Node.js streams. It is possible that the answer is yes; however, historically, using `readable-stream` has been critical in ensuring consistent behavior across Node.js versions.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-40)\n\nThird-party party production dependencies would have equivalent stdlib implementations, and we can remove them as dependencies in the project `package.json`.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-11)\n\nNo work has begun on this.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-41)\n\nNone.\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-11)\n\nJavaScript, nodejs\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-11)\n\nNone.\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-41)\n\n4\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-11)\n\nIt depends on which dependencies are prioritized. Some, such as `acorn`, could be quite involved and require extensive testing. Others, such as `resolve` should be more straightforward. `glob` is likely to require significant R&D in order to understand and determine an ideal API.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-41)\n\nExperience and a high degree of comfort with JavaScript and Node.js.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-41)\n\n90/175/350. Scope can be tailored accordingly.\n\n* * *\n\nAutomated Code Reviews and Fixes via LLM-powered stdlib-bot\n-----------------------------------------------------------\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#automated-code-reviews-and-fixes-via-llm-powered-stdlib-bot)\n\nLinked issue: [#103](https://github.com/stdlib-js/google-summer-of-code/issues/103)\n\n### Idea\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#idea-42)\n\nMaintaining a large-scale open-source project like stdlib requires code review and automated tooling for linting, running tests, etc. Many small but important code fixes, such as formatting corrections, documentation improvements, and minor refactorings, are often flagged by maintainers but require manual intervention from contributors. This creates overhead and slows down the resolution of trivial issues.\n\nThis project aims to leverage LLM-powered automation to streamline these processes. The core idea is to enhance `stdlib-bot` with the ability to not only surface review comments but also propose and submit fixes in the form of automated pull requests.\n\nIn addition to automated code fixes, the project will explore fine-tuning an LLM on historical PR reviews and code comments to build an automated PR review assistant. This would allow` stdlib-bot` to provide real-time feedback on pull requests, flagging common mistakes based on past code review patterns and enforcing best practices in a scalable way.\n\nA broader goal of the project is to make stdlib more LLM-friendly. This may involve adding `llms.txt`, refining documentation formatting, and curating structured datasets (think of maintaining Cursor rules) to improve compatibility with AI-driven tooling.\n\n### Expected outcomes\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#expected-outcomes-41)\n\n*   stdlib-bot automatically creates pull requests with suggested fixes based on commit comments; can be extended as an agent able to iteratively fix lint failures, formatting issues and test errors from CI workflow runs.\n*   Fine-tuning or retrieval-augmented generation (RAG) for automated PR review using past stdlib review comments (optional)\n*   Enhanced codebase compatibility with LLMs and AI code assistance (e.g., adding `llms.txt` or Cursor rules).\n*   Metrics to evaluate LLM-generated fixes and PR reviews.\n*   Integration with GitHub Actions for seamless automation.\n\n### Status\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#status-12)\n\nCurrently, the stdlib-bot only reports necessary changes by creating issues, requiring human intervention. No automation of fixes or PR reviews exists yet.\n\n### Involved software\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#involved-software-42)\n\n*   GitHub Actions\n*   LLM APIs (e.g. OpenAI)\n*   GitHub REST or GraphQL API to collect data from past stdlib PR reviews\n\n### Technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#technology-12)\n\nJavaScript, nodejs\n\n### Other technology\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#other-technology-12)\n\nDepending on skill set and ambition of candidate, this can involve fine-tuning a model via the OpenAI Fine-Tuning APIs or from\n\n### Difficulty\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-42)\n\n4\n\n### Difficulty justification\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#difficulty-justification-12)\n\n*   Requires integrating LLMs with structured commit comments and generating meaningful PRs.\n*   Need to come up with robust validation strategy to ensure correctness of auto-generated fixes.\n*   Fine-tuning an LLM on past stdlib code review comments involves data collection, preprocessing, and iterative testing.\n\n### Prerequisite knowledge\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#prerequisite-knowledge-42)\n\nKnowledge of Node.js / JavaScript, experience with GitHub Actions and CI/CD, understanding of LLM APIs and optionally fine-tuning methodologies. Familiarity with automated code refactoring tools is a plus.\n\n### Project length\n\n[](https://github.com/stdlib-js/google-summer-of-code/blob/main/ideas.md#project-length-42)\n\n350\n"}