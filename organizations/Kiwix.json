{"name":"Kiwix","description":"Internet content available offline.","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/kiwix","ideas_url":"https://kiwix.org/en/google-summer-of-code/","logo":"https://summerofcode.withgoogle.com/media/org/kiwix/b6zuffwiyoulh0ku-360.png","technologies":["python","c++","nodejs","kotlin","vue.js"],"topics":["offline","browser","compression"],"projects":[{"project_name":"WP1: Combinator Builder","summary":"Develop a system for users to create a combination of selections for Wikipedia offline versions.","difficulty":"Medium"},{"project_name":"WP1: Scheduled selections/ZIMs","summary":"Implement a scheduling system for users to automate ZIM file creation based on selections.","difficulty":"Medium-Easy"},{"project_name":"Kolibri UI Revamp","summary":"Redesign the user interface for Kolibri ZIMs to improve aesthetics and usability.","difficulty":"Medium"},{"project_name":"Gutenberg Library UI Revamp","summary":"Propose and implement a new user interface for the Gutenberg library ZIM.","difficulty":"Medium"},{"project_name":"TED Talks UI Revamp","summary":"Suggest and implement a new user interface for the TED talks ZIM to enhance user experience.","difficulty":"Medium"},{"project_name":"Hotspot Companion","summary":"Create a mobile app prototype to sync data between the Raspberry Pi-based hotspot and the internet.","difficulty":"Hard"}],"jina_response":"Title: Kiwix Google Summer of Code - Coding Projects for Offline Knowledge- Kiwix\n\nURL Source: https://kiwix.org/en/google-summer-of-code/\n\nMarkdown Content:\nFor the full list of issues you can work on, see our GitHub repositories [/openZIM](https://github.com/openzim), [/offspot](https://github.com/offspot) and [/kiwix](https://github.com/kiwix)\n\nGSoC has three sets of projects, lasting ~90, ~175 and ~350 hours approximately so that people who can not work full-time (because of exams or whatnot) can still participate.\n\nWP1\n---\n\n**What it is**: WP1 is the bot and website that provides tables like [this one](https://en.wikipedia.org/wiki/User:WP_1.0_bot/Tables/OverallArticles) on English Wikipedia. The tables help editors determine which articles they should focus on in their WikiProjects. The website also provides tools for creating a Wikipedia “selection”, ie a list of articles, so that they can create a ZIM file and have a subsetted offline version of Wikipedia.\n\n**Project A, Combinator Builder**: There are currently multiple ways to build a selection, from simple article lists to SPARQL queries. We wish to create a “combinator” builder, which allows a user to combine existing or future builders to create a final selection.\n\n**Deliverables:**\n\n*   Provide a data model for a combinator builder that integrates with the rest of the WP1 site\n*   Provide a UI frontend for users to create combinator builders\n*   Sufficient backend and frontend tests\n\n**Skills required:**\n\n*   Good understanding of Python\n*   Understanding of Javascript\n*   Understanding of Vue.js or willingness to learn\n\n**Difficulty:** Medium\n\n**Scope:** Small (about 90 hours of work)\n\n**Project B, Scheduled selections/ZIMs:** Currently, users create their selections and then manually request/create their ZIM files. However, for certain classes of selections, such as those based on WikiProjects or SPARQL queries, it is possible that the results are stale and there are more recent results available.\n\nWe should provide a way for a user to schedule their selection being processed into a ZIM file (1 month, 3 months, 6 months, 1 year). As part of this process, the user should provide us with an email where we can notify them that their ZIM has been created. We should also remove ZIMs from the schedule if the user doesn’t “claim” them, ie come to the website and download them.\n\n**Deliverables:**\n\n*   Scheduling system for running ZIM creation tasks on set intervals\n*   Method for collecting email addresses, and publication of privacy policy for handling of PII\n*   Frontend UI for scheduling ZIM files, including handling required input and error cases\n*   Sufficient backend and frontend tests\n\n**Skills required:**\n\n*   Good understanding of Python\n*   Understanding of Javascript\n*   Understanding of Vue.js or willingness to learn\n\nDifficulty: Medium-Easy\n\n**Scope**: medium (about 120-150 hours of work)\n\nInterested? Check out the [repo](https://github.com/openzim/wp1).\n\n**Kolibri UI revamp**\n---------------------\n\nSome of the content we offer is actually harvested by our friends at [Learning Equality](https://learningequality.org/). Kolibri2zim is the tool that allows us to package it to the ZIM format. The UI rendition isn’t great and we’d like to fix that.\n\n**Objective**: Redo the menu UIs based on a new design. Foundations have already been laid in a Git branch, but some features have not yet been implemented or are missing.\n\n**Technologies**: Vue.js + a bit of Python\n\n**Key Deliverables:**\n\n*   Finalised code changes for creating beautiful Vue.js UIs inside Kolibri ZIMs\n\n**Skills required**:\n\n*   Good understanding of JavaScript, HTML, and CSS\n*   Familiarity with at least one modern JS Framework (React, Vue.JS, Angular, …)\n*   Knowledge of web development and user interface design.\n\n**Difficulty**: Medium, but short (90 hours) project\n\nInterested? Check out the [repo](https://github.com/openzim/kolibri)!\n\n**Gutenberg library UI revamp**\n-------------------------------\n\nWe provide a [ZIM copy of the Gutenberg library](https://library.kiwix.org/viewer#gutenberg_en_all) but saying that its layout and design is not optimal would be an understatement.\n\n**Objective and deliverable:**\n\n*   suggest and implement a new UI for this zim\n\n**Difficulty**:\n\n*   Medium (mostly because good developers suck at design, and good designers suck at coding), probably 175 hours.\n\n**Skills required**: vue.js\n\nLook around the gutenberg repository [here](https://github.com/openzim/gutenberg).\n\n**TED talks UI revamp**\n-----------------------\n\nWe also provide a [ZIM copy of the TED talks](https://library.kiwix.org/#lang=eng&q=&category=ted), and although it’s not as bad as Gutenberg, it could do better.\n\n**Objective and deliverable:**\n\n*   Suggest and implement a new UI for this zim\n\n**Difficulty**:\n\n*   Medium, probably 175 hours.\n\n**Skills required**: vue.js\n\nCheck out the TED repository [here](https://github.com/openzim/ted).\n\n**Hotspot companion**\n---------------------\n\nThe Kiwix-hotspot is a neat adaption of the Raspberry pi microserver into a local hotspot that entire classrooms can connect to without having to download anything onto their devices. The hotpost owner downloads content from our library onto a microSD card running the Raspbian OS, and off they go, the hotspot is fully autonomous with Kiwix-server working as a regular http daemon. The problem arises when users want to update the available content, or download usage metrics collected by the hotspot.\n\n**Objective and deliverable:** Develop a mobile application prototype serving as a bridge between internet connectivity and the offline mode of a Raspberry Pi-based hotspot. The primary goal is to facilitate efficient data synchronization, allowing users to leverage internet benefits when available while ensuring a seamless offline experience. The application will have a very simple interface enabling users to manage the transfer of data between the remote server and the Raspberry Pi.\n\n**Difficulty**: Hard (it touches on many different techs but the good news is we don’t expect more than a _working_ prototype), 350 hours.\n\n**Skills required**: mobile, flutter\n\nLook around the Offspot repository and meta issue [here](https://github.com/offspot/overview/issues/3).\n\n### Want to join?\n\nThink hard about what you want to do, and go to the [Google Summer of Code](https://summerofcode.withgoogle.com/) website between March 18 to April 2, 2024, to register and submit your project idea(s).\n\nAfter reviewing all proposals, students projects will be announced on May 1, 2024. ([full timeline](https://developers.google.com/open-source/gsoc/timeline))\n\n### Help & Tips\n\nWe want to be clear upfront that **we will not select candidates who have never made at least _one_ PR to our codebase**: we make our choice based on how candidates handle themselves (is the code clear, are there comments, how do they explain their choices when asked, _etc._). PRs do not need to be related to the project submitted – we just need to know that you can work in a team. If we don’t know you, we can’t choose you! And if your project has “UI” in it, then it probably is a good idea to submit a mockup of what you plan to implement.\n\n(We also wrote a helpgul [guide to Writing your Google Summer of Code](https://kiwix.org/en/writing-your-google-summer-of-code-application/) application)\n\nLast but not least: over the years about half the students who did GSoC with Kiwix came up with their own project rather than one from our list – be **bold**!\n\n### Do you have questions?\n\nThen come and join us on our [Slack channel](https://join.slack.com/t/kiwixoffline/shared_invite/enQtOTUyMTg4NzMxMTM4LTU0MzYyZDliYjdmMDYzYWMzNDA0MDc4MWE5OGM0ODFhYjAxNWIxMjVjZTU4MTkyODJlZWFkMmQ2YTZkYTUzZDY)!\n"}