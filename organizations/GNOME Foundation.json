{"name":"GNOME Foundation","description":"A diverse and sustainable free software desktop.","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/gnome-foundation","ideas_url":"https://gsoc.gnome.org/2025/","logo":"https://summerofcode.withgoogle.com/media/org/gnome-foundation/aqwqx1x6ozjnxsak-360.png","technologies":["c","linux","rust","gtk","Flatpak"],"topics":["operating systems","desktop","graphics","open source","apps"],"projects":[{"project_name":"Add eBPF profiling capabilities to Sysprof","summary":"This project involves enhancing Sysprof by integrating eBPF profiling, allowing for improved performance data collection from the kernel with less overhead compared to traditional methods.","difficulty":"Hard"},{"project_name":"Papers: Proof of Concept for backend isolation","summary":"The goal is to develop a prototype for isolating document processing in the Papers application to enhance security and resilience, potentially leading to a better user experience in handling documents.","difficulty":"Hard"},{"project_name":"Rewrite parts of GNOME Disks in Rust","summary":"This project aims to rewrite components of GNOME Disks using Rust for better maintainability, performance, and to leverage Rust's features for asynchronous programming, improving the overall development experience.","difficulty":"Hard"}],"jina_response":"Title: GNOME GSoC 2025 Project Ideas\n\nURL Source: https://gsoc.gnome.org/2025/\n\nMarkdown Content:\nGNOME Project ideas for Google Summer of Code 2025\n--------------------------------------------------\n\nFor general information on how to get involved with our project and participate in [Google Summer of Code](https://summerofcode.withgoogle.com/) with [GNOME](https://gnome.org/) visit [gsoc.gnome.org](https://gsoc.gnome.org/)\n\nThis is the list of project ideas that the GNOME community is interested in mentoring. GSoC interns can also propose their very own project ideas. If you are interested in proposing a project idea, please file an issue in our [Internship Project Ideas repository.](https://gitlab.gnome.org/Teams/Engagement/internship-project-ideas)\n\nGSoC contributors proposing something original must engage with the community strongly before or during the application period to get feedback and guidance to improve the proposal.\n\nProject list\n------------\n\n*   [Add eBPF profiling capabilities to Sysprof](https://gsoc.gnome.org/2025/#ebpf-profiling-sysprof)\n*   [Papers: Proof of Concept for backend isolation](https://gsoc.gnome.org/2025/#papers-backend-isolation)\n*   [Rewrite parts of GNOME Disks in Rust](https://gsoc.gnome.org/2025/#rewrite-parts-of-disks-in-rust)\n*   Project proposals will be listed here.\n\n[Add eBPF profiling capabilities to Sysprof](https://gsoc.gnome.org/2025/#ebpf-profiling-sysprof)\n-------------------------------------------------------------------------------------------------\n\nCurrently, Sysprof works by recording stack traces from the Linux Perf subsystem using perf\\_event\\_open(). It also can record various system statistics using data from /proc such as CPU, memory, networking, and disk statistics.\n\neBPF provides an existing new direction for tooling of this nature by uploading small programs into the kernel to extract the data you want without the parsing overhead. That data can be delivered to an application like Sysprof for recording into the capture files.\n\nThis internship would involve creating the tooling within libsysprof to setup new eBPF programs by compiling, linking, and uploading them into the kernel along with necessary components to get data from the kernel back to Sysprof.\n\nThis would then be used to port some collectors such as CPU or memory trackers to use eBPF instead of /proc files.\n\n### Requirements\n\n*   Knowledge of C, preferably using GLib/GObject but that can be learned\n*   Minimal experience performance profiling software\n*   Minimal experience with the Linux kernel\n*   Learning how eBPF works and how to integrate that with the kernel can be learned on the job\n\n### Communication\n\nChat, email, video chat. Christian Hergert @chergert or hergertme on IRC/Matrix or @chergert at gnome.org\n\n### Mentor(s): [Christian Hergert](https://gitlab.gnome.org/chergert)\n\n### Difficulty: Hard\n\n### Mentor availability: ~350 hours\n\n### More information\n\n[https://gitlab.gnome.org/Teams/Engagement/internship-project-ideas/-/issues/51](https://gitlab.gnome.org/Teams/Engagement/internship-project-ideas/-/issues/51)\n\n[Papers: Proof of Concept for backend isolation](https://gsoc.gnome.org/2025/#papers-backend-isolation)\n-------------------------------------------------------------------------------------------------------\n\nThis project will mostly require work on Papers' libraries: ppsview and ppsdocument. The former contains an abstraction (PpsJob) to run (potentially slow) backend code in threads. The later is basically a common abstraction over different backends: PDF, DJVU, Tiff, etc. The idea is to create a component that will start a new process per-document (similar to web-browsers having one process per tab!). That side-car process will take care of all the calls to the backends (so embedded in ppsdocument), and be managed by PpsJobs. Further details are available in https://gitlab.gnome.org/GNOME/Incubator/papers/-/issues/104\n\nThe idea for the GSoC will be for the Intern to prototype a solution to this problem, and investigate potential solutions and foot-guns. The intern will need quite a good knowledge on C, and have motivation to do some investigate work (e.g: look into solutions implemented by other projects like WebKit). I don't expect a full implementation or solution, even if that would be welcomed. A failed attempt at this might already gives us extremely valuable input.\n\nThis will benefit Papers as the future Document Viewer in GNOME in two ways:\n\n*   By isolating documents from each other, we improve the overall security situation. Even CVEs that might allow somebody to gain access to execution code from rendering a PDF would not have access to the other documents.\n*   By isolating documents from the UI we improve the resilience of Papers. A document crashing during rendering (for which CVEs happen regularly (last one CVE-2024-6239) will not bring down with itself the complete application. This has been so far the main blocker to implement the Document Viewer tabbed view, which has been a feature request for Evince since 2005\n\n### Requirements\n\n*   Good skill and experience in the C programming language. Both be able to write and read it\n*   The ability to investigate previous approaches to solve the same issue. We will guide the Intern on where to look\n*   Motivation to try different approaches. We know a big part of this project will be checking the feasibility of different solutions\n\n### Communication\n\nOur preferred communication channel is Matrix (https://matrix.to/#/#papers:gnome.org), but we will also do video-calls to get onboarded and if deemed useful and necessary for the mentoring process\n\n### Mentor(s): [Pablo Correa Gomez](https://gitlab.gnome.org/pabloyoyoista), [Qiu](https://gitlab.gnome.org/crab2313) and [Markus](https://gitlab.gnome.org/camelCaseNick)\n\n### Difficulty: Hard\n\n### Mentor availability: ~350 hours\n\n### More information\n\n[https://gitlab.gnome.org/Teams/Engagement/internship-project-ideas/-/issues/58](https://gitlab.gnome.org/Teams/Engagement/internship-project-ideas/-/issues/58)\n\n[Rewrite parts of GNOME Disks in Rust](https://gsoc.gnome.org/2025/#rewrite-parts-of-disks-in-rust)\n---------------------------------------------------------------------------------------------------\n\nGNOME Disks is a graphical interface for the UDisks system service that allows to view, modify, and configure disks. The project also provides a binary for disk image mounting and a session service for disk health notifications.\n\nIt's latest stable release still uses GTK 3 but on the development branch the port to GTK 4 is almost done. The development branch also includes a Rust rewrite of the disk image mounting helper that introduces a proper UI for disk image actions from the file browser, including support for encrypted container files. This uses a newly developed [UDisks Rust client](https://crates.io/crates/udisks2) library.\n\nThe GNOME Disks code base is mainly interacting with UDisks via D-Bus, and is suffering from callback spaghetti. Combined with the domain-specific knowledge required, the code base is not very accessible for new developers, and thus areas like the disk health alert service are not often touched. With a Rust rewrite we can leverage language support for asynchronous functions to replace the use of callbacks. The good tooling, strong compile time guarantees and support for tests in Rust is also great for new contributors. Thus, the goal of this proposed project is to rewrite the disk health alert service and the disk image create/restore dialogs of GNOME Disks in Rust. The disk health notification service is a small separate binary that can be worked on without touching the rest of GNOME Disks. The disk image create/restore dialogs of GNOME Disks share functionality with the disk image mounting helper which currently spawns GNOME Disks to write images to disks. When using C-Rust FFI we can have one new implementation in Rust and stop spawning a new GNOME Disks window for this operation. Porting the dialogs one by one is also a great way to chunk up the work so that the app stays in a working state and one can benefit from the start even if the whole app won't be ported soon. It's important to get the basics right for FFI and establishing a pattern that can be followed afterwards when other dialogs are ported. Last year's [ground work with the image mounting binary](https://gitlab.gnome.org/GNOME/gnome-disk-utility/-/merge_requests/99) already showed that there are significant investments needed to lay the foundations and that new issues are popping up on the way. A [draft MR](https://gitlab.gnome.org/GNOME/gnome-disk-utility/-/merge_requests/180) for porting the dialog demonstrates that the FFI approach can work but requires more work on the dialogs itself and related areas to become ready. The results are very promising, though, and we want to continue this direction. However, this effort requires special attention. An internship can provide this focused environment for both contributors and maintainers.\n\nPorting the disk health notification binary and the disk image create/restore dialogs and calling them from the image mounting binary involves many subtasks. The udisks-rs library needs to be worked on to support all needed features, the FFI and interaction with UDisks job objects needs to be figured out, the build system needs to be worked on, the disk image compression handling should become more generic on the way, unit tests should be introduced when useful to check properties of the ported code and to help others when touching the code in the future. The scoping as a 'large' internship project already includes the fact that a draft MR is available for one dialog (If we get very lucky and have remaining time, we can look into stretch goals, such as, porting other dialogs, supporting more disk image compression formats, compressing created disk images, or letting the window of the disk image mounting binary to stay open and update its state).\n\n### Requirements\n\n*   Good knowledge of C and Rust on Linux, Git, Meson, the GNOME Disks functionality, the UDisks functionality (in particular the UDisks Rust client library), and Gtk/GLib FFI. Certain specifics of course can be figured out along the way.\n*   Being comfortable to work independently with async communication. Taking ownership of that part of the project by identifying related work items and possible solutions.\n*   This is not an entry-level project for GNOME, Linux, Rust, and FOSS collaboration.\n\n### Communication\n\nOur preferred communication channel is Matrix but we will also do video-calls and emails. kailueke@riseup.net, @pothos:matrix.org\n\n### Mentor(s): [Kai Lüke](https://gitlab.gnome.org/kailueke)\n\n### Difficulty: Hard\n\n### Mentor availability: ~350 hours\n\n### More information\n\n[https://gitlab.gnome.org/Teams/Engagement/internship-project-ideas/-/issues/59](https://gitlab.gnome.org/Teams/Engagement/internship-project-ideas/-/issues/59)\n"}