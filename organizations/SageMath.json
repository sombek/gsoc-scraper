{"name":"SageMath","description":"Open-source mathematics software system","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/sagemath","ideas_url":"https://wiki.sagemath.org/GSoC/2025","logo":"https://summerofcode.withgoogle.com/media/org/sagemath/1tcj7svgwadc13cj-360.png","technologies":["python","cython"],"topics":["mathematics","education","research"],"projects":[{"project_name":"Coordinate the graded commutative algebra and exterior algebra implementations and Gröbner bases","summary":"Improve interaction between implementations of graded commutative algebra and exterior algebra and enhance the performance of Gröbner bases in SageMath.","difficulty":"Medium-hard"},{"project_name":"Add additional combinatorial (Hopf) algebras and additional bases","summary":"Implement more bases and combinatorial Hopf algebras in SageMath, expanding its breadth and usefulness in combinatorial studies.","difficulty":"Medium"},{"project_name":"Refactor the diagram algebras/monoids and add new ones","summary":"Refactor the implementation of diagram algebras to reduce redundancy and facilitate the addition of new algebra structures in SageMath.","difficulty":"Medium"},{"project_name":"Improve (free) module implementations","summary":"Unify and improve the implementations of free modules in SageMath for better performance and usability in linear algebra applications.","difficulty":"Medium-easy"},{"project_name":"Create an interface to the SmallGrp database","summary":"Develop a Pythonic interface to the SmallGrp database to easily work with small groups in SageMath, enhancing group theory functionalities.","difficulty":"Medium-hard"},{"project_name":"Implement matrix spaces over commutative semirings","summary":"Implement matrix spaces over commutative semirings to facilitate applications in combinatorics and optimization within SageMath.","difficulty":"Medium-hard"},{"project_name":"Poincare normal form of Riemann matrices","summary":"Implement Poincare reduction for Riemann matrices in SageMath, aiding computations related to Riemann surfaces and theta functions.","difficulty":"Medium-Easy"},{"project_name":"Implement representations of Lie algebras and quantum groups","summary":"Construct a framework for Lie algebra representations and implement methods for building these representations in SageMath.","difficulty":"Medium"},{"project_name":"Implement KLR algebras and their representations","summary":"Implement KLR algebras and their representations in various bases to contribute to modern algebra studies in SageMath.","difficulty":"Medium-Hard"},{"project_name":"Implement a solver for the Killing equations","summary":"Create a program capable of solving the Killing equations for pseudo-Riemannian manifolds, vital in differential geometry and analysis.","difficulty":"Hard"},{"project_name":"Provide an implementation of q- and qt-characters","summary":"Implement algorithms for computing q- and qt-characters of Lie algebra representations within SageMath's framework.","difficulty":"Easy-Medium"},{"project_name":"Functionalities for Krylov methods over exact fields","summary":"Add functionalities for Krylov methods to enhance algorithmic solutions in linear algebra in SageMath.","difficulty":"Medium"},{"project_name":"Zariski closures of finitely generated matrix groups","summary":"Develop an algorithm to compute the Zariski closure of finitely generated matrix groups, important in number theory and geometry.","difficulty":"Medium-hard"},{"project_name":"Enhanced support and interfaces for solutions of recurrences and differential equations","summary":"Create user-friendly interfaces for tools used in solving recurrences and differential equations, enriching SageMath's capabilities.","difficulty":"Medium-hard"},{"project_name":"Lie group actions on manifolds","summary":"Extend SageMath's features by implementing Lie groups and their actions on manifolds, important for applications in physics and geometry.","difficulty":"Medium"},{"project_name":"Implement the boson-fermion correspondence and vertex operators","summary":"Construct algorithms for vertex operators and show the boson-fermion correspondence through computational methods in SageMath.","difficulty":"Medium-Hard"},{"project_name":"Paths and cycles enumeration methods in graphs","summary":"Develop efficient methods for enumerating cycles and paths in graphs, expanding SageMath's graph theory functionalities.","difficulty":"Medium-Hard"}],"jina_response":"Title: GSoC/2025 - Sagemath Wiki\n\nURL Source: https://wiki.sagemath.org/GSoC/2025\n\nMarkdown Content:\nNo jsMath TeX fonts found -- using unicode fonts instead.\nThis may be slow and might not print well.\nUse the jsMath control panel to get additional information.\njsMath Control Panel\nHide this Message\n\n\njsMath\n  \nLogin\nGSoC/2025\nRecentChanges\nFindPage\nHelpContents\nGSoC/2025\nImmutable PageInfoAttachments \nMore Actions:\nRaw Text\nPrint View\nRender as Docbook\nDelete Cache\n------------------------\nCheck Spelling\nLike Pages\nLocal Site Map\n------------------------\nRename Page\nDelete Page\n------------------------\nSubscribe User\n------------------------\nRemove Spam\nRevert to this revision\nPackage Pages\nSync Pages\n------------------------\nLoad\nSave\nSlideShow\n\nIntroduction\n\nWelcome to SageMath's Ideas Page for GSoC 2025! (Last year 2024)\n\nThe Timeline for GSoC 2025.\n\nMake sure you have gone through the information regarding application procedures, requirements and general advice. The Application Template is also available on that wiki page. Also, please subscribe to the sage-gsoc mailing list and the Sage developer list. Archives of past GSoC project ideas can be found here.\n\nWe also require you to show us that you are able to execute actual development by submitting a relevant Pull Request and/or reviewing a Pull Request of the project you are interested in applying to. The developer guide is a great comprehensive resource that can guide you through your first steps in contributing to SageMath.\n\nApart from the project ideas listed below, there is also a wishlist for new features in our open GitHub Issues. They might contain or inspire the perfect project idea for you that we didn't even think about! Note that projects can be one of three lengths:\n\nShort: 90 hours\nMedium: 175 hours\nLarge: 350 hours\n\nContents\n\nIntroduction\nProject Ideas\nCoordinate the graded commutative algebra and exterior algebra implementations and Gröbner bases\nAdd additional combinatorial (Hopf) algebras and additional bases\nRefactor the diagram algebras/monoids and add new ones\nImprove (free) module implementations\nCreate an interface to the SmallGrp database\nImplement matrix spaces over commutative semirings\nPoincare normal form of Riemann matrices\nImplement representations of Lie algebras and quantum groups\nImplement KLR algebras and their representations\nImplement a solver for the Killing equations\nProvide an implementation of q- and qt-characters\nFunctionalities for Krylov methods over exact fields\nZariski closures of finitely generated matrix groups\nEnhanced support and interfaces for solutions of recurrences and differential equations\nLie group actions on manifolds\nImplement the boson-fermion correspondence and vertex operators\nPaths and cycles enumeration methods in graphs\n\nProject Ideas\n\nHere is a list of project proposals with identified mentors. Other well-motivated proposals from prospective contributors involving SageMath in a substantial way will be gladly considered, as well.\n\nCoordinate the graded commutative algebra and exterior algebra implementations and Gröbner bases\n\nMentor\n\n\t\n\nTravis Scrimshaw\n\n\n\n\nArea\n\n\t\n\nAlgebra, Performance\n\n\n\n\nSkills\n\n\t\n\nUnderstanding of abstract algebra and Cython. Knowledge of Gröbner basis is strongly recommended.\n\n\n\n\nLength\n\n\t\n\n175 hour and 350 hour variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium-hard\n\nA graded commutative algebra (GCA) is an algebra where the even generators commute and the odd generators skew-commute. The implementation currently relies on singular's library plural as a quotient ring of a g-algebra. SageMath has a native implementation of the exterior algebra, but it does not interface well with the GCA implementation. The primary goal of this project would be to improve the interaction between the two implementations; likely with a native implementation of GCAs. A second goal would be to improve the implementation of SageMath's implementation of Gröbner bases for the exterior algebra, which is currently quite slow (see, e.g., #34437). For the ambitious, these computations would be extracted to an independent C++ library for many common rings (implemented using other libraries).\n\nAdd additional combinatorial (Hopf) algebras and additional bases\n\nMentor\n\n\t\n\nDarij Grinberg, Travis Scrimshaw\n\n\n\n\nArea\n\n\t\n\nAlgebra, Combinatorics\n\n\n\n\nSkills\n\n\t\n\nFoundations in algebra and combinatorics, experience reading research papers recommended.\n\n\n\n\nLength\n\n\t\n\n175 hours and 350 hours variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium\n\nThere are a number of combinatorial Hopf algebras (CHAs) currently implemented in SageMath. However, there are a number of bases that are known and not yet implemented. For example, the double Schurs (as defined by Molev), and (weak) dual (canonical) Grothendiecks. There are also a number of related non-symmetric but still important polynomials that SageMath would benefit from providing. The goal of this project is to implement more of these bases and combinatorial (Hopf) algebras.\n\nRefactor the diagram algebras/monoids and add new ones\n\nMentor\n\n\t\n\nDarij Grinberg, Martin Rubey\n\n\n\n\nArea\n\n\t\n\nAlgebra, Combinatorics\n\n\n\n\nSkills\n\n\t\n\nFoundations in algebra and combinatorics, experience reading research papers recommended.\n\n\n\n\nLength\n\n\t\n\n175 hours and 350 hours variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium\n\nThe diagram algebras (i.e., subalgebras of the partition algebra) are implemented using code that has a number of redundancies that makes it hard to extend for new subalgebras. The main goal of this project is to refactor the underlying implementation in order to make it easier to implement new diagram algebras such as the Motzkin algebra. Furthermore, we will want to refactor the code so that the underlying diagram multiplication can be manipulated as a monoid. As an optional part, this would provide the cellular bases of these algebras in certain cases.\n\nImprove (free) module implementations\n\nMentor\n\n\t\n\nTravis Scrimshaw, Martin Rubey\n\n\n\n\nArea\n\n\t\n\nLinear Algebra, Performance, Refactoring\n\n\n\n\nSkills\n\n\t\n\nUnderstanding of linear algebra and object-oriented programming. Cython experience is highly recommended.\n\n\n\n\nLength\n\n\t\n\n175 hours\n\n\n\n\nDifficulty\n\n\t\n\nMedium-easy\n\nSageMath has multiple implementations of free modules:\n\n1. Finite dimensional coordinate representations in the \"standard\" basis using FreeModule that provides both a dense and sparse implementation. 2. Using CombinatorialFreeModule (CFM) as (possibly infinite dimensional) sparse vectors.\n\nThere are various benefits to each implementation. However, they are largely disjoint and would mutually benefit from having a common base classes. In particular, having a dense implementation for CFM elements for applications that require heavier use of (dense) linear algebra. The goal of this project is to refactor these classes to bring them closer together (although they will likely remain separate as they are likely not fully compatible implementations for the parents).\n\nCreate an interface to the SmallGrp database\n\nMentor\n\n\t\n\nTBD\n\n\n\n\nArea\n\n\t\n\nGroup Theory\n\n\n\n\nSkills\n\n\t\n\nGroup Theory, GAP and Python experience\n\n\n\n\nLength\n\n\t\n\n350 hours\n\n\n\n\nDifficulty\n\n\t\n\nMedium-hard\n\nCreate a convenient Pythonic interface to the small groups database that wraps the SmallGrp GAP package. This will enable to create all small groups satisfying certain properties (e.g. abelian, solvable, non-nilpotent, given order) in an easy way, and to provide information about them. This project should also aim to improve the connection between the implementations of permutation, matrix and finitely presented groups in SageMath. This can also include programmable access to information about each group, like the subgroup lattice, as in GroupNames.\n\nAs an example, the interface might be SmallGroups(60, nilpotent=True, type=\"permutation\") for an iterator that return Sage's PermutationGroup objects of all nilpotent groups of order 60, say sorted by GAP ID. For the implementation, the SmallGroups class might inherit from ​ConditionSet, and add methods for the information the SmallGrp GAP package provides such as cardinality and short summary as in SmallGroupsInformation.\n\nImplement matrix spaces over commutative semirings\n\nMentor\n\n\t\n\nTBD\n\n\n\n\nArea\n\n\t\n\nMainly algebra, linear algebra and Sage basic data structures\n\n\n\n\nSkills\n\n\t\n\nAt least an intermediate knowledge in Python. Knowing Cython or the Sage category framework is a big advantage\n\n\n\n\nLength\n\n\t\n\n350 hours\n\n\n\n\nDifficulty\n\n\t\n\nMedium-hard\n\nThe natural numbers with the standard addition and multiplication, and the min-plus tropical algebra over a commutative ring, are examples of well-known commutative semirings. The aim of this project is to implement matrix spaces and matrices over such semirings. They have many uses in combinatorics, optimization and other mathematical areas. The mathematical background needed is not advanced. The main difficulty will be to understand the current implementation of matrix spaces over rings, and how to add support for semirings that plays well with it. If time permits, an implementation of polynomial (semi)rings over semirings can be implemented.\n\nPoincare normal form of Riemann matrices\n\nMentor\n\n\t\n\nLinden Disney-Hogg\n\n\n\n\nArea\n\n\t\n\nAlgebra, Algebraic Geometry\n\n\n\n\nSkills\n\n\t\n\nKnowledge of abstract algebra and Riemann surfaces desirable\n\n\n\n\nLength\n\n\t\n\n350 hours\n\n\n\n\nDifficulty\n\n\t\n\nMedium-Easy, becoming harder if desired by tackling the research questions\n\nRiemann surfaces are key objects in many areas of maths, from mathematical physics to algebraic and arithmetic geometry, with modern usage of Sage typically focusing around computing the Riemann matrix and calculating the associated theta function. The project would involve an implementation of Poincare reduction of the Riemann matrix which allows the theta function to be factorised, following the paper of Martens (http://www.jstor.org/stable/43737152), which in turn will require some matrix methods to be implemented. There is scope for an enterprising applicant to make this into a research paper in two directions, either by analysing the improvement to complexity from computing with factorised theta functions, or by developing an algorithm to go from one reduction to a complete reduction.\n\nImplement representations of Lie algebras and quantum groups\n\nMentor\n\n\t\n\nTBD\n\n\n\n\nArea\n\n\t\n\nAlgebra\n\n\n\n\nSkills\n\n\t\n\nFoundations in algebra and representation theory\n\n\n\n\nLength\n\n\t\n\n175 hours and 350 hours variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium\n\nLie algebras, their associated quantum groups, and their representations are an important object with deep applications to physics. For this project, we want to construct a general framework for the representations of these algebraic objects and implement some general methods for algorithmically building certain (irreducible) representations.\n\nImplement KLR algebras and their representations\n\nMentor\n\n\t\n\nTBD\n\n\n\n\nArea\n\n\t\n\nAlgebra\n\n\n\n\nSkills\n\n\t\n\nFoundations in algebra and representation theory\n\n\n\n\nLength\n\n\t\n\n175 hours and 350 hours variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium-Hard\n\nKLR algebras, also known as quiver Hecke algebras, categorify representations of quantum groups through their representations. The goal of this project is to implement these algebras in different bases, the modules of the KLR algebras, and their corresponding crystal structure. For a shorter variant, one can only implement the modules.\n\nImplement a solver for the Killing equations\n\nMentor\n\n\t\n\nTBD\n\n\n\n\nArea\n\n\t\n\nAnalysis, PDEs\n\n\n\n\nSkills\n\n\t\n\nUnderstanding of PDEs is highly recommended\n\n\n\n\nLength\n\n\t\n\n350 hours\n\n\n\n\nDifficulty\n\n\t\n\nHard\n\nThe Killing equations are a system of PDEs that determines the Killing vector field on a pseudo-Riemannian manifold, a vector that preserves the metric and has many other important properties. The goal of this project is to implement a program to solve the system of equations on a given manifold in some form.\n\nProvide an implementation of q- and qt-characters\n\nMentor\n\n\t\n\nTravis Scrimshaw\n\n\n\n\nArea\n\n\t\n\nAlgebra, Combinatorics\n\n\n\n\nSkills\n\n\t\n\nFoundations in algebra and combinatorics, experience reading research papers recommended.\n\n\n\n\nLength\n\n\t\n\n175 hours\n\n\n\n\nDifficulty\n\n\t\n\nEasy-Medium\n\nq-characters and qt-characters encode the essential information about finite dimensional affine Lie algebra representations. This project would provide an implementation of the FM algorithm and its t-deformed variation due to Nakajima, a method to compute the qt-characters of simple modules, and perform manipulations in this character ring.\n\nFunctionalities for Krylov methods over exact fields\n\nMentor\n\n\t\n\nXavier Caruso, Vincent Neiger\n\n\n\n\nArea\n\n\t\n\nLinear algebra\n\n\n\n\nSkills\n\n\t\n\nFoundations in algebra, linear algebra, and univariate polynomials.\n\n\n\n\nLength\n\n\t\n\n350 hours\n\n\n\n\nDifficulty\n\n\t\n\nMedium\n\nThis project aims to add functionalities for Krylov methods in exact linear algebra, notably in order to provide algorithmic solutions for the following two questions. A first task will be to split known algorithms for these problems into consistent sub-components that would be relevant by themselves for integration in SageMath.\n\n1. Let K be a field, and let n and m be two integers with n << m. We are given an m x m matrix which brings a structure of K[x]-module to K^m, and we are given a K[x]-linear map f : K[x]n -> Km, represented by an m x n matrix over K. From this data, compute a representation of the kernel of f as a K[x]-module; and similarly for the co-kernel of f; and compute associated invariant factors. This body of problems is discussed in the book (Kailath, Linear Systems, 1980), and recent algorithms allow one to exploit fast matrix multiplication via ideas from Keller-Gehrig's characteristic polynomial algorithm (link).\n\n2. Given a square matrix over a ring of univariate polynomials, compute its characteristic polynomial following the block-Krylov method described in Kaltofen and Villard's determinant algorithm (link).\n\nZariski closures of finitely generated matrix groups\n\nMentor\n\n\t\n\nVincent Delecroix\n\n\n\n\nArea\n\n\t\n\nAlgebra\n\n\n\n\nSkills\n\n\t\n\nGroup theory, Lie algebras, Number fields, familiarity with Python and GAP\n\n\n\n\nLength\n\n\t\n\n175 hours and 350 hours variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium-hard\n\nFinitely generated matrix groups over the rationals (or more generally over number fields) appear in number theory (diophantine equations, k-theory of number fields, etc.) as well as in geometry (holonomy of flat connections). An important invariant of such group is its Zariski closure: the smallest algebraic group it is contained in. The goal of this project is to write an algorithm to compute this Zariski closure using linear algebra in the Lie algebra of the ambient group.\n\nEnhanced support and interfaces for solutions of recurrences and differential equations\n\nMentor\n\n\t\n\nVincent Delecroix\n\n\n\n\nArea\n\n\t\n\nAlgebra, Combinatorics\n\n\n\n\nSkills\n\n\t\n\nLinear algebra, polynomial ring and power series, ODE, familiarity with Python\n\n\n\n\nLength\n\n\t\n\n175 hours and 350 hours variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium-hard\n\ngfun is a Maple library developed by B. Salvy (link). Equivalent features are available in SageMath (some of them in plain SageMath and others in the C-library flint or SageMath library ore_algebra). The goal of this project is to write an interface to these SageMath tools using the standardized names from gfun. Additionally, there we expect the developer to write a document explaining how each function call in gfun can be replaced by standard SageMath computations. In the course of the project, it is likely that the developer has to implement additional interface to the C-library flint. We also expect the developer to identify critical features that are missing in SageMath in order to propose a complete open source alternative for gfun integrated in the SageMath environment.\n\nLie group actions on manifolds\n\nMentor\n\n\t\n\nTobias Diez\n\n\n\n\nArea\n\n\t\n\nDifferential Geometry\n\n\n\n\nSkills\n\n\t\n\nKnowledge of Lie groups and their actions is desirable\n\n\n\n\nLength\n\n\t\n\n350 hours\n\n\n\n\nDifficulty\n\n\t\n\nMedium\n\nThis project aims to extend SageMath’s differential geometry and group theory framework by implementing Lie groups and their actions on manifolds. Lie groups are fundamental in geometry, physics, and representation theory. The project will include:\n\n* Extending the existing code for nilpotent Lie groups to arbitrary Lie groups. * Implementing the standard matrix Lie groups (GL, SL, SO, ...) as Lie groups. * Implementing Lie group actions on manifolds (with the long-term goal to compute orbits, stabilizers, and invariants).\n\nImplement the boson-fermion correspondence and vertex operators\n\nMentor\n\n\t\n\nTravis Scrimshaw\n\n\n\n\nArea\n\n\t\n\nAlgebra\n\n\n\n\nSkills\n\n\t\n\nUnderstanding of formal power series; knowledge of Lie algebras desirable\n\n\n\n\nLength\n\n\t\n\n350 hours\n\n\n\n\nDifficulty\n\n\t\n\nMedium-Hard\n\nThe boson-fermion correspondence can be stated as a construction of Schur functions by using vertex operators. The goal of this project is to provide a way to construct vertex operators and give their action on different vector spaces. As a result, we would would be able to show by computer the boson-fermion correspondence. The main technical challenge is determining how far to expand a vertex operator before the action becomes 0.\n\nPaths and cycles enumeration methods in graphs\n\nMentor\n\n\t\n\nDavid Coudert\n\n\n\n\nArea\n\n\t\n\nGraph theory\n\n\n\n\nSkills\n\n\t\n\nGood knowledge of graph theory and graph algorithms\n\n\n\n\nLength\n\n\t\n\n175 hours and 350 hours variants\n\n\n\n\nDifficulty\n\n\t\n\nMedium-Hard\n\nThe objectives of this project are to:\n\n* Add a method for the enumeration of simple cycles in undirected graphs, similarly to method all_simple_cycles for directed graphs. These methods can then be extended to the enumeration of cycles by increasing weight. * Implement recent and more efficient methods for finding the k shortest simple paths in (un)weighted (di)graphs. * Unify the input and output of these methods to ensure similar behaviors.\n\nGSoC/2025 (last edited 2025-02-28 01:50:56 by dimpase)\n\nImmutable PageInfoAttachments \nMore Actions:\nRaw Text\nPrint View\nRender as Docbook\nDelete Cache\n------------------------\nCheck Spelling\nLike Pages\nLocal Site Map\n------------------------\nRename Page\nDelete Page\n------------------------\nSubscribe User\n------------------------\nRemove Spam\nRevert to this revision\nPackage Pages\nSync Pages\n------------------------\nLoad\nSave\nSlideShow\nMoinMoin PoweredPython PoweredGPL licensedValid HTML 4.01\n"}