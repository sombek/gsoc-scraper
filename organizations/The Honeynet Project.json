{"name":"The Honeynet Project","description":"Honeypots and Threat Intelligence R&D","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/the-honeynet-project","ideas_url":"https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/","logo":"https://summerofcode.withgoogle.com/media/org/the-honeynet-project/pvycoc21p2ketj7b-360.png","technologies":["python","javascript","django","go","docker"],"topics":["honeypots","malware analysis","Threat Intelligence"],"projects":[{"project_name":"BuffaLogs: new alert notifications","summary":"Enhancing the BuffaLogs tool by adding alert notifications for various destinations like email and Slack.","difficulty":"Medium"},{"project_name":"BuffaLogs: new ingestion sources","summary":"Expanding BuffaLogs to support ingestion from multiple data sources beyond Elasticsearch, such as databases and file formats.","difficulty":"Medium"},{"project_name":"IntelOwl improvements: analyzers and integrations","summary":"Refactoring and improving the testing framework of IntelOwl to ensure better analyzer tests and additional integrations.","difficulty":"High"},{"project_name":"Extending the Artemis scanner","summary":"Improving Artemis scanner's vulnerability detection capabilities by adding new modules and enhancing performance.","difficulty":"High"},{"project_name":"IntelOwl improvements: analyzers and integrations (2nd focus)","summary":"Increasing the number of analyzers in IntelOwl and adjusting existing ones for better functionality.","difficulty":"Medium"},{"project_name":"Improving the SweetCam IP camera honeypot","summary":"Enhancing SweetCam to improve IP camera behavior emulation and functionality.","difficulty":"High"},{"project_name":"Improving the DICOMHawk medical honeypot","summary":"Refining the DICOMHawk honeypot to better simulate DICOM servers and log unauthorized access attempts.","difficulty":"High"},{"project_name":"Implementing Protocol Parsers for Glutton Using Spicy","summary":"Integrating Spicy with Glutton to implement protocol parsers for various network services.","difficulty":"High"}],"jina_response":"Title: The Honeynet Project\n\nURL Source: https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/\n\nMarkdown Content:\nGoogle Summer of Code 2025 Project Ideas\n----------------------------------------\n\n###### 23 Dec 2024\n\n### Getting Started\n\nThis page contains a list of potential project ideas that we are keen to develop during GSoC 2025. If you would like to apply as a GSoC student, please follow these two steps to get started:\n\n1.  Read through this page and identify the project ideas you find interesting. Play around with our tools!\n2.  Join us on Discord and talk to your potential mentors on [Discord](https://discord.gg/68B8Ru5fSU)\n\nIf there are any questions, please donâ€™t hesitate and get in touch! ðŸ™‚\n\n### GSoC and The Honeynet Project\n\nDuring the previous years of GSoC, the Honeynet Projectâ€™s students have created a wide range of very successful open source security projects, many of which have gone on to become the industry standard open source tools in their respective fields.\n\nWe are also always interested in hearing any ideas for additional relevant computer security and honeynet-related R&D projects (although remember that to qualify for receiving GSoC funding from Google your project deliverables need to fit in toÂ [GSoCâ€™s project timescales](https://developers.google.com/open-source/gsoc/faq)!). If you have a suitable and interesting project, we will always try and find the right resources to mentor it and support you.\n\nPlease note - even if you arenâ€™t anÂ [eligible GSoC participant](https://developers.google.com/open-source/gsoc/faq), we are also always looking for general volunteers who are enthusiastic and interested in getting involved in honeynet R&D.\n\nEach sponsored GSoC 2025 project will have one or more mentors available to provide a guaranteed contact point to students, plus one or more technical advisors to help applicants with the technical direction and delivery of the project (often the original author of a tool or its current maintainer, and usually someone recognized as an international expert in their particular field). Our Google Summer of Code organizational administrators will also be available to all sponsored GSoC students for general advice and logistical support. Weâ€™ll also provide hosting for project infrastructure, if required.\n\nFor all questions about the Honeynet Project, the GSoC program or our projects, please contact us onÂ [Discord](https://discord.gg/68B8Ru5fSU)Â (preferred)\\*\\*Â or email us atÂ [project@honeynet.org](mailto:project@honeynet.org).\n\n**Application template**\n\nIf you are considering applying to participate with us in GSoC 2025 please find our [application template here](https://honeynet.org/gsoc/gsoc-2025/application/). Use it when you are preparing your application on the official GSoC site and donâ€™t hesitate to ask your mentors for feedback before submitting!\n\n* * *\n\nGSoC 2025 Project Ideas Overview\n--------------------------------\n\n*   [#1 - BuffaLogs: new alert notifications](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#buffalogs-new-alert-notifications)\n*   [#2 - BuffaLogs: new ingestion sources](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#buffalogs-new-ingestion-sources)\n*   [#3 - IntelOwl improvements: analyzers and integrations](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#intelowl-improvements-analyzers-and-integrations)\n*   [#4 - Extending the Artemis scanner](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#extending-the-artemis-scanner)\n*   [#5 - IntelOwl improvements: analyzers and integrations](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#intelowl-improvements-analyzers-and-integrations)\n*   [#6 - Improving the SweetCam IP camera honeypot](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#improving-the-sweetcam-ip-camera-honeypot)\n*   [#7 - Improving the DICOMHawk medical honeypot](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#improving-the-dicomhawk-medical-honeypot)\n*   [#8 - Implementing Protocol Parsers for Glutton Using Spicy](https://www.honeynet.org/gsoc/gsoc-2025/google-summer-of-code-2025-project-ideas/#implementing-protocol-parsers-for-glutton-using-spicy)\n\n* * *\n\n### #1 - BuffaLogs: new alert notifications\n\n**Mentor:** Federico Foschini  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/certego/BuffaLogs](https://github.com/certego/BuffaLogs)  \n**Expected Project hours:** 90 - 175 based on received proposalBuffaLogs currently does not support alert notification. We are expanding the system to allow alert be sent to various destinations.\n\n### Project Objectives:\n\nDeveloping alert notifications for one or more of the following sources, depending on the project timeline:\n\n*   Email\n*   Http request\n*   Slack\n*   Additional sources to be considered based on project scope\n\n### Technical Requirements:\n\n*   Develop modular and maintainable Python code for each implemented connector\n*   Create comprehensive unit tests and integration tests\n*   Provide detailed documentation\n\n* * *\n\n### #2 - BuffaLogs: new ingestion sources\n\n**Mentor:** Federico Foschini  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/certego/BuffaLogs](https://github.com/certego/BuffaLogs)  \n**Expected Project hours:** 90 - 175 based on received proposalBuffaLogs currently supports data ingestion exclusively from Elasticsearch. To enhance its functionality and versatility, we are expanding the system to accommodate multiple data sources.\n\n### Project Objectives:\n\nDeveloping connectors for one or more of the following sources, depending on the project timeline:\n\n*   Relational Databases (MySQL, Postgres, etc.)\n*   File-based Data Sources (CSV, JSON)\n*   AWS CloudTrail Logs\n*   Additional sources to be considered based on project scope\n\n### Technical Requirements:\n\n*   Develop modular and maintainable Python code for each implemented connector\n*   Create comprehensive unit tests and integration tests\n*   Provide detailed documentation\n\n* * *\n\n### #3 - IntelOwl improvements: analyzers and integrations\n\n**Mentor:** Matteo Lodi, Daniele Rosetti, Federico Gibertoni  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/intelowlproject/IntelOwl](https://github.com/intelowlproject/IntelOwl)  \n**Expected Project hours:** 175This projects aims to improve the tests implemented in IntelOwl, in particular the ones regarding the Analyzers.\n\nRight now, the actual implementation is kinda limited due to the inheritance of a framework built years ago, based on monkeypatching the tests.\n\nThe goal is to refactor this framework in a way that is easier to use and, at the same time, that it allows better tests implementation.\n\nA thorough explanation of the problem and deliverables is described [here](https://github.com/intelowlproject/IntelOwl/issues/2715).\n\nThis is a time-consuming project that requires focus and attention. We expect the contributor to refactor most of the analyzersâ€™ tests and write additional checks.\n\nThe ideal candidate for this project is someone who understand how IntelOwlâ€™s framework works and knows testing frameworks like `unittest` very well.\n\n* * *\n\n### #4 - Extending the Artemis scanner\n\n**Mentor:** Krzysztof ZajÄ…c  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/CERT-Polska/Artemis](https://github.com/CERT-Polska/Artemis)  \n**Expected Project hours:** 175 or 350 hoursArtemis is a modular vulnerability scanner that checks multiple aspects of website security and builds easy-to-read messages to send to organizations to get the vulnerabilities fixed. Multiple national-level CSIRTs use it to improve the security of their constituencies - for example, since 2023, CERT PL has used Artemis to find and report more than half a million vulnerabilities.\n\nThe goal is to improve the number and quality of detected vulnerabilities. There may be multiple ways of achieving this goal:\n\n*   Extend Artemis with modules detecting new types of vulnerabilities (for example, by integrating existing open-source tools),\n*   Improve Artemis in other aspects such as performance or ease of use.\n\nThe primary required skills are Python programming and familiarity with Linux and Docker. Familiarity with web security topics is also desired.\n\n* * *\n\n### #5 - IntelOwl improvements: analyzers and integrations\n\n**Mentor:** Matteo Lodi, Daniele Rosetti, Federico Gibertoni  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/intelowlproject/IntelOwl](https://github.com/intelowlproject/IntelOwl)  \n**Expected Project hours:** 90 - 175 based on received proposalRight now we have a lot of [Analyzers](https://intelowl.readthedocs.io/en/latest/Usage.html#analyzers) implemented in IntelOwl.\n\nBut they are not enough! They are one of the core parts of the application so we want to add even more of them!!!! :)\n\nThis project aims to increment the number of available Analyzers and adjusting the old ones that are not working anymore as intended. We have about [10 different Analyzers that has been requested by the community members in Github](https://github.com/intelowlproject/IntelOwl/issues?q=is%3Aissue+is%3Aopen+label%3Anew_analyzer+) and are still not implemented. Plus we have other analyzers that requires intervention, like Yara, YETI, DNS Detectors and so on.\n\nPlus, we would like this project to carry additional non-Analyzer related work, like the addition of new Ingestors or Playbooks for instance, which are pretty similar components.\n\nAnother optional and very different task could be to add support for [Podman](https://github.com/intelowlproject/IntelOwl/issues/2393) for the overall project as an alternative of Docker. This would require working more with the documentation and the core parts of the projects.\n\nThe ideal candidate for this project is someone who understand how IntelOwlâ€™s framework works and already tried to implement some Analyzers.\n\n* * *\n\n### #6 - Improving the SweetCam IP camera honeypot\n\n**Mentor:** Emmanouil Vasilomanolakis, Dario Maddaloni, Artur Cordeiro Urbano  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/Agachily/sweetcam](https://github.com/Agachily/sweetcam)  \n**Expected Project hours:** 175 or 350 hoursSweetCam is an open-source honeypot designed to emulate IP camera behaviors with minimal setup while offering robust modularity for extending functionality. It is built to support the emulation of key protocols commonly used by IP cameras, including SSH, RTSP, and HTTP. A distinguishing feature of SweetCam is its ability to create a realistic web interface resembling an IP cameraâ€™s dashboard. This includes a login page and a simulated camera interface that can be customized using user-defined 360-degree video streams and images, making it highly adaptable to various use cases. The modular architecture of SweetCam ensures flexibility, allowing users to easily integrate support for new camera models and configurations. By providing a realistic medium-interaction environment, SweetCam effectively lures and studies attackers targeting IP cameras, offering valuable insights for cybersecurity research and network defense strategies.\n\n### GSoC 2025\n\n#### Outcomes\n\n*   template-based device emulation\n*   new protocol support\n*   enhance Docker Usability (Automation & Base setup)\n*   Various improvements: Error based handling on HTTP page, Language Button at HTTP page, forgot password, implementation of sound, day/night configurations\n\n#### Skills Preferred\n\n*   Basic Linux/Command Line skills\n*   Docker\n*   Shell, JavaScript\n\n* * *\n\n### #7 - Improving the DICOMHawk medical honeypot\n\n**Mentor:** Emmanouil Vasilomanolakis, Karina Elzer, Georgios Theodoridis  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/gtheodoridis/DICOMHawk](https://github.com/gtheodoridis/DICOMHawk)  \n**Expected Project hours:** 175 or 350 hoursDICOMHawk is a powerful and efficient honeypot for DICOM servers, designed to attract and log unauthorized access attempts and interactions. Built using Flask and pynetdicom, DICOMHawk offers a streamlined web interface for monitoring and managing DICOM interactions in real-time.\n\n### Features\n\n*   **DICOM Server Simulation**: Supports C-ECHO, C-FIND, and C-STORE operations to simulate a realistic DICOM server environment.\n*   **Logging**: Detailed logging of DICOM associations, DIMSE messages, and event-specific data to track and analyze potential attacks.\n*   **Web Interface**: A user-friendly web interface to view server status, active associations, and logs.\n*   **Custom Handlers**: Easily extendable to support additional DICOM services and custom logging or handling requirements.\n\n### GSoC 2025\n\n#### Outcomes\n\n*   Examine a potential integration with [TPot](https://github.com/telekom-security/tpotce)\n*   Improve Docker usage (Security & Automation)\n*   Improve logging capabilities\n*   Integrate CanaryToken Webhook\n*   Potentially add additional protocol\n*   Documentation of the Implementations\n*   Testing\n\n#### Skills Preferred\n\n*   Basic Linux/Command Line skills\n*   Docker\n*   Python\n\n* * *\n\n### #8 - Implementing Protocol Parsers for Glutton Using Spicy\n\n**Mentor:** Muhammad Bilal Arif  \n**Project type:** Improving an existing tool  \n**URL:** [https://github.com/mushorg/glutton](https://github.com/mushorg/glutton)  \n**Expected Project hours:** 175 or 350 hoursGlutton is a powerful **Generic Low Interaction Honeypot** designed to emulate various network services and capture malicious activity for security analysis. Its strength lies in its generic nature, supporting a wide range of network protocols.\n\nThe goal of this project is to:\n\n*   Develop a Go wrapper to integrate [Spicy](https://github.com/zeek/spicy) with Glutton.\n*   Implement protocol parsers for HTTP and DNS as initial examples.\n*   Provide documentation to explain the implementation.\n\nThe primary required skill is proficiency in Go programming and familiarity with Linux networking.  \nAn understanding of network monitoring tools like Spicy or similar is a nice-to-have skill.\n\n* * *\n"}