{"name":"Django Software Foundation","description":"Web framework for perfectionists with deadlines","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/django-software-foundation-8o","ideas_url":"https://code.djangoproject.com/wiki/SummerOfCode2025","logo":"https://summerofcode.withgoogle.com/media/org/django-software-foundation-8o/685unxpkksrvfugu-360.png","technologies":["python","django"],"topics":["web","python"],"projects":[{"project_name":"Django Templates: Bring django-template-partials into core","summary":"Incorporating reusable named inline partials into Django's core to enhance template functionality, especially useful for libraries like HTMX.","difficulty":"Medium"},{"project_name":"Automate processes within Django contribution workflow","summary":"Automating manual processes in Django's contribution workflow, such as releases and PR management, to improve efficiency.","difficulty":"Medium"},{"project_name":"Security: Bring CORS and CSP into core","summary":"Integrating Cross-Origin Resource Sharing (CORS) and Content Security Policy (CSP) directly into Django to bolster security defaults.","difficulty":"Medium"},{"project_name":"Auto-detection of custom migration operations","summary":"Developing a system for the automatic detection of custom migration operations within Django to improve migration management.","difficulty":"Hard"},{"project_name":"Improve the Database Cache Backend","summary":"Enhancing the database cache backend to support shared configurations, based on best practices from existing implementations.","difficulty":"Medium"},{"project_name":"Expand django-stubs coverage","summary":"Increasing type hint coverage in the django-stubs project to improve the usability and functionality of type hints in Django.","difficulty":"Hard"},{"project_name":"Configurable Content Type Parsing","summary":"Modernizing the HTTPRequest object to include a content-type aware request.data property for improved request handling in Django.","difficulty":"Medium"},{"project_name":"Django Admin: Add Command palette","summary":"Introducing a command palette in Django's admin interface to streamline navigation and enhance user experience, particularly for keyboard users.","difficulty":"Medium"},{"project_name":"[PLACEHOLDER] Project name","summary":"A project idea yet to be defined, providing flexibility for applicants to propose their own unique projects within Django.","difficulty":"Medium or Hard"}],"jina_response":"Title: SummerOfCode2025 – Django\n\nURL Source: https://code.djangoproject.com/wiki/SummerOfCode2025\n\nMarkdown Content:\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nBESbswy\nDjango\nOVERVIEW\nDOWNLOAD\nDOCUMENTATION\nNEWS\nCOMMUNITY\nCODE\nISSUES\nABOUT\n♥ DONATE\nIssues\nLogin Preferences\nView TicketsReportsTimelineWikiSearch\nwiki:\nSummerOfCode2025\nStart Page Index History\n\nGoogle's Summer of Code 2025\nMentors\nStudents\nHow can I improve my chances of being accepted?\nCommunication\nIdeas\nDjango Templates: Bring django-template-partials into core\nAutomate processes within Django contribution workflow\nSecurity: Bring CORS and CSP into core\nAuto-detection of custom migration operations\nImprove the Database Cache Backend\nExpand django-stubs coverage\nConfigurable Content Type Parsing\nDjango Admin: Add Command palette\n[PLACEHOLDER] Project name\nOr Create Your Own\n\nGoogle's Summer of Code 2025\n\nDjango is a mentor organization for the 2025 Google Summer of Code. Read ​​Google's page for more information on how the program works.\n\nDjango's GSoC program is being coordinated by Bhuvnesh Sharma and Thibaud Colas.\n\nMentors\n\nIf you're interested in mentoring -- supervising a student in work on Django-related activities -- please let us know: ​https://forum.djangoproject.com/t/call-for-project-ideas-and-prospective-mentors-for-gsoc-2025/38017\n\nStudents\n\nStudent application period runs until April 8, 2025.\n\nIf you'd like to get started on your proposal early, we'll be looking for a few things.\n\nYou'll need to have a concrete task in mind along with a solid idea of what will constitute \"success\" (you tell us).\nIf your proposal is a single large feature, library or site, you'll need to present a detailed design specification. This proposal should be posted to ​the Django Forum, where it can be refined until it is accepted by the developer community.\nWe'll want to know a bit about you -- links to previous work are great, if any. If you're proposing something ambitious, you'll need to convince us that you're up to the task.\nYou'll also need to provide us with a schedule, including a detailed work breakdown and major milestones so your mentor can know if and when to nag you :)\n\nHere's an example of an accepted proposal from a previous year:\n\n​https://gist.github.com/csirmazbendeguz/de1fdf88bf9df0dfba837f8e88c35df6\n\nNote that none of the ideas below are good enough to be submissions in their own right (so don't copy and paste)! We'll want to know not just what you want to do but how you plan to pull it off.\n\nDon't feel limited to the ideas below -- if you've got a cool project you want to work on, we'll probably be able to find you a mentor. We plan on approving as many projects as we possibly can.\n\nWe're accepting any GSOC proposal that fits one of the following three categories:\n\nWork on Django itself - such as the ORM, forms, etc. This is what we've traditionally accepted GSoC entries in.\nWork on tools to support Django - the issue tracker dashboard (​https://dashboard.djangoproject.com/) is a good example of an existing tool that would have fit into this category.\nWork on libraries that supplement or add new features to Django to ease development - django-stubs and Django Debug Toolbar are good examples of existing projects that would have fit here.\n\nHere are the projects that were accepted last year: ​https://summerofcode.withgoogle.com/archive/2024/organizations/django-software-foundation-8o\n\nUnless explicitly mentioned below, we're not looking for people to work on existing third-party libraries - we aren't able to guarantee commit access to them. We may allow an exception if a maintainer of the library in question agrees to help mentor beforehand.\n\nThe broadening in scope is to allow people to work on new ideas to help Django development and developers without tying you down to having to implement it in the core codebase (and thus ruling out some projects that might otherwise be useful).\n\nWe're still going to be strict with what we accept - you'll need to provide a strong use case for your idea and show that it would be useful to a majority of developers or significantly improve the development of Django itself.\n\nWe're not looking for small groups of incremental updates - like \"improve Django's Trac\" - nor are we looking for impossible tasks, like \"replace Trac with this brand new issue tracker I'm writing\". What you propose should be a single project, achievable within the time period of GSoC, and something the core developers can help mentor you on.\n\nWe're also not looking for sites or projects that are merely written in Django — this GSoC is not for you to propose your new forum hosting site or amazing Django-based blogging engine.\n\nNote that when you contribute code, you will be expected to adhere to the same contribution guidelines as any other code contributor. This means you will be expected to provide extensive tests and documentation for any feature you add, you will be expected to participate in discussion on the ​Django Forum when your topic of interest is raised. If you're not already familiar with ​Django's contribution guidelines, now would be a good time to read them - even if you're not applying to work on Django core directly, we'll still want the same level of contribution.\n\nHow can I improve my chances of being accepted?\n\nThe best thing you can do to improve your chances to be accepted as a Django GSoC student is to start contributing now. Read up on ​Django’s contribution documentation and make yourself known to the other contributors by your contributions (ideally, related to the area of your proposal). That way, when it comes time to evaluate student applications, you’ll be a known individual and more likely to be able to get the attention you need to develop a proposal.\n\nWe're looking for candidates who can demonstrate that they can engage in work of a project scope on an independent basis. We're there to help but we can't watch you every step of the way, so we need to see that motivation from you. Being active before the submissions process is the best way to demonstrate this.\n\nCommunication\n\nAll GSOC-related communication is handled via the ​Django Forum, in the Mentoring channel. Any proposals for GSOC should be submitted there, as well as discussion on the proposed projects and any updates that students post.\n\nPlease be careful to keep content to the forum clear and purposeful; if you have an idea, update, or criticism, please make sure you describe it in detail; it can be tedious asking people to clarify any vague statements.\n\nIdeas\n\nHere are some suggestions for projects students may want to propose (please feel free add to this list!). This isn't by any means the be-all and end-all of ideas; please feel free to submit proposals for things not on this list. Remember, we'd much prefer that you posted a draft proposal and your rough timeline / success conditions to the the ​Django Forum, in the Mentoring channel, even if it's already on the list below; it will help you get feedback on choosing the right part of a problem, as well as helping to see if there is any interest before you start drafting a full proposal.\n\nWhen developing your proposal, try to scope ideas/proposals to size of your project (175hrs or 350hrs) -- you need to be ambitious, but not too ambitious. The GSoC does not cover activities other than coding, so certain ideas (\"Write a more detailed tutorial\" or \"Create demonstration screencasts\") are not suitable for inclusion here.\n\nOn the other side, though, be sure to be concrete in your proposal. We'll want to know what your goals are, and how you plan to accomplish them.\n\nThe project ideas below list key skill, but all assume a knowledge of Python, and familiarity with Django itself.\n\nIn no particular order:\n\nDjango Templates: Bring django-template-partials into core\nDifficulty\tMedium\nSize\t350hrs\nPotential Mentors\tCarlton Gibson\nKey Skills\tDjango Template Language, template tags\n\nThe third-party app django-template-partials allows for reusable named inline partials for the Django Template Language. These named inline partials can be used multiple times within a template or included in other templates. They are particularly useful when using libraries such as HTMX. It would be good to have support built-in to core.\n\nOutcome would be a PR adding this into Django. In addition there would be preparatory work on the Django-template-partials repo to smooth the migration for existing users. There is a ​tracking issue on the repo that can be used for guidance.\n\nAutomate processes within Django contribution workflow\nDifficulty\tMedium\nSize\t350hrs\nPotential Mentors\tLily Foote\nKey Skills\tGitHub actions, scripting, Jenkins\n\nThe contribution workflow within Django has several manual processes. These are error prone and take up valuable time from contributors. This project would seek to automate these processes, such as automating releases, identifying active PRs and managing aging PR queue.\n\nPart of this project will involve working with the Fellows to determine which of their tasks and the community's tasks are the best candidates for automation.\n\nOutcome would be one to several PRs automating these workflows, depending on how many are accomplished.\n\nSecurity: Bring CORS and CSP into core\nDifficulty\tMedium\nSize\t350hrs\nPotential Mentors\tTBC\nKey Skills\tHTTP request-response cycle, middleware, decorators\n\nThere are third-party apps providing support for ​Cross-Origin Resource Sharing (CORS) django-cors-headers and ​Content Security Policy (CSP) django-csp, but it would be good to have support built-in to core.\n\nFollowing the design of the CSRF/clickjacking protection, having safe defaults, and allowing straightforward per-path customisation, via e.g. decorators, would improve the security of all Django projects.\n\nOutcome would be a pair of PRs adding these into Django.\n\nAuto-detection of custom migration operations\nDifficulty\tHard.\nSize\t350hrs\nPotential Mentors\t2024 mentor: Mariusz Felisiak\nKey Skills\tMigrations Framework\n\nAllow auto-detection of custom migration operations.\n\nThe auto-detector has its change-detection mostly hard-coded: ​autodetector.py#L104\n\nIt doesn't seem easy (or even possible with the current approach) to allow third-party code to intervene. The list of handlers to generated the individual operations would need to be data-driven, so that custom steps could be added.\n\nExpected outcome here would be a PR allowing auto-detection of custom migration operations.\n\nImprove the Database Cache Backend\nDifficulty\tMedium.\nSize\t350hrs\nPotential Mentors\tTBC\nKey Skills\tCache Framework\n\nSetting up a shared cache backend is nearly always required, as many third-party packages assume the cache works like this (unlike the default locmemcache which is per process). DatabaseCache is the easiest such cache backend, not requiring any extra infra and working on shared hosts without a filesystem. But it could be better.\n\nDjango-Mysql has had a much better DB cache backend implementation since 2015: ​https://adamj.eu/tech/2015/05/17/building-a-better-databasecache-for-django-on-mysql/ . This has never been adapted for the other supported databases but it should be fairly straightforward, mostly some translation of SQL to different dialects.\n\nExpected outcome would be a PR improvement database cache backend.\n\nAs a stretch goal, it would also be nice to hook the database cache tables into migrations somehow rather than the current hacky duck typing approach: ​https://github.com/django/django/blob/64b3c413da011f55469165256261f406a277e822/django/core/cache/backends/db.py#L12-L28 ).\n\nExpand django-stubs coverage\nDifficulty\tHard.\nSize\tVariable\nPotential Mentors\t2024 mentor: Adam Johnson\nKey Skills\tPython typing and Django-stubs\n\n​django-stubs is an external project that adds type hints to Django. It may be possible to work on it under GSoC if you can show experience with Python’s type hints and Mypy.\n\ndjango-stubs uses Mypy’s stubtest tool to check that its type hints align with Django’s source, per ​its contributing documentation. The “todo” list contains ~1600 functions and classes missing type hints. A proposal targeting a specific, significant subset of the missing types is likely to be accepted.\n\nConfigurable Content Type Parsing\nDifficulty\tMedium.\nSize\t350hrs\nPotential Mentors\tTBC\nKey Skills\tHTTP request-response cycle\n\nFor Django 5.0 we're looking to modernize the HTTPRequest object, adding a content-type aware request.data property. This will parse request.body according to the content type.\n\nThe initial phase — targeted for before GSoC — will add request.data and add support for JSON body handling, but the next phase is to make that fully pluggable with custom parsers.\n\nAdd a list of parsers to the request object, that can be customised — in a middleware for example — at any point prior to accessing request.data.\nParsers should implement a can_handle(content_type) -> Bool method. The first parser returning True will be selected to parse the request.body.\n\nExpected outcome is a PR allowing configurable content type parsing.\n\nDjango Admin: Add Command palette\nDifficulty\tMedium\nSize\tVariable\nPotentia mentors\tTom Carrick\nKey Skills\tUI/UX\n\nMany dashboards nowadays have command palettes, often associated with the CTL+K keyboard shortcut. This allows for quicker, easier and more accessible navigation. This project is about adding such a feature to the Django admin.\n\nThis would allow power users to e.g. very quickly find a particular object in the database to edit. The overall goal is to improve the user-experience for keyboard and keyboard-only users.\n\nThis feature already has an accepted ticket. However, this work needs to be done carefully to ensure that all shortcuts are useful, documented in the admin, and work across browsers without shadowing browser shortcuts. In addition, shortcuts should be easily extensible by developers.\n\n​Some initial work has been done to add keyboard shortcuts to core. The 175 hour version of this project would be to get this project finished and merged into Django. The 350 hour version would be to build this into a full command palette.\n\n[PLACEHOLDER] Project name\nDifficulty\tMedium or Hard\nSize\t175hr or 350hr\nMentors\t(need confirmation)\nKey Skills\t-\n\nProject description including the expected outcome of the project.\n\nOr Create Your Own\n\nWe have around 900 accepted tickets on Django. Browse the issue tracker by component — here's an example filter for contrib.staticfiles. What's the bit of the framework that interests you? What contribution do you want to make to it?\n\nUse the tickets as guides here. Remember the advice above, that your project needs to be both on Django itself here, and achievable in the timescale of GSoC.\n\nCould be scoped as a 175hr or a 350hr project, depending on your idea.\n\nWe're open to all good ideas!\n\nLast modified 13 days ago\nNote: See TracWiki for help on using the wiki.\nDownload in other formats:\nPlain Text\nDjango Links\nLearn More\nAbout Django\nGetting Started with Django\nTeam Organization\nDjango Software Foundation\nCode of Conduct\nDiversity Statement\nGet Involved\nJoin a Group\nContribute to Django\nSubmit a Bug\nReport a Security Issue\nIndividual membership\nGet Help\nGetting Help FAQ\nDjango Discord\nOfficial Django Forum\nFollow Us\nGitHub\nTwitter\nFediverse (Mastodon)\nNews RSS\nSupport Us\nSponsor Django\nCorporate membership\nOfficial merchandise store\nBenevity Workplace Giving Program\nDjango\nHosting by\nIn-kind donors\nDesign by\nThreespot & \n\n© 2005-2025 Django SoftwareFoundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.\n"}