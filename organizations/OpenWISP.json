{"name":"OpenWISP","description":"The Hackable Network Management System","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/openwisp","ideas_url":"https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html","logo":"https://summerofcode.withgoogle.com/media/org/openwisp/xgfy0r7femccwzvj-360.png","technologies":["python","javascript","django","lua","openwrt"],"topics":["networking","network management system","wifi","vpn","sdn"],"projects":[{"project_name":"Mass Commands","summary":"This project extension allows users to execute shell commands on multiple devices at once within OpenWISP, improving efficiency in device management.","difficulty":"Medium"},{"project_name":"X.509 Certificate Generator Templates","summary":"Enhancement of OpenWISP's certificate management by enabling the generation of x509 certificates for various purposes beyond OpenVPN, such as securing web servers.","difficulty":"Medium"},{"project_name":"WHOIS Information and IP Address-Based Geolocation","summary":"This project aims to integrate WHOIS data retrieval and fuzzy geolocation based on public IPs to enhance device management in OpenWISP.","difficulty":"Easy/Medium"},{"project_name":"Improve OpenWISP General Map: Indoor, Mobile, Linkable URLs","summary":"Enhance the mapping interface in OpenWISP, introducing features for real-time updates, indoor tracking, and linkable URLs for better usability.","difficulty":"Medium"},{"project_name":"Improve netjsongraph.js resiliency and visualization","summary":"Focus on enhancing the netjsongraph.js library by improving its functionality, resiliency, and overall visualization for network topologies.","difficulty":"Medium"},{"project_name":"Improve UX and Flexibility of the Firmware Upgrader Module","summary":"Enhance the user experience of the Firmware Upgrader module by allowing mass upgrades and showing real-time progress during updates.","difficulty":"Easy/Medium"},{"project_name":"Add more timeseries database clients to OpenWISP Monitoring","summary":"Expand the compatibility of OpenWISP Monitoring by adding support for additional Time Series Database options like InfluxDB and Elasticsearch.","difficulty":"Medium"},{"project_name":"OpenWISP VPN Deployer Linux Package","summary":"Develop a Python-based VPN synchronization tool for easier deployment and management of VPN servers integrated with OpenWISP.","difficulty":"Medium/Hard"},{"project_name":"Enhancing Uspot Captive Portal for OpenWrt","summary":"Improve Uspot by adding critical features for RADIUS support and traffic management, making it a viable alternative to CoovaChilli in OpenWISP deployments.","difficulty":"Hard"}],"jina_response":"Title: GSoC Project Ideas 2025 | OpenWISP dev documentation\n\nURL Source: https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html\n\nMarkdown Content:\n**Table of Contents**:\n\n*   [GSoC Project Ideas 2025](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#gsoc-project-ideas-2025)\n    \n    *   [General suggestions and warnings](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#general-suggestions-and-warnings)\n        \n    *   [Project Ideas](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#project-ideas)\n        \n        *   [Mass Commands](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#mass-commands)\n            \n        *   [X.509 Certificate Generator Templates](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#x-509-certificate-generator-templates)\n            \n        *   [WHOIS Information and IP Address-Based Geolocation](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#whois-information-and-ip-address-based-geolocation)\n            \n        *   [Improve OpenWISP General Map: Indoor, Mobile, Linkable URLs](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#improve-openwisp-general-map-indoor-mobile-linkable-urls)\n            \n        *   [Improve netjsongraph.js resiliency and visualization](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#improve-netjsongraph-js-resiliency-and-visualization)\n            \n        *   [Improve UX and Flexibility of the Firmware Upgrader Module](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#improve-ux-and-flexibility-of-the-firmware-upgrader-module)\n            \n        *   [Add more timeseries database clients to OpenWISP Monitoring](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#add-more-timeseries-database-clients-to-openwisp-monitoring)\n            \n        *   [OpenWISP VPN Deployer Linux Package](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#openwisp-vpn-deployer-linux-package)\n            \n        *   [Enhancing Uspot Captive Portal for OpenWrt](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#enhancing-uspot-captive-portal-for-openwrt)\n            \n\nGeneral suggestions and warnings[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#general-suggestions-and-warnings \"Link to this heading\")\n-------------------------------------------------------------------------------------------------------------------------------------------------------\n\n*   **Project ideas describe the goals we want to achieve but may miss details that have to be defined during the project**: we expect applicants to do their own research, propose solutions and be ready to deal with uncertainty and solve challenges that will come up during the project\n    \n*   **Code and prototypes are preferred over detailed documents and unreliable estimates**: rather than using your time to write a very long application document, we suggest to invest in writing a prototype (which means the code may be thrown out entirely) which will help you understand the challenges of the project you want to work on; your application should refer to the prototype or other Github contributions you made to OpenWISP that show you have the capability to succeed in the project idea you are applying for.\n    \n*   **Applicants who have either shown to have or have shown to be fast learners for the required hard and soft skills by contributing to OpenWISP have a lot more chances of being accepted**: in order to get started contributing refer to the [OpenWISP Contributing Guidelines](https://openwisp.io/docs/dev/developer/contributing.html)\n    \n*   **Get trained in the projects you want to apply for**: once applicants have completed some basic training by [contributing to OpenWISP](https://openwisp.io/docs/dev/developer/contributing.html) we highly suggest to start working on some aspects of the project they are interested in applying: all projects listed this year are improvements of existing modules so these modules already have a list of open issues which can be solved as part of your advanced training. It will also be possible to complete some of the tasks listed in the project idea right now before GSoC starts. We will list some easy tasks in the project idea for this purpose.\n    \n\nProject Ideas[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#project-ideas \"Link to this heading\")\n-----------------------------------------------------------------------------------------------------------------\n\n### Mass Commands[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#mass-commands \"Link to this heading\")\n\n![Image 1: ../_images/mass-commands.png](https://openwisp.io/docs/dev/_images/mass-commands.png)\n\nImportant\n\nLanguages and technologies used: **Python**, **Django**, **JavaScript**, **WebSockets**, **REST API**.\n\n**Mentors**: _Gagan Deep_, _Purhan Kaushik_, _Kapil Bansal_.\n\n**Project size**: 350 hours.\n\n**Difficulty rate**: medium.\n\nThis project idea aims to extend OpenWISP's remote device management capabilities by enabling users to execute shell commands on multiple devices simultaneously. Currently, OpenWISP supports executing commands on a single device at a time. This project will introduce a bulk execution feature while maintaining the existing security, rules, and limitations of the single-device command execution feature.\n\nThe mass command operation will be accessible from two main entry points:\n\n*   An admin action on the device list page, allowing users to select multiple devices and send a shell command in bulk.\n    \n*   A dedicated mass command admin section, where users can initiate bulk command execution with various targeting options:\n    \n    *   All devices in the system (restricted to superusers).\n        \n    *   All devices within a specific organization.\n        \n    *   All devices within a specific device group.\n        \n    *   All devices within a specific geographic location.\n        \n    *   Specific selected devices.\n        \n\nThe UI will guide users step-by-step, dynamically displaying relevant fields based on the selected target scope. For example, if a user selects \"All devices in a specific organization\", an auto-complete list of organizations will be displayed next.\n\nThe system will provide real-time tracking of command execution results. Inspired by OpenWISP Firmware Upgrader's mass upgrade feature, the UI will receive live updates via WebSockets, displaying command output as soon as it is received from the devices. Additionally:\n\n*   The device detail page will show executed commands under the \"Recent Commands\" tab.\n    \n*   Commands that were part of a mass operation will be clearly marked, with a link to the corresponding mass command operation page.\n    \n\nTo support API-based management, the REST API will be extended with the following capabilities:\n\n*   Create new mass command operations.\n    \n*   Retrieve mass command operations and their results (with pagination).\n    \n*   Delete mass command operations.\n    \n*   Modify the single-shell command API to reference the mass command operation ID if applicable.\n    \n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#prerequisites-to-work-on-this-project \"Link to this heading\")\n\nApplicants must demonstrate a solid understanding of Python, Django, HTML, CSS, JavaScript, WebSockets, and [OpenWISP Controller](https://github.com/openwisp/openwisp-controller).\n\n#### Expected outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#expected-outcomes \"Link to this heading\")\n\n*   Implementation of mass shell command execution in OpenWISP, replicating the rules and limitations of single-device execution.\n    \n*   Development of an intuitive UI with the Django admin for selecting devices and tracking command results in real-time.\n    \n*   Admin action for device list page.\n    \n*   Enhancement of the device detail page to reflect mass command history for individual devices.\n    \n*   Extension of the REST API to support mass command operations.\n    \n*   Comprehensive automated tests covering the new feature.\n    \n*   Updated documentation, including:\n    \n    *   Feature description with usage instructions.\n        \n    *   A short example usage video for YouTube that we can showcase on the website.\n        \n\n### X.509 Certificate Generator Templates[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#x-509-certificate-generator-templates \"Link to this heading\")\n\n![Image 2: ../_images/x509-templates.webp](https://openwisp.io/docs/dev/_images/x509-templates.webp)\n\nImportant\n\nLanguages and technologies used: **Python**, **Django**, **JavaScript**.\n\n**Mentors**: _Federico Capoano_, _Aryaman_, _Nitesh Sinha_.\n\n**Project size**: 90 hours.\n\n**Difficulty rate**: medium.\n\nThis GSoC project aims to enhance OpenWISP's certificate management capabilities by enabling the generation of x509 certificates for general use, beyond OpenVPN.\n\nCurrently, OpenWISP supports generating x509 certificates exclusively for OpenVPN clients, where each VPN client template produces a certificate signed by the CA linked to the corresponding VPN server. However, many users have requested support for generating certificates for other purposes, such as securing web servers.\n\nThe proposed solution involves introducing a new template type that allows users to generate certificates using a selected CA. This template should provide configurable options, including:\n\n*   Certificate duration\n    \n*   Key length\n    \n*   Digest algorithm\n    \n\nIf left unspecified, these options should default to the CA's standard settings.\n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id1 \"Link to this heading\")\n\nApplicants must demonstrate a solid understanding of Python, Django, JavaScript, and [OpenWISP Controller](https://github.com/openwisp/openwisp-controller).\n\n#### Expected outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id2 \"Link to this heading\")\n\n*   Implement a new certificate template type in OpenWISP to support general-purpose x509 certificate generation.\n    \n*   Allow users to select a CA and configure certificate properties.\n    \n*   Integrate with OpenWISP's configuration management to expose certificate details (public key, private key, and UUID) as variables for automated deployment.\n    \n*   Write automated tests to ensure the correctness and reliability of the new functionality.\n    \n*   Updated documentation, including:\n    \n    *   Feature overview in a dedicated page with step-by-step usage instructions.\n        \n    *   Short Video demonstration.\n        \n\n### WHOIS Information and IP Address-Based Geolocation[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#whois-information-and-ip-address-based-geolocation \"Link to this heading\")\n\n![Image 3: ../_images/geolocation.webp](https://openwisp.io/docs/dev/_images/geolocation.webp)\n\nImportant\n\nLanguages and technologies used: **Python**, **Django**, **REST API**.\n\n**Mentors**: _Federico Capoano_, _Nitesh Sinha_, _Kapil Bansal_\n\n**Project size**: 175 hours.\n\n**Difficulty rate**: Easy/Medium.\n\nThis GSoC project aims to enhance OpenWISP’s device management capabilities by integrating WHOIS data retrieval and automatic fuzzy geolocation based on public IP addresses.\n\nThe project consists of two main features:\n\n**1\\. WHOIS Information Retrieval**\n\n*   When a device reports a `last_ip` that is a public IP and differs from the previously stored value, OpenWISP should automatically trigger a background Celery task to retrieve and store its WHOIS information.\n    \n*   A summary of key WHOIS details (e.g., organization name, country, ISP) will be displayed alongside the `last_ip` field on the device detail page.\n    \n*   Users will have the option to expand this section to view additional details.\n    \n*   The REST API should include WHOIS summary information in the device list and device detail endpoints.\n    \n*   An additional API option in the device details endpoint should allow retrieving the complete WHOIS data stored in the database.\n    \n\n**2\\. Fuzzy Geolocation from IP Addresses**\n\n*   The system should attempt to determine approximate geographic coordinates based on the device’s `last_ip` and create a `Location` object with this data, marking it as _Fuzzy_ (a different term may be considered).\n    \n*   IP-based geolocation must be processed in a background Celery task to avoid slowing down the main processes.\n    \n*   The UI should clearly indicate that this location is estimated and encourage users to manually refine it for greater accuracy.\n    \n*   A notification can be sent to users suggesting they review or confirm the estimated location.\n    \n*   If the `Location` object remains unmodified and marked as fuzzy, OpenWISP should detect changes in the device's public IP address and reattempt IP-based geolocation, updating the coordinates if they differ.\n    \n*   The `Location` admin list page should include a filter for fuzzy locations.\n    \n*   The Device admin list page should include a filter for devices with fuzzy locations (expanding on the existing filter for devices with or without geographic locations).\n    \n*   This feature should be configurable at both the global and organization levels, allowing administrators to enable or disable it as needed. Existing modules already provide organization settings that default to global configuration, see [FallbackBooleanChoiceField](https://openwisp.io/docs/stable/utils/developer/custom-fields.html#openwisp-utils-fields-fallbackbooleanchoicefield) for reference.\n    \n*   The OpenWISP Controller REST API must be updated to support these functionalities:\n    \n    *   Include the fuzzy field in the `Location` list and detail endpoints.\n        \n    *   Allow filtering fuzzy locations.\n        \n    *   Allow filtering devices with fuzzy locations.\n        \n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id3 \"Link to this heading\")\n\nApplicants must demonstrate a solid understanding of Python, Django, REST APIs, HTML, CSS, JavaScript, [OpenWISP Controller](https://github.com/openwisp/openwisp-controller), and [django-loci](https://github.com/openwisp/django-loci).\n\n#### Expected Outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id4 \"Link to this heading\")\n\n*   Implementation of WHOIS data retrieval as a background operation and display within the OpenWISP Controller admin panel.\n    \n*   Development of fuzzy geolocation based on public IPs, with clear UI explanations and manual override options.\n    \n*   Integration with OpenWISP’s notification system to suggest location refinements.\n    \n*   Admin filters to identify fuzzy locations and devices with fuzzy locations.\n    \n*   Configurable settings to enable or disable the feature globally or per organization.\n    \n*   REST API enhancements to reflect the new functionalities.\n    \n*   Comprehensive automated tests ensuring feature reliability.\n    \n*   Updated documentation, including:\n    \n    *   A feature overview with step-by-step usage instructions on dedicated pages.\n        \n    *   Videos demonstrating WHOIS data retrieval and geolocation results.\n        \n    *   Configuration details for enabling or disabling these features.\n        \n\n### Improve OpenWISP General Map: Indoor, Mobile, Linkable URLs[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#improve-openwisp-general-map-indoor-mobile-linkable-urls \"Link to this heading\")\n\n![Image 4: ../_images/maps.jpg](https://openwisp.io/docs/dev/_images/maps.jpg)\n\nImportant\n\nLanguages and technologies used: **Python**, **Django**, **JavaScript**, **Leaflet**, **netjsongraph.js**.\n\n**Mentors**: _Federico Capoano_, _Nitesh Sinha_, _Gagan Deep_.\n\n**Project size**: 350 hours.\n\n**Difficulty rate**: medium.\n\nThis GSoC project aims to enhance the user experience of the general map within OpenWISP, a feature introduced in the last stable version.\n\nBy developing a dedicated map page, facilitating precise device tracking, and seamlessly integrating indoor floor plans, the project endeavors to significantly improve the usability and functionality of the mapping interface, ensuring a more intuitive and effective user experience.\n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id5 \"Link to this heading\")\n\nApplicants must demonstrate a solid understanding of Python, Django, [Leaflet library](https://github.com/makinacorpus/django-leaflet), JavaScript, [OpenWISP Controller](https://github.com/openwisp/openwisp-controller#openwisp-controller), [OpenWISP Monitoring](https://github.com/openwisp/openwisp-monitoring#openwisp-monitoring). and [netjsongraph.js](https://github.com/openwisp/netjsongraph.js?tab=readme-ov-file#netjsongraphjs).\n\n#### Expected outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id6 \"Link to this heading\")\n\n*   [Add a dedicated map page](https://github.com/openwisp/openwisp-monitoring/issues/561): Introduce a dedicated page to display all network devices on a map. This view will offer the same functionality as the map in the dashboard, with the sole difference being that this page focuses on rendering only the map. It will be used for linking specific points on the map within the rest of the OpenWISP UI.\n    \n*   [Allow tracking mobile coordinates](https://github.com/openwisp/openwisp-controller/issues/828): OpenWISP Controller provides a way for devices to update their co-ordinates, we want to make the map able to update in real time as devices send their updated coordinates.\n    \n*   [Integrate indoor floor plan functionality in the map](https://github.com/openwisp/openwisp-monitoring/issues/564): The netjsongraph.js library allows to render indoor maps, we want to make use of this feature to display the indoor location of devices and we want this feature to be accessible from the general map. When zooming in on a device which is flagged as indoor and has floor plans saved in the database, users should see an option to switch to the indoor view. This view would show the floor plan of the indoor location and any device located on the floor plan, it shall also account for the following use cases:\n    \n    *   An indoor location can have multiple floors. The view should be allow users to navigate between different floors.\n        \n    *   There can be multiple devices on the same floor. The view should show all the devices on a floor. This will require developing an API endpoint which returns location of devices on the floor plan\n        \n*   [Make map actions bookmarkable](https://github.com/openwisp/netjsongraph.js/issues/238): Update the URL when clicking on a node/link to view its details. Visiting this URL should automatically focus on the specified node/link and display its details, if available. This functionality should also accommodate geo-maps using coordinates. Clicking on a node/link to view it's details should update the the page's URL. When visiting this URL, the map should automatically focus the said node/link. It shall also open the node's/link's details if they are available. This should work on geographic maps, indoor maps and logical maps.\n    \n*   [Add button to general map from device detail](https://github.com/openwisp/openwisp-monitoring/issues/562): Implement a button on the device detail page to allow users to navigate from the device detail to the general map and inspect the device's location on the map. The map should focus on the specific device in question. This feature should also be available for indoor maps, providing a button in the floor plan section to open the general map with the indoor view focused.\n    \n\nThroughout the code changes, it is imperative to maintain stable test coverage and keep the README documentation up to date.\n\nNote\n\nThe \"expected outcomes\" mentioned above include links to corresponding GitHub issues. However, these issues may not cover all aspects of the project and are primarily intended to gather technical details. Applicants are encouraged to seek clarification, propose solutions and open more issues if needed.\n\nApplicants are also expected to deepen their understanding of the UI changes required by preparing _wireframes_ or _mockups_, which must be included in their application. Demonstrating a willingness and enthusiasm to learn about UI/UX development is crucial for the success of this project.\n\n### Improve netjsongraph.js resiliency and visualization[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#improve-netjsongraph-js-resiliency-and-visualization \"Link to this heading\")\n\n![Image 5: ../_images/netjsongraph-default.png](https://openwisp.io/docs/dev/_images/netjsongraph-default.png)\n\nImportant\n\nLanguages and technologies used: **Javascript**, **NodeJS**, **HTML**, **CSS**\n\n**Mentors**: _Nitesh Sinha_, _Federico Capoano_.\n\n**Project size**: 175 hours.\n\n**Difficulty rate**: medium.\n\nThe goal of this project is to improve the latest version of the netjsongraph.js visualization library to improve resiliency and functionality.\n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id7 \"Link to this heading\")\n\nThe contributor should have a proven track record and experience with Javascript, React JS, NodeJS, HTML and CSS.\n\nFamiliarity with [OpenWISP Network Topology](https://github.com/openwisp/openwisp-network-topology) and [OpenWISP Monitoring](https://github.com/openwisp/openwisp-monitoring) is a plus.\n\n#### Expected outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id8 \"Link to this heading\")\n\nThe applicant must open pull requests for the following issues which must be merged by the final closing date of the program:\n\n*   [Allow showing node names on geo map on high zoom levels](https://github.com/openwisp/netjsongraph.js/issues/189): The node names should be shown by default on high zoom levels.\n    \n*   [Map should respect zoom levels of tile providers](https://github.com/openwisp/netjsongraph.js/issues/188): We shall limit the map zoom levels based on the tile provider. We can make the supported zoom levels configurable and provide sensible defaults.\n    \n*   [Prevent overlapping of clusters](https://github.com/openwisp/netjsongraph.js/issues/171): The clusters of different categories with the same location are overlapped. Instead, we should find a way to prevent this behavior.\n    \n*   [Add resiliency for invalid data](https://github.com/openwisp/netjsongraph.js/issues/164): The library should not crash if invalid data is provided, e.g. different nodes with same ID. Instead, it should handle such cases gracefully and log the errors.\n    \n*   [Display additional data (connected clients) on nodes](https://github.com/openwisp/netjsongraph.js/issues/153): It shall be possible to show connected clients on nodes. This feature needs to be flexible, such that it can be used to show different kinds of data.\n    \n*   [Show node labels only after hitting a certain zoom level](https://github.com/openwisp/netjsongraph.js/issues/148): At present, the node labels become cluttered and unreadable when zoomed out excessively. To enhance readability, we need to add a feature in the library that allows configuring the zoom level at which node labels should start appearing.\n    \n\nEach issue contains the details which the applicant needs to know in order to complete the project successfully.\n\nAt each step of code changing the test coverage must be maintained stable and the documentation in the README must be kept up to date.\n\n### Improve UX and Flexibility of the Firmware Upgrader Module[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#improve-ux-and-flexibility-of-the-firmware-upgrader-module \"Link to this heading\")\n\n![Image 6: ../_images/firmware.jpg](https://openwisp.io/docs/dev/_images/firmware.jpg)\n\nImportant\n\nLanguages and technologies used: **Python**, **Django**, **OpenWrt**.\n\n**Mentors**: _Oliver Kraitschy_, _Purhan Kaushik_.\n\n**Project size**: 175 hours.\n\n**Difficulty rate**: easy/medium.\n\nThe goal of this project is to improve the Firmware Upgrader module to make its mass upgrade operation feature more versatile and to improve the user experience by showing progress in real time.\n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id9 \"Link to this heading\")\n\nThe applicant must demonstrate good understanding of Python, Django, Javascript and [OpenWISP Controller](https://github.com/openwisp/openwisp-controller#openwisp-controller).\n\nThey must demonstrate also a basic understanding of [OpenWISP Firmware Upgrader](https://github.com/openwisp/openwisp-firmware-upgrader#openwisp-firmware-upgrader), OpenWrt and UI development.\n\nPrior experience with OpenWrt is not extremely required but welcome.\n\n#### Expected outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id10 \"Link to this heading\")\n\nThe applicant must open pull-requests for the following issues which must be merged by the final closing date of the program:\n\n*   [\\[feature\\] REST API is missing endpoints for DeviceFirmware](https://github.com/openwisp/openwisp-firmware-upgrader/issues/208)\n    \n*   [\\[feature:UI\\] Show upgrade progress in real time in the UI](https://github.com/openwisp/openwisp-firmware-upgrader/issues/224)\n    \n*   [\\[feature\\] Allow to perform mass upgrade of devices by their group](https://github.com/openwisp/openwisp-firmware-upgrader/issues/213)\n    \n*   [\\[feature\\] Allow to perform mass upgrade of devices by their location](https://github.com/openwisp/openwisp-firmware-upgrader/issues/225)\n    \n\nEach issue contains the details which the applicant needs to know in order to complete the project successfully.\n\nAt each step of code changing the test coverage must be maintained stable and the documentation in the README must be kept up to date.\n\n#### Training Issues[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#training-issues \"Link to this heading\")\n\nThe applicant may warm up in the application phase by working on the following issues:\n\n*   [\\[bug\\] FileNotFoundError when trying to delete an image which links a non existing file](https://github.com/openwisp/openwisp-firmware-upgrader/issues/140)\n    \n*   [\\[change\\] Improve endpoints to download firmware images](https://github.com/openwisp/openwisp-firmware-upgrader/issues/69)\n    \n*   [\\[feature\\] Allow management of UpgradeOperation objects in the admin](https://github.com/openwisp/openwisp-firmware-upgrader/issues/145)\n    \n\n### Add more timeseries database clients to OpenWISP Monitoring[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#add-more-timeseries-database-clients-to-openwisp-monitoring \"Link to this heading\")\n\n![Image 7: ../_images/tsdb.png](https://openwisp.io/docs/dev/_images/tsdb.png)\n\nImportant\n\nLanguages and technologies used: **Python**, **Django**, **InfluxDB**, **Elasticsearch**.\n\n**Mentors**: _Gagan Deep_, _Aryaman_, _Sankalp_.\n\n**Project size**: 350 hours.\n\n**Difficulty rate**: medium.\n\nThe goal of this project is to add more Time Series DB options to OpenWISP while keeping good maintainability.\n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id11 \"Link to this heading\")\n\nThe applicant must demonstrate good understanding of [OpenWISP Monitoring](https://github.com/openwisp/openwisp-monitoring#openwisp-monitoring), and demonstrate basic knowledge of [NetJSON format](https://netjson.org/), **InfluxDB** and **Elasticsearch**.\n\n#### Expected outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id12 \"Link to this heading\")\n\n*   Complete the support to [Elasticsearch](https://github.com/elastic/elasticsearch). [Support to Elasticsearch was added in 2020](https://github.com/openwisp/openwisp-monitoring/pull/164) but was not completed.\n    \n    *   The old pull request has to be updated on the current code base\n        \n    *   The merge conflicts have to be resolved\n        \n    *   All the tests must pass, new tests for new charts and metrics added to _InfluxDB_ must be added (see [\\[feature\\] Chart mobile (LTE/5G/UMTS/GSM) signal strength #270](https://github.com/openwisp/openwisp-monitoring/pull/294))\n        \n    *   The usage shall be documented, we must make sure there's at least one dedicated CI build for **Elasticsearch**\n        \n    *   We must allow to install and use **Elasticsearch** instead of **InfluxDB** from [ansible-openwisp2](https://github.com/openwisp/ansible-openwisp2) and [docker-openwisp](https://github.com/openwisp/docker-openwisp/)\n        \n    *   The requests to Elasticsearch shall be optimized as described in [\\[timeseries\\] Optimize elasticsearch #168](https://github.com/openwisp/openwisp-monitoring/issues/168).\n        \n*   [Add support for InfluxDB 2.0](https://github.com/openwisp/openwisp-monitoring/issues/274) as a new timeseries backend, this way we can support both `InfluxDB <= 1.8` and `InfluxDB >= 2.0`.\n    \n    *   All the automated tests for **InfluxDB 1.8** must be replicated and must pass\n        \n    *   The usage and setup shall be documented\n        \n    *   We must make sure there's at least one dedicated CI build for Elasticsearch\n        \n    *   We must allow choosing between **InfluxDB 1.8** and **InfluxDB 2.0** from [ansible-openwisp2](https://github.com/openwisp/ansible-openwisp2) and [docker-openwisp](https://github.com/openwisp/docker-openwisp/).\n        \n\n### OpenWISP VPN Deployer Linux Package[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#openwisp-vpn-deployer-linux-package \"Link to this heading\")\n\n![Image 8: ../_images/vpn-sync.webp](https://openwisp.io/docs/dev/_images/vpn-sync.webp)\n\nImportant\n\nLanguages and technologies used: **Linux**, **Python**, **Django**, **WebSockets**, **OpenVPN**, **WireGuard**, **WireGuard over VXLAN**, **ZeroTier**.\n\n**Mentors:** _Federico Capoano_, _Gagan Deep_, _Oliver Kraitschy_.\n\n**Project size:** 350 hours.\n\n**Difficulty level:** medium/hard.\n\nThis GSoC project aims to simplify the deployment and management of VPN servers integrated with OpenWISP.\n\nThe goal is to develop an easy-to-install program that automates the deployment of VPN servers synchronized with OpenWISP in real time. This reduces manual intervention and ensures configuration consistency between the VPN server objects in the OpenWISP database and the deployed VPN instances.\n\n#### Key Features[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#key-features \"Link to this heading\")\n\nThe program will run on Linux-based servers and will:\n\n*   Be implemented in **Python** to ensure maintainability and extensibility.\n    \n*   Use a **Makefile** to generate installation packages for major Linux distributions:\n    \n    *   **DEB** (for Debian, Ubuntu, and related distributions)\n        \n    *   **RPM** (for Red Hat, Fedora, and similar systems)\n        \n    *   **Snap** (for broader Linux compatibility)\n        \n*   Establish a **WebSocket connection** with OpenWISP to listen for changes in VPN server configurations and synchronize local settings accordingly.\n    \n*   Keep the local list of peers and the **certificate revocation list (CRL)** updated whenever VPN clients are added, removed, or modified.\n    \n*   Support the following VPN tunneling technologies:\n    \n    *   **OpenVPN**\n        \n    *   **WireGuard**\n        \n    *   **WireGuard over VXLAN**\n        \n    *   **ZeroTier**\n        \n*   Provide a **command-line utility** to simplify the initial setup. This utility will:\n    \n    *   Guide users step by step, making it accessible even to those with limited experience.\n        \n    *   Allow users to select the VPN technology to be deployed.\n        \n    *   Verify that the necessary system packages are installed and provide clear warnings if dependencies are missing.\n        \n    *   Assist in securely connecting and synchronizing with OpenWISP.\n        \n        Note\n        \n        The command-line utility must apply all necessary changes in the OpenWISP database via the **REST API**. If any required modifications cannot be performed with the current API, the contributor will be responsible for implementing the missing functionality.\n        \n        *   To facilitate authentication, the utility will [guide users in retrieving their OpenWISP REST API token](https://github.com/openwisp/openwisp-users/issues/240). A proposed approach is to provide a link to the OpenWISP admin interface, where users can generate and copy their API token easily.\n            \n*   Support running **multiple instances**, where each instance manages a separate VPN server independently.\n    \n*   Implement **structured logging** with dedicated log files for each instance, adhering to Linux logging best practices and supporting log rotation.\n    \n*   Provide **comprehensive documentation** in ReStructuredText format, following OpenWISP conventions:\n    \n    *   Documentation will be stored in a `/docs` directory, with a clear separation between user guides and developer documentation.\n        \n    *   A **video demonstration** will be included, which can be published on YouTube to increase project visibility.\n        \n*   Update the **OpenWISP documentation** to cover installation, configuration, and best practices.\n    \n*   To support this project, **OpenWISP Controller** will need to be updated to expose a **WebSocket endpoint**. This will allow the VPN synchronization program to receive real-time configuration updates.\n    \n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id15 \"Link to this heading\")\n\nApplicants should have a solid understanding of:\n\n*   **Python** and **Django**.\n    \n*   **WebSockets**.\n    \n*   At least one of the supported VPN technologies (**OpenVPN, WireGuard, WireGuard over VXLAN, ZeroTier**).\n    \n*   **System administration and Linux packaging** (preferred but not required).\n    \n\n#### Expected Outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id16 \"Link to this heading\")\n\n*   A Python-based VPN synchronization tool.\n    \n*   A command-line setup utility for easy first-time configuration.\n    \n*   WebSocket-based synchronization between VPN servers and OpenWISP.\n    \n*   Automated packaging for major Linux distributions.\n    \n*   Structured logging with proper log rotation.\n    \n*   Enhancements to **OpenWISP Controller** to support WebSocket-based synchronization and any required REST API modifications.\n    \n*   Automated tests to ensure reliability and stability.\n    \n*   Comprehensive **documentation**, including setup guides and best practices.\n    \n*   A **short tutorial video** demonstrating installation and usage.\n    \n\n### Enhancing Uspot Captive Portal for OpenWrt[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#enhancing-uspot-captive-portal-for-openwrt \"Link to this heading\")\n\n![Image 9: ../_images/uspot.png](https://openwisp.io/docs/dev/_images/uspot.png)\n\nImportant\n\nLanguages and technologies used: [ucode](https://ucode.mein.io/), **C**, **OpenWrt**, **RADIUS**.\n\n**Mentors**: _Federico Capoano_, _Sankalp_.\n\n**Project size**: 350 hours.\n\n**Difficulty rate**: hard.\n\nThis GSoC project aims to improve **Uspot**, a relatively new captive portal for OpenWrt, by implementing critical missing features that are essential for large-scale deployments. **Uspot** is a promising replacement for **CoovaChilli**, which is no longer actively developed and only receives occasional maintenance patches. However, **Uspot** lacks several important capabilities that **CoovaChilli** provides. This project will focus on adding the most critical missing features to ensure Uspot can be a viable alternative.\n\n#### Feature list[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#feature-list \"Link to this heading\")\n\n**1\\. Traffic Reporting for RADIUS Accounting Interim-Updates**\n\n*   Implement RADIUS accounting interim-update support.\n    \n*   Add an option to swap input and output traffic counters (similar to CoovaChilli's `swapoctets` option).\n    \n\n**2\\. No-Challenge Authentication Mode**\n\n*   Implement a **nochallenge** mode where passwords are sent in plain-text to RADIUS.\n    \n*   Justification: OpenWISP uses Django’s modern hashing algorithms, which are significantly stronger than those supported by RADIUS.\n    \n*   Security: This method is secure as long as communication between the captive portal and RADIUS is encrypted using VPNs or **RadSec**.\n    \n\n**3\\. Support for RadSec (RADIUS over TLS)**\n\n*   Ensure **RadSec** can be used to encrypt RADIUS packets.\n    \n*   Provide documentation on how to configure Uspot with **RadSec**.\n    \n\n**4\\. Bandwidth Limitation Features**\n\n*   **Static Configuration**: Applied to all users globally.\n    \n*   **Dynamic RADIUS-based Configuration**: Bandwidth limits based on RADIUS attributes (e.g., `WISPr-Bandwidth-Max-Down`, `WISPr-Bandwidth-Max-Up`), allowing differentiated speeds based on user type.\n    \n\nThese features are available bu not documented right now, so let's make sure they're properly documented.\n\n**5\\. Traffic Consumption Limits**\n\nImplement RADIUS attributes to limit total data consumption per user:\n\n*   `ChilliSpot-Max-Total-Octets`\n    \n*   `WISPr-Bandwidth-Max-Total`\n    \n*   `CoovaChilli-Max-Total-Gigawords` (important for limits above **4.29 GB**, overcoming 32-bit integer limitations).\n    \n\n**6\\. VLAN Tagging Support**\n\nAllow tagging user traffic with VLANs:\n\n*   **Global VLAN Configuration**: Apply a default VLAN tag to all users.\n    \n*   **RADIUS-based VLAN Assignment**: Dynamically assign VLANs based on RADIUS Access-Accept attributes, which allows to tag traffic with different VLANs based on rules defined at the application level.\n    \n\n#### Prerequisites to work on this project[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id17 \"Link to this heading\")\n\nApplicants must demonstrate a solid understanding of:\n\n*   [ucode](https://ucode.mein.io/) proficiency.\n    \n*   **C programming** (for modifying Uspot’s core functionality).\n    \n*   **Networking protocols**, including **RADIUS** and **VLANs**.\n    \n*   **OpenWrt development** (building and packaging OpenWrt software).\n    \n*   **Secure authentication mechanisms** (RadSec, HTTPS authentication).\n    \n*   **Linux network stack**, particularly how OpenWrt handles network interfaces and firewall rules.\n    \n\n#### Expected Outcomes[](https://openwisp.io/docs/dev/developer/gsoc-ideas-2025.html#id19 \"Link to this heading\")\n\n*   Implementation of the missing features in **Uspot**, getting closer to parity with key **CoovaChilli** functionalities.\n    \n*   Comprehensive testing and validation of each new feature.\n    \n*   Ensure all changes are merged upstream into the **Uspot** repository.\n    \n*   Update OpenWrt packages for the most recent **two** OpenWrt versions to include these enhancements.\n    \n*   Provide documentation on how to configure all the features mentioned in the project description.\n    \n*   Potential adoption of **Uspot** as a fully functional captive portal replacement for **CoovaChilli** in OpenWISP deployments by mentioning it in the documentation of OpenWISP.\n"}