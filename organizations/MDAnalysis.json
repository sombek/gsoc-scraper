{"name":"MDAnalysis","description":"Analysis of molecular simulations data with Python","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/mdanalysis","ideas_url":"https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas","logo":"https://summerofcode.withgoogle.com/media/org/mdanalysis/kf8rugznsqeskumi-360.png","technologies":["python","cython","c/c++"],"topics":["science","computational-chemistry","high-performance-computing","molecular-simulation","machine-learning"],"projects":[{"project_name":"Integrating MDAnalysis streaming analysis within WESTPA propagators","summary":"Integrate MDAnalysis with WESTPA for real-time analysis of streamed trajectory data, reducing I/O bottlenecks.","difficulty":"medium"},{"project_name":"Dashboard for tracking WESTPA simulation progress","summary":"Create a graphical user interface that utilizes MDAnalysis's streaming capabilities to report on the progress of WESTPA simulations.","difficulty":"easy"},{"project_name":"Lazy trajectory analysis with Dask and a Lazy Timeseries API","summary":"Develop a lazy reader interface for high performance in trajectory analysis, improving efficiency especially in high-throughput computing environments.","difficulty":"medium"},{"project_name":"Better interfacing of Blender and MDAnalysis","summary":"Enhance how Blender and Molecular Nodes interface with MDAnalysis, improving the scripting capabilities for importing and animating MD trajectories.","difficulty":"medium"},{"project_name":"HBond interactions from implicit hydrogens","summary":"Enhance ProLIF for hydrogen bond analysis using only heavy atom coordinates, facilitating machine learning applications without needing explicit hydrogens.","difficulty":"medium"},{"project_name":"Continuous (i.e., non-binary) interaction fingerprints (IFPs)","summary":"Revolutionize the interaction fingerprints approach to account for interactions outside of fixed thresholds using continuous encoding methods.","difficulty":"hard"},{"project_name":"Improving ProLIF's 2D interaction visualizations","summary":"Refine ProLIF’s LigNetwork plot and add additional 2D visualizations for more effective communication of interaction data.","difficulty":"medium"},{"project_name":"Benchmarking and performance optimization","summary":"Increase performance assessment coverage and optimize code for MDAnalysis through systematic benchmarking and analysis of performance bottlenecks.","difficulty":"easy/medium"},{"project_name":"Integrating OpenFolds’ structural prediction confidence metrics into the topology system","summary":"Expose structural prediction confidence metrics from OpenFold through the MDAnalysis topology system, making it easier to analyze predicted structures.","difficulty":"easy/medium"}],"jina_response":"Title: GSoC 2025 Project Ideas\n\nURL Source: https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas\n\nMarkdown Content:\n![Image 1: Google Summer of Code 2023](https://camo.githubusercontent.com/097b5b5add50592cd3a7327980105f1a0ee26f6b9070b16f93438fa3aecae427/68747470733a2f2f646576656c6f706572732e676f6f676c652e636f6d2f6f70656e2d736f757263652f67736f632f7265736f75726365732f646f776e6c6f6164732f47536f432d566572746963616c2e706e67)\n\n* * *\n\n* * *\n\nHello, and welcome to MDAnalysis!\n\nPlease see [our Google Summer of Code wiki page](https://github.com/MDAnalysis/mdanalysis/wiki/Google-Summer-Of-Code) for general information, including advice on application writing, and [our GSoC FAQ](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-FAQ) for commonly asked questions.\n\nIf you just found out about the MDAnalysis Python package from the GSoC website, you can watch the [MDAnalysis 2021 Trailer](https://www.youtube.com/watch?v=uMAfvwFkD3o) \\[YouTube\\] to get an overview of the scope of the MDAnalysis package.\n\n### Prerequisites\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#prerequisites)\n\nMDAnalysis is a Python library for the analysis of computer simulations of many-body systems at the molecular scale, spanning use cases from interactions of drugs with proteins to novel materials. For Google Summer of Code, [we are also collaborating](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#collaborations) with other organizations and software projects that use MDAnalysis. Our GSoC projects generally require a basic knowledge and hands-on experience in specific areas, so _for our suggested projects, please check carefully the project descriptions to see the associated desirable skills_. Broadly speaking, we found that applicants with experience in molecular dynamics (MD) simulations and the associated analyses -- or equivalent experience in simulations and modeling of molecular systems (physics, biophysics, chemistry, or materials) -- are very successful.\n\n### To Prospective Applicants\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#to-prospective-applicants)\n\nIf you are interested in taking part, please get in touch on the [GSoC with MDAnalysis Discussion Forum](https://github.com/MDAnalysis/mdanalysis/discussions/categories/gsoc-discussions). Given the GSoC program structure (small, medium, and large projects), letting us know of your intentions to apply and getting acquainted with the project early will be very helpful.\n\n### To Prospective Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#to-prospective-mentors)\n\nMDAnalysis welcomes new mentors; please get in touch on the [developer forum](https://github.com/MDAnalysis/mdanalysis/discussions/categories/development) if you are interested in taking part. We typically expect mentors to be familiar with our development process, as evidenced by contributions to the code base and interactions on the developer forum.\n\nOverview\n--------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#overview)\n\nSee below for a list of projects ideas for [Google Summer of Code 2025](https://github.com/MDAnalysis/mdanalysis/wiki/Google-Summer-Of-Code).\n\nThe currently proposed projects are:\n\n1.  Integrating MDAnalysis streaming analysis within WESTPA propagators\n2.  Dashboard for tracking WESTPA simulation progress\n3.  Lazy trajectory analysis with Dask and a Lazy Timeseries API\n4.  Better interfacing of Blender and MDAnalysis\n5.  HBond interactions from implicit hydrogens\n6.  Continuous (i.e., non-binary) Interaction Fingerprints (IFPs)\n7.  Improving ProLIF's 2D interaction visualizations\n8.  Benchmarking and performance optimization\n9.  Integrating OpenFolds’ structural prediction confidence metrics into the topology system\n\n**Or work on your own idea!** Get in contact with us to propose an idea and we will work with you to flesh it out into a full project. Contact us via the [GSoC with MDAnalysis Discussion Forum](https://github.com/MDAnalysis/mdanalysis/discussions/categories/gsoc-discussions) (or if your project is a specific feature you'd want to add, raise an issue in the [Issue Tracker](https://github.com/MDAnalysis/mdanalysis/issues).)\n\nLook at the [list of all available mentors for MDAnalysis](https://github.com/MDAnalysis/mdanalysis/wiki/Google-Summer-Of-Code#available-mentors) for potential mentors for your project. Please send all communications to the [discussion forum](https://github.com/MDAnalysis/mdanalysis/discussions/categories/gsoc-discussions) (and don't contact mentors privately). You can certainly ask for the opinion of a specific mentor if you know that their expertise is particularly suitable for your project.\n\nCollaborations\n--------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#collaborations)\n\n### WESTPA\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#westpa)\n\n[WESTPA](http://westpa.github.io/westpa) (The Weighted Ensemble Simulation Toolkit with Parallelization and Analysis) is a high-performance Python framework for applying the weighted ensemble (WE) path sampling strategy, which enables simulations of processes that are orders of magnitude longer than the simulations themselves. A WE simulation involves an iterative process: many MD simulations are executed in parallel and periodically evaluated to be replicated or terminated based on a set WE resampling criteria. To rigorously apply WE resampling, the MD simulations are analyzed during run time with tools such as MDAnalysis to determine the state of the simulated system.\n\nRead the [WE Overview](https://westpa.github.io/westpa/overview.html); [install the WESTPA package](https://github.com/westpa/westpa/wiki/Installing-WESTPA); and work through tutorials 7.1 and 7.5 of our [tutorials suite](https://github.com/westpa/tutorials) to start learning more about WESTPA.\n\n### Molecular Nodes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#molecular-nodes)\n\nBuilt as an add-on for the popular and industry-leading 3D software [Blender](https://www.blender.org/), [Molecular Nodes](https://bradyajohnston.github.io/MolecularNodes/)(MN) enables import and visualization of complex molecular datasets inside of Blender. Many formats are supported such as static structures, electron density maps, EM (electromagnetic) tomography data and importantly, molecular dynamics simulation trajectories, powered by MDAnalysis. Blender is primarily intended for use via a GUI by artists, but scripting via the python API is also possible, with many potential avenues for automated animation and rendering.\n\nA great overview of the project is the talk given at the [Blender Conference in 2022](https://www.youtube.com/watch?v=adhTmwYwOiA). The [MN documentation](https://bradyajohnston.github.io/MolecularNodes/) includes a lot of information about how to get started, including written and video tutorials, with one [specific to MD trajectory import](https://bradyajohnston.github.io/MolecularNodes/tutorials/03_molecular_dynamics.html). Workshop materials are also publicly available for an online [Introduction to MDAnalysis and Molecular Nodes workshop](https://github.com/MDAnalysis/MDAnalysisWorkshop-Intro0.5Day/tree/feb24-ws) held in February 2024, which includes an interactive tutorial for visualizing imported MDAnalysis data in Molecular Nodes.\n\nIt’s important to first familiarize yourself with using Blender and Molecular Nodes via a GUI and some of the quirks that go along with it, before trying to write code for it.\n\n### ProLIF\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#prolif)\n\n[ProLIF](https://github.com/chemosim-lab/ProLIF) was one of the first packages to be part of the MDAKit ecosystem. It’s a Python library designed to generate interaction fingerprints for any kind of molecular complex in MD trajectories, docking simulations, or experimental structures.\n\nAn interaction fingerprint encodes interactions between molecules as a bitvector. The interactions are detected by looking up atoms that match predefined molecular patterns (using SMARTS queries) and satisfy geometrical constraints (distance, angle, dihedral…).\n\nYou can find more details about the package in the original [publication](https://doi.org/10.1186/s13321-021-00548-6) (note that some details have changed since then), in the [MDAnalysis UGM 2023 presentation slides](https://github.com/MDAnalysis/UGM2023/blob/main/presentation_materials/bouysset_cedric/slides.pdf), or in the [tutorials](https://prolif.readthedocs.io/en/stable/source/tutorials.html).\n\n* * *\n\nProject summary\n---------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-summary)\n\nThe table summarizes the project ideas; long descriptions come after the table (or click on the links under each project name). The difficulty is a somewhat subjective ranking, where _easy_ means that we know pretty much what needs to be done, _medium_ requires some additional research into best solutions as part of the project, and _hard_ is high risk/high reward where we think a solution exists but we will have to work with the student to find it and implement it. The project size is either 90 h (small), 175 h (medium) or 350 h (large) projects.\n\n| project | name | difficulty | project size | description | skills | mentors |\n| --- | --- | --- | --- | --- | --- | --- |\n| 1 | [Integrating MDAnalysis streaming analysis within WESTPA propagators](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-1-integrating-mdanalysis-streaming-analysis-within-westpa-propagators) | medium | 175 hours | Integrate MDAnalysis with WESTPA to analyze streamed trajectory data | Python (multiprocessing), Networking (TCP/IP), MD Engines | [@jeremyleung521](https://github.com/jeremyleung521), [@ltchong](https://github.com/ltchong), [@fiona-naughton](https://github.com/fiona-naughton), [@orbeckst](https://github.com/orbeckst) |\n| 2 | [Dashboard for tracking WESTPA simulation progress](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-2-dashboard-for-tracking-westpa-simulation-progress) | easy | 90 hours | Create a graphical user interface to report MD trajectory progress | Python (frontend UI, multiprocessing), Networking (TCP/IP) | [@jeremyleung521](https://github.com/jeremyleung521), [@ltchong](https://github.com/ltchong), [@fiona-naughton](https://github.com/fiona-naughton), [@talagayev](https://github.com/talagayev) |\n| 3 | [Lazy trajectory analysis with Dask and a Lazy Timeseries API](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-3-lazy-trajectory-analysis-with-dask-and-a-lazy-timeseries-api) | medium | 175 hours | Build out a lazy reader and timestep interface | Dask or lazy computation paradigm, Object-oriented programming, Writing analysis code classes/scripts, Experience with a numpy-like-interface | [@ljwoods2](https://github.com/ljwoods2), [@orbeckst](https://github.com/orbeckst), [@yuxuanzhuang](https://github.com/yuxuanzhuang) |\n| 4 | [Better interfacing of Blender and MDAnalysis](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-4-better-interfacing-of-blender-and-mdanalysis) | medium | 350 hours | Improve how Blender and Molecular Nodes interface with MDAnalysis to import and animate MD trajectories | Python, MDAnalysis, Blender (and programming via its Python API) | [@yuxuanzhuang](https://github.com/yuxuanzhuang), [@bradyajohnston](https://github.com/bradyajohnston) |\n| 5 | [HBond interactions from implicit hydrogens](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-5-hbond-interactions-from-implicit-hydrogens) | medium | 175/350 hours | Make interaction fingerprints analysis with ProLIF (an MDAKit) more accessible and faster to run | Python, RDKit, SMARTS, compchem | [@cbouy](https://github.com/cbouy), [@talagayev](https://github.com/talagayev) |\n| 6 | [Continuous (i.e., non-binary) interaction fingerprints (IFPs)](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-6-continuous-ie-non-binary-interaction-fingerprints-ifps) | hard | 350 hours | Define thresholds for interactions and implement continuous encoding for interactions | Python, RDKit, compchem | [@cbouy](https://github.com/cbouy), [@talagayev](https://github.com/talagayev) |\n| 7 | [Improving ProLIF's 2D interaction visualizations](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-7-improving-prolifs-2d-interaction-visualizations) | medium | 90/175 hours | Improve ProLIF's \"LigNetwork\" plot and add 2D visualizations to summarize information in IFPs | Python, JavaScript | [@cbouy](https://github.com/cbouy), [@talagayev](https://github.com/talagayev) |\n| 8 | [Benchmarking and performance optimization](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-8-benchmarking-and-performance-optimization) | easy/medium | 175/350 hours | Write benchmarks for automated performance analysis and address performance bottlenecks | Python/ASV, Cython | [@orbeckst](https://github.com/orbeckst), [@ljwoods2](https://github.com/ljwoods2) |\n| 9 | [Integrating OpenFolds’ structural prediction confidence metrics into the topology system](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-9-integrating-openfolds-structural-prediction-confidence-metrics-into-the-topology-system) | easy/medium | 90 hours | Expose the predicted local distance difference test metric (pLDDT) via the MDAnalysis topology system | OpenFold or structural prediction tools more generally, Python, Solving parsing problems | [@ljwoods2](https://github.com/ljwoods2), [@orbeckst](https://github.com/orbeckst) |\n\nProject 1: Integrating MDAnalysis streaming analysis within WESTPA propagators\n------------------------------------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-1-integrating-mdanalysis-streaming-analysis-within-westpa-propagators)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary)\n\nThis project aims to integrate MDAnalysis with [WESTPA](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#westpa) to exploit MDAnalysis’s ability to analyze streamed trajectory data generated by WESTPA. This integration will reduce I/O bottlenecks and minimize the runtime needed to analyze a WESTPA simulation before intermittent restarting of the short, completed MD simulations.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description)\n\nMDAnalysis is currently an option for extracting and analyzing simulation data for [WESTPA](https://westpa.github.io/westpa/) simulations. This project aims to expand those capabilities by integrating [streaming](https://www.mdanalysis.org/2024/11/03/ASU_streaming_workshop/) directly into WESTPA’s [propagator](https://github.com/westpa/westpa/blob/westpa2/src/westpa/core/propagators/executable.py) [executables](https://github.com/westpa/westpa/wiki/Propagators) and [work managers](https://github.com/westpa/westpa/wiki/Work-Managers-and-Running-with-MPI) for analysis, reducing the need for users to configure the networking. This will include stress testing MDAnalysis’s streaming capabilities, as analysis might involve using networking configurations such as streaming data from many-nodes-to-many-nodes and many-nodes-to-one-nodes.\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes)\n\n1.  Stress-testing MDAnalysis streaming\n2.  Additional propagator executables for integrating MDAnalysis streaming within WESTPA\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills)\n\n*   Python (multiprocessing)\n*   Networking (TCP/IP)\n*   MD Engines\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc)\n\n*   [https://github.com/jeremyleung521/westpa/pull/28](https://github.com/jeremyleung521/westpa/pull/28)\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors)\n\n*   [@jeremyleung521](https://github.com/jeremyleung521)\n*   [@ltchong](https://github.com/ltchong)\n*   [@fiona-naughton](https://github.com/fiona-naughton)\n*   [@orbeckst](https://github.com/orbeckst)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project)\n\nLarge (175 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating)\n\nMedium\n\nProject 2: Dashboard for tracking WESTPA simulation progress\n------------------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-2-dashboard-for-tracking-westpa-simulation-progress)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-1)\n\n[WESTPA](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#westpa) simulations involve running multiple MD trajectories in parallel, which makes it hard to track progress. This project aims to create a graphical user interface that exploits MDAnalysis’s streaming ability and WESTPA’s work managers to monitor the progress of a WESTPA simulation.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-1)\n\nWhile [WESTPA](https://westpa.github.io/westpa) simulations [report status](https://github.com/westpa/westpa/blob/32bf2ca0d710f55c38e60d7f35b63d653ab01c92/src/westpa/core/sim_manager.py#L179) at regular intervals, these iterations could last minutes to hours, leaving users unsure of the intermediate progress or time estimate. The task here will involve creating a graphical user interface reporting trajectory progress and completion time estimates through MDAnalysis’s streaming abilities and extracting relevant information from WESTPA’s [work managers](https://github.com/westpa/westpa/wiki/Work-Managers-and-Running-with-MPI) ([ZMQ](https://github.com/westpa/westpa/blob/westpa2/src/westpa/work_managers/zeromq/core.py), python [multiprocessing](https://github.com/westpa/westpa/tree/westpa2/src/westpa/work_managers)) and [data managers](https://github.com/westpa/westpa/blob/westpa2/src/westpa/core/data_manager.py).\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-1)\n\n1.  New CLI tool for WESTPA tracking simulation progress\n2.  MDAnalysis module for aggregating/tracking multiple simulations\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-1)\n\n*   Python (frontend UI, multiprocessing)\n*   Networking (TCP/IP)\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-1)\n\nNot applicable\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-1)\n\n*   [@jeremyleung521](https://github.com/jeremyleung521)\n*   [@ltchong](https://github.com/ltchong)\n*   [@fiona-naughton](https://github.com/fiona-naughton)\n*   [@talagayev](https://github.com/talagayev)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-1)\n\nSmall (90 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-1)\n\nEasy\n\nProject 3: Lazy trajectory analysis with Dask and a Lazy Timeseries API\n-----------------------------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-3-lazy-trajectory-analysis-with-dask-and-a-lazy-timeseries-api)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-2)\n\nThis project aims to improve MDAnalysis’s viability in high-performance clusters and high-throughput environments by building out a lazy (rather than eager) reader and timestep interface along with a sample H5MD implementation and basic analysis classes.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-2)\n\nMDAnalysis’s core data structure for holding trajectory data, the timestep, is extremely useful for providing a highly uniform interface for various readers, however, its eager approach to memory management, where trajectory frames are loaded into the object one step at a time, constrains analysis speed compared to the increasingly popular lazily-loaded paradigm used in recent packages like [Dask](https://www.dask.org/) and [Polars](https://pola.rs/). In HPC or cloud computing environments where minimizing analysis time is a necessity for making MDAnalysis viable at scale, having a lazy interface for new readers to target and existing ones to adapt to along with a sample implementation with H5MD and basic analysis classes that build on it would provide immediate benefits for HPC MDAnalysis users and a future platform for ensuring MDAnalysis is a tool that can scale with its users’ projects.\n\nMDAnalysis already has a [`timeseries` API for readers](https://github.com/MDAnalysis/mdanalysis/blob/b79c77da31e50975c537d72a5c95cc77047f0a3e/package/MDAnalysis/coordinates/base.py#L992) which provides a natural starting place for a similar `lazy_timeseries` interface which would include an additional argument to select between coordinates, velocities, and forces. Existing readers can implement `lazy_timeseries` by first simply passing the `numpy.ndarray` result of calling `timeseries` into a Dask array, but certain readers like the [`H5MDReader`](https://github.com/MDAnalysis/mdanalysis/blob/b79c77da31e50975c537d72a5c95cc77047f0a3e/package/MDAnalysis/coordinates/H5MD.py) or [`ZarrH5MDReader`](https://github.com/Becksteinlab/zarrtraj) can receive a proper lazy implementation.\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-2)\n\n1.  MDAKit with lazy reader and timeseries interface code\n2.  A working H5MD implementation of the interface\n3.  A lazy timeseries analysis base\n4.  Implementation of at least one basic analysis algorithm using the interface (like RMSD)\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-2)\n\n*   Experience with dask or lazy computation paradigm\n*   Knowledge of object-oriented programming\n*   Experience writing analysis code classes/scripts\n*   Any experience with a numpy-like-interface is useful\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-2)\n\n*   [https://github.com/MDAnalysis/mdanalysis/issues/4713](https://github.com/MDAnalysis/mdanalysis/issues/4713)\n*   [https://github.com/MDAnalysis/mdanalysis/issues/4598](https://github.com/MDAnalysis/mdanalysis/issues/4598)\n*   [https://github.com/MDAnalysis/mdanalysis/issues/4561](https://github.com/MDAnalysis/mdanalysis/issues/4561)\n*   [https://github.com/MDAnalysis/mdanalysis/issues/2865](https://github.com/MDAnalysis/mdanalysis/issues/2865)\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-2)\n\n*   [@ljwoods2](https://github.com/ljwoods2)\n*   [@orbeckst](https://github.com/orbeckst)\n*   [@yuxuanzhuang](https://github.com/yuxuanzhuang)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-2)\n\nMedium (175 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-2)\n\nMedium\n\nProject 4: Better interfacing of Blender and MDAnalysis\n-------------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-4-better-interfacing-of-blender-and-mdanalysis)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-3)\n\nImprovements to how Blender and [Molecular Nodes](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#molecular-nodes) interface with MDAnalysis which powers the import and animation of MD trajectories inside of Blender. Simple import is currently available when using the GUI in Blender, but there is still a lot of potential for improvements in scriptability, automated rendering, and using Blender as an analysis tool for MD trajectories.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-3)\n\n[Blender](https://www.blender.org/) is industry-leading 3D modeling and animation software. Through the add-on [Molecular Nodes](https://bradyajohnston.github.io/MolecularNodes/), MDAnalysis universes are able to be imported into the 3D scene, enabling advanced rendering of molecular dynamics trajectories that is not possible inside of any other molecule viewer. The ability to script and automate this rendering is possible but limited with lots of room for improvement for visualizing many common MD datasets. Blender also provides a great platform for implementing a potential GUI, to enable interactive analysis of MD trajectories with stunning visuals, all powered by MDAnalysis under the hood.\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-3)\n\n1.  Prototype improved API for scripting and working with Molecular Nodes from [Jupyter](https://jupyter.org/) Notebooks or other similar environments\n2.  Prototyping common analysis and visualization tasks that could be performed from within Blender via the GUI\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-3)\n\n*   Proficiency with Python\n*   Working knowledge of MDAnalysis\n*   Familiarity with Blender and programming via its Python API\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-3)\n\n*   [https://github.com/MDAnalysis/mdanalysis/discussions/4862](https://github.com/MDAnalysis/mdanalysis/discussions/4862)\n*   [https://github.com/yuxuanzhuang/ggmolvis](https://github.com/yuxuanzhuang/ggmolvis)\n*   [https://github.com/yuxuanzhuang/ggmolvis/issues/11](https://github.com/yuxuanzhuang/ggmolvis/issues/11)\n*   [https://www.mdanalysis.org/2024/12/12/sdg\\_molecularnodes/](https://www.mdanalysis.org/2024/12/12/sdg_molecularnodes/)\n*   [https://github.com/BradyAJohnston/MolecularNodes/pull/719](https://github.com/BradyAJohnston/MolecularNodes/pull/719)\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-3)\n\n*   [@yuxuanzhuang](https://github.com/yuxuanzhuang)\n*   [@bradyajohnston](https://github.com/bradyajohnston)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-3)\n\nLarge (350 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-3)\n\nMedium\n\nProject 5: HBond interactions from implicit hydrogens\n-----------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-5-hbond-interactions-from-implicit-hydrogens)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-4)\n\nThis project makes interaction fingerprints analysis with [ProLIF (an MDAKit)](https://mdakits.mdanalysis.org/ProLIF.html) more accessible and faster to run from PDB files for machine-learning (ML) practitioner.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-4)\n\nInteraction fingerprints (IFPs) are a common strategy to filter docking poses that aren't able to recapitulate known interactions in molecular complexes, but their use require explicit hydrogens to model hydrogen bonds. While ML-based docking and cofolding tools have seen increased usage other the recent years, the files that these methods generate only contain heavy atoms. While it's possible to add hydrogens to a complex and optimize its hydrogen-bond network, this significantly slows down and ultimately hampers the use of IFPs to evaluate the quality of ML-based molecular complexes. By adding to ProLIF the ability to evaluate hydrogen bond interactions solely based on heavy atom positions (and with the assumptions that hydrogens are positioned ideally for such interactions), it would be possible to directly compare co-crystallized complexes (e.g., from the PDB) with ML-based poses without requiring the intermediate use of protonation tools (PDB2PQR, reduce...etc.).\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-4)\n\n1.  New set of hydrogen-bond interaction classes available using implicit hydrogens\n2.  Helper function to load PDBs with heavy atoms only and common non-standard residues (HSD, HSE, HID…etc.) appropriately\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-4)\n\n*   Python\n*   RDKit\n*   SMARTS\n*   Computational Chemistry\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-4)\n\nNot applicable\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-4)\n\n*   [@cbouy](https://github.com/cbouy)\n*   [@talagayev](https://github.com/talagayev)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-4)\n\nMedium/Large (175/350 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-4)\n\nMedium\n\nProject 6: Continuous (i.e., non-binary) interaction fingerprints (IFPs)\n------------------------------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-6-continuous-ie-non-binary-interaction-fingerprints-ifps)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-5)\n\nIFPs use cutoff values for defining the different expected distances and angles that interactions must follow, leading to cases slightly outside of these thresholds to not be detected at all. This project aims to bring an alternative (continuous) encoding for interactions in [ProLIF (an MDAKit)](https://mdakits.mdanalysis.org/ProLIF.html) so that such cases may still be accounted for in subsequent analysis.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-5)\n\nIFPs are inherently binary and based on distance and angles thresholds that can be hard to define robustly across the wide diversity of use cases. The idea here would be to define \"ideal\" and \"suboptimal\" thresholds for distances and angles, and for interacting atoms that satisfy the ideal thresholds encode them as 1 (as would be with a \"traditional\" IFPs), for those that don't satisfy the suboptimal thresholds encode them as 0, and for anything in between encode them through a sigmoid function that outputs a real value between 0 and 1. This would allow to deal more gracefully with cases that follow non-ideal geometries for interacting atoms. Note that the sigmoid function that transforms the input distances and angles into a real value will have to be determined during the project.\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-5)\n\n1.  The interaction classes have the ability to specify multiple thresholds for distances and angles, and additional metadata is returned when these classes are used to detect interactions\n2.  The conversion of the resulting IFPs to a pandas DataFrame outputs continuous values between 0 and 1 instead of being binary\n3.  From a user perspective, they should only have to toggle on a new parameter in the Fingerprint object initialization to enable this analysis\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-5)\n\n*   Python\n*   RDKit\n*   Computational Chemistry\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-5)\n\nNot applicable\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-5)\n\n*   [@cbouy](https://github.com/cbouy)\n*   [@talagayev](https://github.com/talagayev)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-5)\n\nLarge (350 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-5)\n\nHard\n\nProject 7: Improving ProLIF's 2D interaction visualizations\n-----------------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-7-improving-prolifs-2d-interaction-visualizations)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-6)\n\nThis project involves improvements to the current “LigNetwork” plot produced by [ProLIF](https://mdakits.mdanalysis.org/ProLIF.html) to make it easier to use and more publication-ready, and leaves some room to add other 2D visualizations that can help summarize the information contained in interaction fingerprints.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-6)\n\nWhen creating a \"LigNetwork\" plot with ProLIF, the protein residues are placed randomly and left for the user to drag and drop to make the figure readable. It would be beneficial to automate the placement of residues on the plot in a way that minimizes the overlap between residues and the ligand, and minimizes crossing between interaction edges.\n\nDepending on the size of the project, additional visualizations could be added, such as: a \"heatmap\" of ligand atoms involved in different interactions by highlighting such atoms with a bivariate Gaussian distribution based on an atomic interaction-aware weighting (see [doi.org/10.1186/1758-2946-5-43](http://doi.org/10.1186/1758-2946-5-43) for reference). Another one could be to generate a figure similar to the LigNetwork with [InteractionDrawer](https://github.com/rareylab/InteractionDrawer), converting the ProLIF metadata to follow their JSON schema. For protein-protein systems and residue network analysis, [Flareplot](https://github.com/GPCRviz/flareplot) would be very beneficial.\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-6)\n\n1.  The placement of residues on the LigNetwork plot is made to be readable out of the box\n2.  If time allows, additional kinds of plots are added to further improve ProLIF’s visualization capabilities\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-6)\n\n*   Python\n*   JavaScript\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-6)\n\nNot applicable\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-6)\n\n*   [@cbouy](https://github.com/cbouy)\n*   [@talagayev](https://github.com/talagayev)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-6)\n\nSmall/Medium (90/175 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-6)\n\nMedium\n\nProject 8: Benchmarking and performance optimization\n----------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-8-benchmarking-and-performance-optimization)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-7)\n\nThe goal of this project is to increase the performance assessment coverage (using the existing ASV framework), identify code that should be improved, and optimize code.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-7)\n\nThe [MDAnalysis Roadmap](https://www.mdanalysis.org/2023/10/25/towards_3.0/) emphasizes performance improvement. The performance of the MDAnalysis library is assessed by automated nightly benchmarks with [ASV](https://asv.readthedocs.io/en/latest/) (see [https://github.com/MDAnalysis/benchmarks/wiki](https://github.com/MDAnalysis/benchmarks/wiki)) but coverage of the code base is low. The goal of this project is to substantially increase the performance assessment coverage, identify code that should be improved, and possibly implement performance optimizations.\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-7)\n\n1.  Write ASV benchmark cases for all major functionality in the core library\n2.  Write ASV benchmark cases for often-used analysis tools\n3.  Analyze performance history and generate a priority list of code that should be improved\n4.  Document writing benchmarks with a short tutorial\n5.  _Optional_: Optimize performance for at least one discovered performance bottleneck\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-7)\n\n*   Python/ASV\n*   Cython\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-7)\n\n*   [https://github.com/MDAnalysis/mdanalysis/issues/1023](https://github.com/MDAnalysis/mdanalysis/issues/1023)\n*   [https://github.com/MDAnalysis/mdanalysis/issues/1721](https://github.com/MDAnalysis/mdanalysis/issues/1721)\n*   [https://github.com/MDAnalysis/mdanalysis/issues/4577](https://github.com/MDAnalysis/mdanalysis/issues/4577)\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-7)\n\n*   [@orbeckst](https://github.com/orbeckst)\n*   [@ljwoods2](https://github.com/ljwoods2)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-7)\n\nMedium/Large (175/350 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-7)\n\nEasy/Medium\n\nProject 9: Integrating OpenFolds’ structural prediction confidence metrics into the topology system\n---------------------------------------------------------------------------------------------------\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#project-9-integrating-openfolds-structural-prediction-confidence-metrics-into-the-topology-system)\n\n### Summary\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#summary-8)\n\nThe goal of this project is to expose per-molecule and inter-molecular structural prediction confidence metrics to users via the MDAnalysis topology system.\n\n### Detailed Description\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#detailed-description-8)\n\nStructural prediction tools like [OpenFold](https://github.com/aqlaboratory/openfold) are increasingly important for in-silico estimations of protein structure and of binding probability between molecules. However, working with the raw output of prediction tools is challenging and often requires bespoke tools made by researchers prone to inefficiency and errors. MDAnalysis’s topology system provides a robust, natural interface for working with per-residue (like pLDDT) and between-residue/chain metrics (like a contact probabilities matrix). This project seeks to build the foundation for working with structural prediction confidence metrics in MDAnalysis.\n\nAfter this project is complete, users will be able to access [confidence metrics](https://github.com/google-deepmind/alphafold3/blob/main/docs/output.md) via Numpy arrays associated with (or between) each [`AtomGroup`](https://userguide.mdanalysis.org/stable/atomgroup.html) in a way that is consistent with current [MDA atom selection](https://userguide.mdanalysis.org/stable/selections.html)\n\n### Expected Outcomes\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-outcomes-8)\n\n1.  Modifications of the PDBParser to associate confidence metrics with and between each `AtomGroup`\n\n### Relevant Skills\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#relevant-skills-8)\n\n*   OpenFold experience or structural prediction tools more generally\n*   Python\n*   Experience solving parsing problems\n\n### Related issues/PRs/etc.:\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#related-issuesprsetc-8)\n\n*   [https://github.com/MDAnalysis/mdanalysis/issues/4134](https://github.com/MDAnalysis/mdanalysis/issues/4134)\n\n### Possible Mentors\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#possible-mentors-8)\n\n*   [@ljwoods2](https://github.com/ljwoods2)\n*   [@orbeckst](https://github.com/orbeckst)\n\n### Expected Size of Project\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#expected-size-of-project-8)\n\nSmall (90 hours)\n\n### Difficulty Rating\n\n[](https://github.com/MDAnalysis/mdanalysis/wiki/GSoC-2025-Project-Ideas#difficulty-rating-8)\n\nEasy/Medium\n"}