{"name":"Haskell.org","description":"Purely functional programming language","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/haskellorg","ideas_url":"https://summer.haskell.org/ideas.html","logo":"https://summerofcode.withgoogle.com/media/org/haskellorg/ivy7hfguqhoz8onp-360.png","technologies":["haskell","ghc"],"topics":["compilers","programming languages","functional programming","programming tools"],"projects":[{"project_name":"CodeWorld GHC Update","summary":"Updating the CodeWorld educational platform to use modern GHC backends such as JavaScript or WebAssembly, replacing the outdated GHCJS system.","difficulty":"Medium"},{"project_name":"Qualified aliases in Liquid Haskell","summary":"Enhancing Liquid Haskell to allow qualified references to type and predicate aliases, improving name resolution and specification clarity.","difficulty":"Medium"}],"jina_response":"Title: Summer of Haskell - ideas\n\nURL Source: https://summer.haskell.org/ideas.html\n\nMarkdown Content:\nGSoC 2025 Ideas\n---------------\n\nThis is a list of ideas for contributors who are considering to apply to Google Summer of Code 2025 for _Haskell.org_\n\nFor project maintainers\n-----------------------\n\nAre you working on a Haskell project and you could use the help of a contributor during the summer? Consider adding it as an idea here! You can contribute ideas by sending a pull request to our [github repository](https://github.com/haskell-org/summer-of-haskell) ([example from 2024](https://github.com/haskell-org/summer-of-haskell/commit/63f360ed17cb1a1c1aeee9a14804b337e5169d14)). If you just want to discuss a possible idea, [please contact us](https://summer.haskell.org/contact.html).\n\nWhat is a good idea? **Anything that improves the Haskell ecosystem is valid**. The GSoC rules state that it must involve writing code primarily (as opposed to docs).\n\nProjects should be **concrete and small enough in scope** such that they can be finished by the contributor. Past experience has shown that keeping projects ‚Äúsmall‚Äù is almost always a good idea.\n\n**Important changes since 2021/2022**: In the past, GSoC projects were expected to take up the equivalent of full time employment for a student. In 2021, this was reduced to half time positions: students were expected to work around 175 hours in a 10 week period. Since 2022, contributors now have the choice between a larger (around 350 hours) or a smaller project. Ideas should indicate in which category they fall.\n\nProjects should benefit as many people as possible ‚Äì e.g. an improvement to GHC will benefit more people than an update to a specific library or tool, but both are acceptable. New libraries and applications written in Haskell, rather than improvements to existing ones, are also welcome.\n\nFor students/contributors\n-------------------------\n\n[We have added some tips on writing a proposal here](https://summer.haskell.org/tips.html). Please be aware that:\n\n*   This is not an all-inclusive list, so you can apply for projects not in this list and we will try our best to match you with a mentor.\n*   You can apply for up to two ideas (but only one can be accepted).\n\nTable of Contents\n-----------------\n\n1.  [CodeWorld GHC Update](https://summer.haskell.org/ideas.html#codeworld-update)\n2.  [Qualified aliases in Liquid Haskell](https://summer.haskell.org/ideas.html#lh-aliases)\n\nCodeWorld GHC Update[üîó](https://summer.haskell.org/ideas.html#codeworld-update)\n--------------------------------------------------------------------------------\n\n[CodeWorld](https://github.com/google/codeworld/) is a web-based educational environment for learning computer science using Haskell. It is based on GHCJS, an old project to compile Haskell to JavaScript with a modified GHC compiler.\n\nGHCJS is no longer a good choice, as it is difficult to keep up to date with the latest GHC versions. However, modern versions of GHC have built-in backends for both JavaScript and WebAssembly, which are more reliable and easier to maintain, and kept up to date as part of the main line of GHC development. This project would involve updating CodeWorld to use one of the new GHC backends for JavaScript or WebAssembly.\n\nThis would involve updating the build system, and making any necessary changes to the CodeWorld runtime to work with the new backends.\n\nThe scope of the project can be adjusted based on the desired time frame and experience of the mentee. Some questions include:\n\n*   Is the goal to get a proof of concept, or a deployable replacement?\n*   Will the rule-based requirements checker also be updated to newer GHC versions?\n    *   This requires updating the GHC API usage.\n    *   This feature is, to my knowledge, not currently used by anyone.\n*   Will the educational dialect be updated?\n    *   If so, how do we handle unconstrained universal equality? Note that this likely requires development of a non-trivial GHC plugin.\n    *   If not, how do we deploy both versions simultaneously (if a deployable replacement is the goal)?\n*   What additional improvements are enabled by newer GHC versions and the new backends?\n\n**Mentorship**\n\n*   Chris Smith (cdsmith)\n*   Ideally, a second mentor with experience in one or both of GHC JS/WASM backends\n\n**Difficulty and size**\n\nThe difficulty of this project is medium, as there are significant infrastructure and build system challenges to address. Depending on choices made, this may become hard.\n\nThe minimum size of this project is 175 hours, but there is likely more work depending on the mentee‚Äôs desired scope and ideas.\n\nQualified aliases in Liquid Haskell[üîó](https://summer.haskell.org/ideas.html#lh-aliases)\n-----------------------------------------------------------------------------------------\n\n#### Goals\n\nUpdate the implementation of [Liquid Haskell](https://ucsd-progsys.github.io/liquidhaskell/) to allow referring to [type](https://ucsd-progsys.github.io/liquidhaskell/specifications/#type-aliases) and [predicate](https://ucsd-progsys.github.io/liquidhaskell/specifications/#predicate-aliases) aliases in qualified form.\n\n#### Background\n\nLiquid Haskell is a verification tool for Haskell programs. The programmer writes specifications for these programs, and Liquid Haskell checks if the programs actually meet the specifications.\n\nRecently, the Liquid Haskell implementation went through [a refactoring](https://github.com/ucsd-progsys/liquidhaskell/issues/2961) to improve name resolution. Much of the names in the specification language can be qualified now, in order to dissambiguate equal names that come from different modules. There is an exception though, when it comes to type and predicate aliases. For technical reasons, this constructs have been left behind in the refactoring.\n\nAs the reference documentation explains, type aliases can be used to shorten specifications. Instead of writing a spec like:\n\n```\n{-@ length :: [a] -> {v:Int | v >= 0} @-}\n```\n\none can write\n\n```\n{-@ type INat = {v:Int | v >= 0} @-}\n{-@ length :: [a] -> INat @-}\n```\n\nUnfortunately, if there are multiple `INat` aliases in scope, Liquid Haskell does not allow to qualify the name to disambiguate. For instance, the following specification is rejected with a message that says that `SomeImport.INat` is not in scope.\n\n```\n{-@ length :: [a] -> SomeImport.INat @-}\n```\n\nThis project is to analyze the implementation and to design and implement a solution both for type and predicate aliases. There is a [corresponding issue](https://github.com/ucsd-progsys/liquidhaskell/issues/2481) in the Liquid Haskell repo.\n\n#### Outcomes\n\nThe main outcomes are a pull request with the implementation, tests, and code documentation, and a discussion of the analysis and the design in the corresponding issue.\n\nA secondary outcome is a blogpost describing the experience and the results of the project.\n\n#### Size\n\nProject size should be near 175 hours. The project will require a fair amount of reading of existing Haskell code, and building an understanding of how it works. Familiarity with the verification mechanisms is not necessary a priori, though some user-level understanding of Liquid Haskell is going to be needed to write tests.\n\n#### Required Skills\n\n*   Read and write technical English\n*   Haskell programming basics\n\n#### Project Mentor\n\n*   Facundo Dom√≠nguez, Tweag engineer and comaintainer of Liquid Haskell\n"}