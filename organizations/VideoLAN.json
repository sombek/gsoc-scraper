{"name":"VideoLAN","description":"Open Source Multimedia for everyone!","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/videolan","ideas_url":"https://wiki.videolan.org/SoC_2025/","logo":"https://summerofcode.withgoogle.com/media/org/videolan/9h28hsncvrt01voz-360.png","technologies":["c","c++","qt","assembly","video"],"topics":["audio","streaming","video","codecs","media database"],"projects":[{"project_name":"Introduction & Information","summary":"An overview of the VideoLAN program for Google Summer of Code 2025, highlighting its initiatives to improve VLC, libVLC, and dav1d, along with the open-source nature of these projects.","difficulty":"Medium"},{"project_name":"Summer of Code","summary":"Information about the Google Summer of Code program, where participants can work on open source projects while receiving financial support from Google, with VideoLAN as a mentoring organization since 2007.","difficulty":"Medium"},{"project_name":"How to Start","summary":"Guidelines for potential applicants on how to begin the project, including finding an idea, submitting it, compiling VLC or libVLC, and getting in touch with mentors and the community.","difficulty":"Easy"},{"project_name":"Ideas for VLC & libVLC","summary":"A collection of project proposals aimed at enhancing VLC and libVLC functionalities, ranging from audio filter improvements to user interface redesigns.","difficulty":"Varied"},{"project_name":"Improve Android MediaCodec support","summary":"Fix bugs and enhance the downloading of MediaCodec surfaces to the CPU for better video playback performance on Android devices.","difficulty":"Medium"},{"project_name":"VLC Qt interface redesign","summary":"Revamp the outdated VLC interface on Windows and Linux to be more user-friendly and visually appealing using QML.","difficulty":"Medium"},{"project_name":"VLC watchOS port","summary":"Create a standalone VLC app for watchOS capable of local audio playback and syncing with iPhone, utilizing SwiftUI for development.","difficulty":"Medium"},{"project_name":"Cloud integration for desktop","summary":"Develop features to access cloud storage services (e.g., Dropbox, Google Drive) directly within the VLC application.","difficulty":"Medium"},{"project_name":"Ideas for dav1d","summary":"Project concepts focused on enhancing the performance of the dav1d AV1 decoder, including hardware optimizations and improved metadata extraction capabilities.","difficulty":"Varied"},{"project_name":"libplacebo improvements","summary":"Enhancements to the libplacebo library including Direct3D 11 backend support and implementation of HDR color spaces associated with Dolby Vision.","difficulty":"Varied"},{"project_name":"Improve the VideoLAN crash reporter in Go and Vue.js","summary":"Refine the VLC crash reporting tool by enhancing its API and creating a new frontend using Vue.js.","difficulty":"Medium"},{"project_name":"Improve libNDI and integrate in VLC","summary":"Expand the capabilities of the libNDI protocol to support more formats and enhance VLC's streaming capabilities.","difficulty":"Medium"},{"project_name":"Implement DVD-Audio deciphering","summary":"Create VLC support for decoding DVD-Audio formats using specific library tools, improving the multimedia capabilities of VLC.","difficulty":"Medium"},{"project_name":"Other short ideas for VLC & libVLC","summary":"Additional minor project ideas aimed at further enriching the VLC experience, though not elaborated in detail.","difficulty":"Easy"}],"jina_response":"Title: SoC 2025 - VideoLAN Wiki\n\nURL Source: https://wiki.videolan.org/SoC_2025/\n\nMarkdown Content:\n![Image 1: gsoc2016-sun-373x373.png](https://developers.google.com/open-source/gsoc/images/gsoc2016-sun-373x373.png)This page gives the current list of ideas for VideoLAN project, for the [Google Summer Of Code 2025](https://summerofcode.withgoogle.com/) program.\n\nThe list is long, but it is not exhaustive, and not limitative. Feel free to apply with **your own idea!**, we love original ideas and value them.\n\nContents\n--------\n\n*   [1 Introduction & Information](https://wiki.videolan.org/SoC_2025/#Introduction_.26_Information)\n    *   [1.1 Summer of Code](https://wiki.videolan.org/SoC_2025/#Summer_of_Code)\n    *   [1.2 VLC & libVLC](https://wiki.videolan.org/SoC_2025/#VLC_.26_libVLC)\n    *   [1.3 dav1d](https://wiki.videolan.org/SoC_2025/#dav1d)\n    *   [1.4 Summer of Code rules](https://wiki.videolan.org/SoC_2025/#Summer_of_Code_rules)\n*   [2 How to Start](https://wiki.videolan.org/SoC_2025/#How_to_Start)\n    *   [2.1 Find an idea](https://wiki.videolan.org/SoC_2025/#Find_an_idea)\n    *   [2.2 Submit your idea](https://wiki.videolan.org/SoC_2025/#Submit_your_idea)\n    *   [2.3 Compile VLC or libVLC](https://wiki.videolan.org/SoC_2025/#Compile_VLC_or_libVLC)\n    *   [2.4 Provide a small patch](https://wiki.videolan.org/SoC_2025/#Provide_a_small_patch)\n    *   [2.5 Let's get in touch](https://wiki.videolan.org/SoC_2025/#Let.27s_get_in_touch)\n*   [3 Ideas for VLC & libVLC](https://wiki.videolan.org/SoC_2025/#Ideas_for_VLC_.26_libVLC)\n    *   [3.1 Advanced Audio Filters](https://wiki.videolan.org/SoC_2025/#Advanced_Audio_Filters)\n    *   [3.2 VLC Qt interface redesign](https://wiki.videolan.org/SoC_2025/#VLC_Qt_interface_redesign)\n    *   [3.3 VLC Skins2 interface update](https://wiki.videolan.org/SoC_2025/#VLC_Skins2_interface_update)\n    *   [3.4 VLC macOS interface redesign](https://wiki.videolan.org/SoC_2025/#VLC_macOS_interface_redesign)\n    *   [3.5 VLC watchOS port](https://wiki.videolan.org/SoC_2025/#VLC_watchOS_port)\n    *   [3.6 iced ui for VLC](https://wiki.videolan.org/SoC_2025/#iced_ui_for_VLC)\n    *   [3.7 Improve Android MediaCodec support](https://wiki.videolan.org/SoC_2025/#Improve_Android_MediaCodec_support)\n    *   [3.8 Add back netsync module](https://wiki.videolan.org/SoC_2025/#Add_back_netsync_module)\n    *   [3.9 VLC iOS UI update](https://wiki.videolan.org/SoC_2025/#VLC_iOS_UI_update)\n    *   [3.10 Qt integration tests](https://wiki.videolan.org/SoC_2025/#Qt_integration_tests)\n    *   [3.11 Cloud integration for desktop](https://wiki.videolan.org/SoC_2025/#Cloud_integration_for_desktop)\n    *   [3.12 Improve libNDI and integrate in VLC](https://wiki.videolan.org/SoC_2025/#Improve_libNDI_and_integrate_in_VLC)\n    *   [3.13 Update the Lua integration](https://wiki.videolan.org/SoC_2025/#Update_the_Lua_integration)\n    *   [3.14 Implement DVD-Audio deciphering](https://wiki.videolan.org/SoC_2025/#Implement_DVD-Audio_deciphering)\n    *   [3.15 Radio-Browser integation](https://wiki.videolan.org/SoC_2025/#Radio-Browser_integation)\n    *   [3.16 Port the remote access webserver to VLC Desktop](https://wiki.videolan.org/SoC_2025/#Port_the_remote_access_webserver_to_VLC_Desktop)\n    *   [3.17 demux Rust bindings and AVI module for VLC](https://wiki.videolan.org/SoC_2025/#demux_Rust_bindings_and_AVI_module_for_VLC)\n    *   [3.18 integrate checkasm tooling and improve existing asm coverage](https://wiki.videolan.org/SoC_2025/#integrate_checkasm_tooling_and_improve_existing_asm_coverage)\n    *   [3.19 libvlc Wayland API](https://wiki.videolan.org/SoC_2025/#libvlc_Wayland_API)\n    *   [3.20 Other short ideas for VLC & libVLC](https://wiki.videolan.org/SoC_2025/#Other_short_ideas_for_VLC_.26_libVLC)\n*   [4 Ideas for VideoLAN infrastructure](https://wiki.videolan.org/SoC_2025/#Ideas_for_VideoLAN_infrastructure)\n    *   [4.1 Improve the VideoLAN crash reporter in Go and Vue.js](https://wiki.videolan.org/SoC_2025/#Improve_the_VideoLAN_crash_reporter_in_Go_and_Vue.js)\n*   [5 Ideas for dav1d](https://wiki.videolan.org/SoC_2025/#Ideas_for_dav1d)\n    *   [5.1 dav1d RISC-V optimizations](https://wiki.videolan.org/SoC_2025/#dav1d_RISC-V_optimizations)\n    *   [5.2 dav1d GPU Compute Shaders](https://wiki.videolan.org/SoC_2025/#dav1d_GPU_Compute_Shaders)\n    *   [5.3 dav1d statistics extractions](https://wiki.videolan.org/SoC_2025/#dav1d_statistics_extractions)\n*   [6 Ideas for libplacebo](https://wiki.videolan.org/SoC_2025/#Ideas_for_libplacebo)\n    *   [6.1 Direct3D 11 backend](https://wiki.videolan.org/SoC_2025/#Direct3D_11_backend)\n    *   [6.2 Dolby Vision Profile 5 (IPT-PQ)](https://wiki.videolan.org/SoC_2025/#Dolby_Vision_Profile_5_.28IPT-PQ.29)\n    *   [6.3 GPU motion interpolation (mvtools)](https://wiki.videolan.org/SoC_2025/#GPU_motion_interpolation_.28mvtools.29)\n*   [7 Ideas for VLC dependencies](https://wiki.videolan.org/SoC_2025/#Ideas_for_VLC_dependencies)\n    *   [7.1 libmicrodns refactoring](https://wiki.videolan.org/SoC_2025/#libmicrodns_refactoring)\n\nIntroduction & Information\n--------------------------\n\n[![Image 2: Asterix VLC.svg](https://wiki.videolan.org/images/thumb/Asterix_VLC.svg/300px-Asterix_VLC.svg.png)](https://wiki.videolan.org/File:Asterix_VLC.svg/)\n\nThis page covers the [VideoLAN](https://wiki.videolan.org/VideoLAN/ \"VideoLAN\") program as a mentoring organization for [Google Summer of Code](http://code.google.com/soc/), in order to improve [VLC](https://wiki.videolan.org/VLC/ \"VLC\"), [VLMC](https://wiki.videolan.org/VLMC/ \"VLMC\") and [dav1d](https://code.videolan.org/videolan/dav1d) (or the [libVLC](https://wiki.videolan.org/LibVLC/ \"LibVLC\") engine), but also the VideoLAN infrastructure and some other related projects.\n\nWe have projects in **C**, **C++**, **ASM**, **JS**, **Wasm**, **Go**, **Obj-C**, **GPU Shaders**, **C#**, **Java/Kotlin** and **Swift**.\n\n### Summer of Code\n\nGoogle Summer of Code is a way for anyone to work on open source projects and become top developers, while being paid by Google.\n\n[VideoLAN](https://wiki.videolan.org/VideoLAN/ \"VideoLAN\") was a _Google Summer of Code_ mentoring organization in [2007](https://wiki.videolan.org/SoC_2007/ \"SoC 2007\"), [2008](https://wiki.videolan.org/SoC_2008/ \"SoC 2008\"), [2009](https://wiki.videolan.org/SoC_2009/ \"SoC 2009\"), [2010](https://wiki.videolan.org/SoC_2010/ \"SoC 2010\"), [2011](https://wiki.videolan.org/SoC_2011/ \"SoC 2011\"), [2013](https://wiki.videolan.org/SoC_2013/ \"SoC 2013\"), [2016](https://wiki.videolan.org/SoC_2016/ \"SoC 2016\"), [2017](https://wiki.videolan.org/SoC_2017/ \"SoC 2017\"), [2018](https://wiki.videolan.org/SoC_2018/ \"SoC 2018\"), [2019](https://wiki.videolan.org/SoC_2019/ \"SoC 2019\"), [2020](https://wiki.videolan.org/SoC_2020/ \"SoC 2020\"), [2021](https://wiki.videolan.org/SoC_2021/ \"SoC 2021\"), [2022](https://wiki.videolan.org/SoC_2022/ \"SoC 2022\"), [2023](https://wiki.videolan.org/SoC_2023/ \"SoC 2023\") and [2024](https://wiki.videolan.org/SoC_2024/ \"SoC 2024\").\n\nThis page lists some ideas for Summer of Code projects on **dav1d**, **libVLC** and [VLC media player](https://wiki.videolan.org/VLC_media_player/ \"VLC media player\"), but also on _VLC infrastructure_ projects.  \nWe accept ideas also on other multimedia projects related to [VLC media player](https://wiki.videolan.org/VLC_media_player/ \"VLC media player\").\n\n### VLC & libVLC\n\n[VLC media player](https://wiki.videolan.org/VLC_media_player/ \"VLC media player\") is a cross-platform multimedia player, encoder and streamer application. It is one of the most successful open-source projects worldwide.\n\n[VLC media player](https://wiki.videolan.org/VLC_media_player/ \"VLC media player\") is downloaded at an approximate monthly rate of 25 millions from the main website and that's not including third-party distributions (Linux)!\n\nYou can find more information on [VLC on Wikipedia](http://en.wikipedia.org/wiki/VLC_media_player) or on this [wiki](https://wiki.videolan.org/Main_Page/ \"Main Page\").\n\nThe engine of VLC is **libVLC**, and is used by **VLMC** and mobile versions of VLC.\n\n### dav1d\n\n**dav1d** is the reference AV1 decoder that is shipped inside VLC, Chrome, Edge, Firefox, Windows and macOS/iOS.\n\nIt's a very low-level codec, mostly written in C and assembly.\n\n### Summer of Code rules\n\nIf selected and developed, SoC projects for dav1d and VLC will be included in later releases.\n\nAll projects are covered by the GPL (v2+) or LGPL (v2.1+) licenses depending on the module. Projects on dav1d are BSD licensed.\n\nThe VideoLAN [Code of Conducts](https://wiki.videolan.org/CoC/ \"CoC\") applies to all Summer projects.\n\nHow to Start\n------------\n\n### Find an idea\n\nFirst, you need to find an idea.\n\nThis current page gives you a list of ideas. Those ideas are **NOT exhaustive**: you can bring your own idea! Some of the best ideas we've ever had were **custom** ideas!\n\nThe duration of the projects is indicative, and can be adapted, if needed.\n\n### Submit your idea\n\nYou need to submit your idea on the _Google Summer of Code_ platform.\n\nYou should do so, very quickly, even before having finished compilation and the next steps, so that we can give you early feedback.\n\n### Compile VLC or libVLC\n\nThis may sound trivial, but it's harder than many expect. You must compile the project you want to work on.\n\nSee [https://wiki.videolan.org/Category:Building/](https://wiki.videolan.org/Category:Building/) for more informations.\n\nYou should come on [IRC](https://wiki.videolan.org/IRC/ \"IRC\") to get help to compile.\n\n### Provide a small patch\n\nTo demonstrate your skills, share a small patch with us. This will let you become familiar with [Git](https://wiki.videolan.org/Git/ \"Git\"), in case you don't know it already and our process on [our gitlab](https://code.videolan.org/).\n\n### Let's get in touch\n\nIf you have a doubt, are not sure about anything or want clarification, please get in touch with us.\n\nWe have 3 major communication channels:\n\n*   Our [mailing-lists](https://mailman.videolan.org/mailman/listinfo) to discuss patches and further development related topics;\n*   Furthermore, we have our [web forums](http://forum.videolan.org/) for VLC-related end-user support - a VLMC section will be created once the product is published.\n*   Finally, there is our IRC channel _#videolan_ (for libVLC) and _#vlmc_ on the _libera_ network. It's open to any kind of discussion. Usage issues, questions how to compile VLC/VLMC, getting to know the fellow developers, etc.\n\nIdeas for VLC & libVLC\n----------------------\n\nAdvanced Audio Filters\n----------------------\n\n**Project Description**: We are looking for a skilled audiophile that knows a lot about audio theory and practice to work on new audio filters for VLC.\n\n**Duration**: 350h\n\n**Tasks to do**:\n\n*   SRS WoW like or other 3D effects;\n*   channels mixing, notably upmixing, like Prologic-II;\n*   tracks mixing, and transitions;\n*   scriptable new audio filters in lua and enable users to create whatever audio filtering function they want in a Lua script;\n*   LADSPA or other libraries integration.\n\n**Requirements**: This project needs some good audio knowledge and good C experience.\n\n**Qualification task:** Port any audio filter from MPlayer\n\n_Proposed mentor: unidan_\n\nVLC Qt interface redesign\n-------------------------\n\n**Project Description**: The VLC interface is quite outdated on Linux and Windows. It has a lot of features, but some are not properly exposed.\n\nWe are currently reworking the interface, but we need help.\n\n**Duration**: 350h\n\n**Scope of the tasks to do**:\n\nUse the new designs shared on the mailing list, and help developping part of those, using **Qml**.\n\nThis new interface is simpler, more user friendly, and has a better \"media center\" feel into it.\n\nIt requires integration with the media library and with the current interface.\n\nQml is the technology needed to improve the current UI.\n\n**Requirements**: This project requires **Qt/C++** knowledge, and qml would be a nice plus.\n\n_Proposed mentor: Pierre_\n\nVLC Skins2 interface update\n---------------------------\n\n**Project Description**: The VLC Skins2 interface was not updated for the latest interface and core changes for the media player and playlist engine yet.\n\nWe are currently reworking the interface, but we need help.\n\n**Duration**: 350h\n\n**Scope of the tasks to do**:\n\n*   wayland integration\n*   video integration rework (like Qt interface)\n*   medialibrary integration\n\n**Requirements**: This project requires **Qt/C++** knowledge, and qml would be a nice plus.\n\n_Proposed mentor: Pierre_\n\nVLC macOS interface redesign\n----------------------------\n\n**Project Description**: The VLC interface is quite outdated on macOS and we are currently in the process of re-writing it to give it a modern feel, but also to integrate recent additions to libvlc regarding playback control and library management.\n\nThis project for the summer is to rework heavily this interface to make it beautiful and useful again.\n\n**Duration**: 350h or 175h\n\n**Scope of the tasks to do**:\n\nThere is a full design already done and tested. The major hurdle is to actually implement it the way we want it to be. The iOS/tvOS interface is simpler, more user friendly, and has a better \"media center\" feel into it, which influenced what we want to achieve on the Mac. Note that the objective is to use AppKit. UIKit will not be part of this project.\n\nIterating from the current UI and closely collaborating with the team currently working on it is a requirement.\n\n**Requirements**: This project requires **Obj-C** knowledge, a thorough understanding of OOP and proven previous Mac development experience. You cannot use swift for this project.\n\n_Proposed mentor: David Fuhrmann, Felix Paul Kühne_\n\nVLC watchOS port\n----------------\n\n**Project Description**: VLCKit recently added support for playback of audio files on watchOS with support for http streams coming in a future update. The idea is to create a new, standalone app for watchOS that can play local files on device with a good way to synchronize those either from a computer or the app on the companion iPhone. The UI development needs to be done in SwiftUI following the restrictions of the platform.\n\n**Duration**: 350h\n\n_Proposed mentor: Diogo Simao Marques, Felix Paul Kühne_\n\niced ui for VLC\n---------------\n\n[iced](https://github.com/iced-rs/iced) is a cross-platform UI library for Rust. The project aims to provide a VLC iced Widget as first step and then a full UI as complete as possible within the time available.\n\nTasks\n\n*   Revamp and publish the VLC-rs bindings\n*   Create an iced Widget similar to [what exists already forGStreamer](https://github.com/jazzfool/iced_video_player)\n*   Increase the richness of the UI gradually\n*   First normal direct playback (play pause seek)\n*   Add volume controls\n*   Add support to manage subtitles\n*   Expose the VLC configuration knobs (one subset at time)\n\n**Duration**: 175h\n\n**Proposed mentor**: Luca Barbato\n\nImprove Android MediaCodec support\n----------------------------------\n\n**Project Description**: The goal is to fix few bugs (black screen with some device/video, HDR issues), and to improve the download of MediaCodec surfaces to the CPU\n\n**Duration**: 175h\n\n**Scope of the tasks to do**:\n\n*   Fix MediaCodec bugs [https://code.videolan.org/videolan/vlc/-/issues/?sort=updated\\_desc&state=opened&label\\_name%5B%5D=Component%3A%3AVideo%3A%20Android&first\\_page\\_size=20](https://code.videolan.org/videolan/vlc/-/issues/?sort=updated_desc&state=opened&label_name%5B%5D=Component%3A%3AVideo%3A%20Android&first_page_size=20)\n*   Fix download for all kind of chromas/size/offset/crop (Decoding Acceleration in the vlc-android app)Duration: 350hRequirements: Those will be done in C, and it requires familiarity with the android dev environment and hardware decoders.\n\n_Proposed mentor: Thomas Guillem_\n\nAdd back netsync module\n-----------------------\n\n**Project Description**: Use the new vlc clock to add back the netsync module\n\n**Duration**: 350h\n\n**Scope of the tasks to do**:\n\n*   Use a new network protocol: RTP Midi\n*   Expose some vlc\\_clock APIs to be used by \"control\" module\n*   Plug the vlc\\_clock API inside the new module\n\n**Requirements**: Very good C knowledge\n\n_Proposed mentor: Thomas Guillem_\n\nVLC iOS UI update\n-----------------\n\n**Project Description**: We're currently in the process of rewriting and updating the entire UI for VLC iOS\n\nThere is a lot of components that need refactoring and need to get an updated UI.\n\nThe Android port of VLC has done most of that and was successful. We need the same level of features.\n\n**Duration**: 350h or 175h\n\n**Tasks to do**:\n\n*   Get an overview of the current App and components that need an update\n*   Refactor and give the appropriate components a new look\n*   See what is missing compared to the Android version\n*   Code it :\n\n**Requirements**: This project requires **Obj-C** and **Swift** knowledge and ideally knowledge of writing tests for iOS but this can be learned.\n\n_Proposed mentor: Felix Paul Kühne, Diogo Simao Marques_\n\nQt integration tests\n--------------------\n\n**Project Description**: In order to improve the robustness of our application, we would like to develop integration tests for the Qt interfac.e The goal being to ensure that new features and refactors won't break other parts of the UI.\n\n**Duration**: 350h or 175h\n\n**Scope of the Tasks to do**:\n\n*   study existing solutions used in other open-source projects ([https://invent.kde.org/sdk/selenium-webdriver-at-spi](https://invent.kde.org/sdk/selenium-webdriver-at-spi))\n*   adapt test framework to our environment\n*   write sample test cases\n*   study CI integration feasibility (Linux and/or Windows tests)\n\n**Requirements**: This project requires Qt/C++ and some scripting language (pyhton?) knowledge, Qml would be a nice plus.\n\n_Proposed mentor: Pierre_\n\nCloud integration for desktop\n-----------------------------\n\n**Project Description**: We want to be able to access Cloud Storage services (Dropbox, Google Drive and so on) in the VLC application.\n\n**Duration**: 350h or 175h\n\n**Scope of the Tasks to do**:\n\n*   revive libcloudstorage\n*   integrate libcloudstorage inside VLC\n*   write sample test cases\n\n**Requirements**: This project requires C++ knowledge.\n\n_Proposed mentor: Pierre_\n\nImprove libNDI and integrate in VLC\n-----------------------------------\n\n**Project description**: Improve the libNDI project supporting the NDI protocol to support more formats.\n\n**Duration**: 350h\n\n**Tasks to do**:\n\n*   Study the NDI protocol, implement and test and integrate inside VLC.\n\n**Requirements**:\n\n*   NDI understanding\n*   C knowledge.\n\n**Proposed mentor**: j-b\n\nUpdate the Lua integration\n--------------------------\n\n**Project description**: The current extension implementation in Lua needs more love to make them first class citizen (they are currently loaded by GUI instead of the core).\n\n**Duration**: 350h\n\n**Tasks to do**:\n\n*   update libvlccore to load Lua extensions instead of the GUI\n*   work on a better descriptive abstraction for lua stream parsers extensions which needs to extract data from the webpage. (currently done by manual read())\n*   more testing infrastructure for the scripts\n\n**Requirements**:\n\n*   Lua and C knowledge, c++ is a plus\n\n**Proposed mentor**: Alexandre Janniaux\n\nImplement DVD-Audio deciphering\n-------------------------------\n\n**Project description**: Support DVD-Audio deciphering using dvdcpxm\n\n*   [https://offog.org/git/dvdaexplorer/](https://offog.org/git/dvdaexplorer/)\n*   [http://www.thescrapyard.org/software/libdvdcpxm.html](http://www.thescrapyard.org/software/libdvdcpxm.html)\n*   [http://forum.doom9.org/showthread.php?t=167537](http://forum.doom9.org/showthread.php?t=167537)\n*   [https://sourceforge.net/projects/dvdadecoder/](https://sourceforge.net/projects/dvdadecoder/)\n\n**Duration**: 350h\n\n**Tasks to do**:\n\n*   Understand DVD-Audio\n*   Implement VLC module based on those modules\n\n**Requirements**:\n\n*   Audio likeness\n*   C knowledge.\n\n**Proposed mentor**: j-b\n\nRadio-Browser integation\n------------------------\n\n**Project Description**: Integrate the Radio-Browser.info API in a service discovery module so it is available on all of VLC's platforms.\n\n**Duration**: 175h\n\n**Tasks to do**:\n\n*   Study and understand the REST API\n*   Implement a VLC module based on the API\n*   Add a way to favorite channels\n\n**Requirements**:\n\n*   previous experience with REST APIs\n*   C knowledge\n\n**Proposed mentor**: Felix\n\nPort the remote access webserver to VLC Desktop\n-----------------------------------------------\n\n**Description**: To remotely access and control a VLC instance, a webserver has been developped for VLC Android. The goal is to port it to VLC desktop.\n\n**Duration**: 350h\n\n**Tasks to do**:\n\n*   Extract the web client code from the VLC for Android reprository to a dedicated one\n*   Write the server part in VLC desktop using lua scripts\n*   Adapt the client to be compatible with the new VLC desktop web server\n\n**Requirements**:\n\n*   js, Vue, lua, websockets\n\n**Proposed mentor** Nicolas\n\ndemux Rust bindings and AVI module for VLC\n------------------------------------------\n\nVLC has already its first Rust (logger) module: [https://code.videolan.org/videolan/vlc/-/commit/e8e46b0d915d153a58d002c9d6f19a7dbdfeeca9](https://code.videolan.org/videolan/vlc/-/commit/e8e46b0d915d153a58d002c9d6f19a7dbdfeeca9) There was a proposal to add several Rust bindings and example: [https://code.videolan.org/videolan/vlc/-/merge\\_requests/2738](https://code.videolan.org/videolan/vlc/-/merge_requests/2738)\n\nTasks\n\n*   Adapt demux API Rust bindings to upstream VLC\n*   Add a new AVI demux module to test the new bindings (Using the nom crate: [https://crates.io/crates/nom/](https://crates.io/crates/nom/))\n\n**Duration**: 350h\n\n**Requirements**: Good C knowledge and very good Rust knowledge\n\n**Proposed mentors**: Thomas Guillem and Alexandre Janniaux\n\nintegrate checkasm tooling and improve existing asm coverage\n------------------------------------------------------------\n\nVLC has some amount of existing assembly (yadif, video chroma) but we lack test coverage for it and also could use more for newer architectures\n\nTasks\n\n*   Integrate checkasm for validation (against a C baseline) and benchmarking (similarly to what's done in dav1d)\n*   Convert the existing assembly to use it\n*   Add new optimizations for things like audio/video format conversions, filters and also for newer arch's (riscv etc.)\n\n**Duration**: 175h or 350h\n\n**Proposed mentors**: Marvin Scholz, Nathan Egge, Tristan Matthews\n\nlibvlc Wayland API\n------------------\n\nIn order to allow easy integration of VLC video rendering into application that uses Wayland, similarly to what we provide for X11 or HWND.\n\n**Duration**: 175h\n\n**Scope of the Tasks to do**:\n\n*   Provide a method to expose external Wayland surface and additional mechanisms to libvlc.\n\n*   Write a sample application to illustrate how to use the API\n\n**Requirements**: This project requires some good C experience\n\n**Proposed mentor**: Pierre Lamot\n\nOther short ideas for VLC & libVLC\n----------------------------------\n\nThose ideas are not detailed, but they are ideas that we could help to spring new ideas. We can help work with you to make those more detailed.\n\nThose ideas should be **175h** long\n\n*   Improve Vulkan output for VLC, including HDR support\n*   Improve id3 tag and metadata handling in VLC\n*   Bridge module for GMI'C or other video filters\n*   Automated Testing Environment like ffmpeg Fate (port ?) for demuxing, non-hw decoding\n*   Integrate libavfilter in VLC\n*   Improve the libVLCSharp bindings for VLC in **C#**\n*   Provide setups for popular streaming services / sout templates (ui ?)\n*   Improve cue support in VLC\n\nIdeas for VideoLAN infrastructure\n---------------------------------\n\nImprove the VideoLAN crash reporter in Go and Vue.js\n----------------------------------------------------\n\nThe idea is to improve the current crash reporter of VLC, called [CrashDragon](https://code.videolan.org/videolan/CrashDragon).\n\nThe tasks are the following:\n\n*   Review the current code\n*   Improve the API in Go\n*   Write a new Vue.js frontend\n\nThose will be done in **Go** and **JS**\n\n**Duration**: 350h\n\n_Proposed mentor: David and j-b_\n\nIdeas for dav1d\n---------------\n\ndav1d RISC-V optimizations\n--------------------------\n\nImproving the performance of the AV1 decoder is very important for VLC and the whole ecosystem.\n\nIt requires to:\n\n*   Understand of RISC-V assembly\n*   Understand a bit what a video decoder is\n*   Write RISC-V functions\n\n**Requirements**: This project requires **C** and **ASM** knowledge, as well as system programming skills\n\n**Duration**: 175h\n\nContact 'j-b'\n\ndav1d GPU Compute Shaders\n-------------------------\n\nImproving the performance of the AV1 decoder is very important for VLC and the whole ecosystem.\n\nThis project requires to port one of the filter, like SGR or Wiener to one of the Shader languages. iPhones or Xbox One would be a good target.\n\nThis is a tricky project, but is doable during the summer\n\n**Duration**: 350h\n\n**Requirements**: This project requires **C** and **GPU Shaders** knowledge, as well as system programming skills\n\nContact 'j-b'\n\nThe [dav1d](https://code.videolan.org/videolan/dav1d) AV1 decoder is a new high performance AV1 decoder by VideoLAN.\n\nCurrent open source tools for AV1 analysis use instrumentation in the reference decoder [libaom](https://aomedia.googlesource.com/aom) to extract decode-time metadata for display and reporting, but support for sophisticated analysis is lacking.\n\nTo speed development of AV1 tools like the rav1e, it would be helpful to add similar decoder metadata extraction APIs to the dav1d decoder so that rapid testing of encoder algorithms is easier. This includes the ability to quickly produce statistics, visualizations and other reporting that can be used for tuning encoder parameters or guiding development. Advanced ideas include adding similar encoder metadata API to rav1e that add encode-time visualizations.\n\n**Requirements**: This project requires **C** knowledge.\n\n**Duration**: 175h\n\nContact 'unlord'\n\nIdeas for libplacebo\n--------------------\n\nDirect3D 11 backend\n-------------------\n\n**Project Description:**\n\nlibplacebo uses a GPU abstraction with a number of backends. The goal would be to add a new backend based on Direct3D 11, since Vulkan and OpenGL support on Windows are often of limited quality, especially for older hardware.\n\nLots of example code for how this implementation would look can be found [as part of the mpv project](https://github.com/mpv-player/mpv/blob/master/video/out/d3d11/ra_d3d11.c) .\n\nLarge parts can be copy/pasted and adapted to the libplacebo API.\n\n**Tasks to do:**\n\n1.  Add a new \\`pl\\_gpu\\` backend based on Direct3D 11\n2.  Integration into the build system, test framework and CI infrastructure\n\n**Requirements:**\n\n*   Knowledge of **C** as well as, ideally, graphics API fundamentals. (But the latter can be learned as part of the project)\n*   Ability to develop and test on Windows\n\n**Duration**: 175h\n\nContact 'haasn'\n\nDolby Vision Profile 5 (IPT-PQ)\n-------------------------------\n\n**Project Description:**\n\nDolby IPT-PQ is a HDR color space similar to ITU-R ICtCp, but with proprietary Dolby modifications (reshaping algorithm). Your goal is to implement this reshaper in the form of a GLSL shader, using knowledge from known Dolby patents and dumped headers.\n\n**Tasks to do:**\n\n1.  Figure out, and (if necessary) reverse engineer the stream format for the Dolby reshaping algorithm described in several of their patents.\n2.  Implement this algorithm in GLSL\n3.  Integration into libplacebo (optional)\n4.  Test against reference implementations of Dolby Vision profile 5\n\n**Requirements:**\n\n*   Knowledge of **GLSL** and **C**. Knowledge of colorspaces in general is an obvious plus, but the theory here is not important - only the implementation.\n*   (Possibly) Ability to reverse engineer any still-unknown or differing-from-patents parts of the stream headers.\n\nKnowledge of libplacebo internals is not required, since the skeleton code for this already exists - what's missing is the reshaping algorithm.\n\n**Duration**: 350h\n\nContact 'haasn'\n\nGPU motion interpolation (mvtools)\n----------------------------------\n\n**Project Description**\n\nYour goal is to develop GPU shaders for motion-adaptive frame interpolation in the style of \\[mvtools\\]([https://github.com/dubhater/vapoursynth-mvtools](https://github.com/dubhater/vapoursynth-mvtools)).\n\nThis is an open-ended project. If not completed, any progress towards this goal is good enough.\n\n**Sub-goals:**\n\n1.  Recreate the motion vector search algorithms from MAnalyze\n2.  Implement the pixel masking and pixel flow algorithms from MFlowFps\n\nThese can be tackled and complete out-of-order.\n\n**Requirements:**\n\n*   Good knowledge of both C and GLSL, especially compute shaders and other GPGPU techniques. (CUDA or OpenCL skills also transfer, though the shader will have to be GLSL)\n*   Ideally, general knowledge of video processing techniques (e.g. motion vector search) - at least enough to be able to understand what mvtools code is doing.\n\n**Duration**: 350h\n\nContact 'haasn'\n\nIdeas for VLC dependencies\n--------------------------\n\nlibmicrodns refactoring\n-----------------------\n\nOur current mDNS discoverer is working, but is not so respectful of the RFC. Possible improvements include:\n\n*   Device TTL support\n*   Device removal detection\n*   Better request pacing\n*   Delegate socket interactions to the caller\n*   Unit testing\n*   Fuzzing\n\n**Requirements**: This project require **C** knowledge, as well as system programming skills\n\n**Duration**: 175h\n\n_Proposed mentor_: tguillem\n"}