{"name":"Meshery","description":"the extensible, collaborative, Kubernetes manager","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/meshery","ideas_url":"https://meshery.io/programs/gsoc/2025","logo":"https://summerofcode.withgoogle.com/media/org/meshery/4ywkbdszwd1sw2rq-360.png","technologies":["javascript","golang","kubernetes","visual design"],"topics":["collaboration","devops","Platform Engineering","cloud native infrastructure","infrastructure as design"],"projects":[{"project_name":"Multi-player Collaboration: Resilient Websockets and GraphQL Subscriptions","summary":"Refactor Meshery's implementation of websockets and GraphQL subscriptions to enhance reliability and resiliency for enabling multi-player collaboration functionality.","difficulty":"large (~175 hours)"},{"project_name":"Support for Azure in Meshery","summary":"Enhance Meshery to manage Azure services using the Azure Service Operator, including orchestration capabilities and automatic model generation for Azure resources.","difficulty":"large (~175 hours)"},{"project_name":"Kubectl Plugin for MeshSync Snapshot","summary":"Create a kubectl plugin that captures the state of a Kubernetes cluster for offline management through Meshery via MeshSync snapshots.","difficulty":"large (~175 hours)"},{"project_name":"Distributed client-side inference (policy evaluation) with WebAssembly (WASM) and OPA in Meshery","summary":"Integrate real-time policy evaluation capabilities into Meshery's UI, leveraging WebAssembly and Open Policy Agent for better infrastructure configuration.","difficulty":"large (~175 hours)"},{"project_name":"Meshery Model Support for kro ResourceGraphDefinitions (RGDs)","summary":"Implement support for kro ResourceGraphDefinitions in Meshery, enabling management and orchestration of these resources through the platform.","difficulty":"large (~350 hours)"},{"project_name":"Hands-on tutorials using Meshery Playground","summary":"Develop comprehensive hands-on tutorials using the Meshery Playground to facilitate learning for DevOps engineers and cloud-native practitioners.","difficulty":"large (~350 hours)"},{"project_name":"Kanvas Snapshot Kubectl Plugin","summary":"Build a plugin to generate visual snapshots of multiple Kubernetes manifests, facilitating easier interpretation of workflows and configurations.","difficulty":"large (~175 hours)"},{"project_name":"Expanding end-to-end test coverage in Meshery using Playwright","summary":"Enhance Meshery's automation by writing comprehensive end-to-end test cases using Playwright to ensure the reliability of its UI and workflows.","difficulty":"medium (~175 hours)"}],"jina_response":"Title: Google Summer of Code\n\nURL Source: https://meshery.io/programs/gsoc/2025\n\nPublished Time: 2025-03-01T00:26:37+00:00\n\nMarkdown Content:\n### Google Summer of Code and Meshery\n\n##### GSOC 2025 Project Ideas\n\n1\\. Multi-player Collaboration: Resilient Websockets and GraphQL Subscriptions\n\n**Description:**\n\nMeshery's current implementation of websockets and GraphQL subscriptions is in need of refactoring for increased reliability and resiliency. This client and server-side refactoring includes use of webworkers and separation of concerns for the client-side, and the use of a message broker for the server-side. The project has implications on Meshery's implementation of multi-player collaboration functionality.\n\n**Expected outcomes:**\n\nResilient websockets and GraphQL subscriptions for Meshery, enabling multi-player collaboration functionality.\n\n**Recommended Skills:** Golang, Kubernetes, Azure, well-written and well-spoken English\n\n**Expected project size:** large (~175 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [Aabid Sofi](https://layer5.io/community/members/aabid-sofi)\n\n**Issue:** [https://github.com/meshery/meshery/issues/13554](https://github.com/meshery/meshery/issues/13554)\n\n2\\. Support for Azure in Meshery\n\n**Description:**\n\nEnhance Meshery's existing orchestration capabilities to include support for Azure. The [Azure Service Operator](https://azure.github.io/azure-service-operator)(ASO) provides a wide variety of Azure Resources via Kubernetes custom resources as first-class [Meshery Models](https://docs.meshery.io/concepts/logical/models). This involves enabling Meshery to manage and orchestrate Azure services and their resources, similar to how it handles other Kubernetes resources. The project will also include generating support for Azure services and their resources in Meshery's Model generator.\n\n**Expected outcomes:**\n\nMeshery will be able to orchestrate and manage all Azure services supported by ASO. This includes the ability to discover, configure, deploy, and operate the lifecycle of Azure services through Meshery. The Meshery Model generator will be updated to automatically generate models for Azure services, simplifying their integration and management within Meshery. This will be an officially supported feature of Meshery.\n\n**Recommended Skills:** Golang, Kubernetes, Azure, well-written and well-spoken English\n\n**Expected project size:** large (~175 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [Mia Grenell](mailto:mia.grenell2337@gmail.com)\n\n**Issue:** [https://github.com/meshery/meshery/issues/11244](https://github.com/meshery/meshery/issues/11244)\n\n3\\. Kubectl Plugin for MeshSync Snapshot\n\n**Description:**\n\nDevelop a kubectl plugin via krew that allows users to temporarily deploy [MeshSync](https://docs.meshery.io/concepts/architecture/meshsync), capture the state of their cluster, and then import the snapshot into Meshery for offline infrastructure management. The plugin will serve as a lightweight alternative to a full Meshery deployment while still enabling Meshery Server to understand the state and configuration of Kubernetes cluster, simplyfying common networking challenges between the cluster and Meshery Server.\n\n**Expected outcomes:**\n\n\\- A functional kubectl plugin that facilitates capturing a MeshSync snapshot of Kubernetes cluster resources.\n\n\\- Improved networking efficiency, reducing the complexity of connecting Kubernetes clusters with Meshery Server.\n\n\\- Support for selective snapshot capture, including single resources, namespaces, or entire cluster visualizations.\n\n\\- Read-only access mode to generate snapshots without requiring full Meshery deployment.\n\n**Recommended Skills:** Golang, Krew, Kubernetes, well-written and well-spoken English.\n\n**Expected project size:** large (~175 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [James Horton](mailto:james.horton2337@gmail.com)\n\n**Issue:** [https://github.com/meshery/meshery/issues/11869](https://github.com/meshery/meshery/issues/11869)\n\n4\\. Distributed client-side inference (policy evaluation) with WebAssembly (WASM) and OPA in Meshery\n\n**Description:**\n\nMeshery's highly dynamic infrastructure configuration capabilities require real-time evaluation of complex policies. Policies of various types and with a high number of parameters need to be evaluted client-side. With policies expressed in Rego, the goal of this project is to incorporate use of the [https://github.com/open-policy-agent/golang-opa-wasm](https://github.com/open-policy-agent/golang-opa-wasm) project into Meshery UI, so that a powerful, real-time user experience is possible.\n\n**Expected outcomes:**\n\nThe goal of this project is to enhance Meshery's infrastructure configuration capabilities by incorporating real-time policy evaluation using the golang-opa-wasm project. This project will integrate the capabilities of golang-opa-wasm into the Meshery UI, enabling users to experience the existing, powerful, server-side policy evaluation client-side.\n\n**Recommended Skills:** WebAssembly, Golang, Open Policy Agent, well-written and well-spoken English.\n\n**Expected project size:** large (~175 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [James Horton](mailto:james.horton2337@gmail.com)\n\n**Issue:** [https://github.com/meshery/meshery/issues/13555](https://github.com/meshery/meshery/issues/13555)\n\n5\\. Meshery Model Support for kro ResourceGraphDefinitions (RGDs)\n\n**Description:**\n\nEnhance Meshery's existing orchestration capabilities to include support for kro ResourceGraphDefinitions (RGDs) as first-class [Meshery Models](https://docs.meshery.io/concepts/logical/models). This involves enabling Meshery to manage and orchestrate RGDs, similar to how it handles other Kubernetes resources. The project will also include generating support for ResourceGraphDefinition in Meshery's Model generator.\n\n**Expected outcomes:**\n\nMeshery will be able to orchestrate and manage kro RGDs. This includes the ability to deploy, configure, and manage the lifecycle of RGDs through Meshery. The Meshery Model generator will be updated to automatically generate models for kro RGDs, simplifying their integration and management within Meshery. This will be an officially supported feature of Meshery.\n\n**Recommended Skills:** Golang, Cuelang, Well-written and well-spoken English, Kubernetes, DevOps\n\n**Expected project size:** large (~350 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [Mia Grenell](mailto:mia.grenell2337@gmail.com)\n\n**Issue:** [https://github.com/meshery/meshery/issues/13520](https://github.com/meshery/meshery/issues/13520)\n\n6\\. Hands-on tutorials using Meshery Playground\n\n**Description:**\n\nLearning paths with hands-on labs are a crucial resource for DevOps engineers and cloud-native practitioners. The Meshery Playground provides a live cluster environment, making it an ideal platform for learning every kind of cloud and cloud native technology. Meshery Docs is in need of comprehensive tutorials and scenarios covering common infrastructure management use cases. Mission is to create and publish a series of hands-on tutorials using Meshery Playground. Each tutorial will include step-by-step guides, live demonstrations, and interactive labs using the Playground allowing learners to apply their knowledge directly without the hassle of any configuration.These tutorials will be reviewed by various project maintainers and then published in [guides/tutorials](https://docs.meshery.io/guides/tutorials).\n\n**Expected outcomes:**\n\n\\- 10+ new tutorials published in Meshery Docs.\n\n\\- Each tutorial should be interactive, guiding users through infrastructure.\n\n\\- Tutorials should vary in complexity, catering to beginners and advanced learners.\n\n**Recommended Skills:** written English, Markdown, Kubernetes, DevOps, and hands-on experience with cloud-native tools.\n\n**Expected project size:** large (~350 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [James Horton](mailto:james.horton2337@gmail.com)\n\n**Issue:** [https://github.com/meshery/meshery/issues/13521](https://github.com/meshery/meshery/issues/13521)\n\n7\\. Kanvas Snapshot Kubectl Plugin\n\n**Description:**\n\nKubernetes manifests, especially collections of them, can be complex. This plugin will bridge the gap between Kubernetes cluster and workflow configurations and their visual representation in Kanvas Snapshots. The plugin will allow users to generate a visual snapshot of the combination of multiple Kubernetes manifest files, each containing one or more Kubernetes resources. Users will be able to receive these snapshots either via email or as a URL displayed directly in the terminal.\n\n**Expected outcomes:**\n\n\\- A functional kubectl plugin that integrates with Meshery to generate Kanvas Snapshots from Kubernetes manifests.\n\n\\- Support for both synchronous and asynchronous delivery, allowing users to receive snapshots via email or directly in the terminal.\n\n**Recommended Skills:** Golang, Krew, Kubernetes, well-written and well-spoken English.\n\n**Expected project size:** large (~175 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [James Horton](mailto:james.horton2337@gmail.com)\n\n**Issue:** [https://github.com/meshery/meshery/issues/12036](https://github.com/meshery/meshery/issues/12036)\n\n8\\. Expanding end-to-end test coverage in Meshery using Playwright\n\n**Description:**\n\nMeshery integrates with many other CNCF projects and technologies. Sustaining those integrations is only possible through automation. To automate functional integration and end-to-end testing, Meshery now uses Playwright as one of the tools for browser testing. End-to-end tests run with each pull request to ensure that changes do not break existing functionality. Expanding the coverage of E2E tests is crucial to improving the reliability of Meshery’s UI and workflows. This project focuses on writing Playwright-based tests for more Meshery components, ensuring robust test coverage across the platform.\n\n**Expected outcomes:**\n\nDevelopment of comprehensive E2E test cases for additional Meshery components using Playwright.\n\n**Recommended Skills:** JavaScript, Playwright, GitHub Workflows, familiarity with React or Nextjs would be helpful, CI/CD.\n\n**Expected project size:** medium (~175 hour projects)\n\n**Mentors:** [Lee Calcote](https://layer5.io/community/members/lee-calcote), [Aabid Sofi](https://layer5.io/community/members/aabid-sofi)\n\n**Issue:** [https://github.com/meshery/meshery/issues/13514](https://github.com/meshery/meshery/issues/13514)\n"}