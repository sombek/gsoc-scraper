{"name":"OWASP Foundation","description":"No more insecure software.","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/owasp-foundation","ideas_url":"https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas","logo":"https://summerofcode.withgoogle.com/media/org/owasp-foundation/haks8qbp0yvjvzge-360.png","technologies":["python","javascript","java","ZAP","Juice Shop"],"topics":["web","cloud","application security","cybersecurity","DevSecOps"],"projects":[{"project_name":"Bug Logging Tool (BLT)","summary":"A bug-hunting and logging platform for users to detect vulnerabilities and participate in bug bounties, focusing on UI/UX improvements and gamification features in its 2025 GSoC projects.","difficulty":"Large"},{"project_name":"OWASP DevSecOps Maturity Model","summary":"Enhancements to the DSOMM application in JavaScript, focusing on the user experience and metrics collection. Students can choose to work on medium or large feature packs.","difficulty":"Medium to Large"},{"project_name":"OWASP Nettacker","summary":"An automated penetration testing framework written in Python, with ideas focused on improving scan engine performance and web interface, plus integrating new reporting standards.","difficulty":"Medium"},{"project_name":"OWASP Nest","summary":"A platform for enhancing collaboration within the OWASP community, seeking students to develop APIs, dashboards, and tools to streamline processes and enhance user experiences.","difficulty":"Medium to Hard"},{"project_name":"OWASP Juice Shop","summary":"A modern insecure web application used for security training, with GSoC project ideas aimed at enhancing its CTF platform features, test suite harmonization, and upgrading side-projects.","difficulty":"Medium to Large"},{"project_name":"PyGoat","summary":"An intentionally vulnerable Python web application designed for learning about web security, with projects focused on refactoring, extending labs, and improving interactive features.","difficulty":"Medium to Large"},{"project_name":"OpenCRE","summary":"A cybersecurity knowledge graph that facilitates connections between security standards and tools, offering various small to large projects aimed at enhancing its functionality and analysis capabilities.","difficulty":"Medium to Large"}],"jina_response":"Title: GSoC 2025 Ideas | OWASP Foundation\n\nURL Source: https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas\n\nMarkdown Content:\n[Bug Logging Tool (BLT)](https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas#bug-logging-tool-blt) ‚Ä¢ [DevSecOps Maturity Model](https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas#owaspdevsecops-maturity-model) ‚Ä¢ [OWASP Nettacker](https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas#owasp-nettacker) ‚Ä¢ [OWASP Nest](https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas#owasp-nest) ‚Ä¢ [OWASP Juice Shop](https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas#owasp-juice-shop) ‚Ä¢ [Pygoat](https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas#pygoat) ‚Ä¢ [OpenCRE](https://owasp.org/www-community/initiatives/gsoc/gsoc2025ideas#opencre)\n\nTips to get you started in no particular order:\n\n*   Read the [Student Guidelines](https://owasp.org/www-community/initiatives/gsoc/gsoc2025).\n*   Check our [GitHub organization](https://github.com/OWASP).\n*   Contact one of the project mentors below.\n\nList of Project Ideas\n---------------------\n\n### [Bug Logging Tool (BLT)](https://owasp.org/www-project-bug-logging-tool/)\n\nOWASP BLT is a **bug-hunting & logging platform** that enables users to hunt for vulnerabilities, participate in bug bounties, and contribute to open-source security. Organizations can leverage BLT to manage vulnerability reports, track security issues, and engage with ethical hackers.\n\nBLT is a large-scale project with a growing ecosystem, offering **full-stack development, security automation, AI-powered analysis, and blockchain-based incentives**. This year‚Äôs GSoC projects focus on **UI/UX improvements, API development, automation, and gamification** to enhance the platform‚Äôs usability and impact.\n\n> Preference will be given to students who have at least **5 merged PRs** before GSoC selection.\n\n* * *\n\n### üîπ **2025 GSoC Ideas / Large Projects**\n\n#### üî∏ **Modern UI/UX Overhaul & Lightweight Front-End in React** (~350h)\n\nA complete redesign of BLT‚Äôs interface, improving accessibility, usability, and aesthetics. The new front-end will be built with React and Tailwind CSS, ensuring high performance while maintaining a lightweight architecture under **100MB**. Dark mode will be the default, with full responsiveness and an enhanced user experience.\n\n#### üî∏ **Organization Dashboard ‚Äì Enhanced Vulnerability & Bug Management** (~350h)\n\nRedesign and expand the **organization dashboard** to provide seamless management of **bug bounties, security reports, and contributor metrics**. Features will include **advanced filtering, real-time analytics, and improved collaboration tools** for security teams.\n\n#### üî∏ **Secure API Development & Migration to Django Ninja** (~350h)\n\nMigrate our existing and develop a **secure, well-documented API** with automated security tests to support the new front-end. This may involve migrating from Django Rest Framework to **Django Ninja** for improved performance, maintainability, and API efficiency.\n\n#### üî∏ **Gamification & Blockchain Rewards System (Ordinals & Solana)** (~350h)\n\nIntroduce **GitHub-integrated contribution tracking** that rewards security researchers with **Bitcoin Ordinals and Solana-based incentives**. This will integrate with other parts of the website as well such as daily check-ins and code quality. Gamification elements such as **badges, leaderboards, and contribution tiers** will encourage engagement and collaboration in open-source security.\n\n#### üî∏ **Decentralized Bidding System for Issues (Bitcoin Cash Integration)** (~350h)\n\nCreate a decentralized system where developers can bid on **GitHub issues** using **Bitcoin Cash**, ensuring **direct transactions** between contributors and project owners without BLT handling funds.\n\n#### üî∏ **AI-Powered Code Review & Smart Prioritization System for Maintainers** (~350h)\n\nDevelop an **AI-driven GitHub assistant** that analyzes pull requests, detects security vulnerabilities, and provides **real-time suggestions** for improving code quality. A **smart prioritization system** will help maintainers rank issues based on **urgency, community impact, and dependencies**.\n\n#### üî∏ **Enhanced Slack Bot for Real-Time Security Alerts & Automation** (~175h)\n\nExpand the BLT **Slack bot** to automate vulnerability tracking, send real-time alerts for new issues, and integrate **GitHub notifications and contributor activity updates** for teams.\n\nüîó **More projects & discussions:** [BLT Milestones](https://github.com/OWASP-BLT/BLT/milestones)\n\n* * *\n\n### ‚úÖ **Expected Results**\n\n*   Successfully implementing a **fully functional, production-ready** feature.\n*   Contributions must align with **BLT‚Äôs core security and performance goals**.\n*   Code should adhere to best practices, including **security testing, CI/CD integration, and documentation**.\n\n* * *\n\n### üìå **Knowledge Prerequisites**\n\nTo contribute effectively, familiarity with at least one or more of the following is recommended:\n\n*   **Back-End:** Python, Django, Django Ninja, SQL\n*   **Front-End:** React, Next.js, Tailwind CSS, HTML/CSS\n*   **Blockchain:** Bitcoin Ordinals, Solana, Smart Contracts\n*   **AI/ML:** NLP, Machine Learning for security analytics\n*   **DevOps & Security:** GitHub API, REST API, OAuth, Authentication\n\n* * *\n\n### üë• **Mentors**\n\nWe are actively looking for more mentors! If you have experience in **Django, React, Blockchain, or AI**, we‚Äôd love to have you onboard.\n\nüìå _Confirmed Mentors:_\n\n*   **Donnie** (_@DonnieBLT on Slack_)\n*   **Yash Pandey**\n*   **Bishal Das**\n*   **Ahmed ElSheikh**\n*   **Patricia Waiyego**\n*   **Sudhir**\n*   _Looking for 4 more mentors!_\n\nüé• _To get up to speed, check out our [BLT videos](https://blt.owasp.org/bltv/)._\n\n### üë• **Pre-Selected Students**\n\nFor transparency, we are implementing a pre-selection process for students this year. This demonstrates our commitment to working students who are contunually contributing while also signaling our intent to other projects and organizations. However, pre-selection does not guarantee a final placement or acceptance.\n\n*   **Krrish Sehgal** 32 PRs\n*   **Sahil Omkumar Dhillon** 28 PRs\n*   **Krishna Kaushal** 29 PRs\n*   **Apoorva Pendse** 10 PRs\n*   **Dhruv Trivedi** 11 PRs\n*   **Nitin Awari** 6 PRs\n*   Student 7\n*   Student 8\n*   Student 9\n*   Student 10\n\n### [OWASP DevSecOps Maturity Model](https://dsomm.owasp.org/)\n\nJoin us in enhancing the DSOMM, a pivotal tool designed to improve the security and operational efficiency of software development processes. We are looking for passionate students to contribute to two major areas: our main application development in JavaScript and our metric analyzer and collector in Java. Whether you are looking to tackle medium-sized challenges or are ready to embark on a larger project, we have exciting opportunities for you.\n\nTo receive early feedback please:\n\n*   put your proposal on Google Docs and submit it to the OWASP Organization on Google‚Äôs GSoC page in ‚ÄúDraft Shared‚Äù mode.\n*   Please pick ‚Äúdsomm‚Äù as Proposal Tag to make them easier to find for us. Thank you!\n\n##### Medium Feature Pack for the DSOMM Main Application (JS)\n\n![Image 1: Preferred for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(~175h)-preferred-green) This pack includes tasks that are crucial for enhancing the user experience and functionality of the DSOMM main application. Contributors will address existing issues and add new features:\n\n##### Large Feature Pack for the metric Analyzer and Collector (Java)\n\n![Image 2: Preferred for \"Large\" GSoC 2025 project](https://img.shields.io/badge/large%20size%20(~350h)-preferred-green) This pack challenges students to develop the entire workflow from data collection to visualization for DSOMM metrics, including the implementation of a Kafka queue. Projects include:\n\nPlease take a look at the [architecture digram of DSOMM metricCA](https://github.com/devsecopsmaturitymodel/metricCA). The whole way from the collector to grafana needs to be implemented. Please note that a queue Kafka and Prometheus is currently not implemented and needs to be implemented in the collector and in the metricAnalyzer.\n\nFor Backstage, Jira and Confluence a defined format and tags might be used to identify the corresponding team and type of document (e.g. threat modeling/pentest).\n\n#### Prerequisites\n\n*   Proficiency in the corresponding programming language (JavaScript for the main application, Java for the metric analyzer and collector)\n*   Previous contributions to open-source projects are highly desirable, demonstrating your commitment and collaborative skills\n\n##### Mentors\n\nReach out to us on Slack to discuss these and other ideas!\n\n*   [Timo Pagel](mailto:timo.pagel@owasp.org)\n*   [Aryan Prasad](mailto:aryan.prasad@owasp.org)\n\n### [OWASP Nettacker](https://owasp.org/www-project-nettacker/)\n\nOWASP Nettacker is a Modular Automated Penetration Testing/ Information gathering Framework and Vulnerability Scanner fully written in Python. Nettacker can run a variety of scans discovering subdomains, open ports, services, vulnerabilities, misconfigurations, default credentials.\n\n![Image 3: Difficulty: Medium](https://img.shields.io/badge/difficulty-medium-orange) ![Image 4: Preferred for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(~175h)-preferred-green)\n\n##### Explanation of Ideas\n\n*   fix scan engine multi-threading/queuing issues\n*   improve WebUI / add dashboard\n*   add DefectDojo integration / output report format\n*   add SARIF output report format\n*   implement testing framework, get 70% code coverage level\n\n##### Getting Started\n\nRepositories:\n\n*   [OWASP Nettacker on OWASP GitHub](https://github.com/OWASP/Nettacker)\n*   Join OWASP Slack and contact us on channel [#project-nettacker](https://app.slack.com/client/T04T40NHX/CQZGG24FQ)\n\n##### Knowldege Requirements\n\n*   Python\n*   Flask\n*   HTML/CSS/JavaScript\n*   previous vulnerability scanning/bug bounty hunting experience\n\n##### Mentors\n\n*   [Sam Stepanyan](mailto:sam.stepanyan@owasp.org)\n*   [Ali Razmjoo](mailto:ali.razmjoo@owasp.org)\n*   [Arkadii Yakovets](mailto:arkadii.yakovets@owasp.org)\n\n### [OWASP Nest](https://nest.owasp.org/)\n\nOWASP Nest is a comprehensive platform designed to enhance collaboration and contribution within the OWASP community. The application serves as a central hub for exploring OWASP projects and ways to contribute to them, empowering contributors to find opportunities that align with their interests and expertise. Our mission is to drive real-world collaboration and elevate the OWASP organization by addressing key challenges and streamlining processes.\n\n#### Repository\n\n*   [backend](https://github.com/OWASP/Nest/tree/main/backend)\n*   [frontend](https://github.com/OWASP/Nest/tree/main/frontend)\n*   [schema](https://github.com/OWASP/Nest/tree/main/schema)\n\n#### Technical Stack\n\n*   Python, Django, Pytest\n*   TypeScript, React, Jest\n*   Chakra UI, Tailwind CSS\n*   PostgreSQL, Algolia\n*   Docker, k8s, AWS\n\n#### Projects / Ideas\n\n![Image 5: Difficulty: Medium](https://img.shields.io/badge/difficulty-medium-orange) ![Image 6: Difficulty: Hard](https://img.shields.io/badge/difficulty-hard-red)\n\n*   [OWASP Contribution Hub](https://github.com/OWASP/Nest/issues/710): Aiming to streamline the onboarding process and connect contributors with mentors and impactful projects. This milestone focuses on improving collaboration within the OWASP community.\n*   [OWASP Nest API](https://github.com/OWASP/Nest/issues/707): The development of REST and GraphQL API endpoints for OWASP Projects, Chapters, Events, and Committees. This milestone will standardize data access across OWASP‚Äôs resources.\n*   [OWASP Nest Kubernetes Adoption](https://github.com/OWASP/Nest/issues/706): This milestone focuses on migrating the OWASP Nest application to Kubernetes, ensuring scalability, reliability, and ease of deployment.\n*   [OWASP NestBot AI agent/assistant](https://github.com/OWASP/Nest/issues/908): Develop an AI-powered OWASP NestBot Slack assistant that acts as an auto-responder for frequently asked questions, guides users to the appropriate OWASP channels, and handles typical OWASP community queries.\n*   [OWASP Project Health Dashboard](https://github.com/OWASP/Nest/issues/711): A dashboard for monitoring the health of OWASP projects. This includes tracking vital metrics such as release frequency, issue resolution, and contributor growth.\n*   [OWASP Schema](https://github.com/OWASP/Nest/issues/709): Developing and extending a standardized schema for OWASP Projects and Chapters. This milestone aims to ensure consistency and ease of integration across OWASP resources.\n*   [OWASP Snapshots](https://github.com/OWASP/Nest/issues/708): Creating a summary of activities within OWASP projects, chapters, and events, including new blog posts and news, to keep the community informed about recent developments.\n\nPlease visit our planned [milestones page](https://github.com/OWASP/Nest/milestones) or `gsoc2025` labeled [issues page](https://github.com/OWASP/Nest/issues?q=is%3Aissue%20state%3Aopen%20label%3Agsoc2025).\n\n#### Your own ideas\n\n![Image 7: Possible for \"Small\" GSoC 2025 project](https://img.shields.io/badge/small%20size%20(90h)-possible-yellow) ![Image 8: Preferred for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(175h)-preferred-green) ![Image 9: Preferred for \"Large\" GSoC 2025 project](https://img.shields.io/badge/large%20size%20(350h)-preferred-green)\n\n![Image 10: Difficulty: Easy](https://img.shields.io/badge/difficulty-easy-green) ![Image 11: Difficulty: Medium](https://img.shields.io/badge/difficulty-medium-orange) ![Image 12: Difficulty: Hard](https://img.shields.io/badge/difficulty-hard-red)\n\nDo you have an idea to improve OWASP Nest? We‚Äôd love to hear it, please reach out in Slack to ensure that the idea fits OWASP Nest goals.\n\n#### Expected Results\n\n*   Your proposal projects/ideas are fully completed.\n*   Your code follows our existing style guides and passes quality checks, test coverage, etc.\n\n#### Getting Started\n\n*   Check out our [contributing guidelines](https://github.com/OWASP/Nest/blob/main/CONTRIBUTING.md)\n*   Join OWASP Nest channel [#project-nest](https://owasp.slack.com/archives/C07JLLG2GFQ)\n*   Consider `good first issue` (if there are any) from OWASP Nest [issues page](https://github.com/OWASP/Nest/issues?q=is%3Aissue%20state%3Aopen%20label%3A%22good%20first%20issue%22)\n\n#### Mentors\n\n*   [Arkadii Yakovets](https://github.com/arkid15r/) ([arkid15r](https://owasp.slack.com/team/U060W3NKLTF) on Slack)\n*   [Kateryna Golovanova](https://github.com/kasya/) ([Kate](https://owasp.slack.com/team/U07PWB1JZ6Z) on Slack)\n*   [Tamara Lazerka](https://github.com/aramattamara/) ([Tamara](https://owasp.slack.com/team/U0881RRPBDY) on Slack)\n\n### [OWASP Juice Shop](https://owasp-juice.shop/)\n\nOWASP Juice Shop is probably the most modern and sophisticated insecure web application! It can be used in security trainings, awareness demos, CTFs and as a guinea pig for security tools! Juice Shop encompasses vulnerabilities from the entire OWASP Top Ten along with many other security flaws found in real-world applications!\n\nTo receive early feedback please:\n\n*   put your proposal on Google Docs and submit it to the OWASP Organization on Google‚Äôs GSoC page in ‚ÄúDraft Shared‚Äù mode.\n*   Please pick ‚Äújuice shop‚Äù as Proposal Tag to make them easier to find for us. Thank you!\n\n##### Explanation of Ideas\n\n###### MultiJuicer as a CTF Platform\n\n![Image 13: Not recommended for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(~175h)-not%20recommended-red) ![Image 14: Preferred for \"Large\" GSoC 2025 project](https://img.shields.io/badge/large%20size%20(~350h)-preferred-green)\n\n![Image 15: Difficulty: Medium](https://img.shields.io/badge/difficulty-hard-red)\n\nMultiJuicer saw some enhancements of its Team Score Board last year. It now is not that far away from being a full-fledged CTF platform of its own. This project should focus on the remaining features needed to make MultiJuicer a fully functional CTF platform. This should include making the Team Score Board visually attractive, flavorfully unique and more competition-oriented. The existing Solution Webhook integration already marks solved challenges automatically, but other information like team cheat score, progress over time etc. are not tracked or displayed today. The MultiJuicer CTF should offer the same features as the Juice Shop CTF tool in order to configure the availability of hints. This should include a way to allow teams to pay for hints with some of their collected points. To avoid issues with bigger teams hacking on the same instance of Juice Shop, a team grouping mechanism could be considered as well. The progress on the CTF Score Board could then be aggregated on group level for different teams/instances.\n\n###### Test suite harmonization\n\n![Image 16: Preferred for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(~175h)-preferred-green) ![Image 17: Not recommended for \"Large\" GSoC 2025 project](https://img.shields.io/badge/large%20size%20(~350h)-not%20recommended-red)\n\n![Image 18: Difficulty: Medium](https://img.shields.io/badge/difficulty-medium-orange)\n\nJuice Shop had a full replacement of its end-to-end test suite - from Protractor to Cypress - in its GSoC 2022 project. Now it is time to take on the remainin test suites, especially the Integration/API tests currently running on Frisby.js. That library as not seen updates in 2+ years and it became more and more flaky over the years, causing occasional CI/CD failures and time-consuming retry-mechanisms to keep those in check. A new foundation for these tests is needed. In scope is also to look at the frontend and backend unit test suites, and find a way to reduce the number of test frameworks being used in order to achieve higher consistency and less complexity for maintenance of the project. This project should include the test suites in the Juice Shop CTF tool as well. Proposals that also have the augmentation of MultiJuicer with end-to-end tests in scope, are specially welcome.\n\n###### Juice Shop side-project rennovation\n\n![Image 19: Preferred for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(~175h)-preferred-green) ![Image 20: Not recommended for \"Large\" GSoC 2025 project](https://img.shields.io/badge/large%20size%20(~350h)-not%20recommended-red)\n\n![Image 21: Difficulty: Easy](https://img.shields.io/badge/difficulty-easy-green)\n\nThe Juice Shop CTF Tool is currently implemented in vanilla JavaScript. It should be migrated to TypeScript for consistency of maintenance with the main project. Furthermore, the code linting should be adapted to the main Juice Shop ESLint standards. Test coverage and relevance should be reviewed and strengthened where necessary.\n\nSimilarly, the following other sub-projects should be rennovated and brought onto an identical tech stack: Juicy Statistics, Juicy Coupon Bot, Juicy Chat Bot, and Juicy Coupon Lambda.\n\n###### Your own idea\n\n![Image 22: Preferred for \"Medium\" GSoC 2024 project](https://img.shields.io/badge/medium%20size%20(~175h)-preferred-green) ![Image 23: Preferred for \"Large\" GSoC 2024 project](https://img.shields.io/badge/large%20size%20(~350h)-preferred-green)\n\n![Image 24: Difficulty: Easy](https://img.shields.io/badge/difficulty-easy-green) ![Image 25: Difficulty: Medium](https://img.shields.io/badge/difficulty-medium-orange) ![Image 26: Difficulty: Hard](https://img.shields.io/badge/difficulty-hard-red)\n\nYou have an awesome idea to improve OWASP Juice Shop that is not on this list? Great, please submit it!\n\n##### Expected Results\n\n*   A new feature or improvement of an existing one that makes OWASP Juice Shop even better\n*   Your code follows our existing styleguides and passes all existing quality gates regarding code smells, test coverage etc.\n*   Code that you write comes with automated tests that fit into [our available test suites](https://pwning.owasp-juice.shop/companion-guide/latest/part3/contribution.html#_testing).\n\n##### Getting started\n\n*   Make sure your JavaScript/TypeScript is sufficient to work on the Juice Shop codebase. Check our [Codebase 101](https://pwning.owasp-juice.shop/companion-guide/latest/part3/codebase.html) here. Students with some experience with (or willingness to learn) Angular and Node.js/Express are usually prefered.\n*   Read our [Contribution Guidelines](https://pwning.owasp-juice.shop/companion-guide/latest/part3/contribution.html) very carefully. Best make some small contributions before GSoC, so we can see how you work and help you dive into the code even better.\n*   Get in touch [via Slack](https://owasp.slack.com/messages/project-juiceshop) or email (see below) to discuss any of the listed or your own idea for GSoC!\n\n##### Mentors\n\n*   [Bjoern Kimminich](mailto:bjoern.kimminich@owasp.org) - OWASP Juice Shop Project Leader ([bkimminich](https://owasp.slack.com/team/U1S23SNE7) on Slack)\n*   [Jannik Hollenbach](mailto:jannik.hollenbach@owasp.org) - OWASP Juice Shop Project Leader ([Jannik](https://owasp.slack.com/team/UAM6MBY30) on Slack)\n\n### [PyGoat](https://owasp.org/www-project-pygoat/)\n\nPyGoat is an open-source, intentionally vulnerable Python web application designed to help developers and security enthusiasts learn about web application security. It provides hands-on experience in identifying and mitigating common security vulnerabilities, making it a valuable resource for practicing secure coding and penetration testing techniques.\n\n#### Repository\n\n*   [PyGoat](https://github.com/adeyosemanputra/pygoat)\n\n#### Skills Required\n\n*   HTML/CSS/JavaScript\n*   Python\n*   Django\n*   Docker\n*   Basic knowledge of application security\n\n##### Getting started\n\n*   Check[GitHub project](https://github.com/adeyosemanputra/pygoat) and [Website](https://owasp.org/www-project-pygoat/).\n*   Join [OWASP Slack](https://owasp.org/slack/invite) and contact us on channel #project-pygoat\n\n#### Projects / Ideas\n\n![Image 27: Preferred for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(~175h)-preferred-green) ![Image 28: Preferred for \"Large\" GSoC 2025 project](https://img.shields.io/badge/large%20size%20(~350h)-preferred-green) ![Image 29: Difficulty: Medium](https://img.shields.io/badge/difficulty-medium-orange)\n\n*   Refactor the webapp, move away vulnarable labs from the main website.\n*   Deploy a microservice architecture based approch for the labs.\n*   Add new labs to the project.\n*   Improvment of interactive playgrounds.\n*   Extend labs to other languages as well.\n*   Prepare for `OWASP Top 10:2025` section\n\n#### Mentors\n\n*   [ardiansyah](https://owasp.org/www-community/initiatives/gsoc/pakdesawangan@gmail.com)\n*   [Rupak Biswas](https://github.com/RupakBiswas-2304)([Rupak](https://owasp.slack.com/team/U036WSR1684) on slack)\n\n### [OpenCRE](https://opencre.org/)\n\nOpenCRE is the world‚Äôs largest Cybersecurity knowledge graph. It semantically links information between standards, knowledge bases and security tools. Also, it allows users to extend the graph themselves and contains a RAG chatbot implementation. OpenCRE is a great GSOC project if you‚Äôre looking to add ‚ÄúData science/engineering‚Äù, ‚ÄúKnowledge Graph and AI‚Äù with a focus on Legal Tech and cybersecurity in your CV.\n\n#### Repository\n\n*   [OpenCRE](https://github.com/OWASP/OpenCRE)\n\n#### Skills Required\n\n*   HTML/CSS/React-Typescript\n*   Python\n*   Flask\n*   Docker\n\n##### Getting started\n\n*   Check the [GitHub project](https://github.com/OWASP/OpenCRE) and the issues marked as either `good first issue` , `help wanted` or `GSOC`\n*   Join [OWASP Slack](https://owasp.org/slack/invite) and contact us on channel #project-opencre\n\n#### Projects / Ideas\n\n![Image 30: Preferred for \"Medium\" GSoC 2025 project](https://img.shields.io/badge/medium%20size%20(~175h)-preferred-green) ![Image 31: Preferred for \"Large\" GSoC 2025 project](https://img.shields.io/badge/large%20size%20(~350h)-preferred-green) ![Image 32: Difficulty: Medium](https://img.shields.io/badge/difficulty-medium-orange)\n\n*   There are many small, medium and large project in the [Issues Page tagged with GSOC](https://github.com/OWASP/OpenCRE/issues?q=state%3Aopen%20label%3A%22GSOC%22) that we are interested in, depending on your background and interests they are split in the following categories: AI, Frontend, Backend, FullStack. They all contain a bit of frontend and data analysis and graph operations. Priorities for us are:\n*   [Make the gap analysis functionality faster](https://github.com/OWASP/OpenCRE/issues/587)\n*   [MyOpenCRE](https://github.com/OWASP/OpenCRE/milestone/5)\n*   [Releasing the Explorer page](https://github.com/OWASP/OpenCRE/milestone/6)\n\n#### Mentors\n\n*   [Spyros Gasteratos](https://owasp.org/www-community/initiatives/gsoc/spyros.gasteratos@owasp.org)\n*   [Rob Van Der Veer](https://owasp.org/www-community/initiatives/gsoc/rob.van.der.veer@owasp.org)\n*   [Paola Gardenas](https://owasp.org/www-community/initiatives/gsoc/paola.gardenas@owasp.org)\n"}