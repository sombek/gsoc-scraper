{"name":"PEcAn Project","description":"Develop and promote tools for ecosystem modeling","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/pecan-project","ideas_url":"https://pecanproject.github.io/gsoc_ideas","logo":"https://summerofcode.withgoogle.com/media/org/pecan-project/kijyzllr7r1g0ukz-360.png","technologies":["r","docker","api","geospatial"],"topics":["data science","ecosystem models","scientific visualization","climate science","Ecological Forecasting",""],"projects":[{"project_name":"Global Sensitivity Analysis / Uncertainty Partitioning","summary":"This project aims to enhance PEcAn's uncertainty partitioning by incorporating ensemble-based uncertainties and applying Sobol' methods for a more reliable analysis.","difficulty":"Medium"},{"project_name":"Parallelization of Model Runs on HPC","summary":"The goal is to adapt PEcAn for High Performance Compute (HPC) clusters to efficiently process numerous model runs simultaneously using orchestration methods.","difficulty":"Medium"},{"project_name":"Database and Data Improvements","summary":"This project focuses on separating trait data from provenance tracking in the BETYdb database and enabling PEcAn workflows to run without backend database requirements.","difficulty":"Medium, Large"},{"project_name":"Development of Notebook-based PEcAn Workflows","summary":"The aim is to create Quarto notebooks that provide accessible and flexible interfaces for conducting PEcAn workflows, targeting both new and advanced users.","difficulty":"Medium"},{"project_name":"Refactoring Compile-time Flags to Runtime Flags in SIPNET","summary":"This project will transition SIPNET's compile-time flags to runtime configuration options to enhance usability and testing efficiency within PEcAn analyses.","difficulty":"Medium to Hard"}],"jina_response":"Title: GSoC 2025 - PEcAn Project Ideas | PEcAn Project\n\nURL Source: https://pecanproject.github.io/gsoc_ideas\n\nMarkdown Content:\nPEcAn is an open-source ecosystem modeling framework integrating data, models, and uncertainty quantification. Below is a list of potential ideas where contributors can help improve and expand PEcAn. Come find us on Slack to discuss. If you have questions or would like to propose your own idea, contact @kooper in Slack or join our **[gsoc-2025](https://pecanproject.slack.com/archives/C0853U6GF71)**\n\n* * *\n\nProject Ideas[​](https://pecanproject.github.io/gsoc_ideas#ideas \"Direct link to Project Ideas\")\n------------------------------------------------------------------------------------------------\n\nBelow is a list of project ideas. Feel free to contact the listed mentors on Slack to discuss further or contact @kooper with new ideas and he can help connect you with mentors.\n\n1.  [Global Sensitivity Analysis / Uncertainty Partitioning](https://pecanproject.github.io/gsoc_ideas#sa)\n2.  [Parallelization of Model Runs on HPC](https://pecanproject.github.io/gsoc_ideas#hpc)\n3.  [Database and Data Improvements](https://pecanproject.github.io/gsoc_ideas#db)\n4.  [Development of Notebook-based PEcAn Workflows](https://pecanproject.github.io/gsoc_ideas#notebook)\n5.  [Refactoring Compile-time Flags to Runtime Flags in SIPNET](https://pecanproject.github.io/gsoc_ideas#sipnet)\n\n* * *\n\n### 1\\. Global Sensitivity Analysis / Uncertainty Partitioning[​](https://pecanproject.github.io/gsoc_ideas#sa \"Direct link to 1. Global Sensitivity Analysis / Uncertainty Partitioning\")\n\nThis project would extend PEcAn's existing uncertainty partitioning routines, which are primarily one-at-a-time and focused on model parameters, to also consider ensemble-based uncertainties in other model inputs (meteorology, soils, vegetation, phenology, etc). This project would employ Sobol' methods and some uncommitted code exists that manually prototyped how this would be done in PEcAn. The goal would be to refactor/reimplement this prototype into a reliable, automated system and apply it to some key test cases in both natural and managed ecosystems.\n\n**Expected outcomes:**\n\nA successful project would complete the following tasks:\n\n*   Reliable, automated Sobol sensitivity analyss and uncertainty partitioning across multiple model inputs.\n*   Applications to test case(s) in natural and / or managed ecosystems.\n\n**Prerequisites:**\n\n*   Required: R (existing workflow and prototype is in R)\n*   Helpful: familiarity with sensitivity analyses\n\n**Contact person:**\n\nMike @Dietze\n\n**Duration:**\n\nFlexible to work as either a Medium (175hr) or Large (350 hr)\n\n**Difficulty:**\n\nMedium\n\n* * *\n\n### 2\\. Parallelization of Model Runs on HPC[​](https://pecanproject.github.io/gsoc_ideas#hpc \"Direct link to 2. Parallelization of Model Runs on HPC\")\n\nThis project would extend PEcAn's existing run mechanisms to be able to run on a High Performance Compute cluster (HPC) using [Apptainer](https://apptainer.org/). For uncertaintity analysis, PEcAn will run the same model 1000s of times with small permutations. This is a perfect use for an HPC run. The goal is to not submit 1000s of jobs, but have a single job with multiple nodes that will run all of the ensembles efficiently. Running can be orchistrated using RabbitMQ, but other methods are also encouraged. The end goal should be for the PEcAn system to be launched, and run the full workflow on the HPC from start to finish leveraging as many nodes as it is given during the submission.\n\n**Expected outcomes:**\n\nA successful project would complete the following tasks:\n\n*   Show different ways to launch jobs (rabbitmq, lock files, simple round robin, etc)\n*   Report of different options and how they can be enabled.\n\n**Prerequisites:**\n\n*   Required: R (existing workflow and prototype is in R), Docker\n*   Helpful: Familiarity with HPC and Apptainer\n\n**Contact person:**\n\nRob @Kooper\n\n**Duration:**\n\nFlexible to work as either a Medium (175hr) or Large (350 hr)\n\n**Difficulty:**\n\nMedium\n\n* * *\n\n### 3\\. Database and Data Improvements[​](https://pecanproject.github.io/gsoc_ideas#db \"Direct link to 3. Database and Data Improvements\")\n\nPEcAn relies on the BETYdb database to store trait and yield data as well as model provenance information. This project aims to separate trait data from provenance tracking, and ensure that PEcAn is able to run without the server currently required to run the Postgres database used by BETYdb. The goal is to make PEcAn workflows easier to test, deploy, and use while also making data more accessible.\n\n**Potential Directions**\n\n*   **Minimal BETYdb Database:** Create a simplified version of BETYdb for demonstrations and Integration tests.\n*   **Non-Database Setup:** Enable workflows that do not require PostgreSQL or a web front-end.\n\n**Expected outcomes**:\n\nA successful project would complete a subset of the following tasks:\n\n*   A lightweight, distributable demo Postgres database.\n*   A workflow that is independent of the Postgres database.\n\n**Contact person:**\n\nChris Black (@infotroph)\n\n**Duration:**\n\nSuitable fora Medium (175hr) or Large (350 hr) project.\n\n**Difficulty:** Medium, Large\n\n* * *\n\n### 4\\. Development of Notebook-based PEcAn Workflows[​](https://pecanproject.github.io/gsoc_ideas#notebook \"Direct link to 4. Development of Notebook-based PEcAn Workflows\")\n\nThe PEcAn workflow is currently run using either a web based user interface, an API, or custom R scripts. The web based user interface is easiest to use, but has limited functionality whereas the custom R scripts and API are more flexible, but require more experience.\n\nThis project will focus on building Quarto notebooks that provide an interface to PEcAn that is both welcoming to new users and flexible enough to be a starting point for more advanced users. It will build on existing [Pull Request 1733](https://github.com/PecanProject/pecan/pull/1733).\n\n**Expected outcomes:**\n\n*   Two or more template workflows for running the PEcAn workflow.\n*   Written vignette and video tutorial introducing their use.\n\n**Prerequisites:**\n\n*   Familiarity with R.\n*   Familiarity with R studio and Quarto or Rmarkdown is a plus.\n\n**Contact person:** David LeBauer @dlebauer, Nihar Sanda @koolgax99\n\n**Duration:** Medium (175hr)\n\n**Difficulty:** Medium\n\n### 5\\. Refactoring Compile-time Flags to Runtime Flags in SIPNET[​](https://pecanproject.github.io/gsoc_ideas#sipnet \"Direct link to 5. Refactoring Compile-time Flags to Runtime Flags in SIPNET\")\n\n**Project Overview**\n\nThe ecosystem SIPNET is a core component of many PEcAn analyses. SIPNET is compiled with multiple compile-time flags that control whether different features are turned on and off. Thus, as currently configured, each model structure requires a separate compiled binary.\n\nThis project will refactor these flags to be runtime-configurable via command-line arguments or a configuration file, improving usability and testing efficiency.\n\n**Expected Outcomes**\n\n*   Convert selected SIPNET compile-time flags to runtime options.\n*   Develop a global configuration object for managing runtime flags.\n*   Improve testability by enabling different configurations without recompiling.\n\n**Prerequisites**\n\n*   Required: C, experience with compilers and build systems.\n*   Helpful: Understanding of simulation models.\n\n**Mentor(s)**\n\n*   David LeBauer (@dlebauer)\n*   Mike Longfritz\n\n**Duration**\n\n*   Medium (175hr) or Large (350hr)\n\n**Difficulty**\n\n*   Medium to Hard\n"}