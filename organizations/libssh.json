{"name":"libssh","description":"The SSH library","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/libssh","ideas_url":"https://www.libssh.org/development/google-summer-of-code/","logo":"https://summerofcode.withgoogle.com/media/org/libssh/kcfc8lhxh3uyozbu-360.png","technologies":["c","git","ci","ssh","sftp"],"topics":["security","cryptography"],"projects":[{"project_name":"Support for FIDO/U2F keys on the client side","summary":"Enhancing libssh to support U2F keys for client-side authentication, enabling interaction without physical devices.","difficulty":"Medium"},{"project_name":"OpenSSH-compatible CLI","summary":"Creating a command-line interface for libssh that mimics OpenSSH, allowing users to easily transition with minimal compatibility issues.","difficulty":"Medium"},{"project_name":"Improve configuration compatibility with OpenSSH","summary":"Refining libssh's configuration parser to better match OpenSSH's capabilities and complexity, ensuring users can utilize a single configuration file across both.","difficulty":"Medium"},{"project_name":"Support for OpenSSH certificates (2024)","summary":"Expanding libssh's functionality to fully support OpenSSH certificates for both client and server authentication, improving interoperability with OpenSSH servers.","difficulty":"Medium"},{"project_name":"Test coverage for GSSAPI Authentication (2024)","summary":"Implementing automated tests for GSSAPI authentication in libssh to enhance reliability and ensure proper functionality of the SSH protocol.","difficulty":"Medium"},{"project_name":"async SFTP client (2023)","summary":"Transforming libssh's SFTP implementation to allow for asynchronous file transfers, enhancing speed and efficiency through improved API design.","difficulty":"Hard"},{"project_name":"Support for OpenSSH connection multiplexing (2023)","summary":"Implementing support for multiplexed connections to speed up session management, leveraging the existing compatibility with OpenSSH configurations.","difficulty":"Medium/Hard"},{"project_name":"Callback based sftp server (2022)","summary":"Revamping the SFTP server in libssh to a callback-based model, allowing for improved customization and flexibility in handling messages.","difficulty":"Medium"}],"jina_response":"Title: Google Summer of Code ‚Äì libssh\n\nURL Source: https://www.libssh.org/development/google-summer-of-code/\n\nMarkdown Content:\nContributors guidance\n---------------------\n\nThe application process consists of next steps:\n\n*   Become acquainted with application process for GSoC.\n\n*   Join to gsoc mailing list: [https://groups.google.com/group/google-summer-of-code-announce](https://groups.google.com/group/google-summer-of-code-announce)\n\n*   Join libssh mailing list: [https://www.libssh.org/communication/](https://www.libssh.org/communication/)\n\n*   Search mentor for chosen project in mailing list discuss or propose your own project and find a mentor for it.\n\n*   Submit the application/proposal including all requirements at the Google Summer of Code Site.\n\nRequirements before starting search for mentor:\n\n*   Clone and build libssh sources: [https://www.libssh.org/development/](https://www.libssh.org/development/)\n\n*   Review existing issues in bug tracker and try to solve some simpler one, providing a merge request on gitlab mirror [https://gitlab.com/libssh/libssh-mirror/-/issues](https://gitlab.com/libssh/libssh-mirror/-/issues)\n\n*   Prepare answers to questions about own participation in project.\n\nApplication requirements/recommendations:\n\n*   All applications _must_ go through Google‚Äôs application system; we can‚Äôt accept any application unless it is submitted there.\n\n*   Use a descriptive title in Google‚Äôs system. Good example: ‚Äúlibssh: Improve SSH connection fuzzing‚Äù Bad example: ‚ÄúMy gsoc project‚Äù\n\n*   Make it easy for your mentors to give you feedback. If you‚Äôre using Google docs, enable comments and submit a ‚Äúdraft‚Äù (we can‚Äôt see the ‚Äúfinal‚Äù versions until applications close). If you‚Äôre using a format that doesn‚Äôt accept comments, make sure your email is on the document and don‚Äôt forget to check for feedback!\n\n*   Use the following template for the your project application. It will help you to answer the questions we want to hear answers for and prepare yourself for the project itself: [https://docs.google.com/document/d/1H1BDf0gZZkPwTOKuu7cOsPq40DBuOCY8qcF8e49pXUY](https://docs.google.com/document/d/1H1BDf0gZZkPwTOKuu7cOsPq40DBuOCY8qcF8e49pXUY)\n\nGSoC libssh organization administrators:\n\n*   Jakub Jelen (jakuje on Matrix)\n*   Anderson Sasaki (toshisasaki on Matrix)\n*   Andreas Schneider (asn on Matrix)\n\nlibssh mentors:\n\n*   Jakub Jelen (jakuje on Matrix)\n*   Sahana Prasad (saprasad on Matrix)\n*   Eshan Kelkar (eshan\\_k on Matrix)\n\nProject ideas\n-------------\n\n### Support for FIDO/U2F keys on the client side\n\nThe server side support (signature verification) and key type definitions are in place so authenticating using these keys from openssh client to libssh server should already work. But the libssh clients can not use the U2F based keys as well as it can not be used to enroll the hardware for authentication with ssh.\n\nThe project should involve adding code paths to create U2F signatures, as well as possibility to test them without the actual hardware in the CI. Here we can get inspiration from OpenSSH, as they provide sk-dummy.so, which can simulate fido/u2f devices. This is packaged in Fedora.\n\n*   Difficulty: Medium\n*   Project length: 350 hours\n*   Language(s): Good knowledge of C, knowledge about elliptic curves cryptography or u2f is a plus üòâ\n*   Possible Mentors: Jakub Jelen\n*   References:\n    *   [https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.u2f](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.u2f)\n\n### OpenSSH-compatible CLI\n\nThe libssh is provided as a library and only provided binaries are examples implementing either specific client or server examples without an attempt to implement a CLI that can support most of the OpenSSH‚Äôs CLI use cases and could be used as a drop-in replacement. The libssh should already support most of the use cases (and if not, new issues should be opened and implemented). Similar exercise can be done for server, but there will many more gaps.\n\n*   Difficulty: Medium\n*   Project length: 350 hours\n*   Language(s): Good knowledge of C\n*   Possible Mentors: Jakub Jelen\n*   References:\n    *   Manual page for ssh: [https://linux.die.net/man/1/ssh](https://linux.die.net/man/1/ssh)\n\n### Improve configuration compatibility with OpenSSH\n\nThe libssh is trying to be compatible with the OpenSSH configuration files to make the experience for our users as smooth as possible to be able to use only one configuration file for both. But OpenSSH configuration file options grow in complexity and we are not catching up with all the corner cases, which sometimes got reported to us. This project is about understanding the SSH configuration, how it is handled by OpenSSH and adjusting the libssh configuration parser to match as closely as possible, including adding a automated test coverage that can compare results with the OpenSSH parser.\n\nIt might be possible to create a fuzzer for the configuration file, that would feed the inputs into both openssh and libssh to verify they result in the same effective configuration.\n\n*   Difficulty: Medium\n*   Project length: 350 hours\n*   Language(s): Good knowledge of C, understanding of fuzzing testing is a plus\n*   Possible Mentors: Jakub Jelen\n*   References:\n    *   Manual page for ssh\\_config: [https://linux.die.net/man/5/ssh\\_config](https://linux.die.net/man/5/ssh_config)\n\nCompleted projects\n------------------\n\n### Support for OpenSSH certificates (2024)\n\nThe libssh supports OpenSSH certificates as opaque blobs alongside the client keys only to pass them along with the key to some compatible server to verify the authentication. This is ok for basic interoperability with OpenSSH servers configured to accept certificates signed with Users CA, but it does not cover the server use cases (authenticating users), nor the Hosts CA (authenticating servers to clients) use case at all.\n\n*   Difficulty: Medium\n*   Project length: 350 hours\n*   Language(s): Good knowledge of C, knowledge about certificates is a plus\n*   Mentors: Jakub Jelen, Sahana Prasad, Eshan Kelkar\n*   References:\n    *   [https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.certkeys)\n    *   [https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.krl](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.krl)\n*   Student: Francesco Rollo\n*   [https://medium.com/@eferollo/my-google-summer-of-code-2024-journey-with-libssh-802e72f935e3](https://medium.com/@eferollo/my-google-summer-of-code-2024-journey-with-libssh-802e72f935e3)\n\n### Test coverage for GSSAPI Authentication (2024)\n\nThe libssh supports GSSAPI authentication for ages. But there is no automated test coverage for neither client nor server, making the code Schrodinger code (both working but more likely broken). This project involves learning how the GSSAPI authentication in SSH protocol works, proposing test cases and implementing them inside of the upstream testsuite with help of the [cwrap](https://cwrap.org/) wrappers. Stretch goal is looking into the GSSAPI Key exchange defined in the same RFC and [RFC8732](https://datatracker.ietf.org/doc/html/rfc8732) and testing it well.\n\n*   Difficulty: Medium\n*   Project length: 350 hours\n*   Language(s): Good knowledge of C, knowledge about kerberos and GSSAPI is a plus\n*   Mentors: Jakub Jelen, Sahana Prasad, Eshan Kelkar\n*   References:\n    *   [https://datatracker.ietf.org/doc/html/rfc4462](https://datatracker.ietf.org/doc/html/rfc4462)\n    *   [https://gitlab.com/libssh/libssh-mirror/-/issues/191](https://gitlab.com/libssh/libssh-mirror/-/issues/191)\n*   Student: Gauravsingh Sisodia\n*   [https://xaerru.github.io/gsoc24/](https://xaerru.github.io/gsoc24/)\n\n### async SFTP client (2023)\n\nThe SFTP implementation in libssh requires application to call libssh API to send each chunk of data, which is not the fastest option. Our idea is that libssh should provide an API similar to io\\_uring, where you set up the transfer of the file and libssh will take care of the rest.\n\n*   Difficulty: hard\n*   Project length: 350 hours\n*   Language(s): Good knowledge of C, network programming and IO handling\n*   Mentors: Sahana Prasad, Jakub Jelen, Norbert Pocs\n*   References:\n    *   [https://gitlab.com/libssh/libssh-mirror/-/issues/79](https://gitlab.com/libssh/libssh-mirror/-/issues/79)\n    *   [https://gitlab.com/libssh/libssh-mirror/-/issues/51](https://gitlab.com/libssh/libssh-mirror/-/issues/51)\n    *   [https://gitlab.com/libssh/libssh-mirror/-/issues/65](https://gitlab.com/libssh/libssh-mirror/-/issues/65)\n*   Student: Eshan Kelkar\n*   [https://summerofcode.withgoogle.com/programs/2023/projects/CdkiroFH](https://summerofcode.withgoogle.com/programs/2023/projects/CdkiroFH)\n\n### Support for OpenSSH connection multiplexing (2023)\n\nThe OpenSSH supports sharing several sessions over a single TCP connection, which makes opening new channels faster from cli. The usage of the same MUX protocol is not mandatory, but as we already work with openssh configuration files so, it would probably make sense to implement it in compatible way.\n\n*   Difficulty: medium/hard\n*   Project length: 175 hours\n*   Language(s): Good knowledge of C, knowledge about communication between processes is a plus üòâ\n*   Mentors: Norbert Pocs, Sahana Prasad\n*   References:\n    *   [https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.mux](https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.mux)\n*   Student: Ahsen Kamal\n*   [https://summerofcode.withgoogle.com/programs/2023/projects/GdK87jbe](https://summerofcode.withgoogle.com/programs/2023/projects/GdK87jbe)\n\n### **Callback based sftp server** (2022)\n\nCurrently, the sftp server implementation is based on a huge switch handling all the possible messages. Changing to callback-based model can provide much better customization by the library users\n\n*   Difficulty: medium\n*   Project length: 175 hours\n*   Language(s): Good knowledge of C and network programming\n*   Mentors: Jakub Jelen\n*   References:\n    *   The ssh server in libssh is using callback to handle various SSH protocol messages or authentication types\n*   Student: Zeyu Sheng\n*   [https://summerofcode.withgoogle.com/programs/2022/projects/Hm79LwKE](https://summerofcode.withgoogle.com/programs/2022/projects/Hm79LwKE)\n"}