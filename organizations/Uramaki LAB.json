{"name":"Uramaki LAB","description":"The User Experience LAB based on IA","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/uramaki-lab","ideas_url":"https://github.com/ruxailab/gsoc/blob/main/ideas2025.md","logo":"https://summerofcode.withgoogle.com/media/org/uramaki-lab/pr3ivuk0zg7lhgj1-360.png","technologies":["python","javascript","html","css","Firebase"],"topics":["user experience","Usability","User Evaluation","Eye Tracking","Sentimental Analysis"],"projects":[{"project_name":"AI-Powered Accessibility Evaluation in RUXAILAB","summary":"Develop a comprehensive AI-driven system to automate WCAG compliance testing and improve accessibility evaluations for websites and applications.","difficulty":"Hard"},{"project_name":"AI Tool for Heuristic Evaluation","summary":"Create an AI-based tool to automatically assess usability issues in digital interfaces, generating reports similar to expert evaluations.","difficulty":"Hard"},{"project_name":"Integration of Heat Maps into Remote Usability LAB","summary":"Develop a tool to track user interactions using heat maps, providing insights into user behavior during usability testing.","difficulty":"Hard"},{"project_name":"Integration of User Testing into RUXAILAB with Eye Tracking, Sentiment Analysis and Pre-Post Form Tasks","summary":"Integrate advanced user testing techniques like eye tracking and sentiment analysis to enhance data on user interactions and emotions.","difficulty":"Hard"},{"project_name":"UI Layout Optimization for RUXAILAB","summary":"Redesign the user interface of RUXAILAB for improved usability and accessibility by utilizing AI-driven suggestions and real-time updates.","difficulty":"Medium"},{"project_name":"Comparative Analysis and Fine-Tuning of Sentiment Models for Improved System Integration","summary":"Analyze and optimize sentiment analysis models for better scalability and performance within RUXAILAB.","difficulty":"Medium"},{"project_name":"Transcription Tool for Usability Testing","summary":"Create a transcription service for usability testing that allows real-time conversion of speech to text and post-test analysis of verbal feedback.","difficulty":"Medium"},{"project_name":"Implementation of A/B Testing Capability in RUXAILAB","summary":"Develop A/B testing functionality within RUXAILAB to enable systematic comparison of UI variations and gather user preferences data.","difficulty":"Medium"},{"project_name":"Integration of GitHub Actions with Discord Role Management","summary":"Automate the integration between GitHub and Discord to manage roles and track contributions efficiently through GitHub Actions.","difficulty":"Easy"},{"project_name":"Automating Issue Creation from SonarQube in CI/CD Pipelines","summary":"Create a system to automatically generate GitHub issues based on SonarQube code quality analyses, enhancing software management.","difficulty":"Easy"},{"project_name":"Enhancing Playwright Testing in RUXAILAB","summary":"Optimize Playwright automated testing frameworks in RUXAILAB, focusing on maintainability and extensive documentation for ease of use.","difficulty":"Easy"}],"jina_response":"Title: gsoc/ideas2025.md at main · ruxailab/gsoc\n\nURL Source: https://github.com/ruxailab/gsoc/blob/main/ideas2025.md\n\nMarkdown Content:\nGSoC 2025 Ideas for RUXAILAB (yes, we have updated our name after paper publications)\n-------------------------------------------------------------------------------------\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#gsoc-2025-ideas-for-ruxailab-yes-we-have-updated-our-name-after-paper-publications)\n\nAll the current ideas for GSoC2025 are listed bellow:\n\nBig size projects (~350h)\n-------------------------\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#big-size-projects-350h)\n\n### AI-Powered Accessibility Evaluation in RUXAILAB (350h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#ai-powered-accessibility-evaluation-in-ruxailab-350h)\n\nThis project aims to **develop a comprehensive AI-powered accessibility evaluation system** within RUXAILAB, focusing on **automating and enhancing WCAG compliance testing**. By integrating **artificial intelligence with semi-automated evaluation techniques**, this system will assist developers and usability experts in identifying and addressing accessibility barriers in digital content, including **websites, documents, and mobile applications**. The system will provide **detailed, multi-dimensional reports**, offering both **quantitative compliance scores** and **qualitative insights** in plain language.\n\n**Key Features:**\n\n*   **Automated WCAG Compliance Testing:** Utilize **AI-enhanced evaluation tools** and integrate existing APIs (e.g., [WAVE API](https://wave.webaim.org/api/)) to generate **automated accessibility assessments**.\n*   **AI-Powered Accessibility Insights:** Implement **machine learning models** to **detect complex accessibility issues** that may not be captured by traditional automated tools, such as **color contrast issues, ARIA misconfigurations, and screen reader compatibility problems**.\n*   **Data Integration and Analysis:** Merge results from **automated tools and AI-generated insights**, creating a **comprehensive accessibility evaluation framework**.\n*   **Semi-Automated Expert Evaluation:** Enable expert evaluators to **refine AI-generated reports**, ensuring **higher evaluation accuracy and adaptability**.\n*   **Quantitative Compliance Scoring:** Establish a **numerical accessibility index** based on **WCAG success criteria**, enabling users to **track and compare** improvements over time.\n*   **Natural Language Summaries:** Use **AI-driven text generation** to translate technical accessibility reports into **readable, actionable insights** for designers, developers, and content creators.\n*   **Continuous Learning Mechanism:** Implement an AI model that **improves over time** by learning from expert evaluations and new accessibility guidelines.\n\n**Keywords:** Artificial Intelligence (AI), Accessibility Testing, WCAG Compliance, Data Analysis, Machine Learning, Usability Evaluation  \n**Expected Outcome:** A **fully integrated AI-driven accessibility evaluation system** that enhances and automates **WCAG compliance testing**, making accessibility validation more efficient and insightful within RUXAILAB.  \n**Skills Required:** Python, JavaScript, AI for Data Analysis, Machine Learning, Accessibility Standards (WCAG), NLP for Report Generation  \n**Mentor:** Marc  \n**Difficulty:** Hard\n\n### AI Tool for Heuristic Evaluation (350h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#ai-tool-for-heuristic-evaluation-350h)\n\nThis project aims to **develop an AI-based heuristic evaluation tool** capable of **automatically assessing usability issues** in digital interfaces, mimicking the analysis of an **expert usability evaluator**. The system will apply **well-established usability heuristics**, such as **Nielsen’s Heuristics**, to evaluate web pages and **identify usability problems** based on structured guidelines. The tool will generate **detailed reports** with **quantitative scores** and **qualitative insights**, helping designers and developers improve their interfaces.\n\n**Key Features:**\n\n*   **Automated Heuristic Evaluation:** Utilize AI to systematically **analyze web pages** based on usability heuristics.\n*   **Expert-Level Analysis:** Develop machine learning models trained on usability best practices to **identify common usability problems** such as **poor feedback, inconsistent navigation, and inefficient workflows**.\n*   **Multi-Dimensional Reporting:** Generate both **quantitative usability scores** and **qualitative insights** that explain detected usability issues similarly as RUXAILAB is doing right now.\n*   **Continuous Learning Mechanism:** Enhance evaluation accuracy by refining AI models based on **expert reviews and user feedback**.\n*   **Integration with RUXAILAB:** Seamlessly integrate with the existing usability evaluation tools within RUXAILAB.\n\n**Keywords:** Artificial Intelligence (AI), Usability Testing, Heuristic Evaluation, Data Analysis, Machine Learning, UI/UX Optimization  \n**Expected Outcome:** A **fully automated heuristic evaluation tool** that functions as an **AI-based usability expert**, identifying and reporting usability issues based on standard heuristic guidelines.  \n**Skills Required:** Python, JavaScript, NLP for Report Generation  \n**Mentor:** Marc González  \n**Difficulty:** Hard\n\n### Integration of Heat Maps into Remote Usability LAB (350h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#integration-of-heat-maps-into-remote-usability-lab-350h)\n\nHeat maps encompass a variety of tracking tools, including **scroll maps, click maps, and move maps**, each providing distinct insights into user behavior. This project aims to **develop and integrate a comprehensive heatmap recording tool** for usability testing inside the **RUXAILAB** framework. The system will optimize **mouse tracking** and generate detailed reports on user interactions.\n\n**Key Features:**\n\n*   **Comprehensive Heatmap Tracking:** Implementation of **scroll maps, click maps, and move maps** for a thorough performance analysis\n*   **Real-Time Data Collection:** AI-powered tracking to capture and visualize user interaction patterns\n*   **Optimized Mouse Tracking System:** Enhancing usability testing with advanced cursor movement analytics\n*   **Automated Report Generation:** AI-driven insights into user behavior for usability evaluation\n*   **Seamless RUXAILAB Integration:** Full compatibility with existing usability testing tools\n\n**Keywords:** Artificial Intelligence (AI), Algorithm Optimization, JavaScript, Usability Testing, Front-end Development  \n**Expected Outcome:** A **fully integrated heatmap tracking system** that enhances usability testing in RUXAILAB by **analyzing user behavior and generating reports**  \n**Skills Required:** Python, JavaScript, AI for Data Analysis  \n**Mentor:** Murilo  \n**Difficulty:** Hard\n\n* * *\n\n### Integration of User Testing into RUXAILAB with Eye Tracking, Sentiment Analysis and Pre-Post Form Tasks (350h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#integration-of-user-testing-into-ruxailab-with-eye-tracking-sentiment-analysis-and-pre-post-form-tasks-350h)\n\nThis project aims to **integrate advanced user testing capabilities into RUXAILAB**, incorporating **eye tracking, sentiment analysis, and structured pre/post-test forms**. By combining these elements, the system will provide **a comprehensive framework for usability testing**, offering insights into user behavior, emotional response, and engagement levels.\n\n**Key Features:**\n\n*   **Eye Tracking Integration:** Analyze user gaze patterns to identify usability issues and areas of focus\n*   **Sentiment Analysis:** Utilize AI-driven sentiment detection to assess user emotions during interactions\n*   **Pre and Post-Test Forms:** Structured questionnaires to collect user expectations and post-experience feedback\n*   **Automated Data Analysis:** Generate real-time reports with actionable insights for improving usability\n*   **Seamless RUXAILAB Integration:** Ensure compatibility with existing usability testing workflows\n\n**Keywords:** User Testing, Eye Tracking, Sentiment Analysis, AI, Usability Testing  \n**Expected Outcome:** A **fully integrated user testing framework** that enhances RUXAILAB by **capturing and analyzing user behavior, emotional responses, and structured feedback**  \n**Skills Required:** Python, JavaScript, AI/ML for Sentiment Analysis, Eye Tracking APIs  \n**Mentor:** Marc and Karine **Difficulty:** Hard\n\nMedium size projects (~175h)\n----------------------------\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#medium-size-projects-175h)\n\n### UI Layout Optimization for RUXAILAB (175h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#ui-layout-optimization-for-ruxailab-175h)\n\nThis project aims to redesign the **RUXAILAB user interface (UI)** to improve **usability, accessibility, and responsiveness**. The new design will incorporate **AI-driven layout suggestions**, **heatmaps**, and **real-time usability tracking** to create a **more intuitive and efficient experience** for users.\n\n**Key Improvements:**\n\n*   **Simplified Navigation:** Improved menu structure for seamless interaction\n*   **Responsive Design:** Optimized for mobile, tablet, and desktop\n*   **Accessibility Features:** WCAG-compliant color contrast, keyboard navigation, screen reader support\n*   **Data-Driven UI Optimization:** AI-powered layout recommendations based on real-time user interactions\n*   **Dark Mode & Custom Themes:** Enhancing user comfort for different environments\n\n**Keywords:** UI/UX Design, Accessibility, Front-end Development, AI, Usability Testing  \n**Expected Outcome:** A fully **redesigned and accessible RUXAILAB interface** with **real-time usability tracking**  \n**Skills Required:** JavaScript, Vue.js, CSS, Figma, AI for UI Optimization  \n**Mentor:** Leticia  \n**Difficulty:** Medium\n\n* * *\n\n### Comparative Analysis and Fine-Tuning of Sentiment Models for Improved System Integration (175h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#comparative-analysis-and-fine-tuning-of-sentiment-models-for-improved-system-integration-175h)\n\nThis project focuses on **comparing and fine-tuning sentiment analysis models** to enhance **integration efficiency and scalability** within RUXAILAB. The goal is to analyze both **traditional performance metrics** and **operational scalability factors** to determine the most efficient sentiment models for real-time and batch processing scenarios.\n\n**Key Features:**\n\n*   **Resource Efficiency Analysis:** Evaluate computation time, response latency, and initialization speed\n*   **Performance Comparison:** Assess accuracy, F1-score, and contextual processing capabilities\n*   **Scalability and Memory Management:** Optimize model performance under varying data loads\n*   **Batch vs. Real-Time Processing:** Analyze trade-offs between batch processing and real-time sentiment detection\n*   **Storage and Memory Optimization:** Identify strategies to minimize memory footprint while maintaining performance\n*   **Monitoring and Observability:** Implement tracking mechanisms for efficient model oversight\n\n**Keywords:** Sentiment Analysis, Machine Learning, AI Optimization, Scalability, Performance Metrics  \n**Expected Outcome:** A **comparative study and fine-tuned sentiment models** optimized for **scalability, resource efficiency, and real-time usability in RUXAILAB**  \n**Skills Required:** Python, NLP, AI/ML, Model Optimization  \n**Mentor:** Karine  \n**Difficulty:** Medium\n\n* * *\n\n### Transcription Tool for Usability Testing (175h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#transcription-tool-for-usability-testing-175h)\n\nThis project aims to **create a transcription service** designed to streamline **usability testing processes** within RUXAILAB. The service will allow testers to **activate transcription** during specific tasks of a test and provide an interface to **review and analyze transcriptions afterward**. By integrating real-time speech-to-text capabilities, usability researchers can better capture **verbal feedback** from users.\n\n**Key Features:**\n\n*   **Task-Specific Transcription:** Testers can activate transcription for specific tasks during usability tests\n*   **Post-Test Review and Editing:** An interface for reviewing, organizing, and editing transcriptions task by task\n*   **Automated Report Generation:** Generate **comprehensive task-specific transcription reports** exportable in multiple formats (e.g., PDF, CSV)\n*   **Seamless RUXAILAB Integration:** Ensuring compatibility with existing usability testing workflows\n*   **Real-Time Speech-to-Text Processing:** Enable accurate transcription of verbal feedback during user testing\n\n**Keywords:** Speech-to-Text, Transcription, Usability Testing, AI, Automation  \n**Expected Outcome:** A **task-based transcription system** integrated into RUXAILAB, allowing testers to **capture, analyze, and report usability test transcriptions efficiently**  \n**Skills Required:** Python, NLP, Speech-to-Text APIs, Front-End Development  \n**Mentor:** Anna  \n**Difficulty:** Medium\n\n* * *\n\n### Implementation of A/B Testing Capability in RUXAILAB (175h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#implementation-of-ab-testing-capability-in-ruxailab-175h)\n\nThis project focuses on **implementing A/B testing functionality within RUXAILAB** to enhance usability evaluation and data-driven decision-making. The goal is to provide an integrated system for running **controlled experiments**, comparing different UI designs, and gathering insights on user preferences.\n\n**Key Features:**\n\n*   **Automated A/B Test Setup:** Allow testers to configure and manage A/B tests within RUXAILAB\n*   **Real-Time Performance Tracking:** Collect user interaction data for different variations\n*   **Statistical Analysis Module:** Provide insights on test results using key performance indicators\n*   **User Segmentation:** Enable tests based on demographic, behavior, or experience level\n*   **Seamless UI Integration:** Ensure compatibility with existing usability testing workflows\n\n**Keywords:** A/B Testing, User Experience, Usability Testing, Data Analysis, Front-End Development  \n**Expected Outcome:** A **fully integrated A/B testing module** that allows usability researchers to conduct controlled experiments and make data-driven design decisions in RUXAILAB  \n**Skills Required:** JavaScript, Python, Data Analysis, UI/UX Testing  \n**Mentor:** Igor  \n**Difficulty:** Medium\n\nSmall size projects (~90h)\n--------------------------\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#small-size-projects-90h)\n\n### Integration of GitHub Actions with Discord Role Management (90h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#integration-of-github-actions-with-discord-role-management-90h)\n\nThis project aims to **integrate GitHub Actions with Discord** to automate **role creation, pull request (PR) management, and collaboration analytics**. The system will enable **seamless automation** between GitHub repositories and Discord servers, ensuring that users receive appropriate roles based on their contributions and project interactions.\n\n**Key Features:**\n\n*   **Automated Role Assignment:** Assign Discord roles based on GitHub contributions, such as merged PRs, issues opened, and commits\n*   **Pull Request Management:** Automate PR reviews, label assignments, and notifications to Discord channels\n*   **Collaborator Analytics:** Generate **visual charts** of contributors' activities and display them in Discord\n*   **Customizable GitHub Actions:** Enable project maintainers to define rules for PR handling, auto-merging, and CI/CD notifications\n*   **Seamless RUXAILAB Integration:** Extend usability for research and open-source projects\n\n**Keywords:** GitHub Actions, Discord API, Automation, Open Source Collaboration, Workflow Management  \n**Expected Outcome:** A **GitHub Actions-powered integration** that automates **role management, PR handling, and contributor analytics** for Discord communities  \n**Skills Required:** JavaScript, Python, GitHub Actions, Discord API  \n**Mentor:** Leticia  \n**Difficulty:** Easy\n\n* * *\n\n### Automating Issue Creation from SonarQube in CI/CD Pipelines (90h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#automating-issue-creation-from-sonarqube-in-cicd-pipelines-90h)\n\nThis project focuses on **automating the creation of GitHub issues based on SonarQube analysis** in a **CI/CD pipeline**. By integrating SonarQube results into the development workflow, the system will automatically detect **code quality issues**, create GitHub issues, and notify maintainers for quick action.\n\n**Key Features:**\n\n*   **Automated Issue Creation:** Detect new issues from SonarQube scans and create corresponding GitHub issues\n*   **Severity-Based Issue Prioritization:** Categorize issues based on severity (Critical, Major, Minor)\n*   **Pipeline Integration:** Ensure smooth integration with CI/CD workflows for real-time analysis\n*   **Developer Notifications:** Automatically notify responsible developers about newly created issues\n*   **Customizable Rules:** Allow maintainers to define which issues should trigger automatic creation\n\n**Keywords:** SonarQube, Software Quality, CI/CD, GitHub Actions, Automation  \n**Expected Outcome:** A **fully automated issue tracking system** that integrates SonarQube with GitHub for **better software quality management**  \n**Skills Required:** Python, JavaScript, GitHub Actions, SonarQube API  \n**Mentor:** Leticia  \n**Difficulty:** Easy\n\n* * *\n\n### Enhancing Playwright Testing in RUXAILAB (90h)\n\n[](https://github.com/ruxailab/gsoc/blob/main/ideas2025.md#enhancing-playwright-testing-in-ruxailab-90h)\n\nThis project aims to **refine and optimize Playwright-based automated testing** in RUXAILAB, improving test efficiency and documentation to enhance maintainability and ease of use. The focus will be on **ensuring robust test coverage, optimizing test workflows, and developing comprehensive documentation** to support contributors.\n\n**Key Features:**\n\n*   **Improving Test Maintainability:** Refactor test scripts for better reusability and efficiency\n*   **Cross-Browser and Device Compatibility:** Ensure consistent behavior across different browsers and devices\n*   **Accessibility Testing Enhancements:** Strengthen WCAG compliance validation for UI components\n*   **Comprehensive Documentation:** Develop detailed guides on test creation, execution, and maintenance\n*   **Integration with CI/CD Pipelines:** Enhance GitHub Actions workflows for streamlined automated testing\n\n**Keywords:** Playwright, Automated Testing, UI Testing, Accessibility, Documentation  \n**Expected Outcome:** A **more maintainable and well-documented Playwright testing framework**, ensuring long-term usability and ease of contribution in RUXAILAB  \n**Skills Required:** JavaScript, Playwright, Automated Testing, CI/CD, GitHub Actions, Technical Writing  \n**Mentor:** Eric  \n**Difficulty:** Easy\n"}