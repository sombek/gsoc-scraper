{"name":"Scala Center","description":"Guide and support the Scala community","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/scala-center","ideas_url":"https://github.com/scalacenter/GoogleSummerOfCode","logo":"https://summerofcode.withgoogle.com/media/org/scala-center/f5qjbrwguri7g3sv-360.png","technologies":["scala","scala.js","scala native"],"topics":["education","compilers","tooling"],"projects":[{"project_name":"Doodle Bitmap Convolutions","summary":"This project aims to add support for bitmap convolutions to Doodle, a graphics library for Scala, with an expected outcome of working code and documentation.","difficulty":"Easy"},{"project_name":"Doodle Skia Backend","summary":"The goal of this project is to create a Skia backend for Doodle using Skiaj bindings, providing enhanced drawing capabilities.","difficulty":"Easy"},{"project_name":"Krop Template Engine","summary":"This project involves creating an HTML template engine for the Krop web framework to enable better web development in Scala.","difficulty":"Medium"},{"project_name":"Workflows4s Web UI","summary":"Implementing a web user interface for Workflows4s to visualize workflow progress and interactions via a designed API and using Scala and Scala.js.","difficulty":"Medium"},{"project_name":"ChatOps4s Prototype","summary":"A prototype library/toolkit allowing easy interaction with chat platforms like Slack, focusing on message sending and receiving.","difficulty":"Medium"},{"project_name":"Play Framework Support in Metals","summary":"This project aims to add support for Play Framework specific files in the Metals language server, facilitating better Scala development.","difficulty":"Medium"},{"project_name":"Support for basic GPU computations on data streams with fs2 integration","summary":"This project focuses on enabling basic GPU computations on data streams using Cyfra and fs2, to improve usability for developers.","difficulty":"Medium"},{"project_name":"Real-time rendering pipeline","summary":"Implementing a Vulkan rendering pipeline using Cyfra which can render scenes in real-time, supporting various output options.","difficulty":"Medium"},{"project_name":"Scala Bazel Rules for Scala.js and Scala Native","summary":"Development of Bazel build rules for Scala.js and Scala Native, enhancing build processes and developer experience.","difficulty":"Medium"},{"project_name":"JMH-Compliant Benchmarking Framework for Scala Native & Scala.js","summary":"Creation of a benchmarking framework mimicking JMH for accurate performance measurements on Scala Native and Scala.js platforms.","difficulty":"Hard"},{"project_name":"Incremental Optimization of Scala Native IR","summary":"Implementing incremental optimization for Scala Native’s Intermediate Representation to improve compilation speed and efficiency.","difficulty":"Hard"},{"project_name":"Difflicious UI","summary":"Implementation of a web interface for Difflicious, allowing users to explore and interact with diff outputs effectively.","difficulty":"Hard"},{"project_name":"Difflicious: Differ for Json type","summary":"Creating a differ supporting JSON types from popular Scala libraries to enhance the functionality of the Difflicious project.","difficulty":"Hard"},{"project_name":"One line CSV import in Scala","summary":"Aiming to replicate Python's pandas data import experience in Scala, this project focuses on compile-time data parsing.","difficulty":"Easy"},{"project_name":"Scaladex: Support for Compiler Plugins","summary":"Enhancing Scaladex to index and support compiler plugins, improving the search and browsing experience for Scala artifacts.","difficulty":"Medium"},{"project_name":"LLM4S - Implement an agentic toolkit for Large Language Models","summary":"Developing a toolkit for working with Large Language Models in Scala, facilitating the creation of agentic applications.","difficulty":"Medium"},{"project_name":"Scalus – Scala 3 compiler backend and DApps development platform for Cardano","summary":"Creating a platform to develop decentralized applications on the Cardano blockchain using a Scala 3 compiler backend.","difficulty":"Medium"}],"jina_response":"Title: GitHub - scalacenter/GoogleSummerOfCode: Ideas list for GSoC 2025 mentored by Scala Center\n\nURL Source: https://github.com/scalacenter/GoogleSummerOfCode\n\nMarkdown Content:\nIn this document, you can find a list of ideas that are proposed by the Scala Organisation for [Google Summer of Code 2025](https://summerofcode.withgoogle.com/).\n\nApplication\n-----------\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#application)\n\nIf you are interested in becoming a contributor on any idea, please reach out to your potential mentor using their email address specified with the project. You can also reach Scala Center at [scala.center(at)epfl.ch](mailto:scala.center@epfl.ch).\n\nIf you would like to be a mentor and propose your own idea, please submit a PR editing this file (e.g. see [2024's projects](https://github.com/scalacenter/GoogleSummerOfCode/blob/main/Past%20years%20ideas/2024.md)), adding your project to the list, following the format of other projects below.\n\nRules\n-----\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#rules)\n\nYou can read the full rules of the program at the following links: [Rules](https://summerofcode.withgoogle.com/rules), [Terms and Conditions](https://summerofcode.withgoogle.com/terms/contributor), [Help](https://summerofcode.withgoogle.com/help).\n\nAnd here are the requirements for the potential contributor's proposal: [Writing a proposal](https://google.github.io/gsocguides/student/writing-a-proposal).\n\nHowever, here are some rules that we'd like to emphasize since they are not visible enough at the above links:\n\n*   The program is geared towards beginners first and foremost. It is intended to **be a learning experience** for people at the very beginning of their careers. It is also intended to **give an opportunity** to people who would otherwise not have one. It is NOT a freelance job. Therefore, when making an acceptance decision on a potential contributor, we will prioritize disadvantaged backgrounds and contributors at the very beginning of their careers.\n*   **IMPORTANT - EPFL Students**: Please note that, according to GSoC rules, there are restrictions on accepting students from an organization's host university. For Scala Center, the host university is EPFL. We can only accept up to 1 student from EPFL, so please take it into account if you're studying at EPFL and consider applying.\n\nProject Ideas\n-------------\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#project-ideas)\n\n### Doodle Bitmap Convolutions\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#doodle-bitmap-convolutions)\n\n| Title | Doodle Bitmap Convolutions |\n| --- | --- |\n| Link to Project | [creativescala/doodle#94](https://github.com/creativescala/doodle/issues/94) |\n| Brief Description | Add support for bitmap convolutions to Doodle. The link has more, including a Github project laying out the steps. |\n| Expected Outcome | Working code and documentation. |\n| Prerequisites | Some Scala knowledge. |\n| Ideal Prerequisites | Basic knowledge of bitmap convolutions, some understanding of tagless final. |\n| Expected Difficulty | Easy – straightforward task, path for execution visible right now, very little uncertainty |\n| Expected Time Commitment | Medium project – 175 hours |\n| Mentor | Noel Welsh (GitHub: [@noelwelsh](https://github.com/noelwelsh), Email: [noel@noelwelsh.com](mailto:noel@noelwelsh.com)) |\n| Co-mentor |  |\n\n### Doodle Skia Backend\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#doodle-skia-backend)\n\n| Title | Doodle Skia Backend |\n| --- | --- |\n| Link to Project | [creativescala/doodle#175](https://github.com/creativescala/doodle/issues/175) |\n| Brief Description | Add a Skia backend for Doodle, using the Skiaj bindings. |\n| Expected Outcome | Working code and documentation. |\n| Prerequisites | Some Scala knowledge. |\n| Ideal Prerequisites | Some understanding of type classes or tagless final. |\n| Expected Difficulty | Easy – straightforward task, path for execution visible right now, very little uncertainty |\n| Expected Time Commitment | Medium project – 175 hours |\n| Mentor | Noel Welsh (GitHub: [@noelwelsh](https://github.com/noelwelsh), Email: [noel@noelwelsh.com](mailto:noel@noelwelsh.com)) |\n| Co-mentor |  |\n\n### Krop Template Engine\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#krop-template-engine)\n\n| Title | Krop Template Engine |\n| --- | --- |\n| Link to Project | [creativescala/krop#14](https://github.com/creativescala/krop/issues/14) |\n| Brief Description | Create an HTML template engine for the Krop web framework. |\n| Expected Outcome | Working code and documentation. |\n| Prerequisites | Intermediate Scala knowledge and basic HTML knowledge. |\n| Ideal Prerequisites | An understanding of parsing. |\n| Expected Difficulty | Medium – some design decisions need to be made and the implementation is not straightforward. |\n| Expected Time Commitment | Medium project – 175 hours |\n| Mentor | Noel Welsh (GitHub: [@noelwelsh](https://github.com/noelwelsh), Email: [noel@noelwelsh.com](mailto:noel@noelwelsh.com)) |\n| Co-mentor |  |\n\n### Business4s: Workflows4s Web UI\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#business4s-workflows4s-web-ui)\n\n| Title | Workflows4s Web UI |\n| --- | --- |\n| Link to Project | [https://github.com/business4s/workflows4s](https://github.com/business4s/workflows4s) |\n| Brief Description | Implement web user interface for Workflows4s. Design the API and implement both server and web side using scala and scala.js. See [business4s/workflows4s#19](https://github.com/business4s/workflows4s/issues/19) for details. |\n| Expected Outcome | Proof of concept of the UI that can present progress of a workflow instance. |\n| Prerequisites | Basic scala skills, basic frontend skills, basic knowledge of HTTP APIs (e.g. REST). |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Large project - 350 hours |\n| Spoken Language | English |\n| Mentor | Voytek Pituła (GitHub: [@Krever](https://github.com/Krever), Email: [w.pitula@gmail.com](mailto:w.pitula@gmail.com)) |\n| Co-mentor | Dave Smith (Github: [@davesmith00000](https://github.com/davesmith00000), Email: [david.smith@purplekingdomgames.com](mailto:david.smith@purplekingdomgames.com)) |\n\n### Business4s: ChatOps4s Prototype\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#business4s-chatops4s-prototype)\n\n| Title | ChatOps4s Prototype |\n| --- | --- |\n| Link to Project | To be created under [https://github.com/business4s](https://github.com/business4s) |\n| Brief Description | Prototype of library/toolkit allowing to easily send messages and receive input from chat platforms (e.g. Slack) |\n| Expected Outcome | Prototype that allows getting information in and out Slack with as little effort as possible. Research on how hard will it be to support other platforms. |\n| Prerequisites | Ability to research and consume external APIs. Basic exposure to some chat platform (Slack, Discord, MS Teams) |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Voytek Pituła (GitHub: [@Krever](https://github.com/Krever), Email: [w.pitula@gmail.com](mailto:w.pitula@gmail.com)) |\n| Co-mentor | \\- |\n\n### Play Framework Support in Metals\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#play-framework-support-in-metals)\n\n| Title | Play Framework Support in Metals |\n| --- | --- |\n| Link to Project | [scalameta/metals-feature-requests#50](https://github.com/scalameta/metals-feature-requests/issues/50) [scalameta/metals-feature-requests#89](https://github.com/scalameta/metals-feature-requests/issues/89) |\n| Brief Description | Add support for Play Framework specific files in Metals language server |\n| Expected Outcome | Working code and documentation. |\n| Prerequisites | Intermediate Scala knowledge and basic HTML knowledge. |\n| Ideal Prerequisites | An understanding of parsing and language server protocol. |\n| Expected Difficulty | Medium – some design decisions need to be made and the implementation is not straightforward. |\n| Expected Time Commitment | Medium project – 175 hours |\n| Mentor | Tomasz Godzik (GitHub: [@tgodzik](https://github.com/tgodzik), Email: [tomek.godzik@gmail.com](mailto:tomek.godzik@gmail.com)) |\n| Co-mentor |  |\n\n### Cyfra: Support for basic GPU computations on data streams with fs2 integration\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#cyfra-support-for-basic-gpu-computations-on-data-streams-with-fs2-integration)\n\n| Title |  |\n| --- | --- |\n| Link to Project | [https://github.com/ComputeNode/cyfra](https://github.com/ComputeNode/cyfra) |\n| Brief Description | Cyfra is a GPU runtime and a DSL that makes Scala a viable choice for GPU programming. Goal of the project is to implement support for GPU computations on data streams with focus on usability. |\n| Expected Outcome | Cyfra should enable developers that do not have background in GPU programming to write a simple data processing pipeline in Cyfra that performs compute on GPU and efficiently manages memory. The pipeline should be interoperable with fs2. |\n| Prerequisites | Some experience with Scala, and interest to learn a bit about GPUs. |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Szymon Rodziewicz ([LinkedIn](https://www.linkedin.com/in/szymon-r-04951895/), Github: [szymon-rd](https://github.com/szymon-rd), Email: [szymonrodant@gmail.com](mailto:szymonrodant@gmail.com)) |\n| Co-mentor | \\- |\n\n### Cyfra: Real-time rendering pipeline\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#cyfra-real-time-rendering-pipeline)\n\n| Title |  |\n| --- | --- |\n| Link to Project | [https://github.com/ComputeNode/cyfra](https://github.com/ComputeNode/cyfra) |\n| Brief Description | Cyfra is a GPU runtime and a DSL that makes Scala a viable choice for GPU programming. Goal of the project is to implement a basic real-time Vulkan rendering pipeline. |\n| Expected Outcome | Cyfra should enable developers to create programs that will render scenes from a basic one-step Vulkan pipeline in real time. It should support rendering to a window, a data stream, and a file. |\n| Prerequisites | No Scala experience is required, but basic experience with GPU programming would be helpful. |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Szymon Rodziewicz ([LinkedIn](https://www.linkedin.com/in/szymon-r-04951895/), Github: [szymon-rd](https://github.com/szymon-rd), Email: [szymonrodant@gmail.com](mailto:szymonrodant@gmail.com)) |\n| Co-mentor | \\- |\n\n### Scala Native / Scala.js Projects\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#scala-native--scalajs-projects)\n\n| Title | Scala Bazel Rules for Scala.js and Scala Native |\n| --- | --- |\n| Link to Project | [https://github.com/bazelbuild/rules\\_scala](https://github.com/bazelbuild/rules_scala) |\n| Brief Description | This project aims to develop Bazel build rules for Scala.js and Scala Native, enabling efficient and reproducible builds for both platforms. The project will provide first-class support for Scala projects within the Bazel ecosystem, improving integration and developer experience. |\n| Expected Outcome | Functional and well-documented Bazel rules that allow compiling, testing, and packaging Scala.js and Scala Native projects. Demonstration projects showcasing usage. |\n| Prerequisites | Experience with Scala, build tools (SBT, Bazel), and Scala.js/Scala Native basics. Some familiarity with Bazel rule definitions is a plus. |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Large project - 350 hours |\n| Mentor | Wojciech Mazur (GitHub: [@WojciechMazur](https://github.com/WojciechMazur), Email: [wmazur@virtuslab.com](https://github.com/scalacenter/GoogleSummerOfCode/blob/main/wmazur@virtuslab.com)) |\n| Co-mentor | TODO |\n\n| Title | JMH-Compliant Benchmarking Framework for Scala Native & Scala.js |\n| --- | --- |\n| Link to Project | [Scala Native](https://scala-native.org/) / [Scala.js](https://www.scala-js.org/) |\n| Brief Description | This project aims to implement a benchmarking framework similar to JMH (Java Microbenchmark Harness) allowing for accurate and reliable performance measurements on non JVM platforms. Both Scala Native and Scala.js cannot consume a modified JVM bytecode emitted by JMH framework. The goal is to create a runtime implementation for executing microbenchmarks and a Scala compiler plugin performing required transformations of Scala.js / Scala Native code based on JMH framework compiletime annotations. |\n| Expected Outcome | A benchmarking framework that mimics JMH APIs and produces reliable results for Scala Native and Scala.js. Demonstration benchmarks showcasing usage. |\n| Prerequisites | Good understanding of benchmarking principles, Scala Native, Scala.js, and Scala compiler plugins. Some knowledge of JMH is beneficial. |\n| Expected Difficulty | Hard |\n| Expected Time Commitment | Medium project - 175 hours |\n| Mentor | Wojciech Mazur (GitHub: [@WojciechMazur](https://github.com/WojciechMazur), Email: [wmazur@virtuslab.com](mailto:wmazur@virtuslab.com) ) |\n| Co-mentor | Sébastien Doeraene (GitHub: [@sjrd](https://github.com/sjrd), Email: [sjrdoeraene@gmail.com](mailto:sjrdoeraene@gmail.com) ) |\n\n### Scala Native Projects\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#scala-native-projects)\n\n| Title | Incremental Optimization of Scala Native IR |\n| --- | --- |\n| Link to Project | [Scala Native](https://scala-native.org/) |\n| Brief Description | This project aims to implement incremental optimization for Scala Native’s Intermediate Representation (IR), improving compilation speed by reusing results from previous compilation runs instead of optimizing the entire program from scratch. |\n| Expected Outcome | A working prototype of an incremental optimization pipeline for Scala Native IR, with measurable speedups over full optimizations. |\n| Prerequisites | Strong understanding of compilers, Scala Native IR, and optimization techniques. Knowledge of LLVM and incremental compilation strategies is a plus. |\n| Expected Difficulty | Hard |\n| Expected Time Commitment | Large project - 350 hours |\n| Mentor | Wojciech Mazur (GitHub: [@WojciechMazur](https://github.com/WojciechMazur), Email: [wmazur@virtuslab.com](mailto:wmazur@virtuslab.com) ) |\n| Co-mentor | Sébastien Doeraene (GitHub: [@sjrd](https://github.com/sjrd), Email: [sjrdoeraene@gmail.com](mailto:sjrdoeraene@gmail.com) ) |\n\n### Difflicious UI\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#difflicious-ui)\n\n| Title | Difflicious UI |\n| --- | --- |\n| Link to Project | [https://github.com/jatcwang/difflicious](https://github.com/jatcwang/difflicious) |\n| Brief Description | Implement a Web UI for Difflicious which allows users to explore diffs (test failures) reported by Difflicious. The UI should allow the user to expand and minimize section of the diff output in an interactive manner. |\n| Expected Outcome | Working UI and documentation |\n| Prerequisites | Good working knowledge of Scala and web technologies (Javascript, CSS, HTML). The project will be implemented in Scala.js (most likely with [Laminar](https://laminar.dev/) |\n| Expected Difficulty | Hard |\n| Expected Time Commitment | Large project - 350 hours |\n| Spoken Language | English |\n| Mentor | Jacob Wang (GitHub: [@jatcwang](https://github.com/jatcwang), Email: [jatcwang@gmail.com](mailto:jatcwang@gmail.com)) |\n\n### Difflicious: Differ for Json type\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#difflicious-differ-for-json-type)\n\n| Title | Difflicious: Differ for Json type |\n| --- | --- |\n| Link to Project | [https://github.com/jatcwang/difflicious](https://github.com/jatcwang/difflicious) |\n| Brief Description | Implement a differ which supports JSON types from popular Scala libraries (e.g. [Circe](https://github.com/circe/circe)). The current sealed trait Differ will be completely reworked to support any general disjoint union. |\n| Expected Outcome | A differ that can diff two two `io.circe.Json` values |\n| Prerequisites | Good working knowledge of Scala |\n| Expected Difficulty | Hard |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Jacob Wang (GitHub: [@jatcwang](https://github.com/jatcwang), Email: [jatcwang@gmail.com](mailto:jatcwang@gmail.com)) |\n\n### A Pandas Experience\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#a-pandas-experience)\n\n| Title | One line CSV import in scala |\n| --- | --- |\n| Link to Project | [https://github.com/Quafadas/scautable](https://github.com/Quafadas/scautable) |\n| Brief Description | Python through Pandas has a great data import experience. This project aims to replicate parts of that by parsing parts of the datasource _at compile time_, i.e. bringing knowledge of the structure and headers of your datasource inside the compilers knowledge. It's goal is to help you _discover_ your data, rather than force to you to write out it's metadata in advance. It's target audience will be writing non production, data sciency type scripts. Many of the motivating examples come from kaggle.com |\n| Expected Outcome | Can be measured in the increased number of successful test cases. I believe the \"fundamental\" idea has legs, but is currently limited to a small number of scenarios explored in my free time. The goal of the project is to expand the set of scenarios in which it is useful. Initial easy issues surround details such as correctly parsing headers, checking special characters, improving error messages and writing data back to (e.g. CSV). From there it should be possible to graduate to adding more datasources, for example SQL (hopefully simple - or harder, for example exploring apache parquet.) Stretch goals could include exploring strategies for streaming statistics, deriving visualisations, critiquing the design vs e.g. Kantan.csv, and / or attempting to help the consumer identify the \"types\" of the data at compile time. |\n| Prerequisites | Basic scala / java knowledge. The barrier to \"getting started\" ought to be rather low. The initial issues are largely detail driven rather than design driven. Basic experience with testing (munit), CI (GHA) and scala standard library would be enough to contribute. |\n| Expected Difficulty | Easy |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Simon Parten (GitHub: [@quafadas](https://github.com/foo), Email: [quafadas@gmail.com](mailto:quafadas@gmail.com)) |\n| Co-mentor | Volunteers wanted here too I guess :-) |\n\n### Scaladex: Support for Compiler Plugins\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#scaladex-support-for-compiler-plugins)\n\n| Title | Scaladex: Support for Compiler Plugins |\n| --- | --- |\n| Link to Project | [https://github.com/scalacenter/scaladex/](https://github.com/scalacenter/scaladex/) |\n| Brief Description | Add support for compiler plugins in Scaladex, the index website of open source Scala artifacts. Adapt the UI of the front page, search page and project page to allow searching, and browsing compiler plugins and their versions. See full description in [scalacenter/scaladex#865](https://github.com/scalacenter/scaladex/issues/865) |\n| Expected Outcome | Scaladex should index compiler plugin artifacts, such as [org.typelevel:kind-projector\\_2.13.16:0.13.3](https://repo1.maven.org/maven2/org/typelevel/kind-projector_2.13.16/0.13.3/). It should show them as a separate platform on the front page, search page and project page. |\n| Prerequisites | Some experience with Scala and SQL. Good knowledge about HTML and css |\n| Ideal Prerequisites | Some knowledge of the Scala ecosystem, such as Scala platforms and binary versions |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Kannupriya Kalra ([LinkedIn](https://www.linkedin.com/in/kannupriyakalra/), Email: [kannupriyakalra@gmail.com](mailto:kannupriyakalra@gmail.com)) |\n| Co-mentor | Adrien Piquerez (GitHub: [@adpi2](https://github.com/adpi2), Email: [adrien.piquerez@gmail.com](mailto:adrien.piquerez@gmail.com)) |\n\n### LLM4S - Implement an agentic toolkit for Large Language Models\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#llm4s---implement-an-agentic-toolkit-for-large-language-models)\n\n| Title |  |\n| --- | --- |\n| Link to Project | [https://github.com/rorygraves/llm4s](https://github.com/rorygraves/llm4s) |\n| Brief Description | LLM4S is creating a Large Language Model (LLM) toolkit for Scala. This project uses the power of Scala to make building LLM based applications easier. LLMs can be used in an agentic style where the LLM is allowed to call provided tools to access resources (such as reading a webpage, or calling an API service to perform a task). The goal of this project is to create a standard toolkit that developers can use when building agentic agents. |\n| Expected Outcome | LLM4S should have a useful set of tools integrated for LLM use, such as file or web browser tools to be used by applications built with LLM4S. |\n| Prerequisites | Some exerience of Scala and LLMs. |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Kannupriya Kalra ([LinkedIn](https://www.linkedin.com/in/kannupriyakalra/), Email: [kannupriyakalra@gmail.com](mailto:kannupriyakalra@gmail.com)) |\n| Co-mentor | Rory Graves ([LinkedIn](https://www.linkedin.com/in/roryjgraves/), Email: [rory.graves@fieldmark.co.uk](mailto:rory.graves@fieldmark.co.uk)) |\n\n### Scalus – Scala 3 compiler backend and DApps development platform for Cardano\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#scalus--scala-3-compiler-backend-and-dapps-development-platform-for-cardano)\n\n| Title |  |\n| --- | --- |\n| Link to Project | [https://github.com/nau/scalus](https://github.com/nau/scalus) |\n| Brief Description | Scalus is a platform for developing full-stacke decentralized applications (DApps) on the Cardano blockchain using a single language, Scala 3, tools and code for frontend, backend and smart contracts development. Scalus implements a Scala 3 compiler backend that compiles Scala to Cardano Plutus Core – a lambda calculus inspired smart contracts language. |\n| Expected Outcome | Enable more Scala 3 features to be compiled to Plutus Core: arbitrary size Tuples, better pattern-matching conversion algorithm. Improvements in our code generator, and various lambda calculus optimizations: inliner, common subexpression eliminator etc. We also expect improvements in Scalus standard library, test coverage and documentations. |\n| Prerequisites | Basic Scala knowledge. Basic understanding of compiler theory and blockchain technology is a plus. |\n| Expected Difficulty | Medium |\n| Expected Time Commitment | Medium project - 175 hours |\n| Spoken Language | English |\n| Mentor | Alex Nemish [Github](https://github.com/nau), Email: [anemish@gmail.com](mailto:anemish@gmail.com) |\n| Co-mentor | Ruslan Shevchenko. [Github](https://github.com/rssh) Email: [ruslan@shevchenko.kiev.ua](mailto:ruslan@shevchenko.kiev.ua) |\n\n### Template\n\n[](https://github.com/scalacenter/GoogleSummerOfCode#template)\n\n| Title |  |\n| --- | --- |\n| Link to Project | Provide a link to a website or a Git repository of your project. |\n| Brief Description | Please describe in a few sentences what the project is about. |\n| Expected Outcome | Specify the success criteria for the project. What are the deliverables, how do you know that it is done? |\n| Prerequisites | What minimal skills and knowledge the contributor needs to have to succeed on this project? |\n| Expected Difficulty | Easy, Medium of Hard |\n| Expected Time Commitment | Can be either: \"Medium project - 175 hours\" or \"Large project - 350 hours\" |\n| Spoken Language | English |\n| Mentor | FirstName LastName (GitHub: [@foo](https://github.com/foo), Email: [foo@gmail.com](mailto:foo@gmail.com)) |\n| Co-mentor | FirstName LastName (GitHub: [@foo](https://github.com/foo), Email: [foo@gmail.com](mailto:foo@gmail.com)) |\n"}