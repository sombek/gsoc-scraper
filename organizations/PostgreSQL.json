{"name":"PostgreSQL","description":"The Most Advanced Open Source Relational Database","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/postgresql","ideas_url":"https://wiki.postgresql.org/wiki/GSoC_2025","logo":"https://summerofcode.withgoogle.com/media/org/postgresql/hj9srl9x0o6iendy-360.png","technologies":["c","python","postgresql","javascript","go"],"topics":["web","database","ui","sql","Benchmark"],"projects":[{"project_name":"Upgrade pgwatch Grafana dashboards to v11","summary":"This project focuses on updating pgwatch's Grafana dashboards to ensure full compatibility with Grafana version 11, addressing discrepancies between versions and enhancing user experience.","difficulty":"Moderate"},{"project_name":"Enhancements to pgwatch v3 RPC integration","summary":"The aim is to enhance the Remote Procedure Calls implementation in pgwatch v3 by adding features and optimizing the current architecture.","difficulty":"Easy"},{"project_name":"ABI Compliance Checker","summary":"Develop a tool to check ABI compliance within PostgreSQL, producing reports for each commit to reduce the risk of introducing incompatible changes in minor releases.","difficulty":"Medium"},{"project_name":"Performance Farm: BuildBot test result data transformation","summary":"This project involves extracting and transforming data from BuildBot test results into a new reporting database for easier querying and analysis.","difficulty":"Easy"},{"project_name":"Performance Farm: Web user interface for navigating results","summary":"Develop a JavaScript-based interface to facilitate the navigation and visualization of test results from PostgreSQL Performance Farm.","difficulty":"Medium"},{"project_name":"pgexporter: Extension support","summary":"Enhance pgexporter functionality to support PostgreSQL extensions, ensuring widespread compatibility and ease of use for popular extensions.","difficulty":"Medium"},{"project_name":"pgmoneta: WAL record filtering","summary":"Implement a mechanism to apply custom filtering rules to WAL records before generating files, enhancing selective replication.","difficulty":"Hard"},{"project_name":"pgmoneta: Incremental backup for PostgreSQL 13-16","summary":"Develop functionality for pgmoneta to perform incremental backups specifically for PostgreSQL versions 13 to 16.","difficulty":"Hard"},{"project_name":"pgmoneta: Clustering support","summary":"Introduce clustering capabilities in pgmoneta, enabling backup results to replicate across multiple nodes effectively.","difficulty":"Hard"},{"project_name":"pgagroal: Enhance security","summary":"Focus on enhancing the security mechanisms within pgagroal by improving configuration for database aliases, X.509 support, and vault implementation.","difficulty":"Medium"}],"jina_response":"Title: GSoC 2025 - PostgreSQL wiki\n\nURL Source: https://wiki.postgresql.org/wiki/GSoC_2025\n\nMarkdown Content:\nThis page is for collecting ideas for Google Summer of Code 2025 projects. This page is for IDEAS ONLY.\n\n**IF YOU ARE A CONTRIBUTOR**: there is a top-level GSoC page for PostgreSQL here: [PostgreSQL General GSoC Page](https://wiki.postgresql.org/wiki/GSoC \"GSoC\") - **please read this first before proceeding to contact mentors**! Contribution guidelines, channels and communication methods are in this page too. PLEASE make sure you have read everything thoroughly.\n\nIf you are a mentor and would like to participate, feel free to edit this page and put your name below.\n\n**Mentors mailing list for proposals**: gsoc2025-mentors@lists.postgresql.org\n\nProposals\n---------\n\nProposals are still work in progress. If you are a mentor and would like to participate, feel free to edit this page and put your name below.\n\nAdmins\n------\n\n*   Jesper Pedersen <jesperpedersen (dot) db (at) gmail (dot) com\\>\n*   Pavlo Golub <pavlo (dot) golub (at) gmail (dot) com\\>\n\nMentors\n-------\n\nThe following individuals have been listed as possible mentors on the below projects, and/or offered to be mentors for student-proposed projects:\n\n*   Pavlo Golub\n*   Jesper Pedersen\n*   David Wheeler\n*   Mark Wong\n*   Akshat Jaimini\n*   Saurav Pal\n*   Shahryar Soltanpour\n*   Haoran Zhang\n*   Luca Ferrari\n*   Rajiv Harlalka\n*   Andreas Scherbaum\n\nUpgrade pgwatch Grafana dashboards to v11\n-----------------------------------------\n\n### Project Description\n\nThe project focuses on updating the current [pgwatch Grafana dashboards](https://github.com/cybertec-postgresql/pgwatch/tree/master/grafana) to ensure full compatibility with Grafana version 11. While a portion of the dashboards have already been automatically migrated to the new Grafana v11 model, they still require polishing and manual rework to fully leverage the new features and to address any discrepancies caused by differences between Grafana v10 and v11. Key differences include the removal of AngularJS-based components, modifications in panel JSON structure, and enhanced transformation capabilities. The mentee is welcome to improve the overall dashboarding experience by integrating new features, updating deprecated elements, and enhancing panels as needed.\n\n### Skills needed\n\n*   Proficiency in Grafana dashboard configuration and JSON model modifications\n*   Familiarity with the differences between Grafana v10 and v11\n*   Experience with Docker and Linux environments\n*   Basic understanding of web development concepts (HTML, CSS, JavaScript)\n*   PostgreSQL\n\n### Difficulty level\n\nModerate\n\n### Project size\n\nMedium (~175 hours)\n\n### Mentors\n\n*   Pavlo Golub\n*   Akshat Jaimini\n*   Rajiv Harlalka\n\n### Expected outcomes\n\n*   A refined set of Grafana dashboards for pgwatch that are fully compatible with Grafana v11\n*   Updated and polished JSON definitions that correctly incorporate new v11 features (such as improved visualizations, transformation options, and updated panel configurations)\n*   Enhanced dashboards and panels that integrate new features, account for deprecated features, and improve the overall user experience\n*   Documentation outlining the migration process with guidelines for future dashboard updates\n\n### References\n\n*   [pgwatch](https://github.com/cybertec-postgresql/pgwatch)\n*   [Breaking changes in Grafana v11.0](https://grafana.com/docs/grafana/latest/whatsnew/whats-new-in-v11-0/)\n*   [Removal of AngularJS support in Grafana: what you need to know](https://grafana.com/blog/2024/03/11/removal-of-angularjs-support-in-grafana-what-you-need-to-know/)\n*   [Angular support deprecation](https://grafana.com/docs/grafana/latest/developers/angular_deprecation/)\n*   [Custom v10 dashboards by postgres.ai](https://gitlab.com/postgres-ai/pgwatch2/-/tree/master/grafana-dashboards/postgres/v10) (example of customization)\n\nEnhancements to pgwatch v3 RPC integration\n------------------------------------------\n\n### Project Description\n\nIn GSoC 2024, we integrated Remote Procedure Calls within pgwatch v3 to provide a functionality called Remote Sinks. In 2025 we would like to enhance this implementation by adding more features and utilizing the full capabilities of Remote Procedure Calls.\n\n### Skills needed\n\n*   Go\n*   PostgreSQL\n\n### Difficulty level\n\nEasy\n\n### Project size\n\nMedium (175 hours)\n\nCan be modified according to proposed solution\n\n### Mentors\n\n*   Akshat Jaimini\n*   Pavlo Golub\n*   Andreas Scherbaum\n\n### Expected outcomes\n\n*   Provides an authentication protocol for the current RPC implementation\n*   Optimized architecture\n\nThis is not a strict & exhaustive list and we encourage contributors to provide their own creative input as well\n\n### References\n\n*   pgwatch v3: [\\[1\\]](https://github.com/cybertec-postgresql/pgwatch)\n*   Remote Sinks implementation for pgwatch: [\\[2\\]](https://github.com/destrex271/pgwatch3_rpc_server)\n\nABI Compliance Checker\n----------------------\n\n### Project Description\n\nDevelop and deploy an \"ABI Compliance Checker\", to be integrated into the PostgreSQL development process similar to [coverage.postgresql.org](https://coverage.postgresql.org/). The checker should run on every commit to the project and produce an ABI compliance report, and trigger an alert when an ABI has changed in an incompatible way. See [this thread](https://www.postgresql.org/message-id/flat/CAH2-Wzm-W6hSn71sUkz0Rem%3DqDEU7TnFmc7_jG2DjrLFef_WKQ%40mail.gmail.com#a16c0b48a8ee6f107e742e1460c29418) for an example of such a report, and some details on how it was implemented. Use it as starting point for building the tool.\n\nOnce the tool reliably produces reports, work with the [infrastructure team](https://www.postgresql.org/about/governance/sysadmin/) to get it added to the development pipeline and to publicly publish its reports.\n\n### Background\n\nPostgreSQL recently added [Server API and ABI Stability Guidance](https://www.postgresql.org/docs/devel/xfunc-c.html#XFUNC-API-ABI-STABILITY-GUIDANCE) to help extension authors to understand how and when the server API and ABI are and are not likely to change. In practice, the guidance is that the API and ABI should maintain compatibility between minor releases (e.g., 17.0 to 17.1), but not major releases. This has long been the implicit guidance, but now it is explicit, and due to be included in the PostgreSQL 18 docs.\n\nToday the committers adhere to this policy purely through the review process, which means once in a while an incompatible change will be included in a minor release. Such changes have been extremely rare, but this past fall an ABI change was unexpectedly shipped in PostgreSQL 17.1. It was quickly reversed in PostgreSQL 17.2, but highlights the need for some process to catch such changes before they're released.\n\nThis project will help reduce the change of such an incident again by automatically checking for ABI changes. This will improve the adherence to the guidance, perhaps allow it to be upgraded to a reliability \\_policy\\_, and give extension developers and package maintainers assurance about the reliability of extension builds on PostgreSQL minor releases.\n\n### Skills needed\n\n*   C Programming\n*   Command-line tooling\n*   HTML & CSS\n*   Service deployment\n*   Automation\n\n### Difficulty level\n\nMedium\n\n### Project size\n\nMedium (175 hours)\n\n### Mentors\n\n*   David Wheeler\n*   Pavlo Golub\n\n### Expected outcomes\n\n*   Working implementation of a subdomain of postgresql.org or as part of the [build farm](https://buildfarm.postgresql.org/) featuring ABI compatibility reports for every commit pushed to a back branch of PostgreSQL\n*   Notifications of failures sent via email to the committers\n*   Git repository for the project for ongoing maintenance\n*   Integration into the PostgreSQL infrastructure build and deploy processes\n\n### References\n\n*   [abi-dumper](https://github.com/lvc/abi-dumper), a potential tool\n*   [PostgreSQL Build Farm](https://buildfarm.postgresql.org/)\n*   [Build Farm Server Code](https://github.com/PGBuildFarm/server-code)\n*   [pgsql-hackers discussion](https://www.postgresql.org/message-id/flat/CAH2-Wzm-W6hSn71sUkz0Rem%3DqDEU7TnFmc7_jG2DjrLFef_WKQ%40mail.gmail.com#a16c0b48a8ee6f107e742e1460c29418) of an example of a report and the need for a project like this\n*   [Server API and ABI Stability Guidance](https://www.postgresql.org/docs/devel/xfunc-c.html#XFUNC-API-ABI-STABILITY-GUIDANCE)\n\nPerformance Farm: BuildBot test result data transformation\n----------------------------------------------------------\n\n### Project Description\n\n[Buildbot](https://buildbot.net/) is a continuous integration framework being used to proof the next generation of the [PostgreSQL Performance Farm](https://github.com/pgperffarm) project. This project is to extract data from BuildBot's database of test results, the PostgreSQL git repository, and the data saved on the Buildbot Worker to transform it, and load it into a new reporting database so that is it easier to query results.\n\nThe contributor is not expected to be familiar with Buildbot's database schema prior to starting, or the details of the various tests that are being run. An introduction to some of those details will be part of the start of the project.\n\n### Skills needed\n\n*   SQL\n*   POSIX Shell Scripting\n*   [git](https://git-scm.com/)\n\n### Difficulty level\n\nEasy\n\n### Project size\n\nMedium (175 hours)\n\n### Mentors\n\n*   Andreas Scherbaum\n*   Mark Wong\n\n### Expected outcomes\n\n*   Schema design of new reporting database\n*   A set of SQL and shell scripts that can be used in the Performance Farm project\n\n### References\n\n*   [git](https://git-scm.com/)\n*   PostgreSQL\n*   [Example script](https://github.com/PGPerfFarm/pgperffarm-buildbot/blob/main/tools/report-dbt2.sh) building a static report for DBT-2 test results\n\nPerformance Farm: Web user interface for navigating results\n-----------------------------------------------------------\n\n### Project Description\n\nDevelop a front end in interface in JavaScript for navigating test data.\n\nThe Performance Farm prototype runs various tests against all supported branches of PostgreSQL, but the prototype doesn't really have a good interface.\n\nHere is an example of a static way data is visualized for the results of a single system. The primary way test results are views are for on specific test (e.g. DBT-2), only on one system at a time (e.g. vanillaleaf), and at one specific scale. Then metrics from multiple git branches (e.g. HEAD, REL\\_17\\_STABLE, REL\\_16\\_STABLE, etc) may all be viewed at the same time, for any code change (i.e. commit) in the PostgreSQL repository.\n\n*   [![Image 1: Perffarm-dbt2.png](https://wiki.postgresql.org/images/thumb/1/1b/Perffarm-dbt2.png/120px-Perffarm-dbt2.png)](https://wiki.postgresql.org/wiki/File:Perffarm-dbt2.png)\n    \n\nHere is an excerpt of raw data from one specific test for one specific system:\n\n   branch,revision,scale,ctime,metric,complete\\_at\n   REL\\_13\\_STABLE,3850fcca69b5db0694ceb5d1134699dc247f201e,100,1708386677,564578.0,1728363218\n   REL\\_13\\_STABLE,9061fd23c28faebcb29bdfb262975639715975c0,100,1708719713,557362.69,1728362912\n   REL\\_13\\_STABLE,43cca9de9a0adf3fb47aaa6310cc0022a78eee8a,100,1708895707,570032.0,1728362591\n\nAn ideal interface will let the user:\n\n*   select the branches to display\n*   adjust the date range on the fly\n*   mouse over any data point to see\n    *   commit hash\n    *   brief commit description\n    *   url link to full commit\n\n### Skills needed\n\n*   JavaScript\n\n### Difficulty level\n\nMedium\n\n### Project size\n\nLong (350 hours)\n\n### Mentors\n\n*   Rajiv Harlalka\n*   Mark Wong\n*   Andreas Scherbaum\n\n### Expected outcomes\n\n*   Working implementation of a JavaScript interface\n\npgexporter: Extension support\n-----------------------------\n\n### Project Description\n\npgexporter \\[1\\] is a Prometheus \\[5\\] exporter for PostgreSQL \\[4\\]. This project looks to enhance its functionality with support for PostgreSQL extensions. There needs to be a general framework such that it is easy to add extensions or use different versions. Top extensions like pg\\_stat\\_statements should be supported by the distribution.\n\n### Skills needed\n\n*   C\n*   PostgreSQL\n\n### Difficulty level\n\nMedium\n\n### Project size\n\nLong (350 hours)\n\n### Mentors\n\n*   Saurav Pal <palsaurav (dot) 2020 (at) gmail (dot) com\\>\n*   Jesper Pedersen <jesperpedersen (dot) db (at) gmail (dot) com\\>\n\n### Expected outcomes\n\n*   Top PostgreSQL extensions working out-of-the-box in pgexporter releases\n\n### References\n\n\\[1\\] [https://github.com/pgexporter/pgexporter](https://github.com/pgexporter/pgexporter)\n\n\\[2\\] [https://github.com/pgexporter/pgexporter\\_ext](https://github.com/pgexporter/pgexporter_ext)\n\n\\[3\\] [https://pgexporter.github.io/](https://pgexporter.github.io/)\n\n\\[4\\] [https://www.postgresql.org/](https://www.postgresql.org/)\n\n\\[5\\] [https://prometheus.io/](https://prometheus.io/)\n\npgmoneta: WAL record filtering\n------------------------------\n\n### Project Description\n\nApply custom filtering rules to WAL records before generating new files.\n\nFilter based on:\n\n*   Transaction type (INSERT, UPDATE, DELETE, etc.).\n*   Schema or table names to allow selective replication.\n*   Custom conditions for targeted processing.\n\nExpand with Cross-Version WAL Streaming where these files can be streamed to other versions of PostgreSQL based backups.\n\n### Skills needed\n\n*   C\n*   PostgreSQL\n\n### Difficulty level\n\nHard\n\n### Project size\n\nLong (350 hours)\n\n### Mentors\n\n*   Shahryar Soltanpour <shahryar (dot) soltanpour (at) gmail (dot) com\\>\n*   Jesper Pedersen <jesperpedersen (dot) db (at) gmail (dot) com\\>\n\n### Expected outcomes\n\n*   Implement filtering mechanism that can generate PostgreSQL WAL files for different versions.\n\n### References\n\n\\[1\\] [https://github.com/pgmoneta/pgmoneta](https://github.com/pgmoneta/pgmoneta)\n\n\\[2\\] [https://pgmoneta.github.io/](https://pgmoneta.github.io/)\n\n\\[3\\] [https://www.postgresql.org/](https://www.postgresql.org/)\n\npgmoneta: Incremental backup for PostgreSQL 13-16\n-------------------------------------------------\n\n### Project Description\n\nImplement functionality in pgmoneta and pgmoneta\\_ext such that an incremental backup can be taken from PostgreSQL 13 to 16.\n\nThis work can build upon the work done in the incremental backup support for PostgreSQL 17 inside of pgmoneta.\n\n### Skills needed\n\n*   C\n*   PostgreSQL\n\n### Difficulty level\n\nHard\n\n### Project size\n\nLong (350 hours)\n\n### Mentors\n\n*   Haoran Zhang <andrewzhr9911 (at) gmail (dot) com\\>\n*   Jesper Pedersen <jesperpedersen (dot) db (at) gmail (dot) com\\>\n\n### Expected outcomes\n\n*   Incremental backup working inside pgmoneta for PostgreSQL 13 - 16\n\n### References\n\n\\[1\\] [https://github.com/pgmoneta/pgmoneta](https://github.com/pgmoneta/pgmoneta)\n\n\\[2\\] [https://github.com/pgmoneta/pgmoneta\\_ext](https://github.com/pgmoneta/pgmoneta_ext)\n\n\\[3\\] [https://pgmoneta.github.io/](https://pgmoneta.github.io/)\n\n\\[4\\] [https://www.postgresql.org/](https://www.postgresql.org/)\n\npgmoneta: Clustering support\n----------------------------\n\n### Project Description\n\nImplement functionality in pgmoneta and pgmoneta\\_ext such that pgmoneta can operate in a clustered way meaning f.ex. the result of a backup operation is replicated to another pgmoneta node.\n\nIt should be possible to control which node replicates to which node(s).\n\n### Skills needed\n\n*   C\n*   PostgreSQL\n\n### Difficulty level\n\nHard\n\n### Project size\n\nLong (350 hours)\n\n### Mentors\n\n*   Jesper Pedersen <jesperpedersen (dot) db (at) gmail (dot) com\\>\n*   Haoran Zhang <andrewzhr9911 (at) gmail (dot) com\\>\n\n### Expected outcomes\n\n*   Have backup replicate between pgmoneta nodes\n\n### References\n\n\\[1\\] [https://github.com/pgmoneta/pgmoneta](https://github.com/pgmoneta/pgmoneta)\n\n\\[2\\] [https://github.com/pgmoneta/pgmoneta\\_ext](https://github.com/pgmoneta/pgmoneta_ext)\n\n\\[3\\] [https://pgmoneta.github.io/](https://pgmoneta.github.io/)\n\n\\[4\\] [https://www.postgresql.org/](https://www.postgresql.org/)\n\npgagroal: Enhance security\n--------------------------\n\n### Project Description\n\nThis project looks to enhance the security in pgagroal.\n\nAreas could include\n\n*   Database aliases\n*   Better support for X.509 certificates\n*   Improve the vault implementation\n\n### Skills needed\n\n*   C\n*   PostgreSQL\n\n### Difficulty level\n\nMedium\n\n### Project size\n\nLong (350 hours)\n\n### Mentors\n\n*   Luca Ferrari <fluca1978 (at) gmail (dot) com\\>\n*   Jesper Pedersen <jesperpedersen (dot) db (at) gmail (dot) com\\>\n\n### Expected outcomes\n\n*   Allow users to configure pgagroal in a more secure way\n\n### References\n\n\\[1\\] [https://github.com/agroal/pgagroal](https://github.com/agroal/pgagroal)\n\n\\[2\\] [https://agroal.github.io/pgagroal/](https://agroal.github.io/pgagroal/)\n\n\\[3\\] [https://www.postgresql.org/](https://www.postgresql.org/)\n"}