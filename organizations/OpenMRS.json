{"name":"OpenMRS","description":"Write Code, Save Lives.","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/openmrs","ideas_url":"https://openmrs.atlassian.net/wiki/spaces/RES/pages/322404353/Summer+of+Code+2025","logo":"https://summerofcode.withgoogle.com/media/org/openmrs/evthgp3dhsqx5kyx-360.png","technologies":["mysql","javascript","java","reactjs","fhir"],"topics":["platform","frontend","Electronic Medical Record System","QA automation"],"projects":[{"project_name":"Support for horizontal scaling of OpenMRS instances","summary":"This project involves updating the OpenMRS codebase to utilize a new storage service, integrate distributed caching, and test Hibernate Search functionality with OpenSearch.","difficulty":"Large"},{"project_name":"Interactive Builder for Form Translations within the Form Builder","summary":"The goal is to create a user-friendly UI for adding form translations, making the process more intuitive for non-developers compared to the current JSON file setup.","difficulty":"Large"},{"project_name":"Archiving voided data","summary":"This project aims to implement a mechanism for archiving voided data in OpenMRS, facilitating easier data management and potential restoration.","difficulty":"Large"},{"project_name":"Performance Testing Enhancement Project","summary":"The objective is to expand performance testing scenarios and enhance the testing framework to improve system performance evaluation under load.","difficulty":"Medium"},{"project_name":"Service Queues","summary":"The project focuses on improving the UI and backend of the service queues application, enhancing its functionality for managing outpatient clinics.","difficulty":"Medium"},{"project_name":"Improved Appointments Calendar View","summary":"This initiative aims to enhance the appointments calendar interface, providing better visibility and usability for appointment management.","difficulty":"Medium"},{"project_name":"Improved Audit Logging","summary":"The aim is to build a backend module that allows easier access and management of audit logs in OpenMRS, including filtering and REST API integration.","difficulty":"Medium"},{"project_name":"Swagger Documentation Improvement","summary":"This project seeks to automate the generation of Swagger documentation from Javadocs and other elements, improving the documentation process.","difficulty":"Medium"},{"project_name":"Fix the Fast Data Entry feature","summary":"The goal is to repair the Broken Bulk Data Entry feature within OpenMRS, transitioning it to use the React Form Engine.","difficulty":"Medium"},{"project_name":"OpenMRS Standalone","summary":"The project involves replacing the outdated OpenMRS Standalone with a more user-friendly and modern solution, potentially leveraging Docker.","difficulty":"Large"},{"project_name":"Integrating Data Filter for Data Segregation / Multi-tenancy","summary":"This project will expand the Data Filter module to improve data segregation capabilities and provide an administrative UI for user-patient filtering.","difficulty":"Large"},{"project_name":"Immunization & Vaccination Schedule app for O3","summary":"The project aims to develop a visual application for managing vaccination schedules, aiding clinicians in tracking immunization timelines.","difficulty":"Medium"},{"project_name":"Growth Chart App for O3","summary":"This initiative seeks to integrate growth charts into OpenMRS O3, addressing a common need in pediatric healthcare.","difficulty":"Medium"},{"project_name":"Forms Migration Tool","summary":"The goal is to update a migration tool that helps transition HTML forms to the new React Form Engine format, enhancing usability and documentation.","difficulty":"Medium"},{"project_name":"Improved Implementer Tools","summary":"This project focuses on enhancing the usability of implementer tools within OpenMRS, with proposals including better UI features and accessibility improvements.","difficulty":"Medium"}],"jina_response":"Title: Summer of Code 2025 - Resources\n\nURL Source: https://openmrs.atlassian.net/wiki/spaces/RES/pages/322404353/Summer+of+Code+2025\n\nMarkdown Content:\n| \n\n**Project Name & Expected Outcome**\n\n\n\n |  |  | \n\n**Skills (Required / Preferred)**\n\n\n\n |  |  |\n| [**Support for horizontal scaling of OpenMRS instances**](https://openmrs.atlassian.net/wiki/spaces/projects/pages/376799233 \"https://openmrs.atlassian.net/wiki/spaces/projects/pages/376799233\")\n\n | Large\n\n | In the scope of the project would be (depending on the progress we make using other contribution channels):\n\n1.  Adjust codebase across core and O3 modules to use a new storage service described [here](https://talk.openmrs.org/t/new-storage-service/44655 \"https://talk.openmrs.org/t/new-storage-service/44655\").\n    \n2.  Adjust code in core and O3 modules to use distributed caching\n    \n3.  Experiment with Hibernate Search using OpenSearch as backend instead of a local Lucene index.\n    \n\n | Java, Hibernate\n\n | Rafal Korytkowski\n\n@Rafal Korytkowski\n\n |  |\n| [**Interactive Builder for Form Translations within the Form Builder**](https://openmrs.atlassian.net/wiki/spaces/projects/pages/326238264 \"https://openmrs.atlassian.net/wiki/spaces/projects/pages/326238264\")\n\n | Large\n\n | Right now, in order to add translations to a form, the way to do this to add it to a configuration folder that can be picked up by Iniz. This is annoying because\n\n1.  You’d need a developer’s help to know what to do and where to do it\n    \n2.  The JSON file format is quite different from that of a form, so its not very intuitive for a non-techy person to do\n    \n3.  There’s no a dynamic and user-friendly way to do it\n    \n\nThe ideas is to create a UI that would enable users to add the translations for a form for any language.\n\n | React, CSS\n\n | @nethmi\n\n |  |\n| Archiving voided data\n\n | Large\n\n | Voiding in OpenMRS is a form of soft-deleting. We basically set a binary column to 1 and attempt to ignore data at various points. Voiding data is meant to mark it as invalid for one reason or another (e.g., an obs has been superceded or data was recorded against the wrong patient). This is very useful, because voided data can be easily restored, but over the long term (especially with “immutable” objects likes obs), this causes some OpenMRS tables to grow to contain far more voided data than non-voided data. To address this, we should add a mechanism to archive voided data with the possibility of restoring it.\n\n | Java, Hibernate\n\n | TBA\n\n | @Wikum Weerakutti\n\n |\n| [**Performance Testing Enhancement Project**](https://openmrs.atlassian.net/wiki/spaces/projects/pages/368967702 \"https://openmrs.atlassian.net/wiki/spaces/projects/pages/368967702\")\n\n | Medium\n\n | The current load tests cover only two scenarios, limiting performance insights. This project aims to:\n\n*   Identify key scenarios that should be tested for better system performance evaluation.\n    \n*   Implement additional performance tests to ensure comprehensive coverage.\n    \n*   Enhance the existing test framework for scalability and reliability.\n    \n\nThis will improve OpenMRS’s ability to handle high-load conditions and optimize system performance.\n\n | Java, Gatling\n\n | @Jayasanka Weerasinghe\n\n |  |\n| Service Queues\n\n | Medium\n\n | We have a service queues app in O3, which is functional, but needs some attention, both to the frontend design and to the backend APIs that are used to populate it. The goal here would be to fix various UI issues and improve the overall performance and reliability of the queue module. The Service Queues view is incredibly useful for managing outpatient clinics, allowing users to track who is waiting for service, how long they’ve been waiting for etc.\n\n | React\n\n | @Ian Bacher\n\n |  |\n| Improved Appointments Calendar View\n\n | Medium\n\n | We have an appointments calendar that is meant to give an overview of appointments. Unfortunately, it is currently less useful than it should be. A few things we need to address: the ability to drill-down into, e.g., monthly, weekly, and daily views; the ability to see all appointments, not just the number per service, instead of changing screens when clicking on a day or service, the app should likely display a modal; the calendar view should not be hard-coded around the Gregorian calendar, but support the various calendars from the @internationalized/date package.\n\n | React\n\n | TBA\n\n |  |\n| [**Improved Audit Logging**](https://openmrs.atlassian.net/wiki/spaces/projects/pages/363757631 \"https://openmrs.atlassian.net/wiki/spaces/projects/pages/363757631\")\n\n | Medium\n\n | We added Hibernate Envers for audit logging in OpenMRS 2.7.0, but right now, admin users cannot easily view or manage these logs.\n\nThis project aims to build a backend module that can\n\n*   Show Audit Logs: Pull and display audits for database tables.\n    \n*   Filters: Let users filter logs by things like who made the changes, when, and what they changed.\n    \n*   REST Endpoints: Add APIs so other systems can access the audit data.\n    \n\n | Java, Spring, Hibernate\n\n | @Wikum Weerakutti\n\n | @Manoj Rathnapriya\n\n |\n| [https://openmrs.atlassian.net/wiki/x/EACyDw](https://openmrs.atlassian.net/wiki/x/EACyDw)\n\n | Medium\n\n | Errors related to the Swagger documentation have been under review, with efforts made to upgrade it to the latest versions of OpenAPI (or a similar version). The necessary pull requests have already been submitted.\n\nFor this GSoC, it is suggested that, in addition to the ongoing work, efforts should be directed towards developing tooling or a mechanism that would enable the automatic generation of Swagger documentation by analyzing Javadocs, return types, and other relevant elements. Some work has already been undertaken to achieve this, utilizing reflection to scan OpenMRS resource handlers. It is proposed that further developments be made on top of this existing foundation to enhance the envisioned tooling.\n\nThe ultimate objective is for the OpenAPI specification to be generated at compile time rather than at runtime, as is currently the case. This shift would ensure that errors are identified at compile time rather than being detected during runtime.\n\nFor reference,\n\n[Improving Our Swagger Documentation Process](https://talk.openmrs.org/t/improving-our-swagger-documentation-process/44155/1 \"https://talk.openmrs.org/t/improving-our-swagger-documentation-process/44155/1\")\n\n[Upgrade swagger from 2.0 to swagger/openapi 3.0](https://talk.openmrs.org/t/upgrade-swagger-from-2-0-to-swagger-openapi-3-0/43883 \"https://talk.openmrs.org/t/upgrade-swagger-from-2-0-to-swagger-openapi-3-0/43883\")\n\n[https://openmrs.atlassian.net/wiki/spaces/projects/pages/263323664](https://openmrs.atlassian.net/wiki/spaces/projects/pages/263323664)\n\n | Java, OpenAPI\n\n | @Chi Bong Ho\n\n | @herman muhereza\n\n |\n| [**Fix the Fast Data Entry feature**](https://openmrs.atlassian.net/wiki/x/BwAuFQ \"https://openmrs.atlassian.net/wiki/x/BwAuFQ\")\n\n | Medium\n\n | \n\n*   The Bulk Data Entry feature (BDE) is broken and unusable in the OpenMRS community’s main product (the O3 RefApp). No community organization or contributor has had the time or ability to fix this, and yet it is an important foundational feature for OpenMRS users.\n    \n*   The goal of this project is to fix the BDE feature and get it useable again in the O3 RefApp, primarily by engineering the feature to leverage the React Form Engine instead of the Angular Form Engine.\n    \n\n | React\n\n | @Samuel Male\n\n |  |\n| OpenMRS Standalone\n\n | Large\n\n | Replace the Standalone with something else. Very old, can’t even build in our latest releases - we disable it as the technology no longer works and is no longer supported. We now just ship the .war file and README. Suggestion to leverage Docker - something that works by double clicking and then just runs.\n\nWe never intended to use the OpenMRS Standalone version in production. But it turned out to be used in a number of places because they found it easier to use for sites that did not have support staff with advanced IT skills. We are also seeing an increasing number of people in our community who do not have lots of computer skills and just want something to download, click and run for their hospitals.\n\n | Java\n\n | @Daniel Kayiwa\n\n |  |\n| Integrating Data Filter for Data Segregation / Multi-tenancy\n\n | Large\n\n | Data Filter is a powerful module that uses Hibernate’s filtering APIs to add additional where clauses to various SELECT statements. The use-case for this is to allow system-wide filters to be applied to the data added. Currently Data Filter includes a default set of filters that restrict the availability of data on patients to a set of locations a user has access to. The point of this project would be to expand on these capabilities to add things like: an administrative UI for associating users and patients with specific locations, additional rules to account for the various modules used in the O3 RefApp, templates for additional rules that may be useful (i.e., tie the ability to see obs with certain codes to certain privileges).\n\n | Java, Hibernate\n\n | @Joshua Nsereko\n\n@Wyclif Luyima\n\n |  |\n| [**Immunization & Vaccination Schedule app for O3**](https://openmrs.atlassian.net/wiki/x/xgApFQ \"https://openmrs.atlassian.net/wiki/x/xgApFQ\")\n\n | Medium\n\n | \n\n*   Immunization Schedules (timings) are a key feature to make sure people (especially children) get the right vaccinations, at the right times, and enough of them, so that they are safely covered from diseases.\n    \n*   This visual project will make it easier for clinicians to see how many doses a child/person has had, and what immunizations they are due for.\n    \n\n | React\n\n | @Dennis Kigen\n\n |  |\n| [**Growth Chart App for O3**](https://openmrs.atlassian.net/wiki/x/DQAvFQ \"https://openmrs.atlassian.net/wiki/x/DQAvFQ\")\n\n | Medium\n\n | \n\n*   Growth Charts are a common need in Primary Health Care for children (pediatrics). Growth Charts are available in O2, but never yet added to O3.\n    \n*   With more and more implementers using O3 for care that involves infants, babies, and young children, we need Growth Charts in O3!\n    \n\n | React\n\n |  |  |\n| [**Forms Migration Tool: Help HTML Form users switch to using O3 React Forms**](https://openmrs.atlassian.net/wiki/x/FQAuFQ \"https://openmrs.atlassian.net/wiki/x/FQAuFQ\")\n\n | Medium\n\n | \n\n*   Many OpenMRS implementers have used HTML Forms (HFE) for many years. Some organizations have **dozens or even hundreds** of OpenMRS forms encoded in HTML. This makes it intimidating to consider moving to O3, since O3 uses a custom Form Schema.\n    \n*   There was a previous community project with scripts that help convert HTML forms into the O3 Form Schema for the Angular Form Engine. This did not convert 100% of the form into the new schema, but got most of it done (60-80%) so that it is faster for a team to work on the transition.\n    \n*   This project needs to be (1) updated to enable implementers to convert HTML forms into the newer _React_ Form Engine schema, and (2) documented to explain how to use it.\n    \n\n |  |  |  |\n| Improved Implementer Tools\n\n | Medium\n\n | The Implementor Tools in OpenMRS can be enhanced for better usability and functionality.\n\nProposed Improvements:\n\n*   Color Picker & Preview: Currently, only the hex code is shown. Or at least adding a color picker and visual preview would improve user experience.\n    \n*   Better Nested Object Handling: The UI editor struggles with nested objects, making it harder to edit complex structures.\n    \n*   Font Visibility Fixes: Some font colors blend into the background, affecting readability. Improved contrast would enhance accessibility.\n    \n\nOther potential improvements include better validation, UI optimizations, and enhancements to streamline configuration. These changes will make the tool more intuitive and user-friendly.\n\n | React\n\n | @Vineet Sharma\n\n |  |\n"}