{"name":"KubeVirt","description":"Building a virtualization API for Kubernetes","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/kubevirt","ideas_url":"https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025","logo":"https://summerofcode.withgoogle.com/media/org/kubevirt/pqdi8ojm0atxoo1s-360.png","technologies":["golang","grpc"],"topics":["virtualization","containers","kubernetes"],"projects":[{"project_name":"Dynamic attachment and removal of filesystem volumes","summary":"The project aims to implement functionality for dynamically adding and removing filesystem volumes for virtual machines in KubeVirt, leveraging existing mechanisms for volume attachment but extending capabilities to filesystem types.","difficulty":"Hard"},{"project_name":"Adding emulated BMC support to KubeVirt (KubeVirtBMC)","summary":"This project involves developing a native emulated BMC within KubeVirt to enable applications that require bare-metal management protocols to run in a Kubernetes-native environment, focusing on completing an accepted phased proposal for this functionality.","difficulty":"Hard"},{"project_name":"Self-sufficient virt-handler","summary":"The aim is to create a proof of concept for running the virt-handler in an unprivileged Pod, eliminating the dependency on the virt-launcher Pods, which will improve resource utilization for scalability testing.","difficulty":"Hard"},{"project_name":"Early enablement of CBOR","summary":"This project focuses on integrating CBOR support into KubeVirt, creating a proof of concept for better scalability in resource definitions, including performance comparisons with JSON.","difficulty":"Medium"}],"jina_response":"Title: Google Summer of Code 2025\n\nURL Source: https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025\n\nMarkdown Content:\nGoogle Summer of Code 2025\n--------------------------\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#google-summer-of-code-2025)\n\n\"Google Summer of Code (GSoC) is a global, online program that brings new contributors into open source software organizations.\" - [Google Summer of Code Contributor Guide](https://google.github.io/gsocguides/student/)\n\nThe KubeVirt community is applying to be a Google Summer of Code organization, to provide mentorship opportunity to applicants interested in learning about open source software development in the cloud native ecosystem.\n\nSee the [Google Summer of Code website](https://summerofcode.withgoogle.com/) for more information about the program.\n\nKey Dates\n---------\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#key-dates)\n\nFeb 27: List of accepted organizations announced  \nFeb 27 - Mar 24: Potential contributors discuss project application ideas with organizations  \nApr 8: Contributor application deadline  \nMay 8 - June 1: Community Bonding Period  \nJune 2 - Sep 1: The Summer of Code!\n\nSee the [Google Summer of Code timeline](https://developers.google.com/open-source/gsoc/timeline) for more detailed timeline information.\n\nProject Ideas\n-------------\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#project-ideas)\n\nKubeVirt is proposing the following project ideas as starting points for GSoC contributors to develop their own project applications.\n\n### 1\\. Dynamic attachment and removal of filesystem volumes\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#1-dynamic-attachment-and-removal-of-filesystem-volumes)\n\n**GitHub issue**: [https://github.com/kubevirt/community/issues/384](https://github.com/kubevirt/community/issues/384)\n\n**Description**  \nDirect directory sharing between a virtual machine and the host is made possible by filesystem devices. Pods and virtual machines can share the same Persistent Volume Claim thanks to this [virtiofs](https://virtio-fs.gitlab.io/). For instance, the capability to hotplugging an extra directory might be utilized to obtain diagnostic information from the VM and thereafter examine it.\n\nWhile attaching a disk to a running virtual machine dynamically is standard for VMs, it is an uncommon operation for pods. KubeVirt has already implemented the capability for hotplugging disks and LUNs, but it does not yet have the functionality to add or remove filesystems from a virtual machine. The volume hotplug/unplug feature isn’t supported natively by Kubernetes. KubeVirt mechanism relies on an additional pod known as the attachment pod to schedule and attach storage to the specific node where the VM is operating. Then, the storage is hotplug through Libvirt api.\n\nIn addition, virtiofs is deployed in a separate container which is usually started together with the pod. However, in the case of hotplug, the pod cannot be dynamically modified with extra containers. This is a further challenge which needs to be taken into account during the design proposal.\n\n**Expected outcomes**  \nThe project goal is to propose and develop a solution based on the current approach of the attachment pod which supports filesystem volume types.\n\n**Project requirements**  \nProject size: 350 hours  \nDifficult: Hard  \nRequired skills: Kubernetes knowledge and GoLang programming skills  \nMentors: Alice Frosi: [afrosi@redhat.com](mailto:afrosi@redhat.com), German Maglione: [gmaglion@redhat.com](mailto:gmaglion@redhat.com), Javier Cano Cano [jcanocan@redhat.com](mailto:jcanocan@redhat.com)\n\n**See the [GitHub issue](https://github.com/kubevirt/community/issues/384) for more information on the project, how to get started, and to ask questions.**\n\n### 2\\. Adding emulated BMC support to KubeVirt (KubeVirtBMC)\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#2-adding-emulated-bmc-support-to-kubevirt-kubevirtbmc)\n\n**GitHub issue**: [https://github.com/kubevirt/community/issues/386](https://github.com/kubevirt/community/issues/386)\n\n**Description**  \nKubeVirt is a virtualization API for Kubernetes, that allows to run virtual machine-based workloads on Kubernetes. \\[1\\]\n\nOften times, developers require the ability to deploy applications or systems in local virtual environments like bare-metal ones. Existing solutions involve libvirt domains or QEMU VMs with Basedband Management Controller (BMC) emulators, which are not directly compatible with KubeVirt, necessitating a Kubernetes-native solution. The original RFE \\[2\\] was followed up by an implementation of a BMC emulator for KubeVirt named KubeVirtBMC \\[3\\].\n\nKubeVirtBMC facilitates the deployment of software/applications/platforms such as OpenShift and OpenStack - whose installers typically require communication with bare-metal out-of-band management protocols like IPMI and Redfish - in KubeVirt VMs for development, testing, and debugging purposes, similar to the functionality provided by VirtualBMC \\[4\\] and sushy-emulator \\[5\\] but within a Kubernetes context.\n\nAs a result, a KubeVirt feature proposal was created and accepted \\[6\\], which now needs to be implemented. The proposal is divided into four phases, with work on phase one having already begun.\n\n**Expected outcomes**  \nThe project goal is to transfer KubeVirtBMC into the KubeVirt organization and to continue the development of a native BMC emulator for KubeVirt as laid out in the accepted proposal. Phases one to three of the proposal should be completed, while phase four is optional.\n\n**Project requirements**  \nProject size: 350 hours  \nDifficult: Hard  \nRequired skills: Kubernetes knowledge, GoLang programming skills, possibly experience with BMCs and the IPMI/Redfish protocols  \nMentors: Felix Matouschek [fmatouschek@redhat.com](mailto:fmatouschek@redhat.com), Zespre Chang [starbops@zespre.com](mailto:starbops@zespre.com)\n\n**See the [GitHub issue](https://github.com/kubevirt/community/issues/386) for more information on the project, how to get started, and to ask questions.**\n\n### 3\\. Self-sufficient virt-handler\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#3-self-sufficient-virt-handler)\n\n**GitHub issue**: [https://github.com/kubevirt/community/issues/388](https://github.com/kubevirt/community/issues/388)\n\n**Description**  \nKubevirt is a Kubernetes extension to run vVirtual machines on Kubernetes clusters leveraging Libvirt + Qemu & KVM stack. It does this by exposing a custom resource called `VirtualMachine` which is then translated into a Pod. This Pod is treated as any other application Pods, and includes a monitoring process, virt-launcher, that manages the Libvirt+Qemu processes. The virt-launcher exposes a command grpc server for managing the virtual machine and has a notify client (see below notify server) through which it sends domain (virtual machine state) events and Kubernetes events.\n\nEach node in the cluster is running a node agent, called virt-handler. The virt-handler is using the command servers of virt-launchers to manage virtual machines. It is also providing a notify server that collects domain and Kubernetes events from launchers in order to obtain internal state of virtual machines.\n\nThe hard dependencies on OS, file system, presence of virt-launcher Pod and GRPC servers make it hard to run virt-handler independently inside unprivileged Pod without the presence of virt-launcher. The goal of this project is to run virt-handler inside an unprivileged Pod and simulate a virt-launcher so that no Pod for virt-launcher needs to exist.\n\n**Expected outcomes**  \nThe main goal of this project is to create a proof of concept to run virt-handler in an unprivileged Pod without virt-launcher Pods to be running on the same host. This will enable scalability testing with significantly less resources required.\n\n**Project requirements**  \nProject size: 350 hours  \nDifficulty: Hard  \nRequired skills: Golang  \nDesirable skills: Kubernetes, GRPC, Unix  \nMentor: Ľuboslav Pivarč [lpivarc@redhat.com](mailto:lpivarc@redhat.com), Co-mentor: Victor Toso [victortoso@redhat.com](mailto:victortoso@redhat.com)\n\n**See the [GitHub issue](https://github.com/kubevirt/community/issues/388) for more information on the project, how to get started, and to ask questions.**\n\n### 4\\. Early enablement of CBOR\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#4-early-enablement-of-cbor)\n\n**GitHub issue**: [https://github.com/kubevirt/community/issues/389](https://github.com/kubevirt/community/issues/389)\n\n**Description**  \nKubevirt is a Kubernetes extension to run Virtual machines on Kubernetes clusters leveraging Libvirt + Qemu & KVM stack. It does this by exposing custom resources (defined by Custom Resource Definition, also known as CRD) called VirtualMachine, VirtualMachineInstance, as well as resources for backpups and other features.\n\nFrom the beginning, Kubernetes supported only json or yaml format for custom resources, in fact that was a default for core API types as well. Support for Protocol Buffers (protobuf) was introduced for core API types while CRDs were left with json/yaml because they required a schema. The protobuf helped to scale Kubernetes beyond limitations presented in the past. Kubernetes 1.32 introduced Alpha support of CBOR (Concise Binary Object Representation) for CRDs, promising a more compact format and further aiding scalability of Kubernetes and related projects.\n\nThe goal of this project is to build a proof of concept, integrating CBOR for our client-go, as well as enabling SIG-scale testing, paving the way for adoption once the feature graduates in Kubernetes.\n\n**Expected outcomes**  \nThe main goal of this project is to create a proof of concept, integrating CBOR into Kubevirt in a way that can be used to run our scalability jobs. This integration will need to be guarded as the feature is not widely available, and should include a comparison of CBOR and json, visual aids and a presentation for the community about the work and findings.\n\nFor the future, we expect guidance for enabling the feature as well summarizing the benefits from this adoption.\n\n**Project requirements**  \nProject size: 350 hours  \nDifficulty: Medium  \nRequired skills: Golang  \nDesirable skills: Kubernetes  \nMentor: Ľuboslav Pivarč [lpivarc@redhat.com](mailto:lpivarc@redhat.com), Co-mentor: Pending\n\n**See the [GitHub issue](https://github.com/kubevirt/community/issues/389) for more information on the project, how to get started, and to ask questions.**\n\n### Custom project proposals\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#custom-project-proposals)\n\nYou can submit your own project idea by emailing the [kubevirt-dev Google Group](https://groups.google.com/forum/#!forum/kubevirt-dev) and CC'ing Andrew Burden [aburden@redhat.com](mailto:aburden@redhat.com) and Petr Horáček [phoracek@redhat.com](mailto:phoracek@redhat.com).\n\nIf a mentor from the KubeVirt community supports the proposed project idea, we can add it to the KubeVirt project ideas list.\n\nHow and where to find help\n--------------------------\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#how-and-where-to-find-help)\n\nFirst, try to check [KubeVirt documentation](https://github.com/kubevirt/kubevirt/tree/main/docs), we cover many topics and you might already find some of the answers. If there is something unclear, feel free to open an issue and a PR. This is already a great start to getting in touch with the process.  \nFor questions related to KubeVirt and not strictly to the GSoc program, try to use the [#kubevirt-dev Slack channel](https://kubernetes.slack.com/archives/C0163DT0R8X) in the [Kubernetes workspace](https://slack.kubernetes.io/) and [GitHub issues](https://github.com/kubevirt/kubevirt/issues) as much as possible. Your question can be useful for other people, and the mentors might have a limited amount of time. It is also important to interact with the community as much as possible.  \nYou can also search the Slack channel archive to see if others have previously encountered the same issue.\n\nIf something doesn't work, try to document the steps and how to reproduce the issue as clearly as possible. The more information you provide, the easiest is for us to help you. If you open an issue in KubeVirt, this already guides you with a template with the kind of information we generally need.\n\nTips on how to begin\n--------------------\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#tips-on-how-to-begin)\n\n1.  Install KubeVirt and deploy KubeVirt VMs following the [getting started guide](https://github.com/kubevirt/kubevirt/blob/main/docs/getting-started.md)\n2.  Look for [good-first issues](https://github.com/kubevirt/kubevirt/issues?q=is%3Aopen+is%3Aissue+label%3Agood-first-issue) and try to solve one to get familiar with the project (if there isn’t a PR linked to it, feel free to pick it)\n3.  Read through our [General contributing guide](https://kubevirt.io/user-guide/contributing/) and our [Developer contributing guide](https://github.com/kubevirt/kubevirt/blob/main/CONTRIBUTING.md) for understanding of community expectations and further tips on how to get started with the project.\n\nHow to submit the proposal\n--------------------------\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#how-to-submit-the-proposal)\n\nThe preferred way is to create a google doc and share it with the mentors (slack or email work). If for any reason, google doc doesn't work for you, please share your proposal by email. Early submissions have higher chances as they will be reviewed on multiple iterations and can be further improved.\n\nWhat the proposal should contain\n--------------------------------\n\n[](https://github.com/kubevirt/community/wiki/Google-Summer-of-Code-2025#what-the-proposal-should-contain)\n\nThe design and your strategy for solving the challenge should be concisely explained in the proposal. Which components you anticipate touching and an example of an API are good starting points. The updates or APIs are merely a draft of what the candidate hopes to expand and change rather than being final. The details and possible issues can be discussed during the project with the mentors that can help to refine the proposal.\n\nIt is not necessary to provide an introduction to Kubernetes or KubeVirt; instead, candidates should demonstrate their familiarity with KubeVirt by describing in detail how they intend to approach the task.\n\nMentors may find it helpful to have a schematic drawing of the flows and examples to better grasp the solution. They will select a couple of good proposals at the end of the selection period and this will be followed by an interview with the candidate.\n\nThe proposal can have a free form or you can get inspired by the [KubeVirt design proposals](https://github.com/kubevirt/community/tree/main/design-proposals) and [template](https://github.com/kubevirt/community/blob/main/design-proposals/proposal-template.md). However, it should contain a draft schedule of the project phases with some planned extra time to overcome eventual difficulties.\n"}