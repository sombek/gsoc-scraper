{"name":"API Dash","description":"Next-gen Open Source AI powered API DevTool","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/api-dash","ideas_url":"https://github.com/foss42/apidash/discussions/565","logo":"https://summerofcode.withgoogle.com/media/org/api-dash/wgtarubdkvdp5qih-360.png","technologies":["flutter","api","ai","dart","ui/ux"],"topics":["testing","api","developer tools","automation","GenAI"],"projects":[{"project_name":"DashBot","summary":"An AI assistant for API Dash designed to enhance developer productivity by automating tasks and providing contextual suggestions through natural language input.","difficulty":"Medium-High"},{"project_name":"AI Agent for API Testing & Tool Generation","summary":"An AI agent that utilizes large language models (LLMs) to automate API testing processes and convert APIs into structured tool definitions for seamless integration.","difficulty":"Medium-High"},{"project_name":"API Explorer","summary":"A feature to improve user experience by integrating a library of popular APIs, allowing users to discover and import API endpoints easily.","difficulty":"Low-Medium"},{"project_name":"AI API Eval Framework","summary":"An end-to-end framework for evaluating various AI APIs, allowing users to configure requests and visualize results based on benchmarks.","difficulty":"Medium-High"},{"project_name":"API Testing Support for WebSocket, SSE, MQTT & gRPC","summary":"Developing support for testing various API protocols crucial for real-time communication, ensuring reliability and security.","difficulty":"Medium-High"},{"project_name":"AI UI Designer for APIs","summary":"An AI agent that transforms API responses into dynamic UI components, automating the UI development process for developers.","difficulty":"Easy-Medium"},{"project_name":"API Testing Suite, Workflow Builder, Collection Runner & Monitor","summary":"A suite that implements various API testing types, including validation, integration, security, and performance testing, alongside a workflow builder.","difficulty":"Medium-High"},{"project_name":"Adding Support for API Authentication Methods","summary":"Implementing support for various API authentication methods, enhancing security features within APIs.","difficulty":"Low-Medium"},{"project_name":"mem0 for Dart","summary":"Porting the mem0 memory layer for personalized AI agents from Python to Dart, enhancing memory management in Flutter applications.","difficulty":"Medium-High"},{"project_name":"API Dash Feature Improvements","summary":"Improving core features of API Dash, including request script enhancements, better API support, and updated user experience features.","difficulty":"Easy-Medium"}],"jina_response":"Title: GSoC 2025: List of Ideas · foss42/apidash · Discussion #565\n\nURL Source: https://github.com/foss42/apidash/discussions/565\n\nMarkdown Content:\n| GSoC 2025 \\[ **List of Ideas** | [Application Guide](https://github.com/foss42/apidash/discussions/564) \\]\n\n[![Image 1: GSoC](https://private-user-images.githubusercontent.com/615622/312396825-493ce57f-06c3-4789-b7ae-9fa63bca8183.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDA4MTAyMzcsIm5iZiI6MTc0MDgwOTkzNywicGF0aCI6Ii82MTU2MjIvMzEyMzk2ODI1LTQ5M2NlNTdmLTA2YzMtNDc4OS1iN2FlLTlmYTYzYmNhODE4My5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMzAxJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDMwMVQwNjE4NTdaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMDI4M2JkNDU0NzRlMDQ3OTk1Mzg2NzU0YmYzNzllNzc0ZWNjODg5NzM4MWI4YTI3MzcwMzMyYmU0NjVmMjEzJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.XZbJQuFxA8eWyo--IkUEat3K77USXDvaZJbrXubCqK4)](https://private-user-images.githubusercontent.com/615622/312396825-493ce57f-06c3-4789-b7ae-9fa63bca8183.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDA4MTAyMzcsIm5iZiI6MTc0MDgwOTkzNywicGF0aCI6Ii82MTU2MjIvMzEyMzk2ODI1LTQ5M2NlNTdmLTA2YzMtNDc4OS1iN2FlLTlmYTYzYmNhODE4My5wbmc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwMzAxJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDMwMVQwNjE4NTdaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1mMDI4M2JkNDU0NzRlMDQ3OTk1Mzg2NzU0YmYzNzllNzc0ZWNjODg5NzM4MWI4YTI3MzcwMzMyYmU0NjVmMjEzJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.XZbJQuFxA8eWyo--IkUEat3K77USXDvaZJbrXubCqK4)\n\n|  | Link |\n| --- | --- |\n| Learn about GSoC | [Link](https://summerofcode.withgoogle.com/) |\n| Project Ideas List | [Link](https://github.com/foss42/apidash/discussions/565) |\n| Application Guide | [Link](https://github.com/foss42/apidash/discussions/564) |\n| Discord Channel | [Link](https://bit.ly/fgfossd) |\n\nThis season our objective is to **harness the power of AI** and push the boundary of API development, testing, visualization, integration & observability, along with the development of some of the most sought out core features.\n\nMentors for GSoC 2025:\n\n*   [Ashita Prasad](https://github.com/ashitaprasad)\n*   [Ankit Mahato](https://github.com/animator)\n*   [Ragul Raj M](https://github.com/DenserMeerkat) (Check out his amazing [GSoC 2024 Report](https://github.com/foss42/apidash/blob/main/doc/gsoc/2024/ragul_raj_m.md))\n\nThe list of ideas provided below are not restrictive. In case you have any other innovative idea in mind which can help fellow developers in tackling the various problems of the API Lifecycle, please feel free to [open a new issue for discussion](https://github.com/foss42/apidash/issues/new/choose) and comment it below.\n\nIf a project is successfully selected you will be allocated a primary mentor and supported by the entire team. If you are interested in learning more about a particular idea please communicate in the corresponding \"related issue\" thread or feel free to drop by our [Discord server](https://bit.ly/fgfossd) and we can have a chat.\n\n_In case you are working on an AI project which requires GPU, we will provide cloud GPUs._\n\nList of Ideas\n-------------\n\n### 1\\. DashBot\n\nRelated Issue - [#621](https://github.com/foss42/apidash/issues/621)\n\nDevelop DashBot - the AI assistant for API Dash which supercharges developer productivity by helping developers automate tedious tasks, follow best practices, interact & obtain contextual suggestions, all via natural-language input. DashBot must be designed in a modular and extensible manner and provide the following list of features (suggestive, not exhaustive):\n\n*   Explain responses & identify any discrepancy\n*   Debug requests based on Status codes & Error messages\n*   Generate API documentation\n*   Understand API and generate tests\n*   Generate plots & visualizations for API responses along with ability to customize\n*   Generate API integration frontend code for frontend frameworks like React, Flutter, etc.\n\nFor each of the tasks you are also required to prepare benchmark evaluations so that it is easier for end users to choose the right backend LLM.\n\n**Skills**: AI, Agent, LLM Evaluation, Testing, Python, Dart, Flutter  \n**Difficulty**: Medium-High  \n**Length**: 175 hours\n\n### 2\\. AI Agent for API Testing & Tool Generation\n\nRelated Issue - [#620](https://github.com/foss42/apidash/issues/620)\n\nDevelop an AI Agent which leverages the power of Large Language Models (LLMs) to automate and enhance the process of testing APIs. Also, simplify the process of converting APIs into structured tool definitions to enable seamless integration with popular AI agent frameworks like crewAI, smolagents, pydantic-ai, langgraph, etc.\n\nTraditional API testing involves manually crafting requests, validating responses, and writing test cases. However, AI Agents can significantly streamline this process by generating test cases, validating API responses against expected outputs, and even suggesting improvements based on API documentation. Developers can describe test scenarios in natural language, and the agent can automatically generates API requests, parameter variations, and edge cases. It can also interpret API responses, checking for correctness, consistency, and performance benchmarks. This reduces manual effort while increasing coverage and efficiency, making API testing smarter and more efficient.\n\nYou are also required to prepare benchmark dataset & evaluations so that the right backend LLM can be selected for the end user.\n\n**Skills**: AI, Agent, LLM Evaluation, Testing, Python, Dart, Flutter  \n**Difficulty**: Medium-High  \n**Length**: 175 hours\n\n### 3\\. API Explorer\n\nRelated Issue - [#619](https://github.com/foss42/apidash/issues/619)\n\nThis project is designed to enhance the API Dash user experience by integrating a curated library of popular and publicly available APIs. This feature allows users to discover, browse, search, and directly import API endpoints into their workspace for seamless testing and exploration. Developers can access pre-configured API request templates, complete with authentication details, sample payloads, and expected responses. This eliminates the need to manually set up API requests, reducing onboarding time and improving efficiency. APIs spanning various domains—such as AI, finance, weather, and social media—are organized into categories, making it easy for users to find relevant services. You are required to develop the entire process backend in the form of an automation pipeline which parses OpenAPI/HTML files, auto-tag it to relevant category, enrich the data, create templates. You can also add features such as user ratings, reviews, and community contributions (via GitHub) to ensure accurate and up-to-date resources.\n\n**Skills**: UX Design, OpenAPI, Automation, Dart, Flutter  \n**Difficulty**: Low-Medium  \n**Length**: 175 hours\n\n### 4\\. AI API Eval Framework\n\nRelated Issue - [#618](https://github.com/foss42/apidash/issues/618)\n\nDevelop an end-to-end AI API eval framework and integrate it in API Dash. This framework should (list is suggestive, not exhaustive):\n\n*   Provide an intuitive interface for configuring API requests, where users can input test datasets, configure request parameters, and send queries to various AI API services\n*   Support evaluation AI APIs (text, multimedia, etc) across various industry task benchmarks\n*   Allow users to add custom dataset/benchmark & criteria for evaluation. This custom scoring mechanisms allow tailored evaluations based on specific project needs\n*   Visualize the results of API eval via tables, charts, and graphs, making it easy to identify trends, outliers, and performance variations\n*   Allow execution of batch evaluations\n*   Work with both offline & online models and datasets\n\n**Skills**: AI, Evaluations, Dart, Python, Flutter  \n**Difficulty**: Medium-High  \n**Length**: 175 hours\n\n### 5\\. API Testing Support for - WebSocket, SSE, MQTT & gRPC\n\nRelated Issue - [#15](https://github.com/foss42/apidash/issues/15) [#115](https://github.com/foss42/apidash/issues/115) [#116](https://github.com/foss42/apidash/issues/116) [#14](https://github.com/foss42/apidash/issues/14)\n\nTesting WebSocket, MQTT (Message Queuing Telemetry Transport), and SSE (Server-Sent Events) protocols is crucial for ensuring the reliability, scalability, and security of real-time communication systems. Whereas, gRPC (Remote Procedure Call) facilitates efficient communication between distributed systems using Protocol Buffers (protobuf) as its interface definition language (IDL) and offers features such as bi-directional streaming, authentication, and built-in support for load balancing and health checking. Each of these API protocols/styles serves different purposes and is utilized in various applications ranging from finance to web applications to IoT (Internet of Things) devices. The objective of this project is to design the architecture of the core library, understand the specs & implement the support for testing, visualization & integration code generation of these APIs in API Dash.\n\n**Skills**: Understanding Specs/Protocols, UX Design, Dart, Flutter  \n**Difficulty**: Medium-High  \n**Length**: 350 hours\n\n### 6\\. AI UI Designer for APIs\n\nRelated Issue - [#617](https://github.com/foss42/apidash/issues/617)\n\nDevelop an AI Agent which transforms API responses into dynamic, user-friendly UI components, enabling developers to visualize and interact with data effortlessly. By analyzing API response structures—such as JSON or XML—the agent automatically generates UI elements like tables, charts, forms, and cards, eliminating the need for manual UI development. One can connect an API endpoint, receive real-time responses, and instantly generate UI components that adapt to the data format. It must also support customization options, allowing developers to configure layouts, styles, and interactive elements such as filters, pagination, and sorting. Finally, users must be able to easily export the generated UI and integrate it in their Flutter or Web apps.\n\n**Skills**: AI, UX, Parsing, XML, JSON, Python, Dart, Flutter  \n**Difficulty**: Easy-Medium  \n**Length**: 90 hours\n\n### 7\\. API Testing Suite, Workflow Builder, Collection Runner & Monitor\n\nRelated Issues - [#96](https://github.com/foss42/apidash/discussions/96) [#100](https://github.com/foss42/apidash/issues/100) [#120](https://github.com/foss42/apidash/issues/120)\n\nThe objective of this project to design and implement an API testing & workflow builder suite which allows various types of API testing:\n\n*   **Validation Testing**: Verify that the API meets functional and business requirements. Automate the testing & validation of responses received from an API against predefined expectations (assertions), Schema validations, etc.\n*   **Integration Testing**: Checks proper interaction between different APIs\n*   **Security Testing**: Identifies vulnerabilities and safeguards data\n*   **Performance Testing**: Measures speed, responsiveness, and stability under varying loads\n*   **Scalability Testing**: Evaluates the system's ability to grow with demand\n\nUsers should be able to easily create collections of APIs for testing. It will also be useful to provide a API workflow builder (a drag and drop environment) to create API workflows and chain requests. The UI must allow users to execute this collection of API requests and test it in a systematic and automated manner (Collection Runner) and finally monitor the results.\n\n**Skills**: UI/UX Design, Automation, Testing, Dart, Flutter  \n**Difficulty**: Medium-High  \n**Length**: 350 hours\n\n### 8\\. Adding Support for API Authentication Methods\n\nIssue - [#609](https://github.com/foss42/apidash/issues/609)\n\nAdd support for various API authentication methods:\n\n*   **Basic authentication**: Sending a verified username and password with API request [Add API Auth: Basic authentication #610](https://github.com/foss42/apidash/issues/610)\n*   **API key**: Sending a key-value pair to the API either in the request headers or query parameters [Add API Auth: API key #611](https://github.com/foss42/apidash/issues/611)\n*   **Bearer token**: Authenticate using an access key, such as a JSON Web Token (JWT) [Add API Auth: Bearer token #612](https://github.com/foss42/apidash/issues/612)\n*   **JWT Bearer**: Generate JWT bearer tokens to authorize requests [Add API Auth: JWT Bearer #613](https://github.com/foss42/apidash/issues/613)\n*   **Digest Auth**: Client must send two requests. First request sent to the server receives a nonce value, which is then used to produce a one-time-use hash key to authenticate the request [Add API Auth: Digest Auth #614](https://github.com/foss42/apidash/issues/614)\n*   OAuth 1.0 [Add API Auth: OAuth 1.0 #615](https://github.com/foss42/apidash/issues/615)\n*   OAuth 2.0 [Implement OAuth 2.0 authentication #481](https://github.com/foss42/apidash/issues/481)\n\n**Skills**: Authentication, Dart, Flutter  \n**Difficulty**: Low-Medium  \n**Length**: 90 hours\n\n### 9\\. mem0 for Dart\n\nmem0 is the goto memory layer for developing personalized AI Agents in Python. It offers comprehensive memory management, self-improving memory capabilities, cross-platform consistency, and centralized memory control. It leverages advanced LLMs and algorithms to detect, store, and retrieve memories from conversations and interactions. It identifies key information such as facts, user preferences, and other contextual information, smartly updates memories over time by resolving contradictions, and supports the development of an AI Agent that evolves with the user interactions. When needed, mem0 employs a smart search system to find memories, ranking them based on relevance, importance, and recency to ensure only the most useful information is presented.\n\nCurrently, we lack this memory layer in Flutter AI applications and your task is to port [mem0](https://github.com/mem0ai/mem0) to Dart.\n\n**Skills**: AI, Database, Data Structures, Python, Dart, Flutter  \n**Difficulty**: Medium-High  \n**Length**: 175 hours\n\n### 10\\. API Dash Feature Improvements\n\nWe always believe in improving our core features to help the end user. A suggestive list of features that can be improved are:\n\n*   Adding pre-request script/post request script [Pre-request and post-request for api collections #557](https://github.com/foss42/apidash/issues/557)\n*   Importing from/Exporting to OpenAPI/Swagger specification [Importing Requests from OpenAPI Specification file #121](https://github.com/foss42/apidash/issues/121)\n*   Adding support for more content types in request [Support for application/x-www-form-urlencoded Content-Type as body type formdata currently only supports multipart/form-data #337](https://github.com/foss42/apidash/issues/337) [Support File as Request Body #352](https://github.com/foss42/apidash/issues/352)\n*   JSON body syntax highlighting, beautification, validation - [Enhance Request Body Editor: JSON formatting, syntax highlighting, validation and other features #22](https://github.com/foss42/apidash/issues/22) [Add option to automatically/manually beautify JSON request body #581](https://github.com/foss42/apidash/issues/581) [Add syntax highlighting for JSON request body #582](https://github.com/foss42/apidash/issues/582) [Add validation for JSON request body #583](https://github.com/foss42/apidash/issues/583) [Add environment variable support in request body #590](https://github.com/foss42/apidash/issues/590) [Env. Variable Support for Text request body #591](https://github.com/foss42/apidash/issues/591) [Env. Variable Support for JSON request body #592](https://github.com/foss42/apidash/issues/592) [Env. Variable Support for Form request body #593](https://github.com/foss42/apidash/issues/593)\n*   Support for comments in JSON body [Support comments in JSON request body #599](https://github.com/foss42/apidash/issues/599)\n*   Reading environment variables from OS environment [Reading environment variables directly from OS environment #600](https://github.com/foss42/apidash/issues/600)\n*   Adding color support for environments (like RED for prod, GREEN for dev) [Adding color support for environments #601](https://github.com/foss42/apidash/issues/601)\n*   Tab & whitespace settings\n*   Notification when new app updates are available [\\[feat\\] in-app update check #373](https://github.com/foss42/apidash/issues/373)\n*   Better GraphQL editor\n*   Beautify and expand/collapse feature for GraphQL query\n*   Allow inspecting GraphQL schema\n*   Support for GraphQL variables, fragments, mutation, subscription, etc.\n*   More widget & integration tests\n*   More code coverage\n\n**Skills**: UX Design, Dart, Flutter  \n**Difficulty**: Easy-Medium  \n**Length**: 175 hours\n\n |\n"}