{"name":"Open Robotics","description":"Open source software for robotics","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/open-robotics","ideas_url":"https://github.com/osrf/osrf_wiki/wiki/GSoC25","logo":"https://summerofcode.withgoogle.com/media/org/open-robotics/6pg3nwfpieq1qmqw-360.png","technologies":["ros","gazebo","ignition","Open-RMF"],"topics":["robotics","simulation","fleet management"],"projects":[{"project_name":"Raytracing enabled Faster-Than-Realtime GPU based lidar plugin for Gazebo","summary":"Develop a LiDAR plugin for Gazebo utilizing ray tracing capabilities of GPUs to enable faster-than-realtime depth sensor simulations.","difficulty":"Medium to hard"},{"project_name":"Gazebo Plugin For Gaussian Splatting","summary":"Create a ROS 2 package with a Gazebo plugin for real-time rendering using Gaussian splatting, enhancing robot simulation realism without requiring extensive 3D artistry.","difficulty":"Medium to hard"},{"project_name":"Physics-based sonar simulation and new examples with commonly used hardware for underwater robotics","summary":"Enhance and migrate a physics-based multi-beam sonar simulation to ROS 2, improving performance and expanding capabilities for underwater robotics.","difficulty":"Medium"},{"project_name":"Releasing sdformat in PyPI","summary":"Automate the process of creating and releasing a Python Wheel for the SDFormat library, streamlining the release management of Gazebo projects.","difficulty":"Medium"}],"jina_response":"Title: GSoC25\n\nURL Source: https://github.com/osrf/osrf_wiki/wiki/GSoC25\n\nMarkdown Content:\nOverview\n--------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#overview)\n\nThis document describes a list of potential ideas created for the [2025 Google Summer of Code](https://summerofcode.withgoogle.com/). However, the ideas are open to everyone with interest on collaborating, and OSRF is open to new ideas. Feel free to use our application template below to indicate your interest in some of the projects. If you would like to suggest new projects please email [gsoc@openrobotics.org](mailto:gsoc@openrobotics.org).\n\nThe following list shows a set of ideas that can extend the functionality of some of the open source projects led by OSRF.\n\n**ROS** (Robot Operating System) provides libraries and tools to help software developers create robot applications. It provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management, and more.\n\n**Gazebo** is a multi-robot simulator for indoor and outdoor environments. It is capable of simulating a population of robots, sensors and objects in a three-dimensional world. It generates both realistic sensor feedback and interactions between physically plausible objects.\n\n**Open-RMF** is a free, open source, modular software system that enables robotic system interoperability. Open-RMF coordinates multiple fleets of indoor and outdoor robots with typical robotic use cases and integrates them with elevators/lifts, doors and other infrastructure.\n\n**Infrastructure** is the computing infrastructure that supports the above projects, such as by providing continuous integration services and building binary packages.\n\nThe link between all projects is their open source nature and its relationship with robotics. Browse through the list and do not hesitate to contact us if you wish to participate in any of the projects. Share with us your thoughts and ideas on any future improvement or project you may have.\n\nROS 2 projects list\n-------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#ros-2-projects-list)\n\nFor a general introduction on how to start contributing to ROS 2, check out the [Contributing](https://docs.ros.org/en/rolling/The-ROS2-Project/Contributing.html) page! If you have any technical questions feel free to ask them on [Robotics Stack Exchange](https://robotics.stackexchange.com/). For high-level conceptual discussions, post on [ROS Discourse](https://discourse.ros.org/).\n\n(No projects yet. Want to mentor a project? Get in touch by emailing [gsoc@openrobotics.org](mailto:gsoc@openrobotics.org)!)\n\nGazebo projects list\n--------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#gazebo-projects-list)\n\nFor a general introduction on how to start contributing to Gazebo, check out the [guided tutorials](https://gazebosim.org/docs) and [Contributing guide](https://gazebosim.org/docs/harmonic/contributing)! If you have any technical questions feel free to ask them on [Robotics Stack Exchange](https://robotics.stackexchange.com/) or message `@HelloWorld` on [Gazebo Community](https://community.gazebosim.org/). For good first technical issues to tackle and become familiar with the development workflow, search on GitHub under the [\"gazebosim\"](https://github.com/gazebosim) organization for [\"good first issue\"](https://github.com/search?q=org%3Agazebosim++label%3A%22good+first+issue%22++&type=issues&state=open) tags. The [\"help wanted\"](https://github.com/search?q=org%3Agazebosim++label%3A%22help+wanted%22&type=issues&state=open) tag may contain more advanced tickets.\n\nRaytracing enabled Faster-Than-Realtime GPU based lidar plugin for Gazebo\n-------------------------------------------------------------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#raytracing-enabled-faster-than-realtime-gpu-based-lidar-plugin-for-gazebo)\n\n*   Prerequisites: Cursory understanding of what a GPU is and what \"ray tracing\" means in the context of graphics. Access to a ray tracing enabled GPU on a non-Apple platform (one can be provided remotely if necessary).\n*   Necessary programming skills: Familiarity with C++, CMake and an understanding of ABI.\n*   Difficulty level: Medium to hard.\n*   Potential mentors: Arjo Chakravarty.\n*   Expected size: 175 hours to 350 hours.\n*   Expected outcome: A source buildable package containing a LiDAR plugin for gazebo that exploits raytracing.\n*   Detailed description: This GSoC project exploits ray tracing GPUs in Gazebo. Recently, GPU manufacturers have been adding raytracing capabilities to their GPUs. This includes Apple, Intel, AMD and NVIDIA. Ray tracing has been [shown to be an effective pathway](https://github.com/RobotecAI/RobotecGPULidar) for simulating faster-than-realtime depth sensors. Other simulators that do this only exploit NVIDIA's proprietary OptiX API. Recent work in the Rust wgpu community has made it easy to use the Vulkan APIs for raytracing. Early experiments show the ability to ray trace a 256x256 depth camera at 1000fps on a consumer laptop with a 4 year old GeForce 3090 GPU. A prototype has alreasdy been produced, so this project would be focused on extending the prototype into a complete solution. The prototype builds on the rust `wgpu` package and a thin C wrapper that enables integration into Gazebo. Potential extension work is to support various types of depth sensors including maritime sonars/radars, along with potential publication to a relevant robotics venue.\n\nGazebo Plugin For Gaussian Splatting\n------------------------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#gazebo-plugin-for-gaussian-splatting)\n\n*   Prerequisites: Cursory understanding of what a GPU is. No need for specialized hardware. Some knowledge of what NeRFs and Gaussian Splats are.\n*   Necessary programming skills: Familiarity with C++, GLSL, and CMake.\n*   Difficulty level: Medium to hard.\n*   Potential mentors: Arjo Chakravarty.\n*   Expected size: 175 hours to 350 hours.\n*   Expected outcome: A ROS 2 package with the relevant Gazebo plugin to display splats.\n*   Detailed description: Gaussian splatting is an up and coming technique for realtime photo-realistic rendering. It could solve the problem of photo-realism without the need for a specialized 3D artist. This can be a game-changer for the way we simulate robots. The goal of this project is to write a simple shader plugin for Gazebo that renders these splats. Work in this project may lead to a publication. If the candidate wishes, we could also add ROS tools to generate such splats from ROS 2 bags.\n\nPhysics-based sonar simulation and new examples with commonly used hardware for underwater robotics\n---------------------------------------------------------------------------------------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#physics-based-sonar-simulation-and-new-examples-with-commonly-used-hardware-for-underwater-robotics)\n\n*   Prerequisites: Linux, Git, experience with ROS and Gazebo, familiarity with basic simulation concepts.\n*   Necessary programming skills: C++, Python and CUDA.\n*   Difficulty level: Medium\n*   Potential mentors: Woen-Sug Choi, Mabel Zhang and Rakesh Vivekanandan.\n*   Expected size: 350 hours.\n*   Expected outcome: Complete the migration and enhancement of a physics-based sonar simulation plugin, enriched with new example cases for underwater robotics. The project will leverage the ROS 2 framework and the latest long-term support (LTS) version of ROS and Gazebo (ROS Jazzy and Gazebo Harmonic). The ultimate goal is to provide a robust tool that can be optionally upstreamed to the new Gazebo, significantly benefiting the maritime robotics community.\n*   Detailed description: The focus of this project is migrating and enhancing the physics-based multi-beam sonar simulation from Project DAVE (a community library for maritime robotics using ROS and Gazebo), adapting it to function within the ROS 2 and new Gazebo environments. This includes selecting essential components of Project DAVE to maintain the integrity of example use cases. Key aspects of improvement are:\n    *   Performance Enhancements: Introducing half-precision calculations in CUDA to boost refresh rates, potentially contributing to journal publications.\n    *   Capability Expansion: Extending simulations to incorporate additional sonar types, such as side-scan and mechanical scanning sonar.\n    *   Benchmark Integration: Incorporating benchmark cases for maritime robotics hardware, including notable examples like the BlueROV, to ensure the model's adaptability and accuracy in simulating hydrodynamic properties. This project is inspired by the latest advances in underwater sonar simulation technology, which employs acoustic scattering models and GPU-accelerated CUDA computations to deliver physically accurate sonar imagery at functional refresh rates, crucial for realistic robotics simulations. We believe that these enhancements will not only improve sonar simulation but also provide invaluable resources to the maritime robotics community in developing solutions that are both innovative and practical.\n\nReleasing sdformat in PyPI\n--------------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#releasing-sdformat-in-pypi)\n\n*   Prerequisites: Experience with Git, Python packaging, CMake and GitHub Actions.\n*   Necessary programming skills: CMake, Python and C++.\n*   Difficulty level: Medium\n*   Potential mentors: Jose Luis Rivero.\n*   Expected size: 350 hours.\n*   Expected outcome: A mechanism that allows the Gazebo project to release sdformat in PYPI.\n*   Detailed description: Implement a method to generate a Python Wheel from the SDFormat source code using standard Python packaging tools. Automate the process of releasing a Wheel by integrating the Wheel creation into the release pipeline of the Gazebo project. Integrate the PyPI publishing mechanism into the release pipeline. Try to generalize the solution so it can be applied to other Gazebo libraries.\n\nOpen-RMF projects list\n----------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#open-rmf-projects-list)\n\n(No projects yet. Want to mentor a project? Get in touch by emailing [gsoc@openrobotics.org](mailto:gsoc@openrobotics.org)!)\n\nInfrastructure project list\n---------------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#infrastructure-project-list)\n\n(No projects yet. Want to mentor a project? Get in touch by emailing [gsoc@openrobotics.org](mailto:gsoc@openrobotics.org)!)\n\nRelevant resources\n------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#relevant-resources)\n\nROS\n---\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#ros)\n\n[ROS web page](http://www.ros.org/)\n\n[ROS tutorials](http://www.ros.org/wiki/ROS/Tutorials)\n\n[ROS 2 tutorials](https://index.ros.org/doc/ros2/Tutorials)\n\n[ROS Q&A](http://answers.ros.org/questions/)\n\n[List of code repositories](https://index.ros.org/repos)\n\nGazebo\n------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#gazebo)\n\n[Gazebo web page](http://gazebosim.org/)\n\n[Gazebo tutorials](http://gazebosim.org/wiki/Tutorials)\n\n[Gazebo Q&A](http://answers.gazebosim.org/questions/)\n\n[Gazebo mailing list](https://groups.google.com/a/osrfoundation.org/forum/#!forum/gazebo)\n\n[GitHub (code and issue tracker)](https://github.com/gazebosim)\n\nOpen-RMF\n--------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#open-rmf)\n\n[RMF root repository](https://github.com/open-rmf/rmf)\n\n[RMF Site Editor](https://github.com/open-rmf/rmf_site)\n\n[Open-RMF Workshop at ROSCon 2022](https://discourse.ros.org/t/open-rmf-roscon-2022-workshop-slides-and-materials-available/28313))\n\nApplication template for students\n---------------------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#application-template-for-students)\n\n*   If you would like to suggest new projects please message `@HelloWorld` at [Gazebo Community](https://community.gazebosim.org/) or post at [ROS Discourse](https://discourse.ros.org/).\n*   If you have specific questions to discuss about a project, send an email to [gsoc@osrfoundation.org](mailto:gsoc@osrfoundation.org).\n*   If you meet the general requirements and are interested in working on one of the OSRF projects during Google Summer of Code, you can apply by submitting your application through the [Google GSoC web site](https://summerofcode.withgoogle.com/) once participant applications open on March 25th, 2025. Your application should include the following information:\n\nContact information\n-------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#contact-information)\n\n*   Your name\n*   A phone number\n*   An email address where we can reach you for daily communication\n\nCoursework\n----------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#coursework)\n\nPlease list relevant technical courses you have taken. In particular, we are interested in your background in:\n\n*   Robotics\n*   Software engineering\n*   Computer graphics\n*   Physics simulation\n\nExperience\n----------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#experience)\n\nPlease list any experience you’ve had in software development, including relevant class projects, internships, undergraduate or graduate research, and/or contributions to open source projects. For each example, please include a brief description of the overall project along with the specific contributions you made and when you made them.\n\nIn addition to the above information, we are interested in concrete examples of your work, which may include:\n\n*   Sample code: please send an example of code you have written that you are proud of; be prepared to answer questions about it.\n*   Publications: if you have participated in undergraduate or graduate research, please include a copy of any relevant publications.\n*   Specialized skills: if you have experience/skills in particular areas that you believe would be useful to one of our projects, please let us know.\n*   Personal website: if you have a website that discusses your research or other projects, please include a link.\n*   References: names and contact information for people you have worked with who can recommend you.\n\nStatement of intent\n-------------------\n\n[](https://github.com/osrf/osrf_wiki/wiki/GSoC25#statement-of-intent)\n\nIn a paragraph or two, describe your interests and background. Please tell us which of the project ideas you are interested in and why you’d like to work on it. If you have a proposal for a project not included on our list, please describe the idea clearly and provide a motivation for the work and a timeline for how you plan to accomplish it.\n"}