{"name":"Pharo Consortium","description":"Modern and immersive programming language","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/pharo-consortium","ideas_url":"https://gsoc.pharo.org/ideas","logo":"https://summerofcode.withgoogle.com/media/org/pharo-consortium/zrxygkl3ycuvw6nb-360.png","technologies":["git","smalltalk","pharo","spec","SUnit"],"topics":["machine learning","programming languages","virtual machines","Modelling","Live music"],"projects":[{"project_name":"Phizura: Live Music Coding!","summary":"A music recording project aimed at aiding DJs in live performance through the use of the Coypu package in Pharo.","difficulty":"Intermediate"},{"project_name":"Pharo VM running as Docker Scratch image","summary":"A project to enable efficient deployment of Pharo applications in Docker, allowing them to run in a streamlined environment.","difficulty":"Advanced"},{"project_name":"Improve coding UX","summary":"Enhancement of text editor functionalities in Pharo, including features like text drag-and-drop and improved handling of parentheses.","difficulty":"Intermediate"},{"project_name":"Implementation of standard data structures and algorithms","summary":"This project seeks to bolster the support for essential data structures and algorithms within Pharo.","difficulty":"Intermediate"},{"project_name":"Optimisations for a Meta-Compiler","summary":"Focuses on improving optimization features of the Druid meta-compiler to enhance performance.","difficulty":"Advanced"},{"project_name":"Optimizing the Pharo Compiler with Bytecode-Level Inlining","summary":"This project aims to implement method inlining at the bytecode level to boost compiler efficiency and execution speed.","difficulty":"Advanced"},{"project_name":"Virtual Devices for PharoThings","summary":"Creating virtual devices to enhance the interaction capabilities between PharoThings and physical or remote hardware.","difficulty":"Intermediate"},{"project_name":"Using CFG to analyze tests","summary":"Developing a model that utilizes Control Flow Graphs (CFG) for analyzing tests in Pharo applications.","difficulty":"Intermediate"},{"project_name":"Meta-Object Protocol for Object-Centric Debugging Tools Implementation","summary":"Building and enhancing a prototype for a Meta-Object Protocol (MOP) aimed at debugging tools focused on Pharo.","difficulty":"Advanced"},{"project_name":"Fault Location DrTest Plugin","summary":"Implementation of various algorithms to improve fault location capabilities for testing in Pharo.","difficulty":"Intermediate"},{"project_name":"A Seamless interface between LLMs and Pharo","summary":"Creating an intuitive interface that connects Pharo with large language models (LLMs) for enhanced interactions.","difficulty":"Advanced"},{"project_name":"Enhancing Pharo’s Refactoring Engine for a Smarter Development Experience","summary":"Improving the refactoring engine in Pharo to make software development more efficient and intuitive.","difficulty":"Intermediate"},{"project_name":"Adding Game Tiles and Sprites to Cormas","summary":"This project aims to integrate new visual elements such as game tiles and sprites into the Cormas simulation environment.","difficulty":"Intermediate"},{"project_name":"Sound Effect Library for Agent-Based Simulations","summary":"Utilizing existing music synthesis libraries to enhance agent-based simulations with sound effects in Pharo.","difficulty":"Intermediate"},{"project_name":"Analysing Cormas Code with Moose","summary":"Leveraging the Moose platform to perform detailed analysis of Cormas code to enhance understanding and maintainability.","difficulty":"Advanced"},{"project_name":"Computer Vision for Game Piece Detection","summary":"Enhancing Cormas with computer vision capabilities for detecting game pieces and enhancing interactive features.","difficulty":"Advanced"},{"project_name":"Adding Hexagonal Cells to Cormas Pharo","summary":"Implementing support for hexagonal cells in the Cormas environment similar to previous versions for improved simulations.","difficulty":"Intermediate"},{"project_name":"A text-to-speech (TTS) tool for Pharo","summary":"Developing PAM (Pharo Automated Mouth), a text-to-speech tool inspired by the web adaptation of speech synthesis.","difficulty":"Advanced"},{"project_name":"Improve the Green threads / Fiber","summary":"Improving the existing Green Thread/Fiber system in Pharo to handle edge cases more effectively.","difficulty":"Intermediate"},{"project_name":"Enhance Register Allocation at Control Flow Merge Points During JIT Compilation","summary":"Optimizing the JIT compilation process for better register allocation which leads to enhanced performance.","difficulty":"Advanced"},{"project_name":"Enhance Slang with Separate Compilation","summary":"Adding support for separate compilation to the Slang framework to enable better performance in VM development.","difficulty":"Advanced"},{"project_name":"Eliminate Object Pointers in JIT-Compiled Code for Better GC Performance","summary":"This project focuses on modifying JIT compilation to remove object pointers for improved garbage collection performance.","difficulty":"Advanced"}],"jina_response":"Title: Pharo GSoC: Project Ideas\n\nURL Source: https://gsoc.pharo.org/ideas\n\nMarkdown Content:\nBelow is the list of project ideas that were proposed by the Pharo community. You can apply to any of those projects by sending an email to one of its mentors. Do not hesitate to propose your own idea but make sure that there is at least one mentor in the community who would agree to supervise you.\n\n[![Image 1: Phizura: Live Music Coding!](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/phizura.jpg) Phizura: Live Music Coding! Phizura is a cool music recording project that uses the Coypu package in Pharo to help DJs create an (...)](https://gsoc.pharo.org/Phizura)[![Image 2: Pharo VM running as Docker Scratch image](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/dockervm.png) Pharo VM running as Docker Scratch image This project aims to enable an efficient deployment mechanism for Pharo applications, where they run (...)](https://gsoc.pharo.org/dockerScratchDeployments)[![Image 3: Improve coding UX](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/palu-text.png) Improve coding UX Improve the text editor capabilities for coding. It includes text drag n drop, better parenthesis su (...)](https://gsoc.pharo.org/code-text-improvements)[![Image 4: Implementation of standard data structures and algorithms](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/gordana-trees.png) Implementation of standard data structures and algorithms Support for data structures such as various kinds of lists and trees are weakly supported in Pharo, (...)](https://gsoc.pharo.org/data-structures-and-algorithms)[![Image 5: Optimisations for a Meta-Compiler](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/nahue-druid.png) Optimisations for a Meta-Compiler This project has the objective of improving the optimisation capabilities of the Druid meta-compiler (...)](https://gsoc.pharo.org/druid-optimisation)\n\n[![Image 6: Optimizing the Pharo Compiler with Bytecode-Level Inlining](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/nahue-opt-pharo.png) Optimizing the Pharo Compiler with Bytecode-Level Inlining This project explores inlining Pharo methods at the bytecode level to improve performance. The appro (...)](https://gsoc.pharo.org/pharo-optimisation)[![Image 7: Virtual Devices for PharoThings](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/gordana-iot.jpg) Virtual Devices for PharoThings PharoThings implements communication with a connected physical hardware or with a remote one through (...)](https://gsoc.pharo.org/VirtualIoTDevices)[![Image 8: Using CFG to analyze tests](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/gordana-cfg.jpg) Using CFG to analyze tests To produce an initial model that represents the Control-Graph-Flow (CFG) of an Pharo application, in (...)](https://gsoc.pharo.org/CFGInTesting)[![Image 9: Meta-Object Protocol for Object-Centric Debugging Tools Implementation](https://gsoc.pharo.org/static/media/logo-big.c3b909a693c414ebc839.png) Meta-Object Protocol for Object-Centric Debugging Tools Implementation In this project, the student will start for a MOP prototype, improve the MOP design, extend it, test (...)](https://gsoc.pharo.org/MOP)[![Image 10: Fault Location DrTest Plugin](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/fault-location.jpg) Fault Location DrTest Plugin In this project, the student will implement two or three different fault location algorithms, for th (...)](https://gsoc.pharo.org/FaultLocation)\n\n[![Image 11: A Seamless interface between LLMs and Pharo](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/PharoLLMsInterface.png) A Seamless interface between LLMs and Pharo This project aims to create an intuitive interface between Pharo and large language models (LLMs). B (...)](https://gsoc.pharo.org/LLMInterface)[![Image 12: Enhancing Pharo’s Refactoring Engine for a Smarter Development Experience](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/PharoRefactoringEngine.png) Enhancing Pharo’s Refactoring Engine for a Smarter Development Experience One of its key strengths is its powerful development environment, which includes an advanced refacto (...)](https://gsoc.pharo.org/PharoRefactoringEngine)[![Image 13: Adding Game Tiles and Sprites to Cormas](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/game-tiles.png) Adding Game Tiles and Sprites to Cormas The current version of Cormas allows us to visualize the space and agents in the simulation using co (...)](https://gsoc.pharo.org/game-tiles)[![Image 14: Sound Effect Library for Agent-Based Simulations](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/domenico-sound.jpeg) Sound Effect Library for Agent-Based Simulations In Pharo, there is a library for generating and synthesizing music. We want to use it to add sound e (...)](https://gsoc.pharo.org/sound-effects)[![Image 15: Analysing Cormas Code with Moose](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/nicolas-moose.png) Analysing Cormas Code with Moose \\[Moose\\](https://moosetechnology.org/) is a platform for software and data analysis implemented in Ph (...)](https://gsoc.pharo.org/moose-cormas)\n\n[![Image 16: Computer Vision for Game Piece Detection](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/computer-vision.png) Computer Vision for Game Piece Detection The goal of this project is to enhance the interactive functionality of Cormas by building a compute (...)](https://gsoc.pharo.org/object-detection)[![Image 17: Adding Hexagonal Cells to Cormas Pharo](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/hexagonal-cells.png) Adding Hexagonal Cells to Cormas Pharo In VisualWorks version of Cormas, we had a good support for hexagonal cells. In the current version (...)](https://gsoc.pharo.org/hexagonal-cells)[![Image 18: A text-to-speech (TTS) tool for Pharo](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/dome-pam.jpeg) A text-to-speech (TTS) tool for Pharo The project, named PAM (Pharo Automated Mouth), is inspired by the JavaScript/Web Audio adaptation o (...)](https://gsoc.pharo.org/pam)[![Image 19: Improve the Green threads / Fiber](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/guille-fiber.png) Improve the Green threads / Fiber Pharo currently implements Green Threads / Fiber through the Process class. However, certain edge ca (...)](https://gsoc.pharo.org/fiber)[![Image 20: Enhance Register Allocation at Control Flow Merge Points During JIT Compilation](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/guille-reg-aloc-jit.png) Enhance Register Allocation at Control Flow Merge Points During JIT Compilation The JIT compiler in the Pharo VM uses an Abstract Interpreter to translate Pharo methods into machin (...)](https://gsoc.pharo.org/reg-aloc-jit)\n\n[![Image 21: Enhance Slang with Separate Compilation](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/guille-slang-separate.png) Enhance Slang with Separate Compilation Slang is a framework for writing Virtual Machines in Smalltalk and compiling them to C for performan (...)](https://gsoc.pharo.org/slang-separate)[![Image 22: Eliminate Object Pointers in JIT-Compiled Code for Better GC Performance](https://raw.githubusercontent.com/pharo-project/pharo-gsoc//master/data/img/guille-object-pointers.jpg) Eliminate Object Pointers in JIT-Compiled Code for Better GC Performance In the Pharo VM, JIT compilation embeds object pointers directly into compiled machine code. These p (...)](https://gsoc.pharo.org/object-pointers)\n"}