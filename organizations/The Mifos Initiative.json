{"name":"The Mifos Initiative","description":"End Poverty One Line of Code at a Time","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/the-mifos-initiative","ideas_url":"https://mifosforge.jira.com/wiki/spaces/RES/pages/4271669249/Google+Summer+of+Code+2025+Ideas","logo":"https://summerofcode.withgoogle.com/media/org/the-mifos-initiative/etmiqn0lkvfxvm5p-360.png","technologies":["android","java","kotlin","spring","angular"],"topics":["artificial intelligence","cloud","fintech","financial inclusion","mobile banking"],"projects":[{"project_name":"Migrate Android Client to Kotlin Multiplatform","summary":"Migrates the Android client to Kotlin Multiplatform to enhance code reusability and performance.","difficulty":"Large"},{"project_name":"Making Mobile Wallet Deployment-Ready for G2P and Merchant Use Cases","summary":"Refines the mobile wallet to support government-to-person payments and merchant transactions.","difficulty":"Large"},{"project_name":"Integrate Mifos X with Workflow Engine/Process Automation Tool","summary":"Integrates Mifos X with a workflow engine to define and manage customer onboarding workflows.","difficulty":"Large"},{"project_name":"Build new Modern Web UI for Mifos X using ShadCN Reusable Components","summary":"Develops a new micro front-end UI framework for Mifos X using reusable components.","difficulty":"Large"},{"project_name":"Voice-Driven Banking via Large Acoustic Models (LAMs)","summary":"Creates a voice-based banking system using LAMs to support transactions in low-resource languages.","difficulty":"Large"},{"project_name":"Generative AI to Improve Mifos Documentation","summary":"Utilizes generative AI to enhance technical documentation for Mifos and its users.","difficulty":"Large"},{"project_name":"Fraud & Risk Management & Transaction Monitoring POC (Tazama)","summary":"Develops a proof of concept for fraud detection and transaction monitoring using AI.","difficulty":"Large"},{"project_name":"Self Service Middleware SDK for Mifos X/Apache Fineract","summary":"Builds a secure self-service middleware SDK for mobile applications using Mifos X.","difficulty":"Large"},{"project_name":"Reactive Loan Risk Assessment Engine for Mifos","summary":"Implements a microservice for real-time loan risk assessment to improve lending decisions.","difficulty":"Large"},{"project_name":"Mobile Check Deposit Proof of Concept Using Moov Image Cash Letter","summary":"Creates a module for capturing checks using mobile devices, aiming for ease of deposit.","difficulty":"Large"},{"project_name":"Online Banking App 5.0 - Customer Loan Management Portal","summary":"Refactors the online banking app to provide a comprehensive customer loan management interface.","difficulty":"Large"},{"project_name":"Ad Hoc Reporting Module/Business Analytics (OLAP)","summary":"Enhances reporting capabilities for Mifos users through ad-hoc analytics and reporting tools.","difficulty":"Large"},{"project_name":"Basic CRM Functionality - Inquiries/Complaints Module","summary":"Develops a customer relationship management module for tracking inquiries and complaints.","difficulty":"Large"},{"project_name":"AI-Driven Architectural Test for Mifos Payment Hub EE","summary":"Implements AI-driven tests to enhance the security and performance of the Payment Hub.","difficulty":"Medium"},{"project_name":"Bank Statement Analysis Phase 2","summary":"Expands the bank statement analysis tool to provide personalized financial advice.","difficulty":"Medium"},{"project_name":"Credit Bureau Integration Phase 5","summary":"Extends functionality to integrate Mifos with various credit bureaus for improved loan assessments.","difficulty":"Medium"},{"project_name":"Optimize Payment Hub EE Operations UI with new Micro Front-Ends","summary":"Improves the operational interface of the Payment Hub with modern UI components.","difficulty":"Medium"},{"project_name":"Security Penetration testing for Payment Hub EE","summary":"Conducts a penetrative security test on the Payment Hub to identify vulnerabilities.","difficulty":"Medium"},{"project_name":"OpenG2P - Digital Identity Proof of Concept on Sovrin & Hyperledger Indy","summary":"Integrates Mifos with decentralized digital identity solutions for KYC purposes.","difficulty":"Medium"},{"project_name":"Mifos/Fineract Chatbot & Adapter 4.0 (AI)","summary":"Enhances the existing chatbot functionality to support user account interactions.","difficulty":"Medium"},{"project_name":"Community support through AI","summary":"Develops an AI bot to assist community members with queries related to Mifos products.","difficulty":"Medium"},{"project_name":"Integration with Open Banking and Open Payment Standards","summary":"Researches and implements integration with emerging open banking standards via APIs.","difficulty":"Small"},{"project_name":"Alignment with emerging Open Wallet Standards","summary":"Researches and designs wallet integration solutions based on emerging standards.","difficulty":"Small"},{"project_name":"NEW: End to End Demo within Mifos Gazelle","summary":"Creates a demo showcasing integration across different systems to exhibit Mifos capabilities.","difficulty":"Small"}],"jina_response":"Title: Google Summer of Code 2025 Ideas - Community Engagement\n\nURL Source: https://mifosforge.jira.com/wiki/spaces/RES/pages/4271669249/Google+Summer+of+Code+2025+Ideas\n\nMarkdown Content:\nAtlassian uses cookies to improve your browsing experience, perform analytics and research, and conduct advertising. Accept all cookies to indicate that you agree to our use of cookies on your device. Atlassian cookies and tracking notice\n, (opens new window)\nPreferences\nOnly necessary\nAccept all\nSpaces\nTeams\nApps\nTemplates\nCommunity Engagement\nAll content\nSpace settings\nShortcuts\nHow-to articles\nHow-to articles\nMeeting notes\nMeeting notes\nContent\nResults will update as you type.\nSetting the Vision (whiteboard)\nCommunity Processes\nCommunity Online Meetings\nMifos Summit Archive\nNew Contributor Getting Started Guide\nHow-to articles\nApplication Template\nGoogle Code-In\nOutreachy\nSeason of Docs\nSemester of Code\nSoC Archive\nSoC FAQ\n2025 Google Summer of Code\nGoogle Summer of Code 2025 Ideas\nWorking Groups\nLegacy being reviewed\nInternship/Student Programs\nBlogs\nApps\ndraw.io Diagrams\nYou‘re viewing this with anonymous access, so some content might be blocked.\nClose\nCommunity Engagement\n/\nGoogle Summer of Code 2025 Ideas\nGoogle Summer of Code 2025 Ideas\n+3\nOwned by Ed Cable\nLast updated: yesterday at 2:31 pm by Abhinav Kumar\n69 min read\n\n \n\nThe Mifos Initiative has been accepted as a mentoring for the 2025 Google Summer of Code. We are continuing to refine and finalize our Ideas List and mentor assignments for 2025. Please continue to engage with the community and make contributions in advance of the application period.\n\nGet Stoked - End Poverty. One Line of Code at a Time.\n\n \n\n1 Get Stoked - End Poverty. One Line of Code at a Time.\n1.1 2025 Google Summer of Code - Get to Know Mifos\n1.1.1 Core DPG Technology Stack\n1.1.2 Digital Public Infrastructure\n1.1.3 AI for All \n1.1.4 Security \n1.1.5 Modularization on the Back and Front-End\n1.1.6 Integrations & POCs\n1.1.7 Payments\n1.1.8 Small Projects\n1.1.9 Recent Talks at Conferences\n1.2 Product Overviews\n2 Guidelines\n2.1 Expectations\n2.2 Prerequisite Skills\n2.3 Source Code of DPGs & Projects\n2.3.1 Mifos X\n2.3.2 Mifos Gazelle\n2.3.3 Mobile Apps: Overview\n2.3.4 Payment Hub EE\n2.4 Hints\n3 Project Ideas\n3.1 Large Projects\n3.1.1 Migrate Android Client to Kotlin Multiplatform \n3.1.2 Making Mobile Wallet Deployment-Ready for G2P and Merchant Use Cases\n3.1.3 Integrate Mifos X with Workflow Engine/Process Automation Tool \n3.1.4 Build new Modern Web UI for Mifos X using ShadCN Reusable Components \n3.1.5 Extend and Evolve UI Library of common components across all Mobile Apps\n3.1.6 Mifos Gazelle: Postman Coverage\n3.1.7 Voice-Driven Banking via Large Acoustic Models (LAMs) (AI)\n3.1.8 LAM (Large Action Model) for Fineract (AI)\n3.1.9 Generative AI to Improve Mifos Documentation \n3.1.10 Fraud & Risk Management & Transaction Monitoring POC (Tazama) (AI) \n3.1.11 Kotlin Multiplatform App Template Framework \n3.1.12 Kotlin Multiplatform App Health Framework \n3.1.13 Open Banking/PISP Fintech App Framework Version 3.0 (GovTech)\n3.1.14 Micro Front-ends Proof of Concept for Fineract 1.x  & Mifos X \n3.1.15 Usability Improvements for Mifos X Web App\n3.1.16 Mifos Gazelle: Profile/Demo Creator (NEW!)\n3.1.17 Mifos Gazelle: Support for ARM\n3.1.18 Self Service Middleware SDK for Mifos X/Apache Fineract (Mifos Mobile, Mobile Wallet, Online Banking App)\n3.1.19 Reactive Loan Risk Assessment Engine for Mifos\n3.1.20 Mobile Check Deposit Proof of Concept Using Moov Image Cash Letter \n3.1.21 POC for Integration with Loan Decisioning (Lokyata, Begini, nTropy)\n3.1.22 Digital Bank UI using Compose Multi-Platform Micro Front-End for Web and Mobile Apps \n3.1.23 OpenG2P  - Digital Identity Proof of Concept with MOSIP (GovTech)\n3.1.24 Machine Learning Scorecard for Credit Risk Assessment Phase 7 (AI)\n3.1.25 Mifos Mobile 7.0 - Mobile Banking App\n3.1.26 Payment Hub EE - Replicable Mobile Money Connectors for  Mifos Payment Hub EE\n3.1.27 Online Banking App 5.0 - Customer Loan Management Portal \n3.1.28 Ad Hoc Reporting Module/Business Analytics (OLAP) \n3.1.29 Basic CRM Functionality - Inquiries/Complaints Module\n3.2 Medium Projects\n3.2.1 AI-Driven Architectural Test for Mifos Payment Hub EE (AI)\n3.2.2 Bank Statement Analysis Phase 2 (AI)\n3.2.3 Credit Bureau Integration Phase 5 \n3.2.4 Optimize Payment Hub EE Operations UI with new Micro Front-Ends\n3.2.5 Security Penetration testing for Payment Hub EE \n3.2.6 OpenG2P  - Digital Identity Proof of Concept on Sovrin & Hyperledger Indy\n3.2.7 Mifos/Fineract Chatbot & Adapter 4.0 (AI)\n3.2.8 Community support through AI\n3.2.9 Custom Fantastic Mifos Project\n3.3 Small Projects\n3.3.1 Alignment with Emerging Open Wallet Standards \n3.3.2 Integration with Open Banking and Open Payment Standards \n3.3.3 NEW: End to End Demo within Mifos Gazelle \n3.4 Timeline\n4 2025 GSOC Mentors\n4.1 In Progress\n5 See also\n\n\n\n\n\nOpen\n2025 Google Summer of Code - Get to Know Mifos\n\nWe're looking forward to participating in Google Summer of Code for our thirteenth year. In 2024 we worked with a total of 18 interns through Google Summer of Code and our Code for GovTech across the back-end platform, our web and mobile apps, and our AI tools. We hope to continue building our next generation of contributors who are joining in our movement to fight poverty through open source software. We want you to be part of our mission of creating a world of 3 Billion Maries.  \n\nCore DPG Technology Stack\n\nGSOC Contributors in 2025 will have the option to work on a variety of projects related to our end to end open source stack for digital financial services including open source core banking, generative AI for financial services, real-time payment and instant payment integration, digitizing government to person (G2P) payments, mobile money and Open Banking APIs, deployment tools for the cloud, and our suite of cutting edge and web and mobile apps. Participating interns will get to work on our Mifos X core banking platform including the staff-facing web app built on Angular, a POC of a brand new React UI, our suite of mobile apps including field officer apps mobile banking mobile wallet apps built on Kotlin-Multiplatform, and integrations with GSMA mobile money API and Open Banking API.  We will once again have projects related to our award-winning Payment Hub EE which provides an orchestration engine to connect to real-time payment systems like Mojaloop, ACH, and emerging payment protocols like Interledger. Given the core stack is mature in its functionality, we continue to focus GSOC projects on maintainability and deployability, security, improving developer experience, user experience optimization in addition to bleeding edge exploratory efforts around AI and the cloud.  \n\nDigital Public Infrastructure\n\nWith the international development’s sector deepened focused on digital public infrastructure, we are also seeking interns to contribute to our efforts with open source digital public goods for G2P payments like our Payments Building Block powered by Payment Hub EE and OpenG2P, the initiative we've helped to launch to digitize large scale government cash transfer programs and parallel projects for in-kind transfer and management of social registries like OpenSPP. This year, we’ll also have a heightened focus on AI as part of AI for All and Data Science for Good initiatives.  We will also have project related to our newest product, Mifos Gazelle, our DaaS (DPI as a Solution) offering, providing a deployment tool to enable the rapid deployment and configuration of multiple DPGs for demonstration environments. \n\nAI for All \n\nAI and Machine Learning will have a profound impact on financial services. It’s a key focus area of our community and we have a variety of projects that build upon our existing AI tools as well as exploratory ones to discover and innovate around the power Generative AI and LLMs and LAMs can have on digital financial services for the Base of the Pyramid. This year we’ll try to explore agentic AI and how AI agents can guide financial service transactions on behalf of staff or customers. We will continue to refine and enhance our existing AI projects including a generative AI tool for interacting with our project documentation, a bank statement analysis module using AI, , credit scoring module using machine-learning, and a chatbot framework for improved customer support.  New exploratory efforts will build upon existing leadership and expertise of our mentors and need across the sector include AI for agricultural credit scoring,   generative AI for streamlining how to configure and extend Mifos X, using NLP to add additional language support to our chatbot, LAMs to enable initiation of transaction flows via our banking apps, POCs to explore the usage of tools CoPilot to improve our developer experience and ease of extending Mifos, Generative AI to improve existing and/or create new end user documentation, and AI for fraud detection and transaction monitoring. \n\nSecurity \n\nSecurity is an imperative when working with the delivery of financial services via core banking or payments orchestration. We have worked extensively with previous interns on security-related projects to penetrateion test and harden our mission-critical platforms. The security and quality control experts in our community look forward to mentoring security-focused interns for all our projects as well as the emerging need for fraud detection especially as more institutions connect to real-time payments. \n\nModularization on the Back and Front-End\n\nWe have some major refactoring and modularization of Mifos X that contributors could continue to help with. As we modularize the back-end we are also moving towards modular resuable UI components across our web and mobile apps exploring the usage of new frameworks like Compose Multi-platform and ShadCN. Through re-usable UI components, cross-platform development, frameworks, and improving our mobile SDKs, we are seeking to significantly streamline the development and design of our mobile apps. \n\nIntegrations & POCs\n\nSince the boundaries of fintech and financial services extend so far beyond the core we also have a number of interesting POC integration projects lined up by our mentors this year including POCs with alternative reporting engines, mobile check deposit POCs, workflow engine integration, integration with KYC automation frameworks, POCs for selfie verification, and more. We also will continue to deepen our integration with peer projects in the DPG and Financial Inclusion space such OpenSPP for Beneficiary Management, OpenFN for workflow automation, Mojaloop for Instant Inclusive Payments, MOSIP for Digital Identity and Tazama for Fraud and Risk Management. \n\nPayments\n\nWhile both the back and front-end development of our core banking DPGs will be a major focus, we will have more projects this year on top of our Payment Hub EE which provides an orchestration engine to enable the ease and participation of fintechs and financial institutions into modern payment systems. This year we will continue to improve upon the user experience of our operations app and control center, make it easier to build mobile money connectors, connect into beneficiary management systems like OpenSPP and OpenG2P for social protection, add additional connectors for messaging formats like ISO 20022, deepen our integration with instant inclusive payment systems like Mojaloop, test out integrations with new solutions like Interledger Protocol and Rafiki, and leverage open payment and banking standards. \n\nSmall Projects\n\nWith the new category of smaller projects introduced in 2024, we do have a number of projects that are more research and POC-based including:\n\nAlignment with emerging Open Wallet Standards\n\nIntegration with Open Banking and Open Payment Standards\n\nDesign and Adoption of new frameworks like Compose Multi-platform \n\nMifos is a globally recognized digital public good and an award-winning project that sits at the cutting edge of inclusive fintech and embedded finance. Mifos is the leader of the open source banking movement helping to commoditize core banking infrastructure enabling financial services to be embedded anywhere and everywhere. \n\nThe best way to understand what we do is to watch a few videos. \n\nWhat is the Mifos Initiative and how does it advance financial inclusion to the poor?\n\nWhat is Mifos X?\n\nHow is the Mifos X platform designed?\n\nWatch how Mifos technology is helping end world poverty\n\nWhat do GSoC contributors work on for Mifos?\n\nWhat is it like being a GSoC intern for Mifos?\n\nRecent Talks at Conferences\nhttps://youtu.be/fdAlnDYvnM0?si=dU9DH7HGMbNAV0w6\n\n \n\nhttps://www.youtube.com/live/7n8HxHmWLHQ?si=Xq98Qwu0NL_cC-nB&t=16564\n\n \n\nhttps://youtu.be/oEy6-qs-5yE?si=HKtwDiGhBftN0_s3\n\n \n\nMifos Q4 2024 Community Call\n\nhttps://youtu.be/BnXdhi6zEyM?si=OHZM_2qQKoG1t3nm\n\n \n\n \n\n \n\nhttps://www.youtube.com/watch?v=D1hTYGSgJNQ\n\n \n\nhttps://www.youtube.com/watch?v=3fG_NJuZLSo\n\n \n\n \n\nProduct Overviews\n\n \n\n \n\n \n\nhttps://youtu.be/osngBv7NA2k?si=A9GGg-FUbsJdkOBg\n\nWhy does Google Summer of Code matter so much to Mifos and what do we look for in contributors?\n\nhttps://youtu.be/mtxBX7Sbqv0?si=KD2mcceQDGFN-eAu\n\n \n\nhttps://youtu.be/ky3IvWs1tns?si=TPk-8mEcMBooqtGu\n\n How the Mifos Software is Used\n\nhttps://youtu.be/STQpP2GhK8k?si=BBQHEV-frD-6--zU\n\n \n\n \n\nhttps://youtu.be/pE28NrY66Zc?si=tOpHK-q4_8t22mG5\n\n \n\nGuidelines\n\nGetting started Read about setting up the code and understand the basic concepts around MifosX.\n\nExpectations\n\nContributors working on Mifos X, Payment Hub EE and Mifos Gazelle will be expected to:\n\nGet access to reasonable bandwidth, ie: have a fast, reliable Internet connection\n\nIntroduce yourself to, and discuss on, the mifos-developer mailing list , the #gsoc and #gsoc-aspirants channels in the Mifos Slack workspace,  and the Apache Fineract developer list \n\nWork on issues by providing patches and pull requests.\n\nFollow the Mifos coding standards \n\nMake sure you document your work\n\nAttend daily standup on Slack as well as the weekly student check-in calls\n\nFreely open to communicating with community members on the public channels\n\nPrerequisite Skills\n\nBasics \n\nBe a quick learner\n\nBe well-behaved, act in good faith and be of good humour.\n\nTroubleshooting Wizard\n\nPassion for writing beautiful code\n\nExcellent communication skills\n\nKnowledge of developer tools\n\nsuch as a text editor, source control, how to build software\n\nexperience with specific tools will also help, such as Eclipse IDE, Git, IntelliJ\n\nMifos includes a wide variety of technologies, we do not expect a student to be an expert on all of these. But it will be helpful if you have some experience in some of these. Helpful skills (specific technology requirements vary with project chosen) and must be eager to learn and develop with the requirements:\n\nJava, Spring, MySQL, Jersey & Hibernate\n\nHTML, CSS, JavaScript (JQuery), Angular & Material Design\n\nJUnit, REST-assured\n\nAndroid, Kotlin \n\nHelm, Circle CI Pipelines, Cucumber Testing Frameworks, Scripting Tools (for Dev-Ops focussed projects)\n\nSource Code of DPGs & Projects\nMifos X\n\nBack-End:  Source Code | Mailing List | Slack | Demo (mifos | password)\n\nWeb App: Source Code | Issue Tracker | Mailing List | Slack | User Manual\n\nAndroid Client: Source Code | Issue Tracker | Slack\n\nDocs - Static HTML | Swagger OpenAPI | Architecture \n\nMifos Gazelle\n\n Overview  | Source Code | Slack\n\nMobile Apps: Overview\n\nMifosPay - Mobile Wallet Framework: Source Code | Issue Tracker | Slack\n\nMifos Mobile - Mobile Banking App: Source Code | Issue Tracker | Slack\n\nOpenBanking App: Source Code\n\nOnline Banking App - Web: Source Code \n\nOverview: https://openmf.github.io/mobileapps.github.io/\n\nPayment Hub EE\n\nOverview | Source Code | Slack\n\nHints\n\nWhen you need help, ask for help after exploring all options on the web. We are very excited for you to join us, but we need to know that you're willing to put in the time and effort required to do your part. When you do ask, ask well.\n\nTips for a Good Application from former GSOC intern and Mentor, Ishan Khanna: https://hackernoon.com/7-things-you-need-to-know-to-ace-your-gsoc-proposal-8e422f2b6abe\n\nNot sure if you are qualified? Download and build the code, then run the Platform and the Mifos X distribution.\n\nInstructions for running the platform are in Getting Started Guide in the Apache Fineract Contributor's Zone\n\nGetting started with the web app can be found in the Getting Started Guide\n\nEmail the mifos-developer mailing list with your questions and project ideas.\n\nInstall Skype for (generally infrequent) video calls. You'll need a headset for Skype, too.\n\nGet started by solving few issues on Fineract here or for the web app here.\n\nProject Ideas\n\nUpdated\n\nOur 2025 Ideas list is now compiled with a wide range of projects for different aspects of the diverse Mifos Stack. \n\n2025 projects will be related to the Mifos X core banking suite including staff interfaces for the web (Web App) and mobile (Android client), our customer-facing apps including our Mobile Banking app, Mifos-Mobile, our Mobile Wallet App, MifosPay or our Online Banking App. There will also be projects focused on our Payment Hub EE payment orchestration engine and our efforts in Digital Public Infrastructure space around G2P Payments for Social Protection. We will also have projects focused on our newest product, Mifos Gazelle, our DaaS (DPI as a Solution) offering providing a deployment tool for rapid installation and evaluation of digital public goods in demonstration environments. Any projects related to the back-end core banking platform will be built as modules or plugins that sit alongside or on top of the Apache Fineract platform, which Mifos developed and donated to the Apache Software Foundation.\n\nLarge Projects\n\nFor 2025, GSOC projects can be of three durations - large (350 hours) and medium (175 hours) and small (90 hours). These projects are of the 350 hour duration. \n\nMigrate Android Client to Kotlin Multiplatform \n\nMentors\n\n\t\n\n@Rajan Maurya @Chinmay Kulkarni @Shashank Priyadarshi \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile - Android SDK | Kotlin Multiplatform\n\n\n\n\nOverview & Objectives\n\n\t\n\nThe goal of this project is to migrate Android field officer kotlin multi-module application to Kotlin Multiplatform and rewrite network layer by adopting fineract-client-kmp-sdk, make all the network calls are working as expected. The Android client will be the first of the Mifos mobile apps which consume the SDK, reducing repeated network layer code in mobile apps, improving developer experience, and making it easier to migrate to newer versions of Apache Fineract 1.x and Student would work on designing offline sync functionality in background.\n\nThis year we are totally focusing on migrating to Kotlin Multiplatform, writing Unit and Instrumentation test and writing github actions to automate release process using fastlane.\n\n\n\n\nDescription\n\n\t\n\nIn 2025, The student will be working on implementing the following things:\n\nUpdate the Android client to latest dependencies\n\nRewrite Network layer of Android client to consume fineract SDK using coroutines instead of RxJava implemented code.\n\nMigrate kotlin multi-module codebase to Kotlin Multiplatform\n\nWrite appropiate unit and integration tests.\n\nUpdate CI/CD to build APK and analyses code quality\n\nImplemented Playstore release github action pipeline\n\nIntegrate google playstore API for better and faster release flow.\n\nUpdate corresponding documentation for building the app.\n\n \n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid, Kotlin Multiplatform, Kotlin, Jetpack compose, navigation-compose, MVVM, coroutines, Flow, multi-module architecture.\n\n\n\n\nImpact\n\n\t\n\nHigh performance using jetpack compose\n\nClean code and easy understandable code because of multi-module and coroutines implementation. \n\nKotlin Multiplatform support to build application for Android, IOS, Desktop, Web.\n\nOverall stability by increased testing coverage through a more stable and error-free codebase. \n\nImproved developer experience through faster build time. \n\nMore seamless release management and upstream contribution \n\nReduction of time to upgrade \n\n\n\n\nOther Resources\n\n\t\n\nQA & Testing - \nQA & Testing - Fineract - Apache Software Foundation  \n\n2024 GSOC Final Report (Aditya Gupta): \nGSoC'24_Final_Report_Android_client.md \n\n\n\n\nGithub\n\n\t\n\nGitHub - openMF/android-client: An android client for the MifosX platform \n\nGitHub - apache/fineract: Apache Fineract \n\nhttps://github.com/openMF/fineract-client \n\nhttps://github.com/openMF/fineract-android-sdk \n\nMaking Mobile Wallet Deployment-Ready for G2P and Merchant Use Cases\n\nMentors\n\n\t\n\n@Rajan Maurya @Avinash Vijayvargiya \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile - Mifos X | Core Development\n\n\n\n\nOverview & Objectives\n\n\t\n\n2025 development will focus on refining our current Mobile Wallet to be a strong reference implementation of feature-rich and secure mobile wallet application for G2P use cases. While our mobile wallet is a powerful tool for all fintechs and financial institutions, we want to powerfully and simply demonstrate the ability for governments to disburse G2P Payments to highly functional mobile wallet and then be able to transact with that wallet by paying for bills, sending transfers, and paying for goods and services via merchants. We provide a reference mobile wallet application for consumers and merchants that has been developed by our Google Summer of Code interns from 2017 to 2024. The mobile wallet provides an extensible mobile wallet framework to support the basic use cases of a mobile wallet as documented in the Level One Project mobile wallet requirements. This extensible framework should support both merchant and client use cases as well as be capable of integrating with a Fineract back-end \n\nOver time, we would like Mifos X to be more generically a wallet management system and this reference application is a powerful tool to support that. \n\nIn 2025, we will also focus on enabling real-world merchant flows based on requirements from in-country users using the wallets for consumer to merachnt transactions. \n\n\n\n\nDescription\n\n\t\n\nThe initial mobile wallet framework along with 2 reference apps, PixieCollect and MifosPay, were developed in 2017. Later we decided to continue with MifosPay application only which as mentioned uses the mobile wallet framework.\n\nIn 2019, these functionalities were extended further by Shivansh including improving user experience and redesigning the app, support for Kotlin, integration with two Mojaloop transaction flows via the Paymeht Hub, adding improving Deeplinks, support for standing instructions and more well-rounded support for merchant transactions.\n\nIn 2020, Devansh Aggarwal further added complete support for standing instructions, integrated with Fineract CN for core use cases by mapping Fineract back-office APIs to Fineract CN APIs, added multi-theme support, completed integration with Payment Hub EE, added support for Hover, and converted Java code to Kotlin (in progress). For more details refer this\n\nIn 2021, Kinar Sharma, worked on developing a new multiplatform mobile wallet application using Kotlin multi-platform. This new application consumes FineractCN APIs and is built upon clean architecture. Kinar completed the data, domain and presentation layer (only for Android) for usecases available in FineractCN.\n\nIn 2022, Prashant Singh continued to evolve the app.\n\nIn 2023, Rachit focused on refining the architecture, streamlining the design and implementing some of the G2P use cases.\n\nIn 2024, Pratyush focused on migrating codebase from single module app into kotlin multi-module application by migrating xml to jetpack compose.\n\nIn 2025, we are targeting to make production-ready our cases for G2P, update dependencies, consume more uniformly our SDKs fix pending issues and introduce new features. Functional enhancements include:\n\nIntegrate latest version of Payment Hub EE\n\nIntegrate Mifos' notifications framework to provide support for usecases like merchant request to pay.\n\nImplemented Apple Store and Desktop apps release github action pipeline\n\nUpdate wallet framework to be make use of Mifos' Android SDK\n\nImproving the security framework to integrate more seamlessly with middlewares, API gateway, and identity management software\n\nExploring proof of concept architecture or redesigns to align with movements like the Open Wallet Foundation.\n\nWrite end to end Unit and Instrumentation test suite.\n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid, Kotlin, Kotlin Multiplatform, Jetpack compose, Ktor, Room, Git\n\n\n\n\nImpact\n\n\t\n\nBy providing an extensible mobile wallet framework, allow partners a complete reference stack of back and front-end applications to offer digital financial services to clients.\n\n\n\n\nOther Resources\n\n\t\n\n2024 Mobile Wallet Final Report (Pratyush Singh): \nhttps://gist.github.com/PratyushSingh07/6509549e64dbee0d695b98c6657a17b2 | Aditya Kumdale: \nhttps://gist.github.com/AdityaKumdale/83324009b2e676f8fbc623df4f953497 \n\n2023 Mobile Wallet Final Report: \nhttps://docs.google.com/document/d/1xHDVzmxuBj5KA0vHiJS_UGrs0Zb6IrpqwRmSdW3uExM/edit#heading=h.h4y8eq18ezr9 \n\n2020 Mobile Wallet Progress: https://gist.github.com/devansh-299/e2041c07d9ab55a747391951e9090df4\n\nMobile Wallet Framework: Source Code | Issue Tracker  | Slack\n\nSee \nhttps://openmf.github.io/mobile-wallet/ \n\nIntegrate Mifos X with Workflow Engine/Process Automation Tool \n\nMentors\n\n\t\n\n@Aleksandar Vidakovic @Victor Romero \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nBack-end Platform | Modules \n\n\n\n\nOverview & Objectives\n\n\t\n\nUsers of Mifos have long had a need to have greater control and flexibility over creating loan and customer onboarding workflows that incorporate internal processes/steps as well processes involving external systems. This project would center around creating an external integration with a workflow engine such as Flowable or jBPM using the Mifos X REST API as the glue. The auto-generated client library from the back-end enforces the contract between the workflow engine and core banking system. The core banking and its REST API act as the glue. The result would be a UI-driven workflow engine to allow non-technical users to define these new custom workflows where they could drag and drop the different steps of the process. \n\n\n\n\nDescription\n\n\t\n\nAssumptions:\n\nBPMN should be adopted as a standard so which can make the workflow engine independent of the technology stack. \n\nBPMN editors allow end users to sketch the workflow and generate a machine readable and executable output. \n\nWorkflow actions or business logic would be written in Java as part of Fineract so adapters will be need to be created on the workflow engine to execute actions on our side. \n\nExternal processes would be sub-flows that could be used like lego bricks and included in the parent workflow context. \n\n \n\nSteps:\n\nIntern would select a workflow engine to integrate with and then build adapters to trigger and transfer fm BPMN form data into specific core banking back-office REST API calls. \n\nCurrently business logic such as creating a customer is triggered by an API call in Fineract. For this project, the intern would define a BPMN form with all the data that is needed which could be defined as a human task. Proceeding through each step triggers an adapter that transforms the generic BPMN form data into specific core banking back-office REST API calls\n\nIntern would go through the entire REST API building these adapters to trigger transformation of BPMN into core banking back-office REST API callsCurrently when creating a customer, API by API, the intern would define \n\nOnce all the calls in Mifos X have been transformed, the integration could provide for triggering any external  customer-specific action/workflow/API call/ system integration\n\n\n\n\nHelpful Skills\n\n\t\n\nJava, BPMN\n\n\n\n\nImpact\n\n\t\n\nUI-Driven interface based on BPMN standard to allow for non-technical users to define customer onboarding and application workflows via a drag and drop interface.\n\n\n\n\nOther Resources\n\n\t\n\nhttps://github.com/flowable \n\nhttps://www.jbpm.org/ \n\nhttps://www.bpmn.org/ \n\nhttps://openfn.org \n\nhttps://n8n.io   \n\nBuild new Modern Web UI for Mifos X using ShadCN Reusable Components \n\nMentors\n\n\t\n\n@Aleksandar Vidakovic \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nFront-End - Web\n\n\n\n\nOverview & Objectives\n\n\t\n\nThis project would extend up on existing efforts to create a micro front-end approach for our UIs. As the userbase for Mifos/Fineract extends beyond just microfinance and financial inclusion we need to enable developers to easily build front-end user experiences that align with the wide variety of back-end use cases supported by our platform being used by MFIs, credit unions, banks, fintechs and governments. Additionally, many of the flow and screens used by staff as well as customers are common across mobile and web application. \n\nRight now the look and feel and the overal UI development experience is very limited by using Angular and Material Design. \n\n\n\n\nDescription\n\n\t\n\nThis project would aim to build both the micro front-end framework and leverage a set of res-usable UI components that can be deployed as individual flows or end to end applications. Growing in popularity for its flexibility, ease of development, efficient performance, modular design is the ShadCN UI Library which contains unstyle components offering a higher degree of customizability. \n\nThe current standard UI for Mifos X is still the Web App which is the only one that covers 100% of the feature set. While based on Angular and more modern than our previous Community App, the project hard to maintain and - apart from the occasional color change - hard to customize let alone integrate in other web applications. Developers should be able to pick any number of standalone components and integrate them in custom UI projects (where Fineract is one among multiple backends). All Mifos X UI components should be published for easy consumption by other developers.\n\nIntern would aim to replicate the current Web UI which is in Angular using the Material Design library using ShadCN components built on ReactJS. \n\nThis project would use the official typescript API client for Fineract. \n\nTooling should help with consistency and reduce handwritten code as much as possible. Using Monorepos is strongly suggested.\n\n\n\n\nHelpful Skills\n\n\t\n\nJavaScript, JSX , React, Tailwind CSS \n\n\n\n\nImpact\n\n\t\n\nDevelopers can more rapidly build out user interfaces for different financial service use cases with a greater degree of design flexibility in terms of customizability of the look and feel  \n\n\n\n\nOther Resources\n\n\t\n\nhttps://ui.shadcn.com/ \n\nhttps://peerlist.io/blog/engineering/what-is-shadcn-and-why-you-should-use-it \n\nhttps://tailwindcss.com/ \n\nhttps://www.radix-ui.com/ \n\nExtend and Evolve UI Library of common components across all Mobile Apps\n\nMentors\n\n\t\n\n@Chinmay Kulkarni  @Devansh Aggarwal @raul.sibaja\n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile - Mifos X | Core Development | Infrastructure \n\n\n\n\nOverview & Objectives\n\n\t\n\nFor 2025, our efforts this project will focus on delivering components that can be utilized as part of Compose Multiplatform and in conjunction with resuable components like ShadCN. \n\n In 2022, Rahul Gill, created and completed the first iteration of our UI library for our mobile apps. Our suite of customer-facing mobile applications include our mobile wallet framework, and mobile banking apps for Fineract 1.x and Fineract CN. These are designed to serve as reference implementations for demonstration purposes but also to act as secure and robust starting dough that can be extended and enhanced and white-labeled.\n\nWith the move towards more digital financial services, these reference solutions are ever more important and critical and must appear highly polished, clean, and professional. We are working with a designer to provide a set of clean, consistent and professional UI designs and workflows to implement across our customer-facing apps. \n\nThis project would focus on implementing these new designs across the customer-facing apps providing a consistent and familiar look and feel. It will build off of efforts in 2020 and 2021 implementing the UI designs previously proposed during GCI. \n\nAcross all our mobile apps, there are common screens and workflows  with a lot of redundant and inconsistent design and development from scratch. The creation of a UI library of common shared components and design standards and guidelines would enable the following: \n\nImprove developer experience and ease of development\n\nConsistent look and feel of UIs for all apps\n\nDefined process for updating apps.\n\nDevelop common UI library to ensure consistency of all apps\n\nDesign guidelines, principles, and standards\n\nCould potentially be a valuable upstream project in and of itself to create mobile fintech apps\n\n\n\n\nDescription\n\n\t\n\nIn 2025, with leadership of our mentors, this project would focus on extening the initial shared components of the UI library based off of the common screens and workflows identified across the various mobile apps. These common flows will be broken down into their-base-level elements and components.  This components should be built to be compatible with Compose Multiplatform for re-usability across mobile, web, and desktop. \n\nDesign enhancements to customer-facing apps include: \n\nBreak down common workflows into base-level components\n\nRefine and update design standards and guidelines\n\nCreate and set up repository to house elements, components, and designs using jetpack compose.\n\nDesign core ui component for our fintech app using jetpack compose. \n\nDevelop and create base-level elements and components accoring to UI design standards and guidelines\n\nImplement screens and workflows to test out on reference open banking fintech app\n\nDocumentation to ensure how to use UI library and update mobile app when UI library is updated. \n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid Development, Kotlin, Java, Jetpack Compose, XML, Git, Compose Multiplatform\n\n\n\n\nImpact\n\n\t\n\nA clean and simple UI is key for our low-tech audience and professional and consistent look and feel enhances credibility of our stack. \n\n\n\n\nOther Resources\n\n\t\n\nRecap on 2022 GSOC Project from Rahul Gill: \nhttps://gist.github.com/rahul-gill/6700c366627a2c7007a07b96ff6c0785 \n\nhttps://mifosforge.jira.com/wiki/spaces/MIFOSX/pages/3013476363 \n\n2020 UI Enhancements: https://gist.github.com/ShivangiSingh17/67b6041387c1e281caa7df23347f549e\n\nMobile Wallet Framework: Source Code | Issue Tracker | Slack\n\nMifos Mobile - Android Mobile Banking App: Source Code | Issue Tracker | Gitter Chatroom\n\nSee https://openmf.github.io/mobileapps.github.io/\n\nMifos Gazelle: Postman Coverage\n\nMentors\n\n\t\n\n@David Higgins + TBC\n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours \n\n\n\n\nCategory\n\n\t\n\nPlatform | DevOps  | Mifos Gazelle\n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos Gazelle brings together multiple components and DPG’s into a single deployment process. A key objective for Gazelle is ease of deployment and ease of use.  To that end Mifos Gazelle needs to maintain good documentation and Postman collections of all its API’s (including those of components).\n\n\n\n\nDescription\n\n\t\n\nThis project would focus on gathering together all the API’s within Gazelle components into a single Postman collection.\n\nMifos Gazelle users and PHEE, MifosX and vNext users and learners would benefit greatly from a targeted and well tested postman collection and associated environment.  This would draw heavily from the existing postman tests for MifosX PaymentHub and vNext perhaps a subset from each and would be specifically customised and organised for a Mifos gazelle deployment of all 3 initial components.  This collection would be included in the Mifos Gazelle repository and would also be well documented perhaps with a step by step guide for a number of test scenarios (Mifos Partylookup, vNext PartyLookuop, Bulk Payment etc ) \n\nThe collection could be very specific for instance hostnames could be set in the environment which are aligned with the Mifos gazelle deployment scripts and well known data (tenants, parties etc) would be utilised. \n\nThe folder structure of the collection would also be customised to reflect the Mifos Gazelle deployment \n\nThe design needs to be extendable beyond the initial 3 components as Mifos Gazelle grows.\n\n\n\n\nHelpful Skills\n\n\t\n\nDocker, Kubernetes, Jenkins, Bash, REST APIs , Postman.\n\n\n\n\nImpact\n\n\t\n\nDevOps and Sys Admins running our projects would experience a more simplified deployment with greater degree of control, improved quality of their builds and greater reliability and ease of testing through a qualified and reliable Postman collection\n\n\n\n\nOther Resources\n\n\t\n\nGAZ-13 - Getting issue details... STATUS \n\nVoice-Driven Banking via Large Acoustic Models (LAMs) (AI)\n\nMentors\n\n\t\n\n @Lalit Mohan S @Akshat sharma \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours \n\n\n\n\nCategory\n\n\t\n\nAI | Platform - Modules  | Exploratory\n\n\n\n\nOverview & Objectives\n\n\t\n\nThe \"Voice-Driven Banking via Large Acoustic Models (LAMs)\" project develops a voice-based banking platform to enable financial transactions in low-resource languages and dialects. The system will support tasks like balance inquiries, fund transfers, credit applications, and more using voice commands, removing barriers of literacy and technical skills. This initiative targets rural and underserved populations, promoting financial inclusion through innovative AI solutions.\n\nObjectives\nTechnical: Build and deploy LAMs for regional languages and accents, integrated with NLP for intent recognition and voice biometrics for secure authentication.\nBusiness: Expand access to banking services, improve customer engagement, and reduce service costs via automation.\nSocial: Empower non-literate users in underserved areas with seamless access to financial tools.\nImpact and Outcome\nImpact\nTechnical: Robust voice recognition for low-resource languages, secure voice authentication, and modular scalability for future enhancements.\nBusiness: Increased customer base, lower operational costs, and improved satisfaction.\nSocial: Enhanced financial access for marginalized groups and improved digital literacy.\nOutcome\nApplication: Mobile/web app supporting voice-driven banking in multiple regional languages.\nCapabilities: Voice-initiated transactions (balance checks, payments, loans) with real-time processing.\nSecurity: Voice biometrics and encrypted transactions for data integrity.\nAnalytics: Dashboards to monitor usage and improve language support.\nThe final product will simplify banking for rural users, bridging the digital divide and boosting financial inclusion effectively.\n\nThe idea behind this project is to use a LLM to give command/prompts and have those commands fulfilled via selenium\n\n\n\n\nDescription\n\n\t\n\nThe \"Voice-Driven Banking via LAMs\" project focuses on creating a voice-based banking platform supporting low-resource languages and dialects. The intern will:\n\nResearch: Identify target languages and user needs for voice-based banking tasks.\n\nDevelop Core Features:\n\nTrain/optimize Large Acoustic Models (LAMs) for voice recognition.\n\nBuild NLP pipelines for multilingual intent recognition.\n\nIntegrate voice biometrics for secure authentication.\n\nSystem Integration: Design a scalable backend and integrate workflows (e.g., balance checks, payments) with banking systems.\nTesting & Optimization: Conduct accuracy and reliability testing, refine models, and ensure accessibility on low-end devices.\nDocumentation: Deliver technical documentation, user guides, and training materials in target languages.\n\nExpected Deliverables\n\nA functional voice-based banking app supporting multiple languages.\n\nSecure voice-enabled workflows for key banking operations\n\nDocumentation and guides for system use and maintenance.\n\n\n\n\n\n\nHelpful Skills\n\n\t\n\nPython, TensorFlow, PyTorch, Natural Language Processing (NLP), Large Acoustic Models (LAMs), speech-to-text systems, voice biometrics, API development\n\n\n\n\nImpact\n\n\t\n\nThis project will have a significant impact by promoting financial inclusion, especially for underserved and rural populations. By enabling voice-driven banking in multiple low-resource languages, it empowers individuals who may be illiterate or lack digital skills to manage their finances independently. From a business perspective, it opens new customer segments, reduces operational costs through automation, and drives customer loyalty. Technically, the project advances voice recognition, natural language processing, and secure authentication systems, pushing the boundaries of AI in financial services. Ultimately, this initiative fosters social equality, digital literacy, and economic stability, while innovating how banking can be made accessible to all.\n\n\n\n\nOther Resources\n\n\t\n\nDocumentation on Speech-to-Text and Voice Recognition\n\nDeepSpeech GitHub(\nhttps://github.com/mozilla/DeepSpeech ) – Mozilla’s speech-to-text model that may be useful for voice recognition tasks.\nKaldi(\nhttp://kaldi-asr.org/ ) – An open-source toolkit for speech recognition, widely used in research.\nLarge Acoustic Models (LAMs) and NLP Resources\n\nSpeech Recognition with Deep Learning – A tutorial on speech recognition using TensorFlow.\nTransformers by Hugging Face – A popular NLP library that could be adapted for multilingual NLP tasks.\nVoice Biometrics and Security\n\nVoice Authentication System (API) – Twilio API for implementing voice biometrics in applications.\nGeneral AI and Machine Learning for Banking\n\nAI in Financial Services – An article detailing AI applications in the financial sector.\nFinancial Services AI – A report from Accenture on the future of AI in banking.\n\nLAM (Large Action Model) for Fineract (AI)\n\nMentors\n\n\t\n\n@jeremy engelbrecht \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours \n\n\n\n\nCategory\n\n\t\n\nAI | Platform - Modules  | Exploratory\n\n\n\n\nOverview & Objectives\n\n\t\n\nThe idea behind this project is to use a LLM to give command/prompts and have those commands fulfilled via selenium\n\n\n\n\nDescription\n\n\t\n\nFollowing the similar types of commands/actions that can be executed in Fineract via our chatbot, this project would use LLMs to determine the intent of a user and fulfill those actions in the Mifos/Fineract applications using a tool like Selenium. \n\n\n\n\nHelpful Skills\n\n\t\n\nPython, LLM(Llama2 or similar), Selenium\n\n\n\n\nImpact\n\n\t\n\nThis would dramatically change the way individuals interact with financial services. It goes well beyond a chatbot by being able to engage with a tool that can apply for and initiate financial transactions via prompts. \n\n\n\n\nOther Resources\n\n\t\n\n \nhttps://xgboost.readthedocs.io/en/stable/ \n\nGenerative AI to Improve Mifos Documentation \n\nMentors\n\n\t\n\n@jeremy engelbrecht @Lalit Mohan S @David Higgins \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours \n\n\n\n\nCategory\n\n\t\n\nAI | Platform - Modules  | Exploratory\n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos & Apache Fineract provide a suite of core banking applications which are highly complex applications both from a technical and domain knowledge perspective. \n\nMaintaining updated documentation around installing, configuring and using the application is challenging and presents a steep learning curve.\n\nThe goal of this project is to use Generative Pretrained Transformer (GPTs) (which is a family of large language models (LLMs) based on a transformer deep learning architecture) for providing answers  to most common questions and for organizing documentation. It is important to ingest data for training this GPT using the manuals, source code repositories, Wiki, ReadMes, mailing list posts, forum posts, slack discussion, and documentation hosted on our project sites, it would greatly simplify the experience for any implementer looking to use the software.\n\n\n\n\nDescription\n\n\t\n\nIn 2025 the Intern would develop/train a GPT using all the sources of technical and user documentation across our project such that implementers could interact with the documentation in a Q&A style format.\n\nIn 2024 in an initial increment of this project an LLM was created that was trained on a specific subset of documentation.\n\nIn 2025 focus needs to be on how this can be scaled across the full documentation set, how to resolve conflicts in answers when you look at large scale documentation.  \n\nAI tools have changed significantly in the last year that the approach should be changed so then the interaction with them can be implemented using agents.\n\nAn alternative focus of this project could be how to use AI to generate or update documentation at the point of release.\n\n\n\n\nHelpful Skills\n\n\t\n\nHugging Face, LlaMA, Colab, GPT, N8N.\n\n\n\n\nImpact\n\n\t\n\nThis would greatly simplify the process of configuring, deploying and using our core banking software across various use cases making the software and documentation more maintainable for the project and more usable for the customer base. \n\n\n\n\nOther Resources\n\n\t\n\nhttps://www.ibm.com/think/topics/generative-ai  \n\nhttps://www.ibm.com/think/topics/transformer-model  \n\nhttps://www.synechron.com/insight/generative-ai-answering-your-frequently-asked-questions  \n\n https://huggingface.co/docs/transformers/model_doc/llama2 \n\nhttps://youtu.be/FuLY96AKWjc?feature=shared \n\nFraud & Risk Management & Transaction Monitoring POC (Tazama) (AI) \n\nMentors\n\n\t\n\n@jeremy engelbrecht @Lalit Mohan S @Aleksandar Vidakovic \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours \n\n\n\n\nCategory\n\n\t\n\nAI | Platform - Modules  | Exploratory\n\n\n\n\nOverview & Objectives\n\n\t\n\nWith continually growing adoption of Payment Hub EE to connect fiancial institutions using or not using Fineract into real-time payment systems, the likelihood of fraud is ever-growing. With all of this transactional data flowing into and out of Fineract, there is now also a wealth of data to analyze using rule-based and AI-based methods to detect transactional patterns and identify fraud. A lot of fraud detection and transaction monitoring happens centrally at the level of the payment switch but there’s quite a bit of value in analyzing this at the level of each individual DFSP and sharing this on-us transaction data back to the central payment switch or system\n\nGoal of this project would be to work on a proof of concept integration between Mifos/Fineract and Payment Hub EE with a FRMS solution for fraud detection and transaction monitoring. Given the power and potential of generative AI for financial services, project shoudl explore the use of generative AI for the following areas as documented by Newron:\n\n Anomaly Detection: Generative AI models can create synthetic data that mimics legitimate transactions. By training on both genuine and synthetic data, models become adept at detecting unusual patterns indicative of fraud.\n\nAdaptability: Unlike rule-based systems, Generative AI models can adapt to new fraud patterns. As fraudsters evolve, the model evolves with them, improving detection rates.\n\nData Augmentation: Generative AI can augment imbalanced datasets by creating synthetic examples of rare events (fraudulent transactions), making the model more robust.\n\nUnsupervised Learning: Generative AI models, like Variational Autoencoders (VAEs) or Generative Adversarial Networks (GANs), learn patterns in an unsupervised manner, reducing the need for manual labeling of fraudulent cases.\n\nBehavioural Analysis: Generative AI can analyze transaction behaviours, such as user interactions or purchasing habits, to identify deviations from the norm\n\nProject could be integrated with Tazama which although rule-based and not AI-based provides a powerful FRMS solution. \n\n\n\n\nDescription\n\n\t\n\nIntern would work on a POC integration to monitor and analyze data from real-time payment system flowing via Payment Hub EE into Fineract. Project could utilize generative AI to improve effectiveness of solutiona and can leverage existing efforts in the community to collaborate with eKuta solution. \n\n\n\n\nHelpful Skills\n\n\t\n\nHugging Face transformer, Llama2 or similar, Colab\n\n\n\n\nImpact\n\n\t\n\nReal-time payments make the challenges and consequences of fraud ever more steep and severe. Using Generative AI to combat it and integrating with FRMS solutions will help the user base using Payment Hub EE and Fineract. \n\n\n\n\nOther Resources\n\n\t\n\n \nhttps://www.linkedin.com/pulse/revolutionising-fraud-detection-generative-ai-newron/ \n\nOpen Source Solution FRMS Solution - Tazama - \nhttps://tazama.org/ \n\nKotlin Multiplatform App Template Framework \n\nMentors\n\n\t\n\n@Rajan Maurya \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile, Kotlin Multiplatform, Compose Multiplatform\n\n\n\n\nOverview & Objectives\n\n\t\n\nThroughout 2024, we continued migrating all of our mobile apps to Kotlin Multiplatform and in the processed developed some valuable generic tools and templates to help with building out applications using Kotlin Multiplatform. This project would continue to refine and extend these frameworks. \n\n\n\n\nDescription\n\n\t\n\nThe focus for 2025 on this project would be the following: \n\nWrite Material Design3 component layer that can be customizable on top level so anyone forking the repo and creating a project can just add the theme configuration and rest is maintainable in template.\n\nWrite base configuration for Android, Ios, Desktop, Web so whoever is creating project out of template will only adding configuration that will replace the default one.\n\nWrite release github actions for all the platform Android, Ios, Desktop, web using Github Actions.\n\nWrite network, database, datastore etc base layer so it will act like external component can be or can’t be added in the project.\n\nWrite Gradle plugin for dependencies like Room, datastore, ktor, compose etc so it can behave as component and we can have introduce Amper as an alternative for build system.\n\nMake sync common directories more generic.\n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid, Kotlin, Kotlin Multiplatform, Jetpack compose, Ktor, Room, Git\n\n\n\n\nImpact\n\n\t\n\nStreamling the developer experience and reducing the learning curve for building cross-platform apps with native user experiences on top of Kotlin Multiplatform. \n\n\n\n\nOther Resources\n\n\t\n\nSource Code\n\nhttps://github.com/openMF/kmp-project-template \n\nKotlin Multiplatform App Health Framework \n\nMentors\n\n\t\n\n@Rajan Maurya \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile, Kotlin Multiplatform, Compose Multiplatform\n\n\n\n\nOverview & Objectives\n\n\t\n\nThroughout 2024, we continued migrating all of our mobile apps to Kotlin Multiplatform and in the processed developed some valuable generic tools and templates to help with building out applications using Kotlin Multiplatform. We realized over past experience that we need a Kotlin Multiplatform tool that checks and take care of app health and give out summary of app breaking points and manage whole thing locally and as well as pushes to firebase logging so we can know where exactly the problem lies instead of walking to crash analytics.\n\n\n\n\nDescription\n\n\t\n\nThe focus for 2025 on this project would be the following: \n\nDesigning a plan and Product specs.\n\nWrite a local database layer that will store all data required to debug the crash, issue etc.\n\nWrite a sync layer for Kotlin Multiplatform that gives ability to pull issues and debug stream data to fix the issue.\n\nDesign a frame work that will take write in firebase events and manage in such a manner so we can find where issue lies.\n\nWrite a layer that will look for memory leak in the code and analyze and suggest fixes using AI\n\nGive ability user to expose or keep whole thing locally.\n\nWrite logging layer that will be annotation based and log things for debugging.\n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid, Kotlin, Kotlin Multiplatform, Jetpack compose, Ktor, Room, Git\n\n\n\n\nImpact\n\n\t\n\nStreamling the developer experience and reducing the learning curve for building cross-platform apps with native user experiences on top of Kotlin Multiplatform. \n\n\n\n\nOther Resources\n\n\t\n\nSource Code: \n\nhttps://github.com/openMF/app-health-kmp \n\nOpen Banking/PISP Fintech App Framework Version 3.0 (GovTech)\n\nMentors\n\n\t\n\n@Shashank Priyadarshi \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile, Exploratory\n\n\n\n\nOverview & Objectives\n\n\t\n\nThe 2025 focus for this project would be extending upon the work that was done during Code for GovTech in 2024. Across our ecosystem we're seeing more and more adoption and innovation from fintechs. A huge democratizing force across the financial services sector is the Open Banking movement providing Open Banking APIs to enable third parties to directly interact with customers of financial institutions. We have recently started providing an Open Banking API layer that will allow financial institutions using Mifos and Fineract to offer third parties access to requesting account information and initiating payments via these APIs. Most recently the Mojaloop community, led by Google, has led the development of a centralized PISP API\n\nTo demonstrate these Open Banking APIs and use cases that third parties and fintechs can provide we have developed a cross-platform reference mobile app on Kotlin to showcase a number of these features. It currently connects with the Open Bank Project that adheres to the UK Open Banking API standard. The API Gateway to connect to is still being chosen (WS02, Gravitee, etc.)\n\nThe breadth and variety of apps that could be built leveraging these APIs from region to region is endless. We would like this app to be built in an extensible and modular fashion such that core libraries and components could be re-used across different use cases with this framework as the foundation and multiple reference apps on top. Applications include personal financial management apps aggregating information from multiple bank accounts in one place, wallet apps allowing payments to be made from different banks, lending apps, leveraging data and insight from multiple accounts, savings apps, etc.\n\n\n\n\nDescription\n\n\t\n\nIntern would work on refining the initial architecture of the framework, the UI and user experience, core use cases including customer authentication and onboarding that was implemented in 2020 and integrating with the Fineract Open Banking APIs and Mojaloop PISP APIs to demonstrate use cases around account information request and payment initiation. \n\nThis would be a continuation of the project worked on a couple year’s back but essentially the idea is the same to have a stand-alone reference third party fintech app that demonstrates 3rd party initiation/ Open Banking APIs so the app itself would need its own separate user managment, etc but then it would pull in data by authorizing consnet via open banking api to pull in transactional data from a mifos/fineract account (could extend exiting open banking adapter and map additional fineract apis to UK open banking api standard and most importantly we’d want to use this reference fintech app to demonstrate the use of Mojaloop/Google 3PPI PISP APIs whereby a user could authorize and establish consent across any bank participating in a mojaloop switch to the fintech to initiate transactions through mojaloop via their accounts managed in Mifos/Fineract\n\nAggregating account information across multiple banks/financial institution\n\nInitiating payments across multiple financial institutions\n\nIntegrate with additional Fineract Open Banking APIs\n\nIntegrate with Mojaloop PISP APIs. \n\nLeverage completed components of UI library \n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid development, SQL, Java, Javascript, Git, Spring, OpenJPA, Rest, Kotlin, Mojaloop\n\n\n\n\nImpact\n\n\t\n\nBy providing an extensible open banking fintech app framework, allow partners a complete stack of Open Banking APIs and reference front-end application to rapidly build innovation via Open Banking APIs.   \n\n\n\n\nOther Resources\n\n\t\n\nSource code: \nhttps://github.com/openMF/pisp-app \n\nFigma Design Mockups: \nhttps://www.figma.com/proto/ZkQJHzXWfjZugpTtz1MFdt/Mifos-PISP-App?node-id=10-27&starting-point-node-id=101%3A32&scaling=scale-down&t=vtBsVklbforA4MiB-1 \n\nPrevious Development:\n\n2023 Mifos Summer of Code Final Report - \nhttps://gist.github.com/lssarao/fc1293ad3c36d51317358348323b80c0 \n\n2020 Google Summer of Code Final Report - \nhttps://gist.github.com/ankurs287/4ef7c3de462073bf36bd5247479cb176 \n\nGoogle Whitepaper on 3PPI: https://static.googleusercontent.com/media/nextbillionusers.google/en//tools/3PPI-2021-whitepaper.pdf\n\nUK Open Banking API Standard: \nhttps://standards.openbanking.org.uk/ \n\nOpen Banking Developer Zone: \nhttps://openbanking.atlassian.net/wiki/spaces/DZ/overview \n\nExamples of Open Banking Apps: https://www.ft.com/content/a5f0af78-133e-11e9-a581-4ff78404524e \n\nSee \nhttps://openmf.github.io/mobileapps.github.io/ \n\nMicro Front-ends Proof of Concept for Fineract 1.x  & Mifos X \n\nMentors\n\n\t\n\n @Jose Hernandez @Aleksandar Vidakovic @Ed Cable \n\n\n\n\nCategory\n\n\t\n\nWeb - Mifos X Web App/Fineract \n\n\n\n\nOverview & Objectives\n\n\t\n\nOriginally this idea was sparked by looking at what Moov has around UI drops - \nhttps://moov.io/product/drops/  and \nhttps://docs.moov.io/moovjs/drops/ Many different goals, directions, use cases emerge but they would all share in helping make UI more maintainable, more pluggable and having more of a toolkit for builders/developers that would align with Fineract being used for various core banking use cases outside of just financial inclusion as well as the need supporting a variety of fintech use cases with common elementsIn conversation with others, some different directions could emerge:\n\n@Nayan Ambali and seeing how Finflux has separated out UIs for different personas\n\nWith @Victor Romero  serving the need to help others do custom/specific page view for certain functionality\n\nAbility to more pluggable components especially for customer-facing operations/use cases\n\nHave micro-front-ends be brought together to create a monolithic application like the web-app\n\n@aleksvidakovic suggestion on the real value being in how these components are used in other frameworks/portals and not a full complete application like we currently have.\n\nFor this round of GSOC I’d like us to define a project where we could do a micro front-end around a certain domain/functionality and pick a framework/design/architectural approach that we’d follow. (edited) \n\nOur 2022 intern, Ramveer Singh made substantial progress in completing the development of our new web app such that the Web App is now part of the Mifos X release distribution and we’ve fully deprecated our older Community App.  Our Angular Web App is the standard application on the Mifos X distribution that provides all the core functionality for the most common methods of financial inclusion and products and services. It's also the starting point for any partners looking to customize or extend the UI. It's constantly being improved based on user feedback, better performance, and to integrate new design standards.\n\nThe focus for 2025 will be on continuing to optimize the design of key flows, improving app localization, adding in better context-sensitive help, improving dashboards and visualizations, and refactoring of the web app to consume a type-script client for better maintainability. \n\n\n\n\nDescription\n\n\t\n\nGiven this project is in it infancy, this would really be a proof of concept design the proper archiecture, learn which use cases are best candidates for pluggable and modular UI components and then choosing a framework in which to deploy multiple micro front-end as a single applicaiton with a unified user experience for end users. \n\nPropse and design architecture for Micro Front End approach\n\nDetermine best front-end language or javascript framewor to use - leaning towards Angular\n\nIdentify which existing screens or new screens should be implemented as seaprate microservice UIs. \n\nPrimary efforts center around:\n\nFixing remaining issues\n\nRedesigning customer and account dashboard pages\n\nRefactor web app to consume typescript client\n\nEnhance look and feel of app. \n\nImplement third party library for proper internationalization. \n\nThe remaining issues can be found: \nhttps://github.com/openMF/web-app/issues \n\nThe progress is being tracked here: \nhttps://docs.google.com/spreadsheets/d/1JxeJjG1GdZ3BNJi-sScCQLirfevSc8amFr8o3SfUj4U/edit?usp=sharing \n\nSome additional work also includes adding in comprehensive keyboard shortcuts to enable power-users of the app and to ensure that the tabs and arrow keys work appropriately for navigating through the app, localization support, additional dashboards, adding of tooltips, etc. \n\n\n\n\nHelpful Skills\n\n\t\n\nJavascript, SCSS, HTML5, Angular 9, Angular Material, Flex Layout\n\n\n\n\nImpact\n\n\t\n\nMore pluggable, faster to develop, modular UI that better supports variety of use cases of Fineract.\n\nReduced dependency on using entire monolithic app. \n\n\n\n\nOther Resources\n\n\t\n\nUsability and Design\n\nMoov UI Drops - \nhttps://moov.io/product/drops/  and \nhttps://docs.moov.io/moovjs/drops/\n\nArticle on Angular & Micro Front-ends using Module Federation - \nhttps://auth0.com/blog/micro-frontends-with-angular-module-federation-and-auth0/ \n\nUsability Improvements for Mifos X Web App\n\nMentors\n\n\t\n\n  @Bharath Gowda @Pushpendra Kumar @Ramveer \n\n\n\n\nCategory\n\n\t\n\nWeb - Mifos X Web App\n\n\n\n\nOverview & Objectives\n\n\t\n\nOur Angular Web App is the standard application on the Mifos X distribution that provides all the core functionality for the most common methods of financial inclusion and products and services. It's also the starting point for any partners looking to customize or extend the UI. It's constantly being improved based on user feedback, better performance, and to integrate new design standards. Our 2024 interns, Omar Nabil, progress our implementation of translations, redefined styling in the app and implemented a number of usability improvements. This built upon the work of our 2023 intern, Pushpendra who completed the remaining work on the web app to fully deprecate our Community App. \n\n2025 focus will be on continuing to optimize the design of key flows, continued improvements to  app localization, adding in better context-sensitive help, improving dashboards and visualizations, and completing the refactoring of the web app to consume a type-script client for better maintainability. \n\n\n\n\nDescription\n\n\t\n\nOur legacy community app is now fully deprecated so we must continue to refine the Mifos X web app including updating core dependencies. We must upgrade Angular to its latest stable verison and implement a number of critical design and usability enhancements to the core customer account and dashboard pages. In order to synchronize the UI with the version of each release of the back-end platform we need to complete the refactoring of the interaction layer to consume the auto-generated typescript client, and deepend the integration and seamless user experience with Apache Superset for dashboards and visualizations. \n\nPrimary efforts center around:\n\nUpdate Angular to latest stable version\n\nFix identified usability improvements prioritized by community \n\nRedesign customer and account dashboard pages\n\nImplement UI screens for new features contributed by commumity \n\nImplement authentication framework to fully integrate Superset for dashboards. \n\nFinalize refactoring of web app to consume typescript client\n\nEnhance look and feel of app. \n\nContinued Improvements of  translations \n\nUsability Issues and Improvements can be found: \nhttps://mifosforge.jira.com/jira/software/c/projects/WEB/boards/62\n\nSome additional work also includes adding in comprehensive keyboard shortcuts to enable power-users of the app and to ensure that the tabs and arrow keys work appropriately for navigating through the app, localization support, additional dashboards, adding of tooltips, etc. \n\n\n\n\nHelpful Skills\n\n\t\n\nJavascript, SCSS, HTML5, Angular, Angular Material, Flex Layout\n\n\n\n\nImpact\n\n\t\n\nEnhanced User Experience, Intuitive application design\n\n\n\n\nOther Resources\n\n\t\n\n2024 Progress (Omar): \nhttps://gist.github.com/Omar-Nabil/29c15796df1abcba7f3bb85f344d2e8a \n\n2023 Progress: \nhttps://gist.github.com/PC-11-00/8f726c2a6719c7493accbaa58bcfb047 \n\n2022 Progress: \nhttps://gist.github.com/ramvr1256/11c197b038250e7394462e8687ef15f8 \n\n2020 Progress: \nhttps://gist.github.com/karantakalkar/7a4acb83f31ebfe4f3b827c86c67eec0 \n\nhttps://gist.github.com/muskankhedia/b0929cbf2ae6236bfe07964a140da179 Usability and Design\n\nMifos Gazelle: Profile/Demo Creator (NEW!)\n\nMentors\n\n\t\n\n@David Higgins + @Abhinav Kumar \n\n\n\n\nLength\n\n\t\n\nLarge\n\n\n\n\nCategory\n\n\t\n\nPlatform - DevOps | Infrastructure\n\n\n\n\nOverview & Objectives\n\n\t\n\nOver the past 2 years we have developed a Deployment Tool for DPI infrastructure called Mifos Gazelle.  This aligns to DPI as a packaged Solution (DaaS) toolkit approach.  It currently (as of v1.0.0) deploys 3 DPG components a Payment Orchestration (Mifos Payment Hub EE) a core banking solution (Mifos X including Fineract as a backend) and a payment switch (vNext Beta 1.0).  There is a roadmap to include other DPGs and by the start of this project there may be a 4th DPG included.\n\n\n\n\nDescription\n\n\t\n\nCurrently the Mifos Gazelle deployment does not have an easy way to create demos or profiles although there has been alot of thought and discussion around this see GAZ-17 - Getting issue details... STATUS .\n\nThis project would look into this area research the options, agree the approach with the mentors and community and develop the first profile/demo creator tool for Mifos Gazelle.\n\nThis project would suit someone who wants to explore and define a new element to a project rather than just follow a set of tasks.\n\n\n\n\nHelpful Skills\n\n\t\n\nDocker, Kubernetes, Jenkins, Bash, Java - Spring, PostgreSQL, MariaDB, Cassandra, TDD With JUnit 4, Gradle, CircleCI, Helm, UI , Angular, Research + other soft skills\n\n\n\n\nImpact\n\n\t\n\nProvide an easy way for institutions considering DPI to deploy and develop use cases and demos on Mifos Gazelle.\n\n\n\n\nOther Resources\n\n\t\n\nHelm Chart for Fineract deployment - \nhttps://github.com/fynarfin/fineract-env/tree/master/helm/fineract \n\nHelm Charts for Payment Hub EE deployment  - \nhttps://github.com/openMF/ph-ee-env-labs/tree/master/helm \n\nDocker Compose for Mifos - (Fineract Back-End + Web App) - \nhttps://github.com/openMF/mifos-x-containers \n\nDocker Hub Image of Fineract - https://hub.docker.com/u/openmf \n\nhttps://hub.docker.com/r/apache/fineract \n\nFineract Technical Documentation - \nhttps://fineract.apache.org/docs/current/ \n\nMiniloop -  \nhttps://github.com/tdaly61/mini-loop.git \n\nPayment Hub EE - \nhttps://payments.mifos.org \n\nLab Environment Overview - \nhttps://mifos.gitbook.io/docs/payment-hub-ee/overview/lab-environment \n\nGAZ-17 - Getting issue details... STATUS \n\n \n\nMifos Gazelle: Support for ARM\n\nMentors\n\n\t\n\n @tom daly \n\n\n\n\nLength\n\n\t\n\nLarge\n\n\n\n\nCategory\n\n\t\n\nPlatform - DevOps | Infrastructure\n\n\n\n\nOverview & Objectives\n\n\t\n\nOver the past 2 years we have developed a Deployment Tool for DPI infrastructure called Mifos Gazelle.  This aligns to DPI as a packaged Solution (DaaS) toolkit approach.  It currently (as of v1.0.0) deploys 3 DPG components a Payment Orchestration (Mifos Payment Hub EE) a core banking solution (Mifos X including Fineract as a backend) and a payment switch (vNext Beta 1.0).  There is a roadmap to include other DPGs and by the start of this project their may be a 4th DPG included.\n\n\n\n\nDescription\n\n\t\n\nCurrently the Mifos Gazelle deployment does not support ARM although the vNext already runs and builds docker images for ARM.  This project would primarily focus on updating all the OpenMF pipelines for MifosX and Payment Hub  EE such that it can be built for ARM.  This may included the 4th DPG at that point.\n\nThis would allow for running on Apple devices or Raspberry Pi.\n\nWe would like to be able to run Mifos Gazelle on a couple of Raspberry Pi devices (we call this DPI in a Box).  This project could extend to include this depending on time.\n\nThe Intern must be able to problem solve. We expect during this exercise to hit challenges especially around dependencies that will need to be resolved (especially for Payment Hub EE) and this may result in upstream contributions to these DPGs.\n\n\n\n\nHelpful Skills\n\n\t\n\nDocker, Kubernetes, Jenkins, Bash, Java - Spring, PostgreSQL, MariaDB, Cassandra, TDD With JUnit 4, Gradle, CircleCI, Helm\n\n\n\n\nImpact\n\n\t\n\nProvide an easy to deploy package to help institutions considering DPI to deploy and develop use cases.\n\n\n\n\nOther Resources\n\n\t\n\nHelm Chart for Fineract deployment - \nhttps://github.com/fynarfin/fineract-env/tree/master/helm/fineract \n\nHelm Charts for Payment Hub EE deployment  - \nhttps://github.com/openMF/ph-ee-env-labs/tree/master/helm \n\nDocker Compose for Mifos - (Fineract Back-End + Web App) - \nhttps://github.com/openMF/mifos-x-containers \n\nDocker Hub Image of Fineract - https://hub.docker.com/u/openmf \n\nhttps://hub.docker.com/r/apache/fineract \n\nFineract Technical Documentation - \nhttps://fineract.apache.org/docs/current/ \n\nMiniloop -  \nhttps://github.com/tdaly61/mini-loop.git \n\nPayment Hub EE - \nhttps://payments.mifos.org \n\nLab Environment Overview - \nhttps://mifos.gitbook.io/docs/payment-hub-ee/overview/lab-environment \n\nGAZ-10 - Getting issue details... STATUS \n\nSelf Service Middleware SDK for Mifos X/Apache Fineract (Mifos Mobile, Mobile Wallet, Online Banking App)\n\nMentors\n\n\t\n\n@Victor Romero @Avinash Vijayvargiya \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile/Platform\n\n\n\n\nOverview & Objectives\n\n\t\n\nA powerful and compelling use case of Mifos X is to power any type of customer-facing digital experience (mobile wallet, mobile banking, etc). However we must enable these digital experiences to connect securely to the back-end. We currently have a self-service API layer which is valuable for demonstrating customer-facing actions that can be performed via mobile banking and online banking apps but these APIs were not intended for deployment in live production environment and are being deprecated for a more secure option.\n\nThis project would focus on building out the self-service middleware SDK for Mifos X and Apache Fineract by defining a subset of the APIs to secure expose such that external users can inititate transactions and interact with accounts within Fineract. \n\nVictor Romero has created a design for implementation of this middleware layer and would mentoring the intern to implement this design. \n\nSome of these effort will also align with previous efforts around Open Banking APIs. Across our ecosystem we're seeing more and more adoption and innovation from fintechs. A huge democratizing force across the financial services sector is the Open Banking movement providing Open Banking APIs to enable third parties to directly interact with customers of financial institutions. We have started providing an Open Banking API layer that will allow financial institutions using Mifos X to offer third parties access to requesting account information and initiating payments via these APIs. This also aligsn with the centralized PISP API introduced within Mojaloop by Google.  \n\nTremendous impact can be had at the Base of the Pyramid by enabling third parties to establish consent with customers authorize transactions to be initiated or information to be accessed from accounts at their financial institution. This  Open Banking API layer would enable any instituion using Mifos or Fineract to provide a UK Open Banking API layer  to third parties and fintechs.  \n\n The API Gateway to connect to is still being chosen (WS02, Gravitee, etc.)\n\n\n\n\nDescription\n\n\t\n\nIn 2025, Intern would need to familiarize with the proposed design and initial codebase contributed by Victor. This design follows the existing architectural patterns of our SDKs and client, exposin the appropriate APIs using coroutines and publishes them in a secure manner. The APIs that are consumed by the mobile banking applications have been documented in the spreadsheet below. The APIs have also been categorized according to whether they are an existing self-service API or back-office API and if they have an equivalent Open Banking API and if so, a link to the corresponding Open Banking API.\n\nFor example: \n\nSubmit Loan Application (Self-ServiceAPIwith EquivalentOpenBankingAPI)\n\nhttps://demo.mifos.io/api-docs/apiLive.htm#loans_create Used by Mifos Mobile\n\nImagesAPI(Back-OfficeAPIwith No EquivalentOpenBankingAPI)\n\nhttps://demo.mifos.io/api-docs/apiLive.htm#client_images Used by Mifos Mobile and Mobile Wallet \n\nFetch Identification CardAPI(Fineract CNAPIwith no equivalentOpenBankingAPI)\n\nhttps://docs.google.com/document/d/15LbxVoQQRoa4uU7QiV7FpJFVjkyyNb9_HJwFvS47O4I/edit?pli=1#heading=h.xfl6jxdpcpy1\n\nSample APIs to be Documented\n\n-------------------------------------------\n\nMifos Mobile API Matrix (completed by Ashwin)\n\nhttps://docs.google.com/spreadsheets/d/1gR84jZzLF-mM0iRw5JyeMAsHMK6RQPK0vyDmNAY9VhE/edit#gid=0\n\nMIfos Mobile API Matrix (completed by Shivangi)\n\nhttps://docs.google.com/spreadsheets/d/1exTv68v1IW_ygS7mSj0_ySFWGTj06NcxPZeNLjNIy6Y/edit?pli=1#gid=0\n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid development, SQL, Java, Javascript, Git, Spring, OpenJPA, Rest, Kotlin, Gravitee, WSO2\n\n\n\n\nImpact\n\n\t\n\nBy providing a secure middleware layer we can enable both trusted first party apps to allow customers to autheniticate and access their accounts as well as an API layer for third party fintechs to securely access FIneract and request information or initiate transactions with the consent of customers.\n\n\n\n\nOther Resources\n\n\t\n\nSelf-Service Middleware Layer/Plugin (Designed Implemented by Victor): \nhttps://github.com/openMF/selfservice-plugin \n\nCGAP Research on Open Banking: https://www.cgap.org/research/publication/open-banking-how-design-financial-inclusion\n\nDocs: https://mifos.gitbook.io/docs/wso2-1/setup-openbanking-apis\n\nSelf-Service APIs: https://demo.mifos.io/api-docs/apiLive.htm#selfbasicauth\n\nhttps://cwiki.apache.org/confluence/display/FINERACT/Customer+Self-Service+Phase+2\n\nOpen Banking Adapter: https://github.com/openMF/openbanking-adapte\n\nTransforms Open Banking API to Fineract API | Can connect to different API gateways and can transform against different API standards.\n\nReference Open Banking Fintech App:\n\nBackend: https://github.com/openMF/openbanking-tpp-server | GUI: https://github.com/openMF/openbanking-tpp-client\n\nGoogle Whitepaper on 3PPI: https://static.googleusercontent.com/media/nextbillionusers.google/en//tools/3PPI-2021-whitepaper.pdf\n\nUK Open Banking API Standard: https://standards.openbanking.org.uk/\n\nOpen Banking Developer Zone: https://openbanking.atlassian.net/wiki/spaces/DZ/overview\n\nExamples of Open Banking Apps: https://www.ft.com/content/a5f0af78-133e-11e9-a581-4ff78404524e\n\nSee https://openmf.github.io/mobileapps.github.io/\n\nReactive Loan Risk Assessment Engine for Mifos\n\nMentors\n\n\t\n\n@Ed Cable \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours \n\n\n\n\nCategory\n\n\t\n\nBack-end Platform - Modules & Integration (Mifos X)\n\n\n\n\nOverview & Objectives\n\n\t\n\nProvides financial institutions with real-time insights into loan risk, helping them make better lending decisions.\nA reactive backend ensures the system can handle a growing number of requests as Mifos deployments expand.\nImproved risk assessment can lead to more responsible lending practices, ultimately benefiting underserved communities.\n\n\n\n\nDescription\n\n\t\n\nIn 2025 the Intern would:\n\nCreate a dedicated microservice in Java that handles loan risk assessment asynchronously.\nUtilize reactive programming paradigms to ensure scalability and high throughput.\n\nDesign and implement a configurable risk scoring model that can incorporate multiple factors such as client financial history, repayment behavior, and external credit ratings.\nAllow for model tuning via configuration, so institutions can adapt the scoring criteria to local requirements.\n\n\n\n\nHelpful Skills\n\n\t\n\nJava, Spring Boot, Microservices, Gradle,  testing, SQL\n\n\n\n\nImpact\n\n\t\n\nThis project will significantly enhance the Mifos X and Apache Fineract platforms by improving the scalability, performance, and reliability of backend services. By transitioning to a reactive microservices architecture using modern Java technologies like Spring\n\n\n\n\nOther Resources\n\n\t\n\nhttps://issues.apache.org/jira/browse/FINERACT-2021 \n\nhttps://issues.apache.org/jira/browse/FINERACT-2022 \n\nhttp://querydsl.com/ \n\n \n\nMobile Check Deposit Proof of Concept Using Moov Image Cash Letter \n\nMentors\n\n\t\n\n@Victor Romero \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile | Platform - Integrations\n\n\n\n\nOverview & Objectives\n\n\t\n\nAs more and more implementers of Mifos X, use the platform for digital and neobank use cases, the ability to remotely capture check (i.e. mobile check deposit) becomes necessary. There are many proprietary solutions to achieve this but this project would aim to create a Proof of Concept that is completely open source to enable a neobank or any financial institution to offer to its members mobile check deposit capability. This would especially be relevant for the credit unions, community banks and smaller financial institutions that are adopting MIfos and Fineract as their core system.\n\n\n\n\nDescription\n\n\t\n\nThis project would be built as a new module that is easily embedded or integrated into our Mifos Mobile self-service mobile banking app. It would consist of an open source tool for actually scanning or capturing the check deposit and use the Moov open source Image Cash Letter library to parse, create, and validating ICL files.\n\nImage Cash Letter (ICL) specifications provide Check 21 services and are designed to enable banks to handle more checks electronically, which should make check processing faster and more efficient. Traditionally, banks often physically move original paper checks from the bank where the checks are deposited to the bank that pays them. The overall process of translating physical checks to electronic messages is called Check Truncation.\n\n\n\n\nHelpful Skills\n\n\t\n\nJava, Android,Kotlin, Compose, Go\n\n\n\n\nImpact\n\n\t\n\nEase of use for end user - enabling small financial institutions like credit unions to offer mobile check deposit at lower cost. \n\n\n\n\nOther Resources\n\n\t\n\nMoov Image Cash Letter Library - \nhttps://moov-io.github.io/imagecashletter/ \n\nDemo of ICL Library - \nhttps://oss.moov.io/x9/ \n\nGithub of ICL Library: \nhttps://github.com/moov-io/imagecashletter \n\nProprietary Remote Check Capture applications - \nhttps://www.prove.com/blog/10-remote-cheque-deposit-applications-in-us-from-non-banks \n\nPOC for Integration with Loan Decisioning (Lokyata, Begini, nTropy)\n\nMentors\n\n\t\n\n@Victor Romero @Aleksandar Vidakovic \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nPlatform - Modules\n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos/Fineract is a very robust and highly functional Loan Management System of Record. Typically adopters of the system will build their own or implement a third party tool to score their borrowers, analyze credit risk, and do their loan decisioning as part of their origination processes. Once this decisioning engine has determined eligbiility of the borrower, the customer and loan and ensuing lifecycle can then be managed in Mifos/Fineract. Mifos/Fineract can easily receive information from this decisioning engine and send information to the decisioning/scoring engine to faciilitate this analysis.\n\nThere are a number of different best practice alternative and traditional credit scoring/decisioning tools that Mifos/Fineract could more tightly integrate with. By providing a working integration of plugin framework for integrating with decisioning, our community can have better access to decisioning tools to improve the health of their portfolios.   This project would extend up on existing efforts to create a micro front-end approach for our UIs. As the userbase for Mifos/Fineract extends beyond just microfinance and financial inclusion we need to enable developers to easily build front-end user experiences that align with the wide variety of back-end use cases supported by our platform being used by MFIs, credit unions, banks, fintechs and governments. Additionally, many of the flow and screens used by staff as well as customers are common across mobile and web application. \n\n\n\n\nDescription\n\n\t\n\nThis project endeavors to create a plugin framework for integration with external decisioning engines. It should identify, design, and build out the points of integration and interaction for inbound and outbound data flows at both the back and front-end for decisioning/scoring tools of both traditional as well as alternative sources of data. This work would include leveraging Fineract data tables for storing and displaying this external data, the respective webhooks, APIs, and events that are called or triggered during the scoring process. Likewise this project would dovetail well with our workflow engine integration as flows would be calling both of these systems. Traditional providers we could potentially build integrations with include Lokyata which provides more out of the box scoring or tools like nTropy which allow data enrichment to build ones one model. On the alternative side, we are exploring integration with Begini which provides pyschometric assesment data as well as behavioral and usage data from the phone to assess credit worthiness. \n\nWork would be be on both the back and front-end.\n\n\n\n\nHelpful Skills\n\n\t\n\nJava, Spring, Angular, PostgreSQL, MySQL/MariaDB, REST\n\n\n\n\nImpact\n\n\t\n\nCost-effective and modern decisioning to improve the health and creditworthineess of a loan portfolio. More replicable integration points with external systemn that can be followed for other integrations. \n\n\n\n\nOther Resources\n\n\t\n\nhttps://www.lokyata.com/index.html \n\nhttps://www.ntropy.com/ \n\nhttps://www.begini.co/ \n\n \n\nDigital Bank UI using Compose Multi-Platform Micro Front-End for Web and Mobile Apps \n\nMentors\n\n\t\n\n@Pushpendra Kumar b20 122 \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nUI, Mobile\n\n\n\n\nOverview & Objectives\n\n\t\n\nThis project would extend up on existing efforts to create a micro front-end approach for our UIs. As the userbase for Mifos/Fineract extends beyond just microfinance and financial inclusion we need to enable developers to easily build front-end user experiences that align with the wide variety of back-end use cases supported by our platform being used by MFIs, credit unions, banks, fintechs and governments. Additionally, many of the flow and screens used by staff as well as customers are common across mobile and web application. \n\n\n\n\nDescription\n\n\t\n\nThis project would aim build both the micro front-end framework and set of UI components that can be deployed as individual flows or end to end applications across both web and mobile. Recently emerging is the Compose Multiplatform which extends Jetpack Compose to work beyond just mobile devices. \n\nThe current standard UI for Mifos X is still the Web App which is the only one that covers 100% of the feature set. While based on Angular and more modern than our previous Community App, the project hard to maintain and - apart from the occasional color change - hard to customize let alone integrate in other web applications. Developers should be able to pick any number of standalone components and integrate them in custom UI projects (where Fineract is one among multiple backends). All Fineract UI components should be published for easy consumption by other developers.\n\nDocumentation of the project could follow latest best practices (aka “Storybook”)\n\nTooling should help with consistency and reduce handwritten code as much as possible. Using Monorepos is strongly suggested.\n\n\n\n\nHelpful Skills\n\n\t\n\nJS, Android, React, CSS \n\n\n\n\nImpact\n\n\t\n\nDevelopers can more rapidly build out user interfaces for different financial service use cases with a greater degree of design flexibility \n\n\n\n\nOther Resources\n\n\t\n\nhttps://www.jetbrains.com/lp/compose-multiplatform/ \n\nhttps://github.com/JetBrains/compose-multiplatform \n\nOpenG2P  - Digital Identity Proof of Concept with MOSIP (GovTech)\n\nMentors\n\n\t\n\n@Ed Cable @Manoj VM \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nPlatform & Modules - Digital ID, Exploratory, Bleeding Edge\n\n\n\n\nOverview & Objectives\n\n\t\n\nDigital Identity is a pressing topic and for both generations of Fineract (1.x and CN), we'd like to have integration with emerging KYC and digital identity solutions.\n\nKYC (Know your customer) is a fundamental banking concept. It refers to the process of identifying a new customer at the time of account opening, in compliance with law and regulation. The identification requirements may be lower for low value accounts (\"Tiered KYC\"). The term is also used in connection with regulatory requirements for a provider to understand, on an ongoing basis, who their customer is and how they are using their account. Most of the banks are mandated to perform basic/extensive KYC, before they can serve their customers.\n\nTraditionally KYC is done in a centralised fashion where a central agency has the control over all the data. For example consider each bank like SBI, Deutsche, JP Morgan, etc. when creating a bank account, each of them requires a separate KYC process to be completed and all this data gets stored in their respective databases. Even the systems like Aadhar or social security number, etc. have the data stored in a central manner and maintained by the government. However, in recent times all these centralised identity servers continue to be hacked and the important and private data being stolen regularly.\n\nOmidyar Network along with Gates Foundation have developed the MOSIP project which provides an open source digital ID platform. Integration between Mifos along with Mojaloop can provide an end to end reference architecture for a digital cash transfer system built on open source digital public goods. \n\nDecentralised system means that no one person has control over sensitive data.\n\nIt enables the re-use of KYC, i.e. each financial institution or in our case each customer using Fineract may not have to perform its own complete KYC, but re-use the KYC already performed by others (those who have the power as issuing authority for any kind of claim).\n\nCryptographic security is the heart of blockchain technologies enhancing privacy.\n\nClaim-based system where the end user/customer has the control over his data.\n\n\n\n\nDescription\n\n\t\n\nIntegration between Mifos and digital identity systems and KYC protocols could be deepened. This project would focus on an initial proof of concept integration with MOSIP APIs for digital identity including\n\nID Repository\n\nID authentication\n\nBiometric Integration \n\nRegistration \n\nRegistering a client with a MOSIP-powered Digital Identity in a Mifos system and verifying that digital identity to perform transactions. \n\n\n\n\n\n\nHelpful Skills\n\n\t\n\nHTML, Spring, Hibernate, REST, Java, AngularJS, Javascript, SQL, \n\nMOSIP \n\n\n\n\nImpact\n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\nMOSIP https://www.mosip.io/\n\nMOSIP Docs: https://docs.mosip.io/platform/\n\nMachine Learning Scorecard for Credit Risk Assessment Phase 7 (AI)\n\nMentors\n\n\t\n\n@Lalit Mohan S  @Nasser Kaze @Victor Romero \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nAI, Platform - Modules, Bleeding Edge\n\n\n\n\nOverview & Objectives\n\n\t\n\nFinancial Organizations using Mifos/Fineract are depending on external agencies or their past experiences for evaluating credit scoring and identification of potential NPAs. Though information from external agencies is required, financial organizations can have an internal scorecard for evaluating loans so that preventive/proactive actions can be done along with external agencies reports. In industry, organizations are using rule based, Statistical and Machine learning methods for credit scoring, predicting potential NPAs, fraud detection and other activities. This project aims to implement a scorecard based on statistical and ML methods for credit scoring and identification of potential NPAs.\n\n\n\n\nDescription\n\n\t\n\nin 2025 the approach should improve last year's GSOC work on Features/Characteristics, Criteria and evaluation. The design and implementation of the screens should follow Mifos Application standards. Should implement statistical and ML methods with explainability on decision making. Should also be extensible for adding other functionalities such as fraud detection, cross-sell and up-sell, etc.\n\nThe system should be able to connect to external sources/providers(e.g. Credit Bureaus) to obtain a credit history that should weigh for the credit worthiness. The scorecard should be able to self update with increase and changes in data. This requires an ML pipeline to continually improve the scorecard models.\n\nPriorities:\n\nFurther optimize the ML and statistical models.\n\nImprove the Rule Based scoring system by fine-tuning the features.\n\nSetup ML pipeline to refresh dataset and models using Federated Learning techniques\n\nImplement Synthetic Data using SDV or any other open source synthetic data\n\nExtend the approach beyond Credit Scoring such as Fraud detection\n\n \n\n\n\n\nHelpful Skills\n\n\t\n\nJAVA, Integrating Backend Service, MIFOS X, Apache Fineract, AngularJS, ORM, ML, Statistical Methods, Django\n\n\n\n\nImpact\n\n\t\n\nStreamlined Operations, Better RISK Management, Automated Response Mechanism\n\n\n\n\nOther Resources\n\n\t\n\nSource Code: \nhttps://github.com/apache/fineract-credit-scorecard \n\nPrevious GSOC Progress\n\n2024 Project (Parth Kaushal): \nhttps://github.com/openMF/scorecard-ai \n\n2022: \nhttps://github.com/Zavier-opt/fineract-federatedLearning-research/blob/main/READEME.md Suchit’s Final Report - \nhttps://gist.github.com/sksDonni/53887ee6744330c4c8fbc1e18367331c \n\n2021: \nhttps://gist.github.com/xurror/bba79ecbf063dd8eae8ee9c24732701e \n\n2020: \nhttps://gist.github.com/humbletechy/43e7322913af561fdd7db5d4962d59a7 \n\n2019: \nhttps://gist.github.com/SupreethSudhakaranMenon/a20251271adb341f949dbfeb035191f7 \n\nDocumentation\n\nhttps://cwiki.apache.org/confluence/display/FINERACT/Fineract+Credit+Scorecard \n\nhttps://gist.github.com/lalitsanagavarapu \n\nMifos Mobile 7.0 - Mobile Banking App\n\nMentors\n\n\t\n\n@Ahmad Jawid Muhammadi @Garvit Agarwal @Saksham Handu @Paras Dhama @Rajan Maurya \n\n\n\n\nLength\n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nMobile - Mifos X | Core Development\n\n\n\n\nOverview & Objectives\n\n\t\n\nIn 2025, we are making a big push around shared infrastructure to provide modern core banking infrastructure the many SACCOs, MFIs and Credit Unions that go the last mile. We are prioritizing providing a more robust and feature-rich self-service mobile banking experience to be offered to their members and customers. Mifos Mobile is a reference mobile banking app which enables clients to authenticate themselves, view and edit their account details. and make repayments or transactions between their own accounts. It is now possible for any financial institution using Mifos to provide an omni-channel banking experience including smartphone-based mobile banking, USSD-based mobile banking, and online banking via a web app.\n\nOver the years our interns extended our mifos mobile banking app, completing a mix of functional, architectural, and design improvements including improving the outbound notification system by migrating from GCM to FCM, initial integration with RocketChat for direct customer support between staff and clients, a dark theme and better support for skinning, and phase 1 of integration with Mojaloop via the payment hub. In 2020 Shivangi revamped the UI and Ashwin began the migration to Kotlin for mutli-module development and last year Avneet finished the kotlin multi-module migration and whole project get migrated xml to Jetpack compose.\n\nWith the payment hub and API Gateway now in place, next we look to add additional mobile money and payment system integrations into the app as well as having the app connect via the Open Banking API rather than the self-service APIs. This exercise of mapping the Fineract self-service APIs to the Open Banking APIs will be the major focus of this project.\n\nIt was built on top of the Apache Fineract 1.x client-facing APIs to enable self-service channels for clients to interact with their own data and transact in a self-service manner. \n\n\n\n\nDescription\n\n\t\n\nIn 2025, Work will involve both development of the Mobile application as well as work to connect the app securely via self-service middleware layer. \n\nReplace API layer from self-service Fineract APIs to self-service middleware layer \n\nImplement new look and feel based on modular UI components. \n\nIntegration with an external payment system (Mojaloop, mPesa) via  our PH-EE\n\nComplete migrate Kotlin multi-module to Kotlin Multiplatform.\n\nMake sure fineract-client-kmp-sdk implemented properly and have no bugs.\n\nContinue adding unit tests for Data Layer and UI Layer\n\nCover all the screens with UI tests\n\nImplemented Playstore release github action pipeline\n\nImprove Githhub workflows and add jobs to run Unit and UI tests\n\nAdd CI to build APK and code analysis.\n\n\n\n\nHelpful Skills\n\n\t\n\nAndroid, Kotlin, Kotlin Multiplatform, Jetpack compose, Coroutines, Koin, MVVM, Unit, Instrumentation Testing, Room, Git, OpenJPA, Rest, WS02 API Gateway\n\n\n\n\nImpact\n\n\t\n\nBy providing an extensible mobile banking app, allow a member/client in having a self-service channel allowing them more direct control and visibility into their financial livelihood.\n\n\n\n\nOther Resources\n\n\t\n\nUser Stories - https://goo.gl/3xuUko\n\nWireframes - https://goo.gl/3xuUko\n\nCustomer Self Service APIs - https://cwiki.apache.org/confluence/display/FINERACT/Customer+Self-Service\n\nUK Open Banking API Standard: https://standards.openbanking.org.uk/\n\nSource Code: https://github.com/openMF/mifos-mobile\n\nSee: https://openmf.github.io/mobileapps.github.io/\n\nMifos Webinar on Open Banking API: \n\nMifos Open Banking API Documentation: https://app.gitbook.com/@mifos/s/docs/\n\nGsoC 2020 work progress final report: \nhttps://gist.github.com/ShivangiSingh17/67b6041387c1e281caa7df23347f549e \n\nGSOC 2023 Final Report (Pratyush Singh): \nhttps://gist.github.com/PratyushSingh07/a016afeb66d9b66b5aa01d232b10d788 \n\nGSOC 2024 final report (Avneet Singh): \nhttps://gist.github.com/AvneetSingh2001/5922dbbd905cd5f5e5f8ad3c0313fc4c \n\nPayment Hub EE - Replicable Mobile Money Connectors for  Mifos Payment Hub EE\n\nMentors\n\n\t\n\n @Subham Pramanik @Paras Dhama @Manoj VM \n\n\n\n\nCategory\n\n\t\n\nPlatform - Payments Integrations\n\n\n\n\nOverview & Objectives\n\n\t\n\nWhile we didn’t have an intern working on this in 2024 it’s very much a priority to both enable the ecosystem to independently adopt and extend PH-EE as well as to enable PH-EE to be utilized within the regions we’re deploying shared infrastructure to allow members to transaction digitally via mobile money.\n\nMobile money is rapidly transforming financial inclusion by providing more immediate, impactful, affordable, and secure financial services to the client. Providers like MFS Africa and Beyonic provide a set of cross-border payment rails to enable remittances across Africa terminating in mobile money wallets. Mobile money platforms like M-Pesa offer the client unparalleled value in terms of convenience, security and the possibility of new services and products that are more in line with real-world financial habits.  For financial institutions and their clients to fully scale mobile money and leverage its potential, it needs to be fully integrated with their core-banking system.\n\nWe designed and implemented Payment Hub EE as a highly flexible integration engine and orchestration layer to allow the ease of connecting to new mobile money APIs by simply building new connectors. Across the ecosystem, PH-EE has been deployed in production for multiple mobile money networks including M-Pesa via Safaricom and other connectors. However it is challenging for others to easily build new connectors. This project would help to make the process for building a new mobile money connector more replicable.  \n\n\n\n\nDescription\n\n\t\n\nThis project would focus on making the process of building a connector more replicable, defining and templating the BMPN flows for inbound and outbound mobile transactions, properly documenting the process, creating a set of helm charts for deployment of Payment Hub EE for the mobile money integration use case. \n\nThe Payment Hub EE has been built out as an integration layer between Fineract and real-time payment systems like Mojaloop. Built around the Zeebe as an orchestration engine, it's built with an extensible architecture with a set of connectors for additional core banking systems, channels, and payment systems. We have a connector built for Mojaloop and the GSMA mobile money API and would like to build additional ones for the most widely used payment rails across our community. As part of our DIAL-funded project to integrate Mifos with the open source Mojaloop payments platform the team from DPC consulting built out a middleware component called the payment hub to enable the integration with the Mojaloop APIs. This middleware has also served as the point of integration for all other external payment systems - the payment hub is extendable by additional payment connectors. \n\n\n\n\nHelpful Skills\n\n\t\n\nWeb Services, Java, SQL , JavaScript , Git, Sprint\n\n\n\n\nImpact\n\n\t\n\nGreat efficiency, reduced risk for clients, more impactful and relevant products & services.\n\n\n\n\nOther Resources\n\n\t\n\n2020 Progress: https://gist.github.com/SubhamPramanik/905ea87b83dd0b6af62af18ca0c0c1ea\n\nResearch & Data on Various Mobile Money Platforms  - http://goo.gl/XkSbdl\n\nPayment Hub EE Docs: https://mifos.gitbook.io/docs/payment-hub-ee/overview/payment-hub-apis \n\nOverview of Payment Hub and How to Configure (See Section 5.6.3): https://docs.google.com/document/d/1XnAuWxmX-Fof7-o69IyU9ilwcmigqQ6dNHc9uNRx1r4/edit?usp=sharing\n\nFunctional and Technical Specification on the Payment Hub: https://docs.google.com/document/d/1iVTgqljj5jW1eczpUcN_qykvWGh9bPKalxDayW8ZGcU/edit?usp=sharing\n\nBeyonic APIs: https://apidocs.beyonic.com/\n\nOnline Banking App 5.0 - Customer Loan Management Portal \n\nMentors\n\n\t\n\n@Ed Cable  @Victor Romero \n\n\n\n\nLength \n\n\t\n\nLarge - 350 hours\n\n\n\n\nCategory\n\n\t\n\nWeb - Mifos X Online Banking App | Core Development \n\n\n\n\nOverview & Objectives\n\n\t\n\nIt’s been a number of years since we have had an intern work on our online banking app but it’s a very high priority given the need for customers to interact with their own loan accounts. The online banking app is overdue for refactoring and could now follow the same Compose Multiplatform architecture as our mobile apps. It is currently an Angular web app powered by self-service APIs so would also follow the progress being made with self-service middleware layer. The app currently allows for account creation, logging in, viewing of account details, transferring between savings accounts, repaying loans via savings accounts, applying for new loans, and more.\n\nGiven the high amount of adoption of Mifos X for loan management use cases, for this year’s project we’d like to create a version of the online banking app which is solely focused lending use cases so Mifos can provide a customer-facing loan management portal. This will be a valuable community resource that others can use for demonstrations or to white-label to provide their customers to log into the self-service portal and view their existing active loans, view transaction details, repayment history, repayment schedules, etc, view details of previous loans, initiate repayments on their loans, calculate the payoff amount of their loans, apply for new loans, view loan account statements, etc. \n\nLoanPro provides a valuable resources on what a simple loan management portal could offer at https://help.loanpro.io/article/fcflgkwnxn-customer-website \n\n\n\n\nDescription\n\n\t\n\nFocus for 2025 includes:\n\nRedesign and Refactoring of Online Banking App to Compose Multiplatform\n\nAlign and enhancing overall user experience and design of application \n\nCreation of a new repository that contains only the loan management self-service capabilities\n\nRefine and implement the self-service loan management features listed above: \n\nIncorporate better visuals and charts and dashboards around loan history\n\nView their existing active loans\n\nView transaction details, repayment history, repayment schedules, etc\n\nView details of previous loans\n\nInitiate repayments on their loans\n\nCalculate the payoff amount of their loans\n\nApply for new loans\n\nView loan account statements, etc. \n\nDeploy the APIs (back-office or self-service APIs) securely (i.e. API Gateway)\n\nImplement capabilities to configure a more customized look and feel of the app (upload logo, etc.)\n\nLeverage ongoing security enhancements in Fineract to provide better self-service user management\n\nEnsure the app can easily be embedded or integrated into existing tools of institutions using this.\n\nBonus: Enabling self-service external transactions through Payment Hub EE integratio\n\nBonus: Adding new support features to make app more user friendly.\n\n\n\n\nHelpful Skills\n\n\t\n\nAngular development, SQL, Java, Javascript, Git, HTML, CSS\n\n\n\n\nImpact\n\n\t\n\nAllows a member/client in having a self-service channel allowing them more direct control and visibility into their financial livelihood.\n\n\n\n\nOther Resources\n\n\t\n\nPrevious GSOC Efforts:\n\n2020 Progress: \nhttps://gist.github.com/manigedit/bca72537151afde40a3246776cb22503 \n\n2019 Progress: \nhttps://gist.github.com/CajetanRodrigues/b2b14b55f0f2c97ea276eb764209c4d9  \n\nLoanPro Customer Loan Website: https://help.loanpro.io/article/fcflgkwnxn-customer-website \n\nSelf Service APIs - https://cwiki.apache.org/confluence/display/FINERACT/Customer+Self-Service\n\nSource Code - https://github.com/openMF/web-self-service-app and https://github.com/openMF/online-banking-app\n\nComplete Details can be found here: Self Service Web Application\n\nUK Open Banking API Standard: https://standards.openbanking.org.uk/\n\nMifos Webinar on Open Banking API: \n\nMifos Open Banking API Documentation: https://app.gitbook.com/@mifos/s/docs/\n\nFurther Ideas: https://docs.google.com/document/d/1KXDSrBkuYA9g694-DE4qf1QKFcAhWwA-HNnn9YAucbk/edit?usp=sharing\n\nAd Hoc Reporting Module/Business Analytics (OLAP) \n\nMentors\n\n\t\n\n@Bharath Gowda @Victor Romero \n\n\n\n\nOverview & Objectives\n\n\t\n\nBusiness insights are not just raw data; they are the outcome of a thorough analysis that transforms data into valuable information. By examining data from multiple sources, such as sales records, customer feedback, and market research, organizations can gain a comprehensive understanding of their business landscape.\n\nThrough the application of analytical techniques, such as data mining, statistical analysis, and machine learning, organizations can uncover hidden patterns and correlations within their data. These insights provide a deeper understanding of customer behavior, market trends, and operational efficiency.\n\nDuring previous GSoC Interms have developed ETL scripts to create OLAP cubes (fact and dimension tables on MySQL). This allowed managers to perform ad hoc slicing and dicing of their data to answer important questions about their operations.\n\nCreated ETL scripts and tests\n\nCreated a Mondrian schema to work with Saiku Analytics\n\nThis previous project would extend off of the work of a previous GSOC intern in building out integration with Saiku.\n\nThe proposed work is looking to use MPP-based real-time data warehouse (like Apache Doris) for ingesting data from Mifos X and the Analytics can be implemented as Dashboards using Apache Superset. \n\n\n\n\n\n\nDescription\n\n\t\n\nThe data and information housed in the centralized Mifos database is critical to the operations and management of a financial institution. While Mifos X ships with more than five dozen standard report and has multiple ways to build custom reports, non-technical staff who don’t know SQL queries nor the structure of the database struggle to be able to access new reports on the fly. Integration with Saiku would allow for ad-hoc reporting or more simply a drag and drop interface for management and non-technical staff to easily slice and dice and create reports on the fly.\n\nNowadays using near real time data is critical for Decisioning systems and the core banking solutions are a crucial component for any financial institution. And the use of modern open source technologies can give Business Insights on the ever-changing business landscape for taking informed decisions.\n\nAt a later time the data lake could be used for using another AI tools for data analysis.\n\n\n\n\nHelpful Skills\n\n\t\n\nDatabase Management Systems, MDX, SQL,\n\n\n\n\nImpact\n\n\t\n\nData drives a microfinance institution - the more powerful and robust analytical tools management has, the better they can tailor their services and outreach to impact the poor most effectively.\n\n\n\n\nOther Resources\n\n\t\n\nApache Doris - \nhttps://doris.apache.org/ \n\nApache SuperSet \nhttps://superset.apache.org/  \n\nTiDB - HTAP Database - \nhttps://www.pingcap.com/  \n\nSaiku Analytics Demo - demo.analytical-labs.com\nWikipedia OLAP Article - http://en.wikipedia.org/wiki/Olap\nIntroduction to OLAP - http://www.db-class.org/course/video/preview_list\nGentle Introduction to MDX - http://www.iccube.com/support/documentation/mdx_tutorial/gentle_introduction.html\n\nApache Fineract 1.0 Github Repo\n\nSaiku Github Repo\n\nhttps://cwiki.apache.org/confluence/pages/viewpage.action?pageId=73632010\n\nAd Hoc Reporting Builder Tool\n\nGSOC Idea Description\n\nDemo of Integration from 2014\n\nSaiku Website - http://community.meteorite.bi/\n\nDocumentation on Work led by Oleg in 2014\n\nJIRA Issue for Oleg’s Work: https://mifosforge.jira.com/browse/MIFOSX-1448\n\nSource Code from Oleg’s Work\n\nDiscussion on Saiku and Challenges to Overcome\n\nDiscussion on Saiku\n\nDemo of Mifos with Salesforce Reporting\n\nMIFOSX-1448 - Getting issue details... STATUS\n\n\nBasic CRM Functionality - Inquiries/Complaints Module\n\nMentors\n\n\t\n\n@Ed Cable \n\n\n\n\nCategory\n\n\t\n\nBack-end Platform | Modules\n\n\n\n\nOverview & Objectives\n\n\t\n\nRight now Mifos X contains core client management functionalities including tracking basic demographic information, know your customer information, document management, and survey collection through data tables. As financial institutions, serving the poor begin to offer a more in-depth and diverse range of financial inclusion products, the need for more robust client management and in-depth client understanding has grown. Their core system needs to provide more and more CRM-type functionality that compliment the portfolio management and financial/social reporting that the Mifos X provides.\n\nThis project will work to deliver the initial set of customer relationship management functionalities including a module for tracking inquiries, complaints. Primarily it will focus around customer support desk type functionality. \n\n\n\n\nDescription\n\n\t\n\nThis module will have a request management functionality. A request can be of 2 types: Complaints and Service Requests. Each request must be against a customer and optionally against an account of the customer. Each request will go through a simple workflow.\n\nActions that can be performed on a request:\n\nAssign -> will change status to \"assigned\"\n\nStart Work --> will change status to \"in progress\"\n\nClose --> will change status to \"closed\" (with a sub-reason code)\n\nAt each step user can enter comments.\n\nThe customer summary screen will have a link to view the requests of the customer - along with a summary and current status - with options to click-through to get the complete history of each request.\n\n\n\n\nHelpful Skills\n\n\t\n\nfamiliarity with Mifos X tech architecture, angular js,node js, java,Spring, Backend Integration\n\n\n\n\nImpact\n\n\t\n\nDeepening the client relationship and ensuring fair, responsible, and transparent financial services to the poor is a core piece of the industry's roadmap for financial inclusion. Providing customers the ability to voice their concerns and feedback about the services they're receiving provides a simple yet powerful tool to protect the client. Empowering the financial institution with the ability to track these inquiries and overall maintain a more holistic relationship tracking entire lifecycle of their clients gives them a much better ability to understand their clients and respond to their needs with appropriately designed services and products.\n\n\n\n\nOther Resources\n\n\t\n\nOdoo Open Source Business Apps Github Repo\n\nOdoo Third-party API And Demo\n\nWikipedia Article on CRM\n\nWhat Is CRM ? \n\nCRM\n\nMedium Projects\n\nThese projects are of a 175 hour duration.\n\n \n\nAI-Driven Architectural Test for Mifos Payment Hub EE (AI)\n\nMentors\n\n\t\n\nKerlyn Manyi \n\n\t\n\n \n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours\n\n\t\n\n \n\n\n\n\nCategory \n\n\t\n\nPlatform | DevOps | PH-EE\n\n\t\n\n \n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos Payment Hub EE is a critical financial transaction platform that facilitates seamless payments across different banking and financial services. Given its complexity, ensuring the system's long term resilience, scalability, and security is vital. This project aims to perform AI-driven architectural testing to analyze the system’s performance, identify bottlenecks, predict failures, and enhance its overall robustness. \n\n\t\n\n \n\n\n\n\nDescription\n\n\t\n\nBy leveraging machine learning and automation, the project aims to create an intelligent testing framework that can proactively detect issues before they impact operations. This will result in improved performance, enhanced security, and better fault tolerance for Mifos Payment Hub EE. \n\nIntern will;\n\nDevelop machine learning models for anomaly detection, load testing, and vulnerability scanning. \n\nImplement AI-driven load and stress testing to identify system bottlenecks and optimize performance. \n\nUtilize AI-based security scanning tools to analyze authentication mechanisms, APIs, and transaction flows. Detect potential fraud patterns using machine learning techniques. \n\nDesign an AI-driven test automation framework to reduce manual testing efforts. Implement predictive analytics to forecast potential system failures. \n\nDocument testing processes, findings, and recommendations.\n\n\t\n\n \n\n\n\n\nHelpful Skills\n\n\t\n\nPython, Java, TensorFlow, Scikit-learn, Git\n\n\t\n\n \n\n\n\n\nImpact\n\n\t\n\nThe project will boost Mifos Payment Hub EE's long term reliability and security while enabling scalability, ultimately establishing it as a trusted choice for financial institutions.\n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\n \n\n\t\n\n \n\n\n\n\n \n\n\t\n\n \n\n\t\n\n \n\nBank Statement Analysis Phase 2 (AI)\n\nMentors\n\n\t\n\n@jeremy engelbrecht @Akshat sharma \n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours\n\n\n\n\nCategory \n\n\t\n\nAI | Platform - Modules \n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos is a powerful loan management system, but it has room to improve its loan origination and decision-making features. Phase 2 of the Bank Statement Analysis project enhances the system by integrating user personalization and expanding cross-platform compatibility. With this, the platform will not only analyze the credit risk of potential borrowers but also provide personalized financial advice based on the user’s spending habits, income, and goals. Additionally, this phase will improve integration with various financial platforms, creating a more comprehensive financial management experience for the user.\n\n\n\n\nDescription\n\n\t\n\nIn this phase,the system will build dynamic, personalized user profiles based on financial data. It will also integrate seamlessly with multiple financial platforms to aggregate data from various sources such as bank accounts, investment portfolios, and payment services. \n\nKey features in Phase 2:\n\nPersonalized Financial Advice: Provide tailored recommendations based on historical spending, income, and financial goals. These suggestions will include budgeting tips, savings strategies, and financial goal tracking\n\nCross-Platform Integration:\n\nAPIs & Data Standardization: Create robust APIs and standardized data formats for seamless data exchange between multiple financial systems. \n\nReal-Time Synchronization: Enable real-time synchronization and data aggregation from various financial sources such as banking accounts, investment portfolios, and payment services.\n\nUniform Interface: Provide a uniform interface for consolidating financial records across different platforms, ensuring a unified experience for users. \n\nThese features will be integrated within MIfos X, allowing users to access a comprehensive overview of their financial data and receive personalized advice, all while improving their loan eligibility assessment.\n\n\n\n\nHelpful Skills\n\n\t\n\nPython, XGBoost, NLP, Recommendation Systems, Cross-Platform Data Integration\n\n\n\n\nImpact\n\n\t\n\nPhase 2 will significantly improve the loan origination process by offering dynamic, personalized financial recommendations. It will also enhance the user experience by allowing real-time synchronization of financial data across multiple platforms, giving users a comprehensive view of their financial situation. The cross-platform compatibility will foster a more integrated financial management experience, helping users make informed decisions, optimize their finances, and improve their creditworthiness for loan eligibility\n\n\n\n\nOther Resources\n\n\t\n\nFor similar work that has been worked on previously in the community, see: \nhttps://mifos.org/blog/powered-by-mifos-softidoc/ \n\n2024 GSOC Final Report (Akshat Sharma): \nhttps://gist.github.com/Akshat111111/2f5212f95dab3e6ab6cf12ee7aef5584 \n\n\n\n\n \n\n\t\n\n \n\nCredit Bureau Integration Phase 5 \n\nMentors\n\n\t\n\n@Nayan Ambali, @Ed Cable @Rahul Pawar \n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours\n\n\n\n\nCategory \n\n\t\n\nPlatform - Modules | Core Development\n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos is a very strong loan management system but has room to improve around loan origination features. Credit Bureau integration is one of these key features to build upon. Because of regulatory reasons or to do background check of a client (risk management), MFIs depend on credit bureaus. As part of it, MFI must submit client details to credit bureau and also need to pull client information from credit bureau before approving any new loans to a client. Mifos X can be integrated with a popular CBs in India and from other regions (based on the demand).\n\n\n\n\nDescription\n\n\t\n\nDuring the 2016, 2017, and 2020 Google Summer of Codes, Nikhil Pawar and Rahul Pawar completed the credit bureau integration module with integrations for the major credit bureaus in India and Myanmar. This project will continue extending the functionality of the module and work on integrations with the major credit bureaus in Latin America and Sub-Saharan Africa.\n\nThe major functionality will be sending the data to CBs on regular intervals in the format CB expects. And option to pull the client’s information from CB whenever loan officer/branch manager/ user wants to view the information for a particular client.\n\nDuring 2025 it is expected to integrate a Credit Scoring standar which is the FICO® (Fair, Isaac, and Company). Although FICO® has many different scoring models, it uses relative percentage weights to help determine how much impact certain factors will have in helping determine a FICO® credit score. The main categories considered are a person’s payment history (35%), amounts owed (30%), length of credit history (15%), new credit accounts (10%), and types of credit used (10%).\n\nThe Credit Burea information can be displayed while creating a new loan application because it will be used only during this process.\n\n\n\n\nHelpful Skills\n\n\t\n\n SQL, Java, Javascript, Git, Web Services, Big Data (Hadoop, Hive), API Rest,  \n\n\n\n\nImpact\n\n\t\n\nThe credit report shows account information such as repayment record, defaults, type of loan, amount of loan, etc. of the customer. This information facilitates prudent decision-making when the credit underwriter processes the loan application. This help MFI to reduce the risk of bad loans and reduces the multiple lendings to same person from different MFIs.\n\n\n\n\nOther Resources\n\n\t\n\nFor the scope of this project for 2024, see https://jira.apache.org/jira/browse/FINERACT-734\n\nDetailed requirements https://goo.gl/aZWMZa\n\nMifos Credit bureau Integration. (Risk calibration Module -RCM)\n\nSource Code: \nhttps://github.com/apache/fineract/pull/215/files  \n\nFICO - \nhttps://www.fico.com/es/products/fico-score \n\nEQUIFAX - \nhttps://www.equifax.com/personal/education/credit/score/articles/-/learn/what-is-a-fico-score/ \n\nCredit Scores - \nhttps://en.wikipedia.org/wiki/Credit_score_in_the_United_States#FICO_score \n\nMyFico - \nhttps://www.myfico.com/credit-education/credit-scores  \n\nOptimize Payment Hub EE Operations UI with new Micro Front-Ends\n\nMentors\n\n\t\n\n@Ed Cable @Mohit Bajoria @Jose Hernandez \n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours\n\n\n\n\nCategory\n\n\t\n\nWeb \n\n\n\n\nOverview & Objectives\n\n\t\n\nFor our Payment Hub EE integration layer and payment orchestration engine, we provide an operational user interface which allow staff of the financial institution participating in a real-time payment scheme to manage view detail of the incoming and outgoing transactions that are flowing through the switch, manually process refunds, complete reconciliations, view and take action on unsuccessful and disputed transactions, and more. \n\n\n\n\nDescription\n\n\t\n\nIntern will improve the operations app user interface for the following use cases.\n\nTransaction Details View\n\nTransaction Reconciliation\n\nRefund/Reverse transactions\n\nOperational Metrics and Dashhboards\n\nBusiness metrics and Dashboards Account Details\n\n\n\n\nHelpful Skills\n\n\t\n\nJavascript, CSS, HTML5. Angular and Bootstrap (CSS framework) is plus\n\n\n\n\nImpact\n\n\t\n\nReference UI for microfinance institutions on Apache Fineract CN\n\n\n\n\nOther Resources\n\n\t\n\nUsability and Design\n\nUse Cases - \nhttps://github.com/openMF/digital-bank-ui/wiki/Use-Cases-&-Requirements \n\n\n\n\nGithub\n\n\t\n\nhttps://github.com/openMF/digital-bank-ui \n\nhttps://github.com/openMF/digital-bank-ui/issues \n\nSecurity Penetration testing for Payment Hub EE \n\nMentors\n\n\t\n\nGodfrey Kutumela\n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours\n\n\n\n\nCategory\n\n\t\n\nPlatform | Infrastructure\n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos Payment Hub EE is continuing to grow in its functional capbailities and breadth of use ceases being adopted for. We must ensure it  is super secure and impenetrable. Your mission, should you choose to accept it, is to prove us wrong, and help close gaps you may find.\n\n\n\n\nDescription\n\n\t\n\nBeyond a one time exercise, you should integrate (some of) the tools you've used into our build chain so that, even after you've gone, tools flag up future newly introduced potential vulnerabilities.\n\n\n\n\nHelpful Skills\n\n\t\n\nCandidates applying for this project would ideally have prior experience in penetration testing, and document this in their application.\n\n\n\n\nImpact\n\n\t\n\nRe-assuring the more Entreprise-y type Mifos clients that they can safely bet on Mifos X as an MFI platform.\n\n\n\n\nOther Resources\n\n\t\n\nhttps://www.owasp.org/index.php/Main_Page\n\nhttps://code.google.com/p/zaproxy/\n\nhttp://wapiti.sourceforge.net\n\nRun FindBugs & related tools for some serious static code analysis\n\nhttp://en.wikipedia.org/wiki/Penetration_test\n\nOpenG2P  - Digital Identity Proof of Concept on Sovrin & Hyperledger Indy\n\nMentors\n\n\t\n\nRachit Kansal\n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours (Update)\n\n\n\n\nCategory\n\n\t\n\nPlatform & Modules - ID, Exploratory, Bleeding Edge\n\n\n\n\nOverview & Objectives\n\n\t\n\nDigital Identity is a pressing topic and for both generations of Fineract (1.x and CN), we'd like to have integration with emerging KYC and digital identity solutions.\n\nKYC (Know your customer) is a fundamental banking concept. It refers to the process of identifying a new customer at the time of account opening, in compliance with law and regulation. The identification requirements may be lower for low value accounts (\"Tiered KYC\"). The term is also used in connection with regulatory requirements for a provider to understand, on an ongoing basis, who their customer is and how they are using their account. Most of the banks are mandated to perform basic/extensive KYC, before they can serve their customers.\n\nTraditionally KYC is done in a centralised fashion where a central agency has the control over all the data. For example consider each bank like SBI, Deutsche, JP Morgan, etc. when creating a bank account, each of them requires a separate KYC process to be completed and all this data gets stored in their respective databases. Even the systems like Aadhar or social security number, etc. have the data stored in a central manner and maintained by the government. However, in recent times all these centralised identity servers continue to be hacked and the important and private data being stolen regularly.\n\nWith the advent of blockchain concepts and technologies, it is not ideal but imperative that we shift from the traditional identity management to a more secure decentralised claim-based identity management system. This kind of system has multiple benefits:\n\nDecentralised system means that no one person has control over sensitive data.\n\nIt enables the re-use of KYC, i.e. each financial institution or in our case each customer using Fineract may not have to perform its own complete KYC, but re-use the KYC already performed by others (those who have the power as issuing authority for any kind of claim).\n\nCryptographic security is the heart of blockchain technologies enhancing privacy.\n\nClaim-based system where the end user/customer has the control over his data.\n\n\n\n\nDescription\n\n\t\n\nSee \nhttps://cwiki.apache.org/confluence/pages/viewpage.action?pageId=103093257  for details on the proof of concept \n\nP0 requirements\n\nSetup and run an Hyperledger Indy Network with Stewards.\n\nOpening a bank account scenario.\n\nApplying for a loan scenario.\n\nP1 requirements\n\nPerforming money transfer to a merchant online.\n\n\n\n\nHelpful Skills\n\n\t\n\nHTML, Spring, Hibernate, REST, Java, AngularJS, Javascript, SQL, Hyperledger Indy\n\n\n\n\nImpact\n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\nSovrin: https://sovrin.org/\n\nIndy Getting Started: https://github.com/hyperledger/indy-sdk/blob/master/docs/getting-started/indy-walkthrough.md \n\nSovrin Whitepaper: https://sovrin.org/wp-content/uploads/2018/03/Sovrin-Protocol-and-Token-White-Paper.pdf\n\nSovrin Stewards: https://sovrin.org/stewards\n\nMifos/Fineract Chatbot & Adapter 4.0 (AI)\n\nMentors\n\n\t\n\n@raul.sibaja @Aleksandar Vidakovic @jeremy engelbrecht \n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours (Update to Large)\n\n\n\n\nCategory\n\n\t\n\nPlatform - Modules | AI | Exploratory\n\n\n\n\nOverview & Objectives\n\n\t\n\nFor many of our users today, chat is a much more familiar form of user interface for them and it would be valuable to provide an extensible chatbot connected to Mifos/Fineract that could be used to both provide customer support as well as allow clients to directly interact with their accounts. See this post from ThitsaWorks for more: https://medium.com/@thitsaworks/chatbots-the-emergent-and-effective-tool-in-financial-education-f6e63baf9188\n\n\n\n\nDescription\n\n\t\n\nThis project will focus on building on the latest version of the chatbot. In 2019, our GSOC intern, Anshul extended the Mifos Chatbot and Adapter with better authentication, improved Natural Language Processing, and integration with the Slack, Telegram and Facebook messenger platforms. \n\nThe project will include both leveraging other open source libraries and components to build the chatbot and building the adapter to the chatbot for MIfos/Fineract which will act as the interaction between chatbot and Mifos. It will take the replies from chat and feed them into Mifos. The program will sit in between Mifos and Chat.\n\nMain components needed are:\n\nNLU (natural language understanding) /NLP (natural language processing) \nThis componentcomponent is probably a good candidate for integrating a suitable existing OS project. \n\nChat platform and/or protocols\nTo establish the communication between user and the bot logic the project could either leverage (at least) one of the major chat platforms (e. g. Facebook messenger etc.) and/or use open source protocols like XMPP or IRC. It's probably best to evaluate existing chat frameworks/client libraries \n\nFineract adapter\nThis is the part where most of the student's attention is needed (see use cases below). The student would have to evaluate to which extent a chatbot framework could be integrated or if there are better arguments to develop something Mifos specific.\n\nNote: only Apache license compatible libraries/frameworks/components can be used.\n\nIt will cover the following use cases: \n\nEnquiry of Loan Details\n\nMifos/Chat adapter will allow authenticated user to enquiry details of loan based on loan ID.\n\nCheck user/client authentication\n\nGet MFI name, 9-digits loan ID (xxxxxxxxx), 9-digits clients ID (xxxxxxxxx) if it is an authenticated user/client.\n\nAllow authenticated user/client to query loan details:\n\nStatus of loan\n\nOutstanding principal and interest\n\nNext due date, due principal and interest\n\nPrevious payment date, principal and interest (the last transaction of loan)\n\nLoan maturity date\n\nOverdue loan principal and interest (if have)\n\nNumber of days in arrears for loan\n\nPenalty fees/charges\n\nClient activation date\n\nLoan disbursed date/amount/interest\n\nFirst repayment date\n\nSaving balance\n\nSaving interest (to date amount)\n\nNext meeting date\n\nEnquiry of Savings Details\n\nSaving activated date\n\nSaving balance\n\nSaving interest (to date amount)\n\nLast active transaction date\n\nNotifications through Chat Adapter\n\nNotification will be sent thru Mifos/Chat adapter to respective clients on the following events occur on their accounts. \n\nClient account activation\n\nClient account rejection\n\nLoan disbursal\n\nLoan close\n\nNext due principal and interest (1/2 days in advance)\n\nPayment posted (there may have delay due to data entry)\n\nNext meeting date\n\nSaving deposit\n\nSaving withdrawal\n\nSaving close\n\nUpdate/delete details of clients (address, phone number, NRIC number)\n\nUpdate/delete details of group (group name, group leader, loan officer name)\n\nUpload documents\n\nEnquiry about Loan Products\n\nCheck user/client authentication\n\nGet MFI name, 9-digits clients ID (xxxxxxxxx)\n\n(Provide a list of available loan products of MFI)\n\nAllow authenticated user/client to query loan product details based on selected product:\n\nLoan term\n\nInterest rate\n\nMax and min allowed amount to borrow\n\nNumber of installments/repayments\n\nEnquiry about Group Information\n\nMifos/Chat adapter will allow authenticated user (group leader) to enquiry on group member details.\n\nCheck user/client authentication.\n\nGet MFI name, group leader name, group ID, center ID, branch name, (Is a group leader?)\n\nAllow authenticated client(group leader) to query group details:\n\nNext meeting date\n\nClients who have overdue loan\n\nEnquiry about Branch Information\n\nMifos/Chat adapter will allow authenticated user(branch manager) to enquiry on branch details.\n\nCheck user/client authentication\n\nGet MFI name, branch manager Name, user id/name, Branch Name, (Is a branch manager?)\n\nAllow authenticated branch manager to query branch details:\n\nNumber of clients of his/her branch\n\nExpected disbursement principal (today)\n\nOutstanding principal and interest\n\nSaving balance\n\nNumber of clients awaiting for disbursal (today)\n\nNew registered clients (today)\n\nProspective clients (as of today)\n\nNumber of clients (dormant) as of today\n\nNumber of village/bloc/ward in a branch\n\n \n\n\n\n\nHelpful Skills\n\n\t\n\nSQL, Java, Git, Spring, OpenJPA, Rest\n\nHelpful: technical knowledge of (any) chat protocol (e. g. XMPP, IRC), experience with NPU/NLP\n\n\n\n\nImpact\n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\n2019 Progress: https://gist.github.com/iosdev747/2b7de87cd9b028bb97433ee2e26ad18d\n\nSource Code: https://github.com/openMF/mifos-chatbot\n\nAI/NLU services\nGoogle: https://dialogflow.com/\nFacebook: https://wit.ai/\nhttps://botkit.ai/\nhttps://www.ambiverse.com/\nhttps://github.com/ambi-verse/nlu-api-client-java\n\nFrameworks\nhttps://github.com/howdyai/botkit\nhttps://github.com/nitroventures/bot4j\nhttps://dev.botframework.com/\nHas a lot of information on integration with chat platforms/protocols: https://github.com/BotMill\n\nNLP/NLU components and tools\nhttps://opennlp.apache.org/\nhttps://deeplearning4j.org/java-ai\nhttps://github.com/AIMLang/aiml-java-interpreter\nhttps://nlu.rasa.ai/\n\nTutorials\nhttps://dzone.com/articles/building-an-intelligent-chatbot-using-botkit-and-r\nhttps://dzone.com/articles/beginners-guide-to-creating-chatbots-using-dialogf-1\nhttps://tutorials.botsfloor.com/\n\nOther\nExtensive comparison: https://chatbotsjournal.com/25-chatbot-platforms-a-comparative-table-aeefc932eaff\nSeems outdated, maybe helps with some insights/inspiration: http://www.zionsoftware.com/products/jbuddy/botframework/\n\nCommunity support through AI\n\nMentors\n\n\t\n\n@David Higgins @Ed Cable \n\n\n\n\nLength\n\n\t\n\nMedium - 175 hours\n\n\n\n\nCategory\n\n\t\n\nPlatform - Modules | AI | Exploratory\n\n\n\n\nOverview & Objectives\n\n\t\n\nThe community for Mifos related applications has grown considerably over the past few years.  The applications are highly complex and implementors (especially those new to the projects) require support to be able to implement and develop these applications.\n\nCurrent support is via the Slack general channel and dispirate documentation, requests get different treatment depending who reads and responds.  As there is no dedicated resource for monitoring and response which means timescales can be elongated.\n\nThe objectives of this project is to setup an initial AI bot and learning algorithm that can respond to questions and point users to the relevant answers or documentation.\n\nThis would need to be across the range of Mifos/Fineract products that the slack channel currently accomodiates\n\nit would require some pre-training of the algorithms based on past questions\n\n\n\n\nDescription\n\n\t\n\nIdentify the best AI solution for the task.\n\nCreate the AI PoC and train the algorithms\n\nTest its responses based on previous questions and answers.\n\nPoC could be limited to one product initially and have a breakout for additional assistance.\n\nWeb integration e.g. chatbot could be added to websites.\n\n\n\n\nHelpful Skills\n\n\t\n\nHTML, Slack, AI\n\n\n\n\nImpact\n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\n \n\nCustom Fantastic Mifos Project\n\nIs there something missing from this ideas list that you want to do? Let us know! Send your project proposal(s) to the developer mailing list.\n\n\nSmall Projects\n\nThese projects are of a 90 hour duration.\n\nAlignment with emerging Open Wallet Standards\n\nIntegration with Open Banking and Open Payment Standards\n\nDesign and Adoption of new frameworks like Compose Multi-platform\n\nEnd to End Demo in Mifos Gazelle \n\nAlignment with Emerging Open Wallet Standards \n\nMentors\n\n\t\n\n @Ed Cable @David Higgins \n\n\t\n\n \n\n\n\n\nLength\n\n\t\n\nSmall - 90 hours\n\n\t\n\n \n\n\n\n\nCategory \n\n\t\n\nMobile Development\n\n\t\n\n \n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos and Fineract are valuable Digital Public Goods critical to advancing the Sustainable Development Goal of No Poverty by providing both the core banking system of record to manage the store of value for a functional wallet/transactional account in which to send G2P payments to. Many different financial services can be layered on these accounts within Mifos and Fineract making them a powerful tool for financial inclusion. Apart from providing the back-end to manage these wallets, Mifos also provides a reference mobile wallet which can be extended to one’s local requirements.\n\nRecently there have been a number of cross-sector movements to establish standards and frameworks upon which any type of wallet could be built. These wallets could be used for financial use cases, identity use cases, health use cases, etc but standards and frameworks initial focus primarily centers around secure sharing of credentials and privacy of user data.  Mifos was a founding member of the Open Wallet Foundation and sits on the GovStack Wallet Building Block Working Group. \n\n\t\n\n \n\n\n\n\nDescription\n\n\t\n\nThis project would consist of researching the different open wallet standards emerging from the Open Wallet Foundation, GovStack wallet building block, and could utilize other digital public goods for identity including Inji from MOSIP and the Gluu Project. \n\nResearch would include exploring the current status of the specifications, standards and designing a POC architecture for a mobile wallet that aligns with th standards and specifications in their current state. \n\n\t\n\n \n\n\n\n\nHelpful Skills\n\n\t\n\nJava, Android, Kotlin, Mobile Development, Enterprise Architecture \n\n\t\n\n \n\n\n\n\nImpact\n\n\t\n\nThe OWF aims to set best practices for digital wallet technology through collaboration on standards-based OSS components that issuers, wallet providers and relying parties can use to bootstrap implementations that preserve user choice, security and privacy. (mission of Open Wallet Foundation)\n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\nOpen Wallet Standards & Requirements\n\nhttps://openwallet.foundation/ \n\nhttps://www.linuxfoundation.org/research/open-wallet-foundation \n\nhttps://govstack.gitbook.io/bb-payments/ \n\nOpen Source Tools for Identity & Credential Sharing\n\nhttps://gluu.org/ \n\nhttps://docs.mosip.io/inji/overview \n\n\t\n\n \n\nIntegration with Open Banking and Open Payment Standards \n\nMentors\n\n\t\n\n @Ed Cable @David Higgins \n\n\t\n\n \n\n\n\n\nLength\n\n\t\n\nSmall - 90 hours\n\n\t\n\n \n\n\n\n\nCategory \n\n\t\n\nPayments | Platform - Integrations \n\n\t\n\n \n\n\n\n\nOverview & Objectives\n\n\t\n\nA huge democratizing force across the financial services sector is the Open Banking movement providing Open Banking APIs to enable third parties to directly interact with customers of financial institutions. We have recently started providing an Open Banking API layer that will allow financial institutions using Mifos and Fineract to offer third parties access to requesting account information and initiating payments via these APIs. Most recently the Mojaloop community, led by Google, has led the development of a centralized PISP API.  We have chosen to the folow the comprehensive UK Open Banking API standard which is being followed and adopted by a number of countriues through Sub-Saharan Africa and Latin America. The Interledger Foundation now also has an Open Payments Standard.\n\nAll of these standard have great applicability to how our core banking and payment orchestration systems authorize, establish consent, access date, and initaite transactions via these third party APIs and standards for sharing information and initiating transactions \n\n\t\n\n \n\n\n\n\nDescription\n\n\t\n\nThis project would consist of researching the all of the different open banking, open finance and open payment initiatives and their corresponding API specifications. The POC would consiste of designing and implementing ways in which Fineract could generate APIs that are compliant with these specifications and most importantly ways for Fineract and our Payment Hub EE to consume the APIs/standards for these initiatives.\n\n\t\n\n \n\n\n\n\nHelpful Skills\n\n\t\n\nJava, Android, Kotlin, Mobile Development, Enterprise Architecture \n\n\t\n\n \n\n\n\n\nImpact\n\n\t\n\nMore innovation, control, and access as they can securely enable third parties to access their data and initiate transactions on their behalf. \n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\nOpen Banking & Open Finance Standards & APIs\n\nMojaloop Third Party API - \nhttps://docs.mojaloop.io/api/thirdparty/ \n\nhttps://www.openbanking.org.uk/ \n\nhttps://github.com/interledger/open-payments \n\n\t\n\n \n\nNEW: End to End Demo within Mifos Gazelle \n\nMentors\n\n\t\n\n  @David Higgins @Abhinav Kumar \n\n\t\n\n \n\n\n\n\nLength\n\n\t\n\nSmall - 90 hours\n\n\t\n\n \n\n\n\n\nCategory \n\n\t\n\nDevOps\n\n\t\n\n \n\n\n\n\nOverview & Objectives\n\n\t\n\nMifos Gazelle deploys a number of components (DPGs) that can be used in end to end payment flows. The idea of Mifos Gazelle is that these can then have end to end demos run across them potentially linking to other systems external of the environment.\n\n\t\n\n \n\n\n\n\nDescription\n\n\t\n\nThis project would consist of researching a potential use-case. Defining the use-case and how it would flow within the environment. Identify any integrations with external components needed and using existing APIs to do this perhaps with the assistance of an external workflow system such as OpenFN. Creating the demo script, configurations for environment, demo data. Ensuring replicability e.g. that it could be repeated on a fresh install with low technical skill.  Documentation, presentation are key for this, this could be an idea webinar or demo/talk at a conference or event.\n\nBasically this project is limited by your imagination. \n\nWe can support multiple iterations of this project for different use-cases or it could be scaled up looking at multiple use cases to be a larger project.\n\n\t\n\n \n\n\n\n\nHelpful Skills\n\n\t\n\nJavascript, DevOps, Enterprise Architecture , soft skills such as research, impact understanding, presentation skills are as important.\n\n\t\n\n \n\n\n\n\nImpact\n\n\t\n\nThis would enable DPI implementors to understand better the use cases within the Payments Ecosystem, accelerate the path to deployment increase adoption and increase financial inclusion\n\n\t\n\n \n\n\n\n\nOther Resources\n\n\t\n\nMifos Gazelle : \nhttps://products.mifos.org/mifos-gazelle/ \n\n\t\n\n \n\nTimeline\n\nOfficial GSOC Timeline\n\n \n\n2025 GSOC Mentors\nIn Progress\n\nThe list of mentors for 2025 is currently being finalized. \n\nWe have a talented and passionate group of mentors from across our global community who are eager to help guide the next generation of HFOSS contributors. These mentors come from various backgrounds - partners deploying Mifos, financial institutions using Mifos, volunteers, and even former GSOC contributors but they all share a common goal of ending poverty one line of code at a time!\n\nMentor\n\n\t\n\nGSOC History\n\n\t\n\nProject\n\n\t\n\nLocation\n\n\t\n\nTime Zone\n\n\n\n\t\n\nMentor since 2021\n\n\t\n\nWeb\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nMentor since 2023\n\n\t\n\nDevOps\n\n\t\n\nAustralia\n\n\t\n\nAEDT (GMT+11:00)\n\n\n\n\t\n\nMentor since 2023\n\nSummit delegate in 2023\n\n\t\n\nAI\n\n\t\n\nSouth Africa\n\n\t\n\nSAST (GMT +2:00)\n\n\n\n\t\n\nGSOC intern in 2020\n\nMentor since 2021 \n\n\t\n\nMobile\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2024\n\nMentor in 2025\n\n\t\n\nWeb\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2024\n\nMentor in 2025\n\n\t\n\nAI\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nMentor since 2023\n\nDelegate to summit in 2023\n\n\t\n\nSecurity\n\n\t\n\nSouth Africa\n\n\t\n\nSAST (GMT +2:00)\n\n\n\n\t\n\nMentor since 2024\n\nOrg Admin in 2025\n\n\t\n\nAI\n\n\t\n\nUnited Kingdom\n\n\t\n\nGMT (GMT +0:00)\n\n\n\n\t\n\nGSOC intern in 2020\n\nMentor since 2021\n\n\t\n\nAI\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2016\n\nMentors since 2017\n\n\t\n\nMobile\n\n\t\n\nCanada\n\n\t\n\nEST (GMT -5:00)\n\n\n\n\t\n\nGSOC intern in 2024\n\nMentor in 2025\n\n\t\n\nMobile\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2023/2024\n\nMentor in 2025\n\n\t\n\nMobile\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2023/2024\n\nMentor in 2025\n\n\t\n\nWeb\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2023\n\nMentor in 2025\n\n\t\n\nSecurity\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2018\n\nMentor since 2019\n\n\t\n\nPlatform\n\n\t\n\nUSA\n\n\t\n\nEST (GMT -5:00)\n\n\n\n\t\n\nMentor since 2018\n\n\t\n\nPlatform\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nMentor since 2021\n\n\t\n\nPlatform\n\n\t\n\nMexico\n\n\t\n\nCST (GMT -6:00)\n\n\n\n\t\n\nMentor since 2022\n\n\t\n\nPlatform, Web, Mobile\n\n\t\n\nMexico\n\n\t\n\nCST (GMT -6:00)\n\n\n\n\t\n\nMentor since 2022\n\n\t\n\nPlatform\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2018\n\nMentor since 2020\n\n\t\n\nAI\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nC4GT intern in 2024\n\nMentor in 2025\n\n\t\n\nDevOps\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nMentor since 2017\n\n\t\n\nPlatform\n\n\t\n\nSerbia\n\n\t\n\nCET (GMT +1:00)\n\n\n\n\t\n\nGSOC intern in 2023\n\nMentor in 2025\n\n\t\n\nSecurity\n\n\t\n\nCameroo\n\n\t\n\n(GMT+1:00)\n\n\n\n\t\n\nMentor since 2018\n\nOrg Admin since 2019\n\nSummit Delegate in 2024 \n\n\t\n\nPlatform\n\n\t\n\nindia\n\n\t\n\nIST (GMT +5:30)\n\n\n\n\t\n\nGSOC intern in 2017\n\nMentor in 2018 \n\nOrg Admin in 2019/2020\n\n\t\n\nPlatform\n\n\t\n\nIndia\n\n\t\n\nIST (GMT +5:30)\n\nSee also\n\nGSoC FAQ\n\nApplication Template\n\n\n\n\n\nRelated content\nInfo icon\nCollapse\nGoogle Summer of Code 2024 Ideas\nGoogle Summer of Code 2024 Ideas\nCommunity Engagement\nMore like this\n2025 Google Summer of Code\n2025 Google Summer of Code\nCommunity Engagement\nRead with this\nGoogle Summer of Code 2023 Ideas\nGoogle Summer of Code 2023 Ideas\nCommunity Engagement\nMore like this\nApplication Template\nApplication Template\nCommunity Engagement\nRead with this\nGoogle Summer of Code 2022 Ideas\nGoogle Summer of Code 2022 Ideas\nCommunity Engagement\nMore like this\nMailing Lists\nMailing Lists\nCommunity Engagement\nRead with this\n"}