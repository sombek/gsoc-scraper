{"name":"BeagleBoard.org","description":"Open hardware computing for educators and makers","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/beagleboardorg","ideas_url":"https://bbb.io/gsocideas","logo":"https://summerofcode.withgoogle.com/media/org/beagleboardorg/4w6td6bjy31ei9v2-360.png","technologies":["linux","fpga","risc-v","dsp","Zephyr RTOS"],"topics":["robotics","iot","ai","software defined radio","Personal Server"],"projects":[{"project_name":"Low-latency I/O RISC-V CPU core in FPGA fabric","summary":"Implement a RISC-V 32-bit CPU core optimized for low-latency GPIO operations in BeagleV-Fire's FPGA.","difficulty":"High complexity, 350 hours."},{"project_name":"Update beagle-tester for mainline testing","summary":"Create a regression test suite for the Linux kernel and device-tree overlays on multiple Beagle computers using the beagle-tester application.","difficulty":"Medium complexity, 175 hours."},{"project_name":"Upstream wpanusb and bcfserial","summary":"Add functional improvements to drivers enabling Linux use of BeagleConnect Freedom for wireless communications and submit patches upstream.","difficulty":"High complexity, 350 hours."},{"project_name":"`librobotcontrol` support for newer boards","summary":"Clean up and enhance preliminary support for the librobotcontrol library on BeagleBone AI series and BeagleV-Fire.","difficulty":"Medium complexity, 175 hours."},{"project_name":"Upstream Zephyr Support on BBAI-64 R5","summary":"Incorporate Zephyr RTOS support to work alongside Linux on the BeagleBone AI-64 for better system capabilities.","difficulty":"High complexity, 350 hours."},{"project_name":"Enhanced Media Experience with AI-Powered Commercial Detection and Replacement","summary":"Create a deep learning solution to enhance media consumption by integrating custom audio streams during ads in videos.","difficulty":"High complexity, 350 hours."},{"project_name":"Embedded differentiable logic gate networks for real-time interactive and creative applications","summary":"Explore creative embedded AI by developing systems for music creation and environment sensing using Differentiable Logic.","difficulty":"High complexity, 350 hours."}],"jina_response":"Title: Ideas — gsoc.beagleboard.io documentation\n\nURL Source: https://bbb.io/gsocideas\n\nMarkdown Content:\n![Image 1: ../_images/ideas-below.webp](https://gsoc.beagleboard.io/_images/ideas-below.webp)\n\nHow to participate?\n\nContributors are expected to go through the list of ideas dropdown below and join the discussion by clicking on the `Discuss on forum` button. All ideas have colorful badges for `Complexity` and `Size` for making the selection process easier for contributors. Anyone is welcome to introduce new ideas via the [forum gsoc-ideas tag](https://forum.beagleboard.org/tag/gsoc-ideas). Only ideas with sufficiently experienced mentor backing as deemed by the administrators will be added here.\n\n| Complexity\n | Size\n\n |\n| --- | --- |\n| High complexity\n\n | 350 hours\n\n |\n| Medium complexity\n\n | 175 hours\n\n |\n| Low complexity\n\n | 90 hours\n\n |\n\nLow-latency I/O RISC-V CPU core in FPGA fabric\n\nBeagleV-Fire features RISC-V 64-bit CPU cores and FPGA fabric. In that FPGA fabric, we’d like to implement a RISC-V 32-bit CPU core with operations optimized for low-latency GPIO. This is similar to the programmable real-time unit (PRU) RISC cores popularized on BeagleBone Black.\n\n**Goal:** RISC-V-based CPU on BeagleV-Fire FPGA fabric with GPIO\n\nUpdate beagle-tester for mainline testing\n\nUtilize the `beagle-tester` application and `Buildroot` along with device-tree and udev symlink concepts within the OpenBeagle continuous integration server context to create a regression test suite for the Linux kernel and device-tree overlays on various Beagle computers.\n\n**Goal:** Execution on Beagle test farm with over 30 mikroBUS boards testing all mikroBUS enabled cape interfaces (PWM, ADC, UART, I2C, SPI, GPIO and interrupt) performing weekly mainline Linux regression verification\n\nUpstream wpanusb and bcfserial\n\nThese are the drivers that are used to enable Linux to use a BeagleConnect Freedom as a SubGHz IEEE802.15.4 radio (gateway). They need to be part of upstream Linux to simplify on-going support. There are several gaps that are known before they are acceptable upstream.\n\n**Goal:** Add functional gaps, submit upstream patches for these drivers and respond to feedback\n\n**Software Skills:** [C](https://jkridner.beagleboard.io/docs/latest/intro/beagle101/c.html), [Linux](https://docs.beagleboard.org/latest/intro/beagle101/linux.html)\n\n`librobotcontrol` support for newer boards\n\nPreliminary librobotcontrol support for BeagleBone AI, BeagleBone AI-64 and BeagleV-Fire has been drafted, but it needs to be cleaned up. We can also work on support for Raspberry Pi if UCSD releases their Hat for it.\n\n**Goal:** Update librobotcontrol for Robotics Cape on BeagleBone AI, BeagleBone AI-64 and BeagleV-Fire\n\n**Software Skills:** [C](https://jkridner.beagleboard.io/docs/latest/intro/beagle101/c.html), [Linux](https://docs.beagleboard.org/latest/intro/beagle101/linux.html)\n\nUpstream Zephyr Support on BBAI-64 R5\n\nIncorporating Zephyr RTOS support onto the Cortex-R5 cores of the TDA4VM SoC along with Linux operation on the A72 core. The objective is to harness the combined capabilities of both systems to support BeagleBone AI-64.\n\n**Goal:** submit upstream patches to support BeagleBone AI-64 and respond to feedback\n\n**Hardware Skills:** Familiarity with ARM Cortex R5\n\n**Software Skills:** [C](https://jkridner.beagleboard.io/docs/latest/intro/beagle101/c.html), [RTOS](https://docs.zephyrproject.org/latest/develop/getting_started/index.html)\n\nEnhanced Media Experience with AI-Powered Commercial Detection and Replacement\n\nLeveraging the capabilities of BeagleBoard’s powerful processing units, the project will focus on creating a real-time, efficient solution that enhances media consumption experiences by seamlessly integrating custom audio streams during commercial breaks.\n\n**Goal:** Build a deep learning model, training data set, training scripts, and a runtime for detection and modification of the video stream.\n\n**Hardware Skills:** Ability to capture and display video streams using [BeagleBone AI-64](https://www.beagleboard.org/boards/beaglebone-ai-64)\n\nEmbedded differentiable logic gate networks for real-time interactive and creative applications\n\nThis project seeks to explore the potential of creative embedded AI, specifically using [Differentiable Logic (DiffLogic)](https://github.com/Felix-Petersen/difflogic), by creating a system that can perform tasks like machine listening, sensor processing, sound and gesture classification, and generative AI.\n\n**Goal:** Develop an embedded machine learning system on BeagleBone that leverages [Differentiable Logic (DiffLogic)](https://github.com/Felix-Petersen/difflogic) for real-time interactive music creation and environment sensing.\n\n**Hardware Skills:** Audio and sensor IO with [Bela.io](http://bela.io/)\n\n**Software Skills:** Machine learning, deep learning, BeagleBone Programmable Real Time Unit (PRU) programming (see [PRU Cookbook](https://docs.beagleboard.org/latest/books/pru-cookbook/index.html)).\n\n[Visit our forum to see newer ideas being discussed!](https://forum.beagleboard.org/tag/gsoc-ideas)\n"}