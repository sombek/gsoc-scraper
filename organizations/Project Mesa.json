{"name":"Project Mesa","description":"Mesa: Agent-based modeling in Python 3+","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/project-mesa","ideas_url":"https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025","logo":"https://summerofcode.withgoogle.com/media/org/project-mesa/fh3o8surszufvjpv-360.png","technologies":["python","ui/ux","LLMs","Vector Operations"],"topics":["Agent Based Models","Generative Science"],"projects":[{"project_name":"Google Summer of Code 2025","summary":"An initiative by Mesa to engage students and contributors in open source projects during the summer through mentorship and collaboration.","difficulty":"Medium"},{"project_name":"Front End Upgrade","summary":"Enhancing Mesa's new Solara-based visualization system for robustness and improved user experience.","difficulty":"Medium/Hard"},{"project_name":"Mesa-LLM","summary":"Integrating large language models as decision-making agents within Mesa to facilitate communication and decision-making scenarios in simulations.","difficulty":"Medium/Hard"},{"project_name":"Mesa-Frames Upgrade","summary":"Stabilizing and enhancing the Mesa-frames extension for enhanced performance and production readiness in large-scale agent-based modeling.","difficulty":"Medium/Hard"},{"project_name":"Behavioral Framework","summary":"Creating a framework for managing complex agent behaviors and decision-making processes within the Mesa environment.","difficulty":"Hard"},{"project_name":"Unifying Geospatial Support","summary":"Integrating geospatial functionalities of Mesa-geo into Mesa to streamline geospatial modeling and simplify maintenance.","difficulty":"Medium/Hard"},{"project_name":"Mesa Blocks","summary":"Building a low code/no code extension for Mesa to simplify the assembly and customization of agent-based models.","difficulty":"Hard"}],"jina_response":"Title: Google Summer of Code 2025\n\nURL Source: https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025\n\nMarkdown Content:\nGSoC with Mesa\n--------------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#gsoc-with-mesa)\n\n_Mentoring, Community, and Open Source Collaboration_\n\n[Top 3 Ideas](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#ideas-list)  \n[Additional Ideas](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#additional-ideas)\n\n**Philosophy**\n\nBased on the dynamics of complex adaptive systems, Mesa assesses the open source community is the most powerful problem solving network in history. By connecting passionate people from across the world to explore potential solutions through computationally stored knowledge (i.e. code), humanity can solve problems faster and more effectively than ever.\n\n**Values**\n\n*   Be polite, we are all volunteers\n*   Everyone has something to learn\n*   Be curious, not judgmental\n*   Every contributor's contributions ebbs and flows, its fine, contribute as you can\n\n**What to Expect**\n\nFirst, if you don't get selected it does not mean your proposal was not awesome and if you want you can absolutely still contribute. We welcome everyone who wants to participate. If Mesa gets selected this will be our second year, from our first year we were incredibly humbled by the number of proposals and the passion of the people who submitted. It truly hurts to say no to so many exceptional people.\n\nSecond, if you are selected, the typical rhythm is a weekly meetings that alternate between a discussion about what you are specifically working on for your project and the broader Mesa dev meeting (usually scheduled for 12:30 GMT on Tuesdays). We understand that this time might not work for everyone, so please don’t worry — if you have scheduling conflicts, we are more than happy to work with you to find an alternative that fits your availability. For your project you will be assigned a mentor with backups who will be available for one-on-one meetings, and you can also connect with us via chat and GitHub.\n\nAlways remember, the goal primary goal is **not** to complete the expected outcomes (although we will be ecstatic if that happens). The primary goal, in line with GSoC, is to give you development experience and help you gain an understanding of open source coding and community.\n\nExplore the projects below to see where your skills and interests might fit in. Please feel free to reach out via [Mesa's Matrix chat](https://matrix.to/#/#project-mesa:matrix.org) or via email to [tpike3@gmu.edu](mailto:tpike3@gmu.edu) with any questions.\n\nIdeas List\n----------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#ideas-list)\n\n*   [Front End Upgrade](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#front-end-upgrade) - Enhance and stabilize Mesa's new Solara-based visualization system to improve robustness, performance, and user experience.\n    \n*   [Mesa-LLM](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#mesa-llm-generative-agent-based-modeling-with-large-language-models-empowered-agents) - Create an extension for integrating large language models as decision-making agents in Mesa simulations.\n    \n*   [Mesa-Frames Upgrade](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#mesa-frames-upgrade) - Stabilize and enhance Mesa-frames to provide production-ready support for large-scale agent-based modeling.\n    \n\n* * *\n\nFront End Upgrade\n-----------------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#front-end-upgrade)\n\n**Summary**\n\nMesa recently transitioned to a new Solara-based visualization system that enables interactive, browser-based model exploration. While the core functionality is in place, there are several opportunities to enhance its robustness, performance, and user experience. This project aims to stabilize and extend Mesa's visualization capabilities, making them more powerful and user-friendly.\n\n**Motivation**\n\nThe visualization system is one of Mesa's most important features - it allows modelers to see complex emergent behaviors and share their models with others. The recent transition from a Tornado-based system to Solara ([PR #2263](https://github.com/projectmesa/mesa/pull/2263)) brought modern web technologies and improved interactivity, but also revealed areas needing refinement. A well-functioning visualization system is crucial for Mesa's adoption and usability.\n\n**Historical Context**\n\nMesa's visualization evolved significantly:\n\n*   Initially used a Tornado-based server system\n*   In Mesa 2.x, added experimental Jupyter support using Solara\n*   Mesa 3.0 fully transitioned to Solara-based visualization\n*   Recent major improvements include unified plotting backends ([PR #2430](https://github.com/projectmesa/mesa/pull/2430)) and API refinements ([PR #2299](https://github.com/projectmesa/mesa/pull/2299))\n\n**Overall Goal**\n\nCreate a visualization system that is:\n\n*   Robust and performant\n*   Easy to use for basic cases\n*   Flexible for advanced customization\n*   Well-documented with clear examples\n*   Consistent across different spaces (grid, network, continuous)\n\n**Expected GSoC Outcomes**\n\nCore Improvements:\n\n*   Add support for rotating markers to visualize agent orientation/heading ([#2342](https://github.com/projectmesa/mesa/issues/2342))\n*   Enable configurable visualization update intervals for performance ([#2579](https://github.com/projectmesa/mesa/issues/2579))\n*   Create an `AgentPortrayalStyle` class to replace the current dictionary system ([#2436](https://github.com/projectmesa/mesa/issues/2436))\n*   Allow direct model access and control from visualization ([#2176](https://github.com/projectmesa/mesa/issues/2176))\n*   Update [Mesa Examples](https://github.com/projectmesa/mesa-examples) to use the new visualization approach\n\nVisual Enhancements:\n\n*   Improve grid drawing aesthetics and styling options ([#2438](https://github.com/projectmesa/mesa/issues/2438))\n*   Refactor Altair plotting backend to match Matplotlib's clean architecture ([#2435](https://github.com/projectmesa/mesa/issues/2435))\n*   Add support for all space types and property layers\n*   Enable customizable color schemes and visual themes\n\nDocumentation:\n\n*   Extend and improve the visualization tutorial\n*   Document all visualization components and their customization options\n*   Provide example implementations for common visualization patterns\n\nTesting:\n\n*   Add automated tests for visualization components\n*   Create benchmarks for visualization performance\n*   Set up CI testing for example visualizations ([mesa-examples#137](https://github.com/projectmesa/mesa-examples/issues/137))\n\n**Skills Required**\n\n*   Required:\n    *   Python programming\n    *   Experience with data visualization libraries (Matplotlib, Altair)\n    *   Understanding of software design patterns\n    *   Basic knowledge of frontend development\n*   Preferred:\n    *   Familiarity with Solara or similar frameworks\n    *   Experience with interactive visualizations\n    *   Understanding of agent-based modeling concepts\n*   Level: Medium/Hard\n\n**Size** 350 hours\n\n**Mentors**\n\n*   Primary: Tom\n*   Backup: Jackie, Ewout\n\n**Getting Started**\n\n*   Review the [Visualization Tutorial](https://mesa.readthedocs.io/latest/tutorials/visualization_tutorial.html)\n*   Study [examples](https://github.com/projectmesa/mesa/tree/main/mesa/examples) using the new visualization system\n*   Examine the visualization code in [mesa/visualization/solara\\_viz.py](https://github.com/projectmesa/mesa/blob/main/mesa/visualization/solara_viz.py)\n*   Try implementing a small enhancement in one of the example models\n\nMesa-LLM: Generative Agent-Based Modeling with Large Language Models Empowered Agents\n-------------------------------------------------------------------------------------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#mesa-llm-generative-agent-based-modeling-with-large-language-models-empowered-agents)\n\n**Summary**\n\nThis project aims to integrate large language models (LLMs) as decision-making agents into the Mesa agent-based modeling (ABM) framework. This project will enable more sophisticated, language-driven agent behaviors, allowing researchers to model scenarios involving communication, negotiation, and decision-making influenced by natural language.\n\n**Motivation**\n\nCurrent implementations of LLM-based agents often require significant manual coding effort and lack a streamlined interface for designing modular agent architectures. By providing an accessible and flexible API, this project will make it easier for researchers and practitioners to develop, test, and iterate on complex LLM-based agents for applications in areas such as collaborative problem-solving, simulation of human-like reasoning, and dynamic decision-making.\n\n**Overall Goal**\n\nTo design and implement an extension for Mesa that allows users to create LLM-powered agents using a modular and user-friendly approach, by assembling reusable components like planning, memory, and reasoning modules. The extension will enable agents to interact using natural language, process textual data, and make decisions informed by LLM capabilities. The project will design and implement robust APIs, integration tools, and documentation to enable rapid prototyping of agents (e.g., Chain-of-Thought, ReWOO, Tree-of-Thought, etc) using different paradigms (e.g., sequential, class-based, functional approach, etc), facilitating research and experimentation in agent-based modeling and natural language reasoning.\n\n**Expected Outcomes**\n\nCore Features:\n\n*   Develop modular components for defining and configuring LLM-based agents (e.g., interaction modules, memory systems, decision-making units).\n*   Create built-in templates and presets for common use cases (e.g., ReACT agent).\n*   These components will seamlessly integrate with existing Mesa functionality, leveraging the established framework for agent behaviors and environment interactions.\n*   Users will be able to plug these modules into their existing simulations with minimal adjustments.\n\nEnhancement & Improvements:\n\n*   Support for integrating various LLMs and frameworks (e.g., Hugging Face, LLama, OpenAI).\n*   Tools for visualizing and debugging agent behavior at the module level.\n\nDocumentation:\n\n*   Comprehensive user guides for building agents using the modular API.\n*   Tutorials demonstrating step-by-step construction of popular LLM-based agents.\n*   Developer documentation for extending and customizing the API.\n\nTesting & Quality Assurance:\n\n*   Unit tests for individual modules and their integration.\n*   Benchmarking against standard agent-based tasks to ensure performance and usability.\n*   CI/CD pipeline to maintain high code quality and reliability.\n\nScientific Contribution\n\n*   This project is expected to produce at least one scientific publication, such as a submission to the Journal of Open Source Software (JOSS) or a relevant venue in computational social science or agent-based modeling (e.g., SIMULATION). Selected candidate will have the opportunity to contribute to the publication process. This will include help drafting, refining the paper, and being listed as one of the authors, depending on the level of contributions.\n\n**Skills Required**\n\n*   Required:\n    *   Strong Python programming skills.\n    *   Familiarity with agent-based modeling frameworks like Mesa.\n    *   Experience working with large language models and their APIs.\n*   Preferred:\n    *   Knowledge of advanced LLM techniques.\n    *   Familiarity with modular library design principles.\n    *   Experience in designing intuitive APIs for scientific computing.\n*   Knowledge areas:\n    *   Agent-based modeling\n    *   Modular system design\n    *   Natural language reasoning and planning with LLMs\n\n**Project Size:** 175/350 hours\n\n**Mentors**\n\n*   Primary: Boyu\n*   Backup: Tom, Jackie\n\n**Recommended Bibliography**\n\n*   Cheng, Y., Zhang, C., Zhang, Z., Meng, X., Hong, S., Li, W., ... & He, X. (2024). Exploring large language model based intelligent agents: Definitions, methods, and prospects. _arXiv preprint arXiv:2401.03428._ [https://doi.org/10.48550/arXiv.2401.03428](https://doi.org/10.48550/arXiv.2401.03428)\n    \n*   Gao, C., Lan, X., Li, N., Yuan, Y., Ding, J., Zhou, Z., ... & Li, Y. (2024). Large language models empowered agent-based modeling and simulation: A survey and perspectives. _Humanities and Social Sciences Communications, 11_(1), 1-24. [https://doi.org/10.1057/s41599-024-03611-3](https://doi.org/10.1057/s41599-024-03611-3)\n    \n*   Ghaffarzadegan, N., Majumdar, A., Williams, R., & Hosseinichimeh, N. (2024). Generative agent‐based modeling: an introduction and tutorial. _System Dynamics Review, 40_(1), e1761. [https://doi.org/10.1002/sdr.1761](https://doi.org/10.1002/sdr.1761)\n    \n*   Guo, T., Chen, X., Wang, Y., Chang, R., Pei, S., Chawla, N. V., ... & Zhang, X. (2024). Large language model based multi-agents: A survey of progress and challenges. _arXiv preprint arXiv:2402.01680._ [https://doi.org/10.48550/arXiv.2402.01680](https://doi.org/10.48550/arXiv.2402.01680)\n    \n*   Lu, Y., Aleta, A., Du, C., Shi, L., & Moreno, Y. (2024). LLMs and generative agent-based models for complex systems research. _Physics of Life Reviews._ [https://doi.org/10.1016/j.plrev.2024.10.013](https://doi.org/10.1016/j.plrev.2024.10.013)\n    \n*   Ma, Q., Xue, X., Zhou, D., Yu, X., Liu, D., Zhang, X., ... & Ma, W. (2024). Computational experiments meet large language model based agents: A survey and perspective. _arXiv preprint arXiv:2402.00262._ [https://doi.org/10.48550/arXiv.2402.00262](https://doi.org/10.48550/arXiv.2402.00262)\n    \n*   Wang, L., Ma, C., Feng, X., Zhang, Z., Yang, H., Zhang, J., ... & Wen, J. (2024). A survey on large language model based autonomous agents. _Frontiers of Computer Science, 18_(6), 186345. [https://doi.org/10.1007/s11704-024-40231-1](https://doi.org/10.1007/s11704-024-40231-1)\n    \n\n**Mesa-frames Upgrade**\n-----------------------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#mesa-frames-upgrade)\n\n**Summary**\n\nMesa-frames has proven to be a powerful extension for Mesa, offering significant performance improvements through vectorized operations on dataframes. This project aims to stabilize Mesa-frames, improve its integration with Mesa's core functionality, and establish it as a production-ready solution for large-scale agent-based modeling.\n\n**Motivation**\n\nMesa-frames has demonstrated impressive performance gains (up to 200x speedup) by leveraging pandas and polars for vectorized operations. While the initial implementation is promising, there are opportunities to improve stability, expand functionality, and better integrate with Mesa's core features. Making Mesa-frames production-ready would provide the Mesa community with a robust solution for scaling agent-based models to handle thousands or millions of agents efficiently.\n\n**Historical Context**\n\nMesa-frames was developed in 2024 as a GSoC project to address Mesa's performance limitations with large numbers of agents. Key developments include:\n\n*   Initial proof-of-concept showing significant performance gains ([Discussion #1939](https://github.com/projectmesa/mesa/discussions/1939))\n*   Support for both pandas and polars backends\n*   Integration with Mesa's AgentSet API\n*   Basic implementation of core Mesa functionality\n\n**Overall Goal**\n\nCreate a stable, well-tested, and fully-featured version of Mesa-frames that seamlessly integrates with Mesa while maintaining its performance advantages. This includes expanding documentation, improving test coverage, and implementing missing Mesa functionality.\n\n**Expected Outcomes**\n\nCore Features:\n\n*   Address outstanding issues in the [mesa-frames repo](https://github.com/projectmesa/mesa-frames)\n*   Implement missing Mesa functionality (e.g., PropertyLayers, NetworkGrid support)\n*   Create a stable release cadence aligned with Mesa's releases\n*   Improve continuous integration and testing infrastructure\n\nEnhancement & Improvements:\n\n*   Add support for more of Mesa's spaces ([mesa-frames#6](https://github.com/projectmesa/mesa-frames/issues/6))\n*   Implement GPU support through cuDF ([mesa-frames#10](https://github.com/projectmesa/mesa-frames/issues/10))\n*   Optimize performance for common agent-based modeling patterns\n*   Support for discrete event scheduling ([mesa-frames#9](https://github.com/projectmesa/mesa-frames/issues/9))\n\nDocumentation:\n\n*   Expand tutorials with advanced usage examples\n*   Create migration guides from Mesa to Mesa-frames\n*   Add performance optimization guidelines\n*   Document integration patterns with other Mesa extensions\n\nTesting & Quality Assurance:\n\n*   Implement comprehensive test suite covering all features\n*   Add performance regression tests\n*   Create benchmarks comparing Mesa and Mesa-frames implementations\n*   Set up continuous performance monitoring\n\n**Skills Required**\n\n*   Required:\n    *   Strong Python programming skills\n    *   Experience with pandas and/or polars\n    *   Understanding of vectorized operations\n    *   Familiarity with agent-based modeling concepts\n*   Preferred:\n    *   Experience with Mesa or similar ABM frameworks\n    *   Knowledge of GPU computing (cuDF)\n    *   Background in performance optimization\n    *   Understanding of continuous integration practices\n*   Level: Medium/Hard\n\n**Size:** 175 / 350 hours\n\n**Mentors**\n\n*   Primary: Adam\n*   Backup: Tom, Jackie, Jan\n\n**Getting Started**\n\n*   Review the Mesa-frames [source code](https://github.com/projectmesa/mesa-frames) and [documentation](https://projectmesa.github.io/mesa-frames/)\n*   Study the [introductory tutorial](https://projectmesa.github.io/mesa-frames/user-guide/2_introductory-tutorial/)\n*   Examine open issues in the [Mesa-frames repository](https://github.com/projectmesa/mesa-frames/issues)\n*   Try implementing a simple model using both Mesa and Mesa-frames to understand the differences\n\n* * *\n\nAdditional Ideas\n----------------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#additional-ideas)\n\nThese are projects Mesa would also like to pursue. Based on discussions among the contributor community, we prioritized the top 3. However, exceptional proposals can result in the community selecting these proposals contingent upon if Mesa is selected for GSoC and the number of projects we are allowed to execute.\n\n[Behavioral Framework](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#behavioral-framework) - Build a comprehensive framework for managing complex agent behaviors, states, and decision-making processes.  \n[Unifying Geospatial Support](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#unifying-geospatial-support-in-mesa) - Integrate Mesa-geo's capabilities directly into Mesa as a unified spatial modeling framework.  \n[Mesa Blocks](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#mesa-blocks) - Build an extension to Mesa that provide a low code/ no code capability so users can rapidly build custom models.\n\nBehavioral Framework\n--------------------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#behavioral-framework)\n\n**Summary**\n\nCreate a comprehensive behavior and state management framework for Mesa that allows agents to have continuously changing states, perform time-consuming tasks, and make decisions based on established behavioral theories. This project aims to provide Mesa users with powerful tools for creating sophisticated agents that can realistically model both discrete and continuous behaviors while following established behavioral theories.\n\n**Motivation**\n\nMesa currently lacks first-class support for modeling complex agent behaviors that involve continuous state changes, time-consuming actions, and sophisticated decision-making. This makes it difficult to implement realistic agent behaviors like continuous resource depletion, parallel activities, or adaptive decision-making. By providing a unified framework, we can make it easier for modelers to create more sophisticated and realistic agent behaviors.\n\n**Historical Context**\n\nMesa has evolved from simple discrete-time steps to support more flexible timing through the DiscreteEventScheduler. Recent discussions ([#2529](https://github.com/projectmesa/mesa/discussions/2529), [#2526](https://github.com/projectmesa/mesa/discussions/2526), [#2538](https://github.com/projectmesa/mesa/discussions/2538)) and work ([PR #2547](https://github.com/projectmesa/mesa/pull/2547)) have laid the groundwork for more sophisticated agent modeling capabilities. This project would unify and expand these efforts into a cohesive framework.\n\n**Overall Goal**\n\nCreate a unified behavioral framework that integrates continuous states, task management, and behavioral decision-making, allowing modelers to create sophisticated agents that can realistically simulate complex real-world behaviors.\n\n**Expected Outcomes**\n\nCore Features:\n\n*   State management system for both discrete and continuous states\n*   Task system for handling time-consuming activities\n*   Behavioral framework supporting multiple decision-making approaches\n*   Integration between states, tasks and behaviors\n\nEnhancement & Improvements:\n\n*   Priority and scheduling system for tasks\n*   Support for interrupting and resuming tasks\n*   State history tracking and analysis tools\n*   Event system for state changes and task completion\n\nDocumentation:\n\n*   Comprehensive API documentation\n*   Set of tutorials demonstrating common use cases\n*   Example models showcasing framework capabilities\n*   Integration guide with existing Mesa features\n\nTesting & Quality Assurance:\n\n*   Unit tests for all components\n*   Integration tests for framework interactions\n*   Performance benchmarks\n*   Example model tests\n\n**Skills Required**  \nRequired:\n\n*   Strong Python programming experience\n*   Good understanding of OOP and design patterns\n*   Familiarity with agent-based modeling concepts\n*   Experience with automated testing\n\nPreferred:\n\n*   Knowledge of behavioral modeling theories\n*   Experience with discrete event simulation\n*   Familiarity with state machines\n*   Background in social science or ecology\n\nDifficulty: Hard\n\nProject Size: 350 hours\n\n**Mentors**\n\n*   Primary: Jackie\n*   Backup: Ewout\n\n**Getting Started**  \nKey Documentation:\n\n*   Review discussions [#2529](https://github.com/projectmesa/mesa/discussions/2529), [#2526](https://github.com/projectmesa/mesa/discussions/2526), [#2538](https://github.com/projectmesa/mesa/discussions/2538)\n*   Study implementation in [PR #2547](https://github.com/projectmesa/mesa/pull/2547)\n*   Examine Mesa's time management and event scheduling systems\n\nInitial Tasks:\n\n*   Review and understand the state management PR\n*   Set up a test environment with Mesa's development version\n*   Try implementing a simple model using continuous states\n*   Join discussions on behavioral framework design\n*   Read up on relevant literature\n\nUnifying Geospatial Support in Mesa\n-----------------------------------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#unifying-geospatial-support-in-mesa)\n\n**Summary**\n\nIntegrate Mesa-geo's geospatial capabilities directly into Mesa as a `mesa.geo` module, leveraging Mesa's new cell and continuous spaces architecture while preserving GIS functionality. This will simplify dependency management, ensure API consistency, and make spatial modeling more accessible.\n\n**Motivation**\n\nMesa and Mesa-geo have evolved separately, leading to duplicate implementations and compatibility challenges. As Mesa adopts new space abstractions like the [experimental cell space](https://github.com/projectmesa/mesa/tree/main/mesa/experimental/cell_space) and [reimplements continuous space](https://github.com/projectmesa/mesa/pull/2584), there's an opportunity to unify spatial modeling in Mesa. This would simplify maintenance, ensure consistent APIs, and make GIS features a first-class citizen in Mesa.\n\n**Historical Context**\n\nMesa's spatial modeling has evolved significantly. The [current grid system](https://mesa.readthedocs.io/en/stable/apis/space.html) is being replaced by the [experimental cell space system](https://github.com/projectmesa/mesa/tree/main/mesa/experimental/cell_space), which provides more flexibility and better performance.\n\nMesa-geo was originally developed as a separate package to add GIS capabilities to Mesa. Recent discussions about [moving to a monorepo](https://github.com/projectmesa/mesa/discussions/2330) and the development of Mesa's new [conceptual model of Space](https://github.com/projectmesa/mesa/discussions/2585) suggest the time is right for integration.\n\n**Overall Goal**\n\nCreate a unified spatial modeling framework in Mesa that handles both regular and geospatial spaces through a consistent API, while maintaining full GIS functionality.\n\n**Expected Outcomes**\n\nCore Features:\n\n*   Integrate Mesa-geo's core functionality (`GeoSpace`, `GeoAgent`) into Mesa as `mesa.geo` module\n*   Adapt Mesa-geo to use Mesa's new cell space system as its foundation\n*   Integration of GIS coordinate systems and transformations into Mesa's space framework\n*   Unified property layer system that works across all space types (addressing [#2431](https://github.com/projectmesa/mesa/issues/2431))\n*   Migration path for existing Mesa-geo users\n\nEnhancement & Improvements:\n\n*   Refactor `RasterLayer` to use Mesa's `PropertyLayer` ([mesa-geo#201](https://github.com/projectmesa/mesa-geo/issues/201))\n*   Extend Mesa's continuous space to handle geographic coordinates\n*   Support for GIS file formats (GeoJSON, shapefiles) in Mesa's core I/O\n*   Improved integration with visualization system\n\nDocumentation:\n\n*   Updated space concepts documentation\n*   Migration guide for Mesa-geo users\n*   New tutorials demonstrating integrated GIS features\n*   API reference for geospatial functionality\n\nTesting & Quality Assurance:\n\n*   Test suite covering GIS-specific functionality\n*   Benchmark suite for spatial operations\n*   Example models demonstrating migration\n*   CI/CD integration for GIS dependencies\n\n**Skills Required**\n\n*   Required:\n    *   Python programming\n    *   Understanding of GIS concepts\n    *   Experience with Mesa and/or Mesa-geo\n    *   Familiarity with spatial data libraries (Shapely, GeoPandas)\n*   Preferred:\n    *   Experience with coordinate reference systems\n    *   Understanding of Mesa's architecture\n*   Knowledge areas: Medium/Hard difficulty\n\n**Project Size:** 350 hours:\n\n**Mentors**\n\n*   Primary: Jackie\n*   Backup: Boyu\n\n**Getting Started**\n\n*   Review [Mesa's space conceptual model](https://github.com/projectmesa/mesa/discussions/2585)\n*   Study the [new continuous space implementation](https://github.com/projectmesa/mesa/pull/2584)\n*   Examine Mesa-geo's [COVID-19 example model](https://mesa-geo.readthedocs.io/en/latest/tutorials/intro_tutorial.html)\n*   Join discussions about [property layers](https://github.com/projectmesa/mesa/issues/2431)\n\nMesa Blocks\n-----------\n\n[](https://github.com/projectmesa/mesa/wiki/Google-Summer-of-Code-2025#mesa-blocks)\n\n**Summary**\n\nBuild a low code/no code extension so users can rapidly assemble and run custom agent based models\n\n**Motivation**\n\nAgent Based Models have always been challenge by the reality of complex systems - every detail does matter. This does not however, mean that building blocks from models cannot be reused. Have easily reusable building blocks that can be connected together with other core model parts or even opened up and customized can help users more rapidly assemble and customize valid models, while also helping people get better models faster to aid in their decision making.\n\n**Historical Context**\n\nDeveloping ways to rapidly build models has always been a hard challenge for ABMs and reusable building blocks represents an proven way to help mitigate this challenge. [Mesa tried to build the ecosystem first](https://journals-sagepub-com.mutex.gmu.edu/share/W3U6RZ3GKQNTPYFT522X?target=10.1177/00375497221077425) but could not maintain it and there are other efforts to find solutions, notably [Reusable Building Blocks for ABMS](https://www.rbb4abm.com/)\n\n**Overall Goal**\n\nTo have a prototype of low code/ show code approach that allows users to rapidly build and explore models.\n\n**Expected Outcomes**\n\nCore Features:\n\n*   Users can drag and drop blocks to rapidly assemble models\n*   Easily build new blocks and share with the Mesa community\n*   Allow users to go into and customize blocks\n\n**Skills Required**\n\n*   Required:\n    *   Python programming\n    *   Experience with Mesa and/or Mesa-geo\n*   Preferred:\n    *   Knowledge of No code/low code tools\n    *   Understanding of Mesa's architecture\n*   Knowledge areas: Hard difficulty\n\n**Project Size:** 350 hours:\n\n**Mentors**\n\n*   Primary: Tom\n*   Backup: Jackie\n\n**Getting Started**\n\nSome possible starting libraries. The below was created with the help of ChatGPT but there may be some better options.\n\n| Library | Strength | Integration with Mesa |\n| --- | --- | --- |\n| **NodeGraphQt** | Full Python drag & drop system | Possible best for custom Mesa UI |\n| **NoFlo** | Flow-based programming | Needs custom Python adaptation |\n| **Node-RED** | Web-based flow editor | Requires Node.js but works with Python |\n| **Unreal Blueprints** | No-code game simulation | Best for Wargame AI/Mesa in Unreal |\n"}