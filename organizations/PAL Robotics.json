{"name":"PAL Robotics","description":"Enhance people’s quality of life through Robotics","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/pal-robotics","ideas_url":"https://pal-robotics.com/2025-google-summer-code-proposals/#tips-successful-gsoc","logo":"https://summerofcode.withgoogle.com/media/org/pal-robotics/f3yidefsydweipcc-360.png","technologies":["python","javascript","c++"],"topics":["robotics","reinforcement learning","web tools"],"projects":[{"project_name":"Payload visualization/metrics","summary":"Develop a ROS 2-based software tool to visualize a robot's payload capacity based on kinematic and dynamic properties, enhancing robot design decisions.","difficulty":"Medium"},{"project_name":"ROS 2 Action Mux","summary":"Create a middleware tool to manage multiple action servers with priority levels, allowing for efficient handling of critical tasks in robotic systems.","difficulty":"Medium/Hard"},{"project_name":"RFID simulation plugin for Gazebo Harmonic","summary":"Develop a plugin for Gazebo Harmonic to simulate RFID systems, improving capabilities for testing RFID applications in virtual environments.","difficulty":"Medium"},{"project_name":"ROS 2 Control Ecosystem Visualization","summary":"Create a visualization tool to represent the state of a ROS 2 Control ecosystem, aiding in monitoring and debugging system performance.","difficulty":"Medium/Hard"},{"project_name":"ROS2 python-launch-lsp-server","summary":"Implement a Language Server Protocol (LSP) server for ROS 2 launchfiles to assist in the development of large ROS 2 packages by providing parameter verification and code completion features.","difficulty":"Medium"}],"jina_response":"Title: Google Summer of Code Proposals | PAL Robotics\n\nURL Source: https://pal-robotics.com/2025-google-summer-code-proposals/\n\nMarkdown Content:\nPAL Robotics is planning to participate in the [Google Summer of Code](https://summerofcode.withgoogle.com/). Below is a tentative list of project ideas, the content and scope is still being discussed and updated.\n\n[Project Ideas](https://pal-robotics.com/2025-google-summer-code-proposals/#project-ideas)\n------------------------------------------------------------------------------------------\n\n### [Payload visualization/metrics](https://pal-robotics.com/2025-google-summer-code-proposals/#payload-visualization-metrics)\n\nThis project aims to develop a ROS 2-based software tool that allows users to assess and visualize the useful payload a robot can handle, based on its kinematic and dynamic properties. The tool will process the robot’s URDF (Unified Robot Description Format), taking into account actuation constraints, it will provide intuitive visualizations of available payload in a specific configuration or a workspace representation of payload capabilities. Additionally, it will include functionality to extract joint requirements (torque, power, and stiffness) needed to achieve a desired payload, helping roboticists optimize robot design.\n\n#### [Expected Impact](https://pal-robotics.com/2025-google-summer-code-proposals/#expected-impact)\n\nThis tool will benefit roboticists, engineers, and researchers working on mobile robots, manipulators, and humanoid platforms. It will provide an intuitive way to evaluate, optimize, and redesign robots based on payload requirements, making it easier to select suitable actuators during the design phase.\n\n**Mentors**: [Luca Marchionni](mailto:luca.marchionni@pal-robotics.com)**  \nProject Size**: 175 hours**  \nDifficulty**: Medium**  \nSkills Required**: C++ or Python, ROS 2 basics, experience with URDF, familiarity with RViz plugin development. Rigid Body Dynamics Libraries such as Pinnochio or RBDL**  \nOutcome**:\n\n*   A C++ or Python tool to compute and visualize payload capacity in a specific robot joint configuration or inside the robot’s workspace.\n*   A joint requirement estimation module that suggests required actuator capabilities for achieving a specified payload.\n*   Integration with ROS 2, URDF, and RViz\n*   A custom RViz plugin to dynamically display payload constraints and actuator requirements.\n*   Documentation and example cases for different robotic platforms (TIAGo Pro, TALOS and other available open source robot models).\n\n### [ROS 2 Action Mux](https://pal-robotics.com/2025-google-summer-code-proposals/#ros2-action-mux)\n\nThe ROS 2 Action Muxer could be a nice middleware tool designed to manage multiple action servers with predefined priority levels. It provides a client interface to an underlying action server while exposing multiple action servers that dynamically handle goals based on priority. Higher-priority goals preempt lower-priority ones, ensuring efficient resource management in multi-program frameworks.\n\nIn robotic systems and automation frameworks, multiple programs often require access to shared resources. However, not all goals should be treated equally—some, like emergency stop actions, must take precedence over routine operations. A structured priority system is essential to ensure that critical goals are executed without disruption from lower-priority tasks.\n\n**Mentors**: [Sai Kishor Kothakota](mailto:sai.kishor@pal-robotics.com)  \n**Project Size**: 175 hours  \n**Difficulty**: Medium/Hard  \n**Skills Required**: C++, ROS 2 Basics  \n**Outcome**:\n\n*   Develop an action multiplexer that routes requests to a single action server while managing multiple priorities that work for any type of action message types\n*   Implement a preemption mechanism where high-priority goals interrupt lower-priority ones.\n*   Provide a user-friendly client API to integrate seamlessly with existing ROS 2 systems.\n*   Add proper tests for the mechanism of preemption and acceptance of the goals\n*   Propagate the feedback of the action to the appropriate action server\n\n### [RFID simulation plugin for Gazebo Harmonic](https://pal-robotics.com/2025-google-summer-code-proposals/#rfid-simulation-plugin-gazebo-harmonic)\n\nThis project aims to develop an RFID simulation plugin for Gazebo Harmonic to enable the testing of RFID-based applications in a virtual environment. This plugin will simulate RFID readers and tags, allowing developers to validate systems involving object identification, inventory management, and localization.\n\nGazebo Classic had [limited support](https://github.com/gazebosim/gazebo-classic/blob/gazebo11/gazebo/sensors/RFIDSensor.cc) for RFID sensors and tags, but it handled only very basic detection (binary presence/absence). However, this plugin was [never ported](https://github.com/gazebosim/gz-sensors/issues/27) to Gazebo Harmonic. With Gazebo Classic reaching its end-of-life in January 2025, there’s a need to re-implement RFID simulation capabilities in modern versions of Gazebo.  \nThe proposed plugin will simulate RFID systems by modeling physical wave transmission (e.g Friis transmission equation) and incorporating noise factors to achieve realistic behavior. This includes accounting for signal attenuation, interference, and environmental conditions that affect RFID performance.  \nDuring the project, the RFID plugin will be validated making use of PAL open-source simulation packages.\n\n**Mentors**: [Oscar Martinez](mailto:oscar.martinez@pal-robotics.com)  \n**Project Size**: 175 hours  \n**Difficulty**: Medium  \n**Skills Required**: C++, ROS 2 basics, Gazebo simulation and plugin development, RFID  \n**Outcome**:\n\n*   Implementation of a physically realistic RFID sensor plugin in Gazebo Harmonic, with configurable power (0-30 dBm), antenna gain and noise parameters.\n*   Integration with ROS 2 by publishing rfid\\_msgs/Detection (suggested name) messages with timestamped RSSI and tag metadata.\n*   Validation Scenarios: 3 demo worlds (static tags, mobile robot, cluttered environment).\n*   Documentation: API reference and tutorials for plugin configuration.\n\n### [ROS 2 Control Ecosystem Visualization](https://pal-robotics.com/2025-google-summer-code-proposals/#ros2-control-ecosystem-visualization)\n\nThe ROS 2 Control Ecosystem Visualization project aims to develop a tool, either as an RQT plugin or a web-based interface, to provide an intuitive and real-time representation of the state of a ROS 2 Control ecosystem. This tool will enable users to monitor the flow of data, visualize active controllers, and gain insights into system performance.\n\nManaging and debugging a ROS 2 Control ecosystem can be challenging due to the complexity of controllers, hardware interfaces, and data streams. Understanding how different components interact in real-time is crucial for ensuring optimal performance and troubleshooting system issues effectively. A dedicated visualization tool can bridge this gap by providing a clear and interactive overview of the control stack.\n\n**Mentors**: [Sai Kishor Kothakota](mailto:sai.kishor@pal-robotics.com)  \n**Project Size**: 350 Hours  \n**Difficulty**: Medium/Hard  \n**Skills Required**: Qt framework, JavaScript, Proficiency in working with ROS 2 action, service, and topic communication  \n**Outcome**:\n\n*   Develop an interactive visualization tool that represents the state of the ROS 2 Control ecosystem.\n*   Display data flow, including active controllers, hardware states, and command execution.\n*   Provide an intuitive user interface that supports filtering and customizing displayed information.\n*   Ensure seamless integration with existing ROS 2 systems and facilitate debugging and performance analysis.\n\n### [ROS2 python-launch-lsp-server](https://pal-robotics.com/2025-google-summer-code-proposals/#ros2-python-launch-lsp-server)\n\nThe ROS 2 launchfile system manages the launch of and configuration of one or many processes and can also start other launchfiles. Python launchfiles use launch descriptions which are made of ordered lists of actions and groups of actions. It may also contain substitutions throughout the description, which are used to add some flexibility and configuration to the descriptions in a structured way.\n\nThat high flexibility of this system comes with the downside of being hard to understand what parameters are being used by one project or what executables are being started before runtime. This is where LSP server can become handy for the development of large ros2 packages. It can help verify the proper use of arguments, use go to references when working with other files, pre-processing ros2 substitutions.\n\n**Mentors**: [Thomas Ung](mailto:thomas.ung@pal-robotics.com)  \n**Project Size**: 175 hours  \n**Difficulty**: Medium  \n**Skills Required**: Rust, ROS 2 Basics, familiarity with LSP, AST  \n**Outcome**:\n\n*   Implement go-to-definition for going through ros2launch file\n*   Implement code completion for Actions and Substitutions\n*   Implement find references\n*   Implement Executable argument suggestions\n*   Implement syntactic error diagnostic\n*   Documentation on how to integrate with lsp compatible editors\n\n### [Tips for writing a successful Google Summer of Code application](https://pal-robotics.com/2025-google-summer-code-proposals/#tips-successful-gsoc)\n\n*   Follow [GSoC’s Writing a proposal guidelines](https://google.github.io/gsocguides/student/writing-a-proposal)\n*   Include your GitHub profile\n*   Point us your contributions to any open source projects\n*   Provide us with your contact information in order to reach out for any communication\n*   Specify your technical background and any courses that you have taken\n*   Describe your background and experience in robotics and ROS 2\n*   Specify the project that you are interested in and why you would like to work on it\n*   Tell us what you hope to get out of the Summer of Code experience.\n*   Feel free to reach out to the project mentors on GitHub to discuss your ideas\n*   For further questions, please contact [Sai Kishor Kothakota](mailto:sai.kishor@pal-robotics.com)\n"}