{"name":"FFmpeg","description":"Record, convert and stream audio & video","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/ffmpeg","ideas_url":"https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025","logo":"https://summerofcode.withgoogle.com/media/org/ffmpeg/9nltyc13lvn7dqn0-360.png","technologies":["c","git","asm"],"topics":["audio","video","subtitles","multimedia"],"projects":[{"project_name":"GSoC 2025 Overview","summary":"FFmpeg is participating in Google Summer of Code 2025, encouraging students to contribute to their multimedia toolkit by proposing or participating in mentored and unmentored projects.","difficulty":"N/A"},{"project_name":"Information for Students","summary":"Students interested in contributing to FFmpeg should familiarize themselves with the FFmpeg community, find a project, and apply by the deadline while completing qualification tasks to demonstrate their abilities.","difficulty":"N/A"},{"project_name":"Mentored Project Ideas","summary":"A list of predefined projects with mentors available, including tasks such as WebRTC-HTTP ingestion protocol, ProRes Vulkan decoder, and VVC optimizations, designed for students to choose and work on.","difficulty":"Medium to Hard"},{"project_name":"Unmentored Projects","summary":"Projects without assigned mentors that students can consider, which require finding a mentor before proceeding, encouraging initiative and self-definition within the community.","difficulty":"N/A"},{"project_name":"Your Own Project Idea","summary":"Students can propose their own project ideas for GSoC, which need approval from the community and alignment with mentor availability, promoting creativity and individual contribution.","difficulty":"N/A"}],"jina_response":"Title: SponsoringPrograms/GSoC/2025 – FFmpeg\n\nURL Source: https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025\n\nMarkdown Content:\n1.  [Introduction](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#Introduction)\n2.  [Information for Students](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#InformationforStudents)\n    1.  [Getting Started](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#GettingStarted)\n    2.  [Qualification Tasks](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#QualificationTasks)\n    3.  [Development](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#Development)\n    4.  [Contacting FFmpeg](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#ContactingFFmpeg)\n3.  [Mentored Project Ideas](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#MentoredProjectIdeas)\n    1.  [WebRTC-HTTP ingestion protocol (WHIP)](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#WebRTC-HTTPingestionprotocolWHIP)\n    2.  [ProRes Vulkan decoder](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#ProResVulkandecoder)\n    3.  [VVC wasm simd optimization](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#VVCwasmsimdoptimization)\n    4.  [VVC ARM simd optimization](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#VVCARMsimdoptimization)\n    5.  [VVC x86 simd optimization](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#VVCx86simdoptimization)\n    6.  [VP6 encoder](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#VP6encoder)\n    7.  [Template Project](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#TemplateProject)\n4.  [Unmentored Projects](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#UnmentoredProjects)\n    1.  [Template Project](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#TemplateProject1)\n5.  [Your Own Project Idea](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#YourOwnProjectIdea)\n\nIntroduction\n------------\n\nFFmpeg is the universal multimedia toolkit: a complete, cross-platform solution to record, convert, filter, and stream audio and video. It is used by a number of media players (including VLC and MPlayer), video websites (including YouTube and Vimeo), web browsers (including Google Chrome/Chromium and Firefox), social media (including Facebook and Twitter) and countless other software projects in the multimedia field and beyond.\n\nThis is our ideas page for [​Google Summer of Code 2025](https://summerofcode.withgoogle.com/). See the [​GSoC Timeline](https://developers.google.com/open-source/gsoc/timeline) for important dates.\n\nAt the end of the program you can find all the results on the results page.\n\n* * *\n\nInformation for Students\n------------------------\n\nGetting Started\n---------------\n\n1.  **Get to know FFmpeg.** If you are a student interested in contributing to FFmpeg, it is recommended to start by subscribing to the [​ffmpeg-devel](http://ffmpeg.org/mailman/listinfo/ffmpeg-devel) mailing-list, visiting our !Libera.Chat IRC channels (_#ffmpeg-devel_ and _#ffmpeg_ although you will find most developers on the first one), and exploring both the codebase and the development workflow. Feel free to [contact us](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#ContactingFFmpeg) if you have any questions. Also do not hesitate to answer questions from other students on our IRC channel if you know the answer to something.\n\n2.  **Find a project.** Listed on this page are mentored and un-mentored projects. Mentored projects are well-defined and mentor(s) have already volunteered. Un-mentored projects are additional ideas you may want to consider, but you will have to contact us to find a mentor. You can also propose your own project, if you can think of one that better fits your interest and skill level. If a project description is unclear or you have any questions, please get in touch with its mentor and/or join our IRC channel at _#ffmpeg-devel_.\n\n3.  **Contact us.** If you decide on a project, get in touch with the community and let us know. If you want to work on a qualification task, let the respective mentor know so we can avoid duplicated efforts.\n\n4.  **Apply.** Students should apply definitely before deadline on April 8nd. The \"work\" period begins on June 2nd and ends in November. Take a look at [​GSoC timeline](https://developers.google.com/open-source/gsoc/timeline) for additional information. Note, make sure you apply to Google before April 8nd, even if you have not yet finished your qualification task. Please apply as soon as possible: Applications can be improved until the 8nd of April but not afterwards!\n\n**Note**: A friendly reminder that while the application to GSoC is important for you and GSoC, FFmpeg mentors will not base their decision solely on the GSoC application. We will judge applicants based on their qualification tasks to understand their abilities in coding, learning the tools, communication skills etc. So please do not worry about your application being perfect for us. Although it is very important to follow GSoC's application rules so they can pay you.\n\nQualification Tasks\n-------------------\n\nIn order to get accepted you have to complete a small qualification task which in all cases include sending a patch to the development mailing list. FFmpeg development can be quite challenging and the qualification task helps us figure out whether you are motivated enough and have the potential to deliver successfully.\n\nThe qualification tasks are usually shown in the project description. Contact the respective mentor(s) for assistance on getting a related qualification task or if you want to propose your own. You can also browse the [​FFmpeg Bug Tracker](https://trac.ffmpeg.org/) for qualification task ideas. In general qualification tasks should include submitting a patch to the [​ffmpeg-devel mailing list](http://ffmpeg.org/mailman/listinfo/ffmpeg-devel) which passes review and is accepted into the FFmpeg codebase. It will be common for such patches to need multiple iterations of submissions and reviews, so don't wait too long with the first submission! Note, please avoid picking a qualification task which another student is already working on, each student should work on a different qualification task.\n\nDevelopment\n-----------\n\nIf you are selected for a particular project then you are not only expected to present a working implementation but you should also submit your work for inclusion for the ffmpeg codebase. This should be done at least 2-3 weeks before the end of the second work period by sending patches to the ffmpeg-devel mailing list where the ffmpeg community and your mentor will review your work. You will likely be asked to make some changes and resend improved versions. If you feel that no consensus is reached about how something should be done then follow the advice of your mentor.\n\nIn order to create good quality patches make sure to read the [​Developer Documentation](http://ffmpeg.org/developer.html).\n\nIf you have questions or comments feel free to contact us via our mailing list, IRC channel, or e-mail one of the FFmpeg GSoC admins:\n\n*   **Mailing-list:** [​ffmpeg-devel](http://ffmpeg.org/mailman/listinfo/ffmpeg-devel)\n*   **IRC:** _#ffmpeg-devel_ on [Libera.Chat](https://ffmpeg.org/contact.html#IRCChannels)\n*   **FFmpeg GSoC Admins:** Michael Niedermayer (_michaelni_ in #ffmpeg-devel on Libera.Chat IRC, [​michaelni@gmx.at](mailto:michaelni@gmx.at)), Reynaldo Verdejo (_reynaldo_ in #ffmpeg-devel on Libera.Chat IRC, R Verdejo on g mail), Thilo Borgmann (_thilo_ in #ffmpeg-devel on Libera.Chat, thilo.borgmann at mail dot de)\n\nYou may also contact a mentor directly if you have questions specifically related to one of the projects listed on this page.\n\n* * *\n\nMentored Project Ideas\n----------------------\n\nThis section lists well-defined projects that have one or more available mentors. If you are new to FFmpeg, and have relatively little experience with multimedia, you should favor one of these ideas rather than propose your own. Contact the respective mentor(s) to get more information about the project and the requested qualification task.\n\nWebRTC-HTTP ingestion protocol (WHIP)\n-------------------------------------\n\n**Description:** The WHIP task only requires the implementation of basic streaming capabilities as outlined in [​https://www.ietf.org/archive/id/draft-ietf-wish-whip-16.txt](https://www.ietf.org/archive/id/draft-ietf-wish-whip-16.txt). Given that WebRTC itself is extremely large and complex, FFmpeg has no plans to fully implement WebRTC capabilities in the short term. Therefore, it will only support the most basic ICE interaction capabilities, the most basic DTLS capabilities, and minimal modifications to FFmpeg's RTP/RTCP workflow to enable WHIP support.\n\n**Expected results:** This will allow FFmpeg users to quickly utilize FFmpeg for WHIP streaming.\n\n**Prerequisites:** Good C code, basic familiarity with Git, and basic knowledge of network transport protocols.\n\n**Difficulty:** Medium to Hard\n\n**Qualification Task:** Fix a random bug in an existing muxer, demuxer or protocol.\n\n**Mentor:** Steven Liu (lingjiujianke at gmail dot com)\n\n**Backup Mentor:** Zhao Jun (barryjzhao at tencent dot com)\n\n**Duration:** 350 hours\n\nProRes Vulkan decoder\n---------------------\n\n**Description:** Decoding of ProRes is quite important, as its the default mezzanine codec used in production. The bandwidth and CPU requirements for 4k and 8k streams are high, therefore, having a Vulkan-based implementation would be able to speed up the workflow of users, particularly those who do editing.\n\n**Expected results:** Write a ProRes decoder in Vulkan, specifically supporting the `ap4h` and `ap4x` profiles.\n\n**Prerequisites:** Good C, GLSL, and Vulkan knowledge.\n\n**Difficulty:** Hard\n\n**Qualification Task:** Write and validate the ProRes DCT transform in GLSL.\n\n**Mentor:** Lynne (_Lynne_ in #ffmpeg-devel on Libera.Chat IRC)\n\n**Backup Mentor:** Niklas Haas (_haasn_ in #ffmpeg-devel on Libera.Chat IRC)\n\n**Duration:** 350 hours\n\nVVC wasm simd optimization\n--------------------------\n\n**Description:** Using WASM SIMD to optimize VVC decoding performance in WASM environment (web browser or wasi)\n\n**Expected results:** Add ALF, inter, and SAO implementation. More is better.\n\n**Prerequisites:** Good C knowledge, basic shell script skills and understanding of compilation and build processes.\n\n**Difficulty:** Medium.\n\n**Qualification Task:** Fix a random bug in FFmpeg. Build and run ffmpeg checkasm in wasm. It's easy to be done with wasi runtime like wasmtime.\n\n**Mentor:** Zhao Zhili (zhilizhao at tencent dot com)\n\n**Backup Mentor:** Nuo Mi (nuomi2021 at gmail dot com)\n\n**Duration:** 350 hours\n\nVVC ARM simd optimization\n-------------------------\n\n**Description:** Using ARM simd to optimize VVC decoding performance in arm64 environment.\n\n**Expected results:** Implement inverse transform and intra prediction using arm64 instructions.\n\n**Prerequisites:** Good C knowledge. Basic ARM assembly programming skills.\n\n**Difficulty:** Hard.\n\n**Qualification Task:** Fix a random bug in FFmpeg. Build and run ffmpeg checkasm in arm64.\n\n**Mentor:** Zhao Zhili (zhilizhao at tencent dot com)\n\n**Backup Mentor:** Nuo Mi (nuomi2021 at gmail dot com)\n\n**Duration:** 350 hours\n\nVVC x86 simd optimization\n-------------------------\n\n**Description:** Using x86 simd to optimize VVC decoding performance in x86 environment.\n\n**Expected results:** Implement inverse transform or intra prediction using x86 instructions.\n\n**Prerequisites:** Good C knowledge. Basic x86 assembly programming skills.\n\n**Difficulty:** Hard.\n\n**Qualification Task:** Any patch merged by ffmpeg\n\n**Mentor:** Nuo Mi (nuomi2021 at gmail dot com)\n\n**Backup Mentor:** Lynne (_Lynne_ in #ffmpeg-devel on Libera.Chat IRC)\n\n**Duration:** 350 hours\n\nVP6 encoder\n-----------\n\n**Description:** Write a basic non-performant progressive VP6 encoder, starting with keys frames and adding motion compensation frames later.\n\n**Expected results:** Bitstreams produced by the encoder are decodable using FFmpeg VP6 decoder and original On2 VP6 decoder binary.\n\n**Prerequisites:** Good C knowledge, some understanding of MPEG-type video compression would be useful.\n\n**Difficulty:** Medium.\n\n**Qualification Task:** Fix a random bug in FFmpeg.\n\n**Mentor:** Peter Ross (pross at xvid dot org)\n\n**Backup Mentor:** will be choosen before project begin, the admins will serve as backup before that\n\n**Duration:** 350 hours\n\nTemplate Project\n----------------\n\n**Description:** Template Description\n\n**Expected results:** Template results\n\n**Prerequisites:** Template prequisites\n\n**Difficulty:**\n\n**Qualification Task:** Template Qualification Task\n\n**Mentor:** someone @ somehwere.net\n\n**Backup Mentor:** someoneelse @ somewhere.net\n\n**Duration:** 175 or 350 hours\n\n* * *\n\nUnmentored Projects\n-------------------\n\nThis is a list of projects that students are encouraged to consider if a mentored project is unavailable or not within the students skill or interests. The student will have to find a mentor for the project. A student can also [propose their own project](https://trac.ffmpeg.org/wiki/SponsoringPrograms/GSoC/2025#YourOwnProjectIdea).\n\nTemplate Project\n----------------\n\n**Description:** Template Description\n\n**Expected results:** Template results\n\n**Prerequisites:** Template prequisites\n\n**Difficulty:**\n\n**Qualification Task:** Template Qualification Task\n\n**Mentor:** someone @ somehwere.net\n\n**Backup Mentor:** someoneelse @ somewhere.net\n\n**Duration:** 175 or 350 hours\n\n* * *\n\nYour Own Project Idea\n---------------------\n\nA student can also propose a self-defined project! The amount of work defined by such a project should last for the majority of the GSoC work period duration and the task must be approved by the community. Also, a capable mentor from the community must be assigned. Ideas and inspiration for such project ideas could be found by browsing bugs and feature requests on our bug tracker but are of course not limited to such.\n\nStudents can discuss an idea with the community via the [ffmpeg-devel](https://ffmpeg.org/mailman/listinfo/ffmpeg-devel/) mailing-list, the #ffmpeg-devel IRC channel, or contact the FFmpeg GSoC admins directly for more information. It is obviously of importance to start such a discussion well before the application deadline.\n"}