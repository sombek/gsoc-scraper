{"name":"52°North Spatial Information Research GmbH","description":"Innovative ideas & technologies in geoinformatics","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/52north-spatial-information-research-gmbh","ideas_url":"https://52north.org/outreach-dissemination/google-summer-of-code/project-ideas/","logo":"https://summerofcode.withgoogle.com/media/org/52north-spatial-information-research-gmbh/gzamo2sqfwcmcobt-360.png","technologies":["javascript","android","java","web services","ogc standards"],"topics":["citizen science","spatial information infrastructures","open standards","data analytics","Geoinformation"],"projects":[{"project_name":"KomMonitor","summary":"Migration of the KomMonitor Web Client from AngularJS to a modern Angular framework to enhance performance and maintainability.","difficulty":"Intermediate"},{"project_name":"LLM and GeoData","summary":"Development of an open-source implementation that connects spatial data with Large Language Models to improve search capabilities in spatial data infrastructures.","difficulty":"Advanced"},{"project_name":"Weather Routing Tool","summary":"Enhancement of the existing Weather Routing Tool to introduce new features like ship speed optimization and improving the genetic algorithm for route planning.","difficulty":"Advanced"},{"project_name":"Your Idea","summary":"Opportunity for participants to propose their own project ideas related to 52°North's open source software initiatives, requiring a preliminary project pitch.","difficulty":"Flexible"},{"project_name":"KomMonitor","summary":"A web tool for monitoring geo-spatial data that is migrating from AngularJS to a modern Angular framework to improve compatibility, community support, and performance.","difficulty":"Intermediate"},{"project_name":"LLM and GeoData","summary":"A project aimed at enhancing the search functionality within Research and Spatial Data Infrastructures by integrating Large Language Models with spatial data.","difficulty":"Advanced"},{"project_name":"Weather Routing Tool","summary":"An enhancement project for the open-source Weather Routing Tool to optimize ship routes under varying weather conditions, including new features like ship speed optimization and a more efficient consumption model.","difficulty":"Advanced"},{"project_name":"Your Idea","summary":"Opportunity for candidates to propose their own software development projects that align with 52°North’s mission, with initial pitch submission encouraged.","difficulty":"Varies"},{"project_name":"KomMonitor","summary":"Migration of the KomMonitor Web Client from AngularJS to the modern Angular framework to improve performance, support, and user experience.","difficulty":"Medium"},{"project_name":"LLM and GeoData","summary":"Development of an advanced search functionality for spatial data using large language models (LLMs) to enhance searchability beyond metadata-based approaches.","difficulty":"Medium"},{"project_name":"Weather Routing Tool","summary":"Enhancing the Weather Routing Tool with new features including optimization of ship speed and improvements to the genetic algorithm for better routing under various constraints.","difficulty":"Medium"},{"project_name":"Your Idea","summary":"Open call for participants to propose their own project ideas that align with 52°North’s mission and capabilities in open source software development.","difficulty":"Variable"},{"project_name":"KomMonitor","summary":"This project aims to migrate the KomMonitor Web Client from AngularJS to the modern Angular framework, ensuring compatibility and improved performance. The focus is to reimplement selected components while maintaining the existing UI design and best practices for Angular.","difficulty":"Medium"},{"project_name":"LLM and GeoData","summary":"This project involves enhancing an open-source implementation that connects spatial data with Large Language Models (LLMs) to improve searchability in Research and Spatial Data Infrastructures. The goal is to develop a more robust Proof of Concept and address various user stories from the backlog.","difficulty":"Medium"},{"project_name":"Weather Routing Tool","summary":"The Weather Routing Tool project focuses on enhancing the existing tool to optimize ship routes under different weather conditions by adding new features like ship speed optimization, genetic algorithm improvements, and a general fuel consumption model.","difficulty":"High"},{"project_name":"Open Your Idea","summary":"Students are encouraged to propose their own project ideas that align with 52°North’s goals. They need to submit a project pitch that details the project's scope, expected outcomes, and potential mentors.","difficulty":"Varies"}],"jina_response":"Title: Project Ideas for Google Summer of Code @ 52°North\n\nURL Source: https://52north.org/outreach-dissemination/google-summer-of-code/project-ideas/\n\nMarkdown Content:\nGSoC 2025\n---------\n\n### Previous Projects\n\nCheck out our [Blog Post Series](https://blog.52north.org/category/gsoc/) for more information on previous projects!\n\n1\\. KomMonitor\n--------------\n\n#### **Angular migration of the KomMonitor Web Client**\n\n### **Explanation**\n\nKomMonitor is a web based tool that combines methods of GIS (Geographic information System) and statistical data and helps in providing a simpler and easier way to monitor geo-spatial data. Many municipalities have established KomMonitor to address a wide range of challenges in fields such as urban planning, environmental management, and disaster response. The current version of the [KomMonitor Web Client](https://github.com/KomMonitor/web-client) has been developed using AngularJS, which has served as a reliable foundation for its functionalities. However, AngularJS has been deprecated for some years now. Therefore, relying on the current code base has several potential drawbacks associated with using AngularJS, such as compatibility issues, limited community support, reduced performance, and version support. To overcome these challenges and take KomMonitor to the next level, it is necessary to adopt the KomMonitor Web Client to the more modern and widely-supported framework Angular. As part of [GSoC 2023](https://blog.52north.org/2023/09/26/kommonitor-final-blogpost/), essential work has been done by developing a general approach for the Angular migration. The Web Client has been restructured so that it can be deployed as a hybrid web application, which runs both legacy AngularJS components and migrated or new Angular components. This year, the project aims to continue the migration tasks. Hence, the goal of this project is to reimplement several selected components of the KomMonitor Web Client by using the Angular framework.\n\n### **Expected Results**\n\nAs a result of the project, it is expected that several selected components of the KomMonitor Web Client will have been reimplemented with the Angular framework. The resulting UI of the reimplemented components should be as close as possible to the previous design to preserve the current look&feel. As an additional requirement, the reimplementation should take into account best practices and common design patterns in Angular. This results in also restructuring some of the existing components rather than simply transferring a component from AngularJS to Angular. Finally, the hybrid Web Client, including legacy AngularJS components and new Angular components side-by-side, should run properly without any bugs.\n\n### **Code Challenge**\n\nMigrate the _kommonitorToastHelperService_ of the KomMonitor Web Client to Angular and make use of it in a new Angular component as part of the Web Client. Follow the steps below:\n\n1.  Create a fork of [https://github.com/KomMonitor/web-client](https://github.com/KomMonitor/web-client) and checkout the [GSoC2025 Branch](https://github.com/KomMonitor/web-client/tree/GSoC2025)\n2.  Create a new Angular service as part of the KomMonitor Web Client that provides the same functionality as the existing AngularJS version of the _kommonitorToastHelperService_\n3.  Create a new Angular component that makes use of the previously implemented _kommonitorToastHelperService_. Take into account these requirements:\n    1.  The component should be opened and closed by clicking on a button on the left sidebar.\n    2.  The component should include a text area and a button.\n    3.  The required functionality should be to display a message as toast on the screen by filling the text area and clicking on the button. For this purpose the _kommonitorToastHelperService_ should be used.\n4.  Push the code to your fork at GitHub\n5.  Link to the fork within your official GSoC application. Your GSoC application should also include a description of which components you plan to migrate during GSoC as well as an estimation of time required for implementing it.\n\n**![Image 1](https://52north.org/wp-content/uploads/2025/02/KMCodeChallenge.jpg)**\n\n### **Community and Code License**\n\nApache Software License, Version 2\n\n### **Mentors**\n\nSebastian Drost (s.drost @52north.org), Christoph Wagner (c.wagner @52north.org)\n\n### **Project Duration**\n\nThe duration of the project is estimated at **175** hours. An extension is possible.\n\n### **Chat**\n\nTBD\n\n2\\. LLM and GeoData\n-------------------\n\n### Explanation\n\nDuring 52°North’s Student Innovation Challenge in 2024, a first open-source implementation connecting spatial data and Large Language Models (LLM) was developed.\n\nThe ambition was to address the pain points of searchability in Research and Spatial Data Infrastructures (RDI/SDI). Search functionality in such systems is typically limited to a metadata-based approach. However, geospatial data – whether vector or raster based – provides a wealth of interesting data that can currently only be identified by looking at the individual dataset. The challenge of the 2024 Student Innovation Prize was to develop a concept and a possible implementation that allows searching within datasets of/and RDI/SDI, e.g. on the attribute level. There are many interesting aspects related to this challenge: technical solutions, taxonomies and semantics, language/i18n, searching in raster data, and many more such as LLMs.\n\nThe available Proof of Concept (PoC) features a prompt that makes it easier to search and access to spatial data. More user stories are documented in the Innovation Prize project backlog on GitHub: [https://github.com/52North/innovation-prize](https://github.com/52North/innovation-prize).\n\n### Expected Results\n\nThe PoC should be hardened and developed beyond its current state. For example, less verbose prompts are needed as more sophisticated LLMs emerge. Also, improved software frameworks may provide a better development experience. Various extensions are possible and a selection should be outlined in the proposal. Additional user stories from the backlog in the github project (see above) could be addressed. Another interesting extension could also entail a federated architecture. Furthermore, the use of different LLMs is also a possible option for further development.\n\n### Code Challenge\n\nSet up the entire working environment based on the existing open source code\n\n[https://github.com/52North/innovation-prize/tree/2024](https://github.com/52North/innovation-prize/tree/2024)\n\nand add two more data sets. Share the code and the deployed system.\n\n### Community and Code License\n\nTBChecked: Apache Software License, Version 2\n\n### Mentors\n\nHenning Bredel (h.bredel @52north.org), Simeon Wetzel\n\n### Project duration\n\nThe duration of the project is estimated at **175** hours. An extension is possible.\n\n### Explanation\n\nThe open-source 52°North Weather Routing Tool ([WRT](https://github.com/52North/WeatherRoutingTool)) was initially developed during the [MariData project](https://maridata.org/). It provides means to find an optimal ship route that minimizes fuel consumption under varying weather conditions. In the optimization process, several constraints can be integrated, e.g. water depth and traffic separation zones. Currently, there are two algorithms available: an isofuel algorithm and a genetic algorithm. Details of the MariData project and example applications of the Weather Routing Tool can be found in the following publication: [https://proceedings.open.tudelft.nl/imdc24/article/view/875](https://proceedings.open.tudelft.nl/imdc24/article/view/875).\n\n### Expected Results\n\nThe Weather Routing Tool should be extended by new features and its robustness should be improved. There are three major directions of possible developments:\n\n1.  Ship speed optimization  \n    Currently, only the geometry of the route is optimized while the ship speed is assumed to be constant. To cover a broader range of real-world use cases, the Weather Routing Tool should provide the option to optimize ship speed. This could be along a fixed route or simultaneous with the route geometry.\n2.  Genetic algorithm  \n    The implementation of the genetic algorithm is still very basic. Possible improvements include the generation of the initial population and the strategies for crossover and mutation. Moreover, a multi-objective optimization could be implemented.\n3.  General consumption model  \n    An important aspect of the Weather Routing Tool is the underlying (fuel) consumption model. The best results can generally be obtained by using a consumption model which is developed specifically for a ship, e.g. based on hydrodynamic modeling or machine learning models. However, developing such specific models is cumbersome and restricts the applicability of the tool. Thus, having a general consumption model which only requires a few characteristics of a ship (e.g. type of vessel, length, breadth, displacement) would be a great improvement. The model should have reasonable accuracy. As this feature includes research aspects and can only be successfully developed with the necessary background knowledge, interested candidates have to provide a clear plan of their approach.\n\nThe features can be implemented in different ways. How they are implemented is up to the candidate and might include deterministic, machine learning or AI methods.\n\n### Code Challenge\n\nNew ship class:\n\n*   Implement a new [ship class](https://github.com/52North/WeatherRoutingTool/blob/main/WeatherRoutingTool/ship/ship.py)\n    *   It should inherit from the [Boat base class](https://github.com/52North/WeatherRoutingTool/blob/main/WeatherRoutingTool/ship/ship.py#L25)\n    *   The _get\\_ship\\_parameters_ method has to be implemented; it should return a “synthetic” fuel rate which depends on at least one environmental parameter (e.g. wave height)\n    *   Make sure the fuel rates (kg per second) are within a reasonable value range. Besides the weather conditions, typical fuel rates also depend on the ship size, type (e.g. container ship, tanker, fishing vessel) and speed.\n    *   The choice of the considered environmental parameters and the type of the function is free\n    *   You can take the [ConstantFuelBoat class](https://github.com/52North/WeatherRoutingTool/blob/main/WeatherRoutingTool/ship/ship.py#L42) as an example\n*   Prepare weather conditions\n    *   Options:\n        *   Create your own synthetic weather conditions\n        *   Download actual historical or forecast data from public portals (Copernicus, NOAA, …). You can use the Python package [maridatadownloader](https://github.com/52North/maridatadownloader) directly or indirectly by setting “_DATA\\_MODE_” to “_automatic_“.\n*   Run the Weather Routing Tool with your new ship class and a route of your free choice\n    *   Hint: because the Python package mariPower is not publicly available, you need to comment or delete the corresponding lines in ship.py.\n    *   Configuration:\n        *   Set “_ALGORITHM\\_TYPE_” to “_isofuel_”\n*   Provide the expected results for review\n    *   Mandatory:\n        *   Final route as GeoJSON file\n        *   Python code of new ship class\n    *   Optional:\n        *   Log file (_info.log_)\n        *   Snapshots of routing steps (_WRT\\_FIGURE\\_PATH_)\n        *   Used weather data\n\n### Community and Code License\n\nMIT License\n\n### Mentors\n\nMartin Pontius (m.pontius @52north.org), Katharina Demmich (k.demmich @52north.org)\n\n### Project Duration\n\nThe duration of the project is estimated at **175** hours. An extension is possible.\n\nTBD\n\n*   Cloud Native OGC SensorThings API 2\n*   enviroCar\n\n4\\. Your Idea\n-------------\n\nWe are also open to your own ideas for developing open source software that addresses 52°North’s software or fits within the scope of 52°North. Before writing a detailed proposal, we strongly recommend that you contact our org-admin with a project pitch (~1 page) that addresses at least the following points\n\n*   Project name:\n*   Reference to existing open source solution (if any):\n*   Explanation of the software’s scope/purpose/context:\n*   Expected results of the proposed project:\n*   Community and Code License in use/planned:\n*   Mentor candidates (if any):\n"} 