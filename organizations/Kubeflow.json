{"name":"Kubeflow","description":"The Machine Learning Toolkit for Kubernetes (AI)","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/kubeflow","ideas_url":"https://www.kubeflow.org/events/gsoc-2025/","logo":"https://summerofcode.withgoogle.com/media/org/kubeflow/uqphmd1y7opxpjim-360.png","technologies":["python","go","kubernetes","typescript","YAML"],"topics":["machine learning","kubernetes","AI/ML","generative AI"],"projects":[{"project_name":"Kubeflow Platform Enhancements","summary":"Improving various Kubeflow components like Pipelines and Dashboard focusing on secure fixes and better workflows.","difficulty":"Hard"},{"project_name":"Kserve Models Web App","summary":"Reviving and updating the KServe models web application with better CI/CD, features, and sync with recent changes.","difficulty":"Medium"},{"project_name":"Istio CNI and Ambient Mesh","summary":"Securing Kubeflow service mesh and providing Istio-ambient mesh configurations to enhance security and functionality.","difficulty":"Medium"},{"project_name":"Deploying Kubeflow with Helm","summary":"Creating community-driven Helm charts for deploying Kubeflow, serving user needs for better manageability.","difficulty":"Medium"},{"project_name":"JupyterLab Plugin for Kubeflow","summary":"Developing a JupyterLab plugin to modernize and unify existing tools, enhancing functionality for the Kubeflow user experience.","difficulty":"Medium"},{"project_name":"Batch Processing Gateway Integration","summary":"Integrating the Batch Processing Gateway with Kubeflow for efficient Spark application management across clusters.","difficulty":"Hard"},{"project_name":"GPU Testing for LLM Blueprints","summary":"Investigating the use of Self-Hosted Runners for GPU testing within the Kubeflow environment.","difficulty":"Medium"},{"project_name":"Support JAX and TensorFlow Training Runtimes","summary":"Adding support for both JAX and TensorFlow in Kubeflow Trainer to expand its training capabilities.","difficulty":"Hard"},{"project_name":"Export Kubeflow Trainer Models to Kubeflow Model Registry","summary":"Integrating Trainer models with the Model Registry for deeper ecosystem integration.","difficulty":"Hard"},{"project_name":"Support Volcano Scheduler in Kubeflow Trainer","summary":"Integrating Volcano Scheduler into Trainer to enhance AI-specific workload scheduling capabilities.","difficulty":"Hard"},{"project_name":"Support Postgres for Kubeflow Pipelines backend","summary":"Implementing PostgreSQL as an alternative backend for Kubeflow Pipelines to provide users with more database options.","difficulty":"Medium"}],"jina_response":"Title: Google Summer of Code 2025\n\nURL Source: https://www.kubeflow.org/events/gsoc-2025/\n\nMarkdown Content:\nGoogle Summer of Code 2025\n\n* * *\n\nThe Kubeflow Community plans to participate in [**Google Summer of Code 2025**](https://summerofcode.withgoogle.com/). This page aims to help you participate in GSoC 2025 with Kubeflow.\n\nWhat is GSoC?\n-------------\n\nGoogle Summer of Code (GSoC) is a global program that offers students [stipends](https://developers.google.com/open-source/gsoc/help/student-stipends) for working on open-source projects during the summer.\n\nFor more information, see the [GSoC FAQ](https://developers.google.com/open-source/gsoc/faq) and watch the video below:\n\nHow can I participate?\n----------------------\n\nThank you for your interest in participating in GSoC with Kubeflow!\n\nPlease carefully read the following information to learn how to participate in GSoC with Kubeflow.\n\n### Key Dates\n\nHere are the key dates for GSoC 2025, the [full timeline](https://developers.google.com/open-source/gsoc/timeline) is available on the GSoC website:\n\n| Event | Date |\n| --- | --- |\n| **Applications Open** | March 24 @ 18:00 UTC |\n| **Applications Deadline** | April 8 @ 18:00 UTC |\n| **Accepted Proposals Announced** | May 8 |\n| **Community Bonding** | May 8 - June 1 |\n| **Coding Begins** | June 2 |\n| **Midterm Evaluations** | July 14 - 18 |\n| **Coding Ends** | September 1 |\n| **Final Evaluations** | September 1 - 8 |\n\n### Eligibility\n\nTo participate in GSoC with Kubeflow, you **must** meet the GSoC [eligibility requirements](https://developers.google.com/open-source/gsoc/faq#what_are_the_eligibility_requirements_for_participation):\n\n*   Be at least 18 years old at time of registration.\n*   Be a student or an [open source beginner](https://developers.google.com/open-source/gsoc/faq#how_do_i_know_if_i_am_considered_a_beginner_in_open_source_development).\n*   Be eligible to work in their country of residence during duration of program.\n*   Be a resident of a country not currently embargoed by the United States.\n\n### Steps\n\n1.  Sign up as a student on the [GSoC website](https://summerofcode.withgoogle.com/).\n2.  Join the [Kubeflow Slack](https://www.kubeflow.org/docs/about/community/#kubeflow-slack-channels):\n    *   _**NOTE:** please **do not** reach out privately to mentors, instead, start a thread in the [`#kubeflow-contributors`](https://cloud-native.slack.com/archives/C0742LBR5BM) channel so others can see the response._\n3.  Learn about Kubeflow:\n    *   Read the [Introduction to Kubeflow](https://www.kubeflow.org/docs/started/introduction/)\n    *   Review the [Architecture Overview](https://www.kubeflow.org/docs/started/architecture/)\n    *   Consider [trying out Kubeflow](https://www.kubeflow.org/docs/started/installing-kubeflow/) (not required, can be challenging)\n4.  Review the [project ideas](https://www.kubeflow.org/events/gsoc-2025/#project-ideas) to decide which ones you are interested in:\n    *   You may wish to attend the next [community meeting](https://www.kubeflow.org/docs/about/community/#kubeflow-community-calendar) for the group that is leading your chosen project.\n    *   _**NOTE:** while we recommend you submit a proposal based on the project ideas, you can also submit a proposal with your own idea._\n5.  Submit a proposal through the [GSoC website](https://summerofcode.withgoogle.com/) between **March 24th** and **April 8th**.\n6.  Wait for the results to be announced on **May 8th**.\n\nProject Ideas\n-------------\n\n### Project 1: Kubeflow Platform Enhancements\n\n**Components:** Kubeflow Manifests, Kubeflow Dashboard, Kubeflow Notebooks, Kubeflow Pipelines\n\n**Possible Mentors:** [`@juliusvonkohout`](https://github.com/juliusvonkohout), [`@thesuperzapper`](https://github.com/thesuperzapper)\n\n**Difficulty:** Hard\n\n**Size:** 350 hours\n\n**Possible Projects:**\n\n*   Pipelines: productionize the [SeaweedFS PoC](https://github.com/kubeflow/manifests/tree/master/contrib/seaweedfs) as secure minio replacement\n*   Pipelines: isolate artifacts per namespace/profile/user using only one bucket ([`kubeflow/pipelines#4649`](https://github.com/kubeflow/pipelines/issues/4649))\n*   Notebooks/Dashboard: migrate code to kubeflow/dashboard and kubeflow/notebooks ([`kubeflow/kubeflow#7549`](https://github.com/kubeflow/kubeflow/issues/7549))\n*   Dashboard: work on the Central Dashboard angular rewrite ([`kubeflow/dashboard#38`](https://github.com/kubeflow/dashboard/issues/38))\n*   Dashboard: support using groups for auth ([`kubeflow/manifests#2910`](https://github.com/kubeflow/manifests/issues/2910#issuecomment-2468745862))\n*   Manifests: improve scripts and CI/CD in kubeflow/manifests, including matrix calls to test multiple Kubernetes versions simultaneously\n\n**Skills Required/Preferred:**\n\n*   GitHub and GitHub Actions\n*   containers and Kubernetes knowledge\n*   Experience with Python, Go and JavaScript frameworks\n\n* * *\n\n### Project 2: Kserve Models Web App\n\n**Components:** KServe\n\n**Possible Mentors:** [`@juliusvonkohout`](https://github.com/juliusvonkohout), [`@varodrig`](https://github.com/varodrig), [`@Griffin-Sullivan`](https://github.com/Griffin-Sullivan)\n\n**Difficulty:** Medium\n\n**Size:** 175 hours\n\n**Goals:**\n\n*   Reviving and updating the [`kserve/kserve-models-web`](https://github.com/kserve/models-web-app) application.\n    *   Clean up and merge the open issues and PRs\n    *   Implement a better CI/CD pipeline.\n    *   Potentially migrate the application to `kubeflow/kserve-model-ui`\n    *   Add features for editing, regression testing, and monitoring/metrics support.\n    *   Synchronize with kserve 0.14+ changes.\n\n**Skills Required/Preferred:**\n\n*   GitHub Actions\n*   containers and Kubernetes knowledge\n*   JavaScript frameworks\n\n* * *\n\n* * *\n\n### Project 3: Istio CNI and Ambient Mesh\n\n**Components:** Kubeflow Manifests\n\n**Possible Mentors:** [`@juliusvonkohout`](https://github.com/juliusvonkohout), [`@kimwnasptd`](https://github.com/kimwnasptd)\n\n**Difficulty:** Medium\n\n**Size:** 175 hours\n\n**Goals:**\n\n*   Secure our service mesh with istio-cni by default ([`kubeflow/manifests#2907`](https://github.com/kubeflow/manifests/pull/2907))\n*   Provide an out-of-box option for istio-ambient mesh ([`kubeflow/manifests#2676`](https://github.com/kubeflow/manifests/issues/2676))\n    *   Controllers to create HTTPRoute and AuthorizationPolicies, that align with way-point proxies\n    *   Manifests to also have a flavour of HTTPRoute and updated AuthorizationPolicies\n*   Secure Kserve by default ([`kubeflow/manifests#2811`](https://github.com/kubeflow/manifests/issues/2811))\n*   Rootless Kubeflow ([`kubeflow/manifests#2528`](https://github.com/kubeflow/manifests/issues/2528))\n\n**Skills Required/Preferred:**\n\n*   GitHub and GitHub Actions\n*   Kubernetes and networking\n*   Istio, Kustomize\n\n* * *\n\n* * *\n\n### Project 4: Deploying Kubeflow with Helm\n\n**Components:** Kubeflow Manifests, Kubeflow Pipelines, Kubeflow Trainer, Kubeflow Katib, Kubeflow Spark Operator, Kubeflow Model Registry\n\n**Possible Mentors:** [`@chasecadet`](https://github.com/chasecadet), [`@varodrig`](https://github.com/varodrig), [`@juliusvonkohout`](https://github.com/juliusvonkohout)\n\n**Difficulty:** Medium\n\n**Size:** 350 hours\n\n**Goals:**\n\n*   To extend our userbase and satisfy the requirement for a helm chart that many users and companies have voiced, a community-driven Helm chart is being developed for Kubeflow v1.10.x.\n*   Work with Kubeflow components maintainers and kubeflow/manifests to support the creation of Helm charts for a full Kubeflow deployment with similar functionality as the current kustomize manifests for the Kubeflow 1.10.x release.\n*   Investigate possible systems to automatically generate or maintain charts based on the existing kustomize manifests, such that we have a single source of truth.\n\n**Skills Required/Preferred:**\n\n*   Container and Kubernetes knowledge\n*   Helm (especially templating and chart creation)\n*   Kustomize (not strictly required, but a plus)\n\n* * *\n\n* * *\n\n### Project 5: JupyterLab Plugin for Kubeflow\n\n**Components:** Kubeflow Notebooks, Kubeflow Pipelines\n\n**Possible Mentors:** [`@ederign`](https://github.com/ederign), [`@StefanoFioravanzo`](https://github.com/StefanoFioravanzo)\n\n**Difficulty:** Medium\n\n**Size:** 350 hours\n\n**Goals:**\n\n*   Work with the new IDE Working Group (name pending - [`kubeflow/community#808`](https://github.com/kubeflow/community/issues/808)) to create a JupyterLab plugin for Kubeflow\n*   Modernizing and/or consolidating [Elyra](https://github.com/elyra-ai/elyra), [Kale](https://github.com/kubeflow-kale/kale), and [Jupyter Scheduler](https://github.com/jupyter-server/jupyter-scheduler) into a single plugin for Kubeflow\n*   Eventually, the plugin will likely integrate with:\n    *   Kubeflow Pipelines (priority)\n    *   Kubeflow Notebooks\n    *   Kubeflow Model Registry\n    *   Kubeflow Training Operator\n    *   and more\n\n**Skills Required/Preferred:**\n\n*   Python for backend development and API integration\n*   JavaScript/TypeScript for frontend development\n*   Modern UI frameworks (e.g., React, Jupyter widgets) is a plus\n*   Familiarity with Jupyter Notebook, JupyterLab\n*   Jupyter extension development experience is a plus\n\n* * *\n\n* * *\n\n### Project 6: Batch Processing Gateway Integration\n\n**Components:** Kubeflow Spark Operator\n\n**Possible Mentors:** [`@Shekharrajak`](https://github.com/Shekharrajak), [`@lresende`](https://github.com/lresende), [`@yuchaoran2011`](https://github.com/yuchaoran2011), [`@andreyvelich`](https://github.com/andreyvelich)\n\n**Difficulty:** Hard\n\n**Size:** 350 hours\n\n**Goals:**\n\n*   Integrating the [Batch Processing Gateway (BPG)](https://github.com/apple/batch-processing-gateway) with Kubeflow for submitting, monitoring, and managing Spark applications across multiple clusters ([`kubeflow/spark-operator#2422`](https://github.com/kubeflow/spark-operator/issues/2422))\n*   Analyse, Design, Plan, and Execute Spark Job Execution Strategies:\n    *   Evaluate the trade-offs between running a Spark kernel directly within a Kubeflow Notebook versus leveraging the Batch Processing Gateway for job submission.\n    *   Assess the cloud-native design of Kubeflow SDK and Notebook environments to determine the optimal approach for Spark integration that maximizes efficiency, scalability, and usability.\n    *   Make a well-informed decision on whether to support Spark kernels within notebooks, use BPG, or implement a hybrid approach for an enhanced user experience.\n*   Automated Job Routing and Scalable Execution:\n    *   Implement dynamic workload routing using BPG to automatically distribute Spark jobs based on cluster load, resource availability, and workload priority.\n    *   Integrate with the Spark Operator to optimize resource allocation, minimize execution delays, and ensure efficient scaling for petabyte-scale machine learning and data processing workloads.\n*   Enhanced User API and Notebook Integration:\n    *   Develop a Python SDK for Kubeflow notebooks, enabling users to submit, manage, and monitor Spark jobs via BPG REST APIs for a lightweight, scalable solution.\n    *   Ensure a seamless user experience by providing intuitive APIs that abstract complex job management operations, making it easier for data scientists and ML engineers to experiment and iterate on workflows within\n*   Comprehensive Debugging and Performance Monitoring:\n    *   Enable full debugging capabilities by integrating Spark UI, logging, and monitoring tools into Kubeflow, allowing users to visualize Spark DAGs, tasks, and execution stages.\n    *   Implement centralized logging and Prometheus-based monitoring to provide real-time insights into Spark job performance across clusters.\n    *   Ensure users can efficiently analyze job execution, detect bottlenecks, and optimize data processing and ML workflows within Kubeflow.\n    *   Note: Most of the logging APIs must be leveraged out of the box from either BPG or Spark - but we need to document, showcase examples to user.\n*   Comprehensive documentation and user guides to assist users in leveraging the new features effectively.\n\n**Skills Required/Preferred:**\n\n*   Proficiency in Python, Java and familiarity with developing SDKs.\n*   Experience with Kubernetes and managing containerized applications.\n*   Understanding of Apache Spark and its deployment on Kubernetes clusters.\n*   Familiarity with RESTful API development and integration.\n*   Experience with monitoring tools and logging frameworks is a plus.\n\n* * *\n\n* * *\n\n### Project 7: GPU Testing for LLM Blueprints\n\n**Components:** Kubeflow Trainer (Training Operator)\n\n**Possible Mentors:** [`@andreyvelich`](https://github.com/andreyvelich), [`@varodrig`](https://github.com/varodrig)\n\n**Difficulty:** Medium\n\n**Size:** 350 hours\n\n**Goals:**\n\n*   Explore using Self-Hosted Runners for GPU testing in Kubeflow Trainer ([`kubeflow/trainer#2432`](https://github.com/kubeflow/trainer/issues/2432))\n\n**Skills Required/Preferred:**\n\n*   GitHub Actions\n*   Kubernetes\n*   PyTorch\n*   Python\n\n* * *\n\n* * *\n\n### Project 8: Support JAX and TensorFlow Training Runtimes\n\n**Components:** Kubeflow Trainer (Training Operator)\n\n**Possible Mentors:** [`@Electronic-Waste`](https://github.com/Electronic-Waste), [`@XshubhamX`](https://github.com/XshubhamX), [`@andreyvelich`](https://github.com/andreyvelich)\n\n**Difficulty:** Hard\n\n**Size:** 350 hours\n\n**Goals:**\n\n*   Add support TensorFlow as a training runtime in Kubeflow Trainer ([`kubeflow/trainer#2443`](https://github.com/kubeflow/trainer/issues/2443))\n*   Add support JAX as a training runtime in Kubeflow Trainer ([`kubeflow/trainer#2442`](https://github.com/kubeflow/trainer/issues/2442))\n\n**Skills Required/Preferred:**\n\n*   Go\n*   Kubernetes\n*   JAX\n*   TensorFlow\n\n* * *\n\n* * *\n\n### Project 9: Export Kubeflow Trainer Models to Kubeflow Model Registry\n\n**Components:** Kubeflow Trainer (Training Operator), Kubeflow Model Registry\n\n**Possible Mentors:** [`@tarilabs`](https://github.com/tarilabs), [`@franciscojavierarceo`](https://github.com/franciscojavierarceo)\n\n**Difficulty:** Hard\n\n**Size:** 350 hours\n\n**Goals:**\n\n*   Integrate Kubeflow Trainer with Kubeflow Model Registry ([`kubeflow/trainer#2438`](https://github.com/kubeflow/trainer/issues/2438))\n    *   Trainer has implemented initializers for model and dataset, and will support model exporter in the future.\n    *   By supporting the model registry as one of the destinations of the exporter, Trainer will integrate with Kubeflow ecosystem more deeply.\n\n**Skills Required/Preferred:**\n\n*   Kubernetes\n*   Go\n*   YAML\n*   Python\n\n* * *\n\n* * *\n\n### Project 10: Support Volcano Scheduler in Kubeflow Trainer\n\n**Components:** Kubeflow Trainer (Training Operator)\n\n**Possible Mentors:** [`@Electronic-Waste`](https://github.com/Electronic-Waste), [`@rudeigerc`](https://github.com/rudeigerc)\n\n**Difficulty:** Hard\n\n**Size:** 350 hours\n\n**Goals:**\n\n*   Integrate Volcano Scheduler with Kubeflow Trainer ([`kubeflow/trainer#2437`](https://github.com/kubeflow/trainer/issues/2437))\n    *   Currently, Trainer does not support Volcano for scheduling.\n    *   Since Volcano is a widely adopted scheduler for AI workloads, it could provide Trainer with more AI-specific scheduling capabilities if we integrate Volcano into Trainer\n\n**Skills Required/Preferred:**\n\n*   Kubernetes\n*   Go\n*   Volcano\n\n* * *\n\n* * *\n\n### Project 11: Support Postgres for Kubeflow Pipelines backend\n\n**Components:** Kubeflow Pipelines\n\n**Possible Mentors:** [`@rimolive`](https://github.com/rimolive), [`@shivaylamba`](https://github.com/shivaylamba)\n\n**Difficulty:** Medium\n\n**Size:** 175 hours\n\n**Goals:**\n\n*   Implement support for PostgreSQL as an alternative to MySQL/MariaDB in Kubeflow Pipelines ([`kubeflow/pipelines#9813`](https://github.com/kubeflow/pipelines/issues/9813))\n    *   Kubeflow Pipelines must store information about pipelines, experiments, runs, and artifacts in a database. Currently, the only database it supports is MySQL/MariaDB.\n    *   We plan to support PostgreSQL as an alternative to MySQL/MariaDB so users will be able to reuse existing databases, and PostgreSQL will be a good use case for supporting multiple databases.\n\n**Skills Required/Preferred:**\n\n*   Kubernetes\n*   Python\n*   Go\n*   YAML\n\n### Feedback\n\nWas this page helpful?\n\nThank you for your feedback!\n\nWe're sorry this page wasn't helpful. If you have a moment, please [share your feedback](https://github.com/kubeflow/website/issues/new?title=[Feedback]+events/upcoming-events/gsoc-2025.md) so we can improve.\n"}