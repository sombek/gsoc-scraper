{"name":"CNCF","description":"Building sustainable ecosystems for cloud native","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/cncf","ideas_url":"https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md","logo":"https://summerofcode.withgoogle.com/media/org/cncf/jmxijrttlucfutel-360.png","technologies":["prometheus","kubernetes","OpenTelemetry","envoy"],"topics":["cloud","cloud native","observability"],"projects":[{"project_name":"etcd cache","summary":"Develop a high-performance caching library for etcd to improve efficiency and scalability of etcd-based applications.","difficulty":"small"},{"project_name":"Enhance Harbor Satellite for Artifact Replication from Remote Registry to Edge","summary":"Enhance Harbor Satellite to allow decentralized artifact replication in edge environments, ensuring reliable access even with intermittent connectivity.","difficulty":"medium"},{"project_name":"Service performance analysis on top of Elasticsearch / OpenSearch data","summary":"Integrate Jaeger's service performance management (SPM) capabilities directly with Elasticsearch/OpenSearch to simplify deployments.","difficulty":"large"},{"project_name":"KCL OCI third-party dependency management enhancement","summary":"Refactor KPM dependency management for KCL to implement OCI's layered mechanism for better handling of third-party dependencies.","difficulty":"medium"},{"project_name":"Extend usage of Konveyor AI to detect deprecated Kubernetes API usage","summary":"Create a tool within Konveyor AI that uses generative AI to identify and update deprecated API usage in Golang applications.","difficulty":"large"},{"project_name":"Improve KubeArmor Observability Spectrum","summary":"Introduce Prometheus metrics to KubeArmor for enhanced visibility into security policy enforcement and alerting.","difficulty":"medium"},{"project_name":"Automating Operator Maintenance","summary":"Automate updates and maintenance for Kubebuilder-operated projects to align with the latest ecosystem standards, potentially using AI.","difficulty":"large"},{"project_name":"AI/ML Model Monitoring and Drift Detection in Disconnected Clusters","summary":"Integrate monitoring and drift detection for AI/ML models in Kubernetes using KubeStellar, focusing on local data handling and syncing.","difficulty":"large"},{"project_name":"Allow policies to be written using JavaScript","summary":"Develop a JavaScript SDK for Kubewarden to allow policy creation in JavaScript, enhancing accessibility of policy writing.","difficulty":"large"},{"project_name":"Elevate our .NET SDK into a first-class citizen","summary":"Update Kubewarden's .NET SDK to .NET 9 and align its capabilities with existing SDKs to ensure consistent functionality.","difficulty":"medium"},{"project_name":"VM plugin subsystem","summary":"Create a plugin subsystem for Lima that separates VM drivers for better maintainability and supports additional VM backends.","difficulty":"medium"},{"project_name":"Terraform Support for LitmusChaos","summary":"Develop a Terraform provider for LitmusChaos to automate chaos experiment setups, integrating with CI/CD pipelines.","difficulty":"large"},{"project_name":"Multi-player Collaboration: Resilient Websockets and GraphQL Subscriptions","summary":"Refactor Meshery's websocket and GraphQL implementations for improved reliability and support for multiplayer functionalities.","difficulty":"large"},{"project_name":"Support for Azure in Meshery","summary":"Enhance Meshery to manage Azure services using Azure Service Operator, incorporating it into Meshery's orchestration capabilities.","difficulty":"large"},{"project_name":"Distributed client-side inference with WebAssembly (WASM) and OPA in Meshery","summary":"Integrate real-time policy evaluation into Meshery’s UI using OPA’s WASM capabilities for improved user experience.","difficulty":"large"},{"project_name":"Privacy-preserving and efficient AI model training across multi-cluster","summary":"Implement federated learning into Open Cluster Management (OCM) for privacy-preserving AI training across multiple clusters.","difficulty":"medium"},{"project_name":"Enhance Java ORAS SDK","summary":"Expand Java ORAS SDK functionalities to include unimplemented features from the OCI Distribution spec and improve existing features.","difficulty":"medium"},{"project_name":"Snapshot Merkle trees","summary":"Implement support for snapshot Merkle trees in Python-TUF to optimize the size of snapshot metadata for TUF clients.","difficulty":"medium"},{"project_name":"Enhancements for FAQ Chatbot for Vitess","summary":"Improve the AI-powered FAQ chatbot for Vitess by refining its accuracy, adding features, and optimizing performance.","difficulty":"large"},{"project_name":"Virtual filesystem security for WasmEdge plug-ins","summary":"Export necessary WASI APIs in WasmEdge to ensure filesystem security when executing WASM binaries.","difficulty":"large"},{"project_name":"Port WasmEdge and the WASI-NN ggml backend to the s390x platform","summary":"Enable WasmEdge to support the s390x platform, ensuring compatibility and performance for AI applications.","difficulty":"large"},{"project_name":"Use Runwasi with WasmEdge runtime to test multiple WASM apps as cloud services","summary":"Develop a testing framework using Runwasi to validate the performance of multiple WASM applications in cloud environments.","difficulty":"large"}],"jina_response":"Title: mentoring/programs/summerofcode/2025.md at main · cncf/mentoring\n\nURL Source: https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md\n\nMarkdown Content:\nProject Ideas\n-------------\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#project-ideas)\n\nIf you are a project maintainer and consider mentoring during the GSoC 2025 cycle, please, submit your ideas below using the template.\n\n[Google summer of code timeline](https://developers.google.com/open-source/gsoc/timeline).\n\nYou can find the project ideas from previous year [here](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2024.md).\n\n> **NOTE:** Please note that GSoC is a program known for its strict deadlines. In addition to responding to your mentee on time, you will be required to submit evaluations on time. Failures to meet the deadlines might affect CNCF's future participation in GSoC.\n\n* * *\n\n### Template\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#template)\n\n```\n#### CNCF Project Name\n\n##### Project Title\n\n- Description:\n- Expected Outcome:\n- Recommended Skills:\n- Expected project size: # one of small (~90 hour projects), medium (~175 hour projects) and large (~350 hour projects)\n- Mentor(s): #For GSoC, it is **required** to have at least 2 mentors with 1 being a primary mentor.\n  - Jane Doe (@jane-github, jane@email.address) - primary\n  - John Doe (@john-github, john@email.address)\n- Upstream Issue (URL):\n```\n\n* * *\n\nIdeas\n-----\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#ideas)\n\n*   [etcd](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#etcd)\n    *   [etcd cache](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#etcd-cache)\n*   [Harbor](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#harbor)\n    *   [Enhance Harbor Satellite for Artifact Replication from Remote Registry to Edge](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#enhance-harbor-satellite-for-artifact-replication-from-remote-registry-to-edge)\n*   [Jaeger](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#jaeger)\n    *   [Service performance analysis on top of Elasticsearch / OpenSearch data](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#service-performance-analysis-on-top-of-elasticsearch--opensearch-data)\n*   [KCL](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kcl)\n    *   [KCL OCI third-party dependency management enhancement](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kcl-oci-third-party-dependency-management-enhancement)\n*   [Konveyor](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#konveyor)\n    *   [Extend usage of Konveyor AI to detect and update deprecated Kubernetes API usage in golang applications](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#extend-usage-of-konveyor-ai-to-detect-and-update-deprecated-kubernetes-api-usage-in-golang-applications)\n*   [KubeArmor](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubearmor)\n    *   [Improve KubeArmor Observability Spectrum](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#improve-kubearmor-observability-spectrum)\n*   [KubeBuilder](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubebuilder)\n    *   [Automating Operator Maintenance: Driving Better Results with Less Overhead](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#automating-operator-maintenance-driving-better-results-with-less-overhead)\n*   [KubeStellar](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubestellar)\n    *   [AI/ML Model Monitoring and Drift Detection in Disconnected Clusters using KubeStellar](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#aiml-model-monitoring-and-drift-detection-in-disconnected-clusters-using-kubestellar)\n*   [Kubewarden](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubewarden)\n    *   [Allow policies to be written using JavaScript](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#allow-policies-to-be-written-using-javascript)\n    *   [Elevate our .NET SDK into a first class citizen](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#elevate-our-net-sdk-into-a-first-class-citizen)\n*   [Lima](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#lima)\n    *   [VM plugin subsystem](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#vm-plugin-subsystem)\n*   [LitmusChaos](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#litmuschaos)\n    *   [Terraform Support for LitmusChaos](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#terraform-support-for-litmuschaos)\n*   [Meshery](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#meshery)\n    *   [Multi-player Collaboration: Resilient Websockets and GraphQL Subscriptions](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#multi-player-collaboration-resilient-websockets-and-graphql-subscriptions)\n    *   [Support for Azure in Meshery](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#support-for-azure-in-meshery)\n    *   [Distributed client-side inference (policy evaluation) with WebAssembly (WASM) and OPA in Meshery](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#distributed-client-side-inference-policy-evaluation-with-webassembly-wasm-and-opa-in-meshery)\n*   [Open Cluster Management](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#open-cluster-management)\n    *   [Privacy-preserving and efficient AI model training across multi-cluster](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#privacy-preserving-and-efficient-ai-model-training-across-multi-cluster)\n*   [ORAS](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#oras)\n    *   [Enhance Java ORAS SDK](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#enhance-java-oras-sdk)\n*   [The Update Framework (TUF)](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#the-update-framework-tuf)\n    *   [Snapshot Merkle trees](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#snapshot-merkle-trees)\n*   [Vitess](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#vitess)\n    *   [Enhancements for FAQ Chatbot for Vitess](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#enhancements-for-faq-chatbot-for-vitess)\n*   [WasmEdge](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#wasmedge)\n    *   [Virtual filesystem security for WasmEdge plug-ins with exporting WASI APIs](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#virtual-filesystem-security-for-wasmedge-plug-ins-with-exporting-wasi-apis)\n    *   [Port WasmEdge and the WASI-NN ggml backend to the s390x platform](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#port-wasmedge-and-the-wasi-nn-ggml-backend-to-the-s390x-platform)\n    *   [Use Runwasi with WasmEdge runtime to test multiple WASM apps as cloud services](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#use-runwasi-with-wasmedge-runtime-to-test-multiple-wasm-apps-as-cloud-services)\n\n#### etcd\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#etcd)\n\n##### etcd cache\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#etcd-cache)\n\n*   Description: Develop a generic, high-performance caching library for etcd, inspired by the Kubernetes watch cache, to facilitate building scalable and efficient etcd-based applications.\n*   Expected Outcome:\n    *   A well-tested and performant library providing core caching primitives similar to Kubernetes' watch cache, significantly reducing etcd load and latency for generic etcd use cases.\n    *   The library will offer feature parity with Kubernetes watch cache, including support for:\n        *   Caching watch events and demultiplexing requests.\n        *   Caching non-consistent list requests using a B-tree structure, updated via watch events.\n        *   Handling requests during cache initialization and re-initialization.\n        *   Custom encoders/decoders for data serialization.\n        *   Custom indexing for optimized lookups.\n        *   Consistent reads.\n        *   Exact stale reads via B-tree snapshots.\n        *   Comprehensive documentation, examples, benchmarks, and metrics to enable easy adoption and monitoring. This includes e2e and robustness tests.\n*   Recommended Skills: Go, Distributes Systems\n*   Expected project size: small\n*   Mentor(s):\n    *   Marek Siarkowicz (@serathius, [siarkowicz@google.com](mailto:siarkowicz@google.com)) - primary\n    *   Madhav Jivrajani (@MadhavJivrajani, [madhav.jiv@gmail.com](mailto:madhav.jiv@gmail.com))\n*   Upstream Issue (URL): [etcd-io/etcd#19371](https://github.com/etcd-io/etcd/issues/19371)\n\n#### Harbor\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#harbor)\n\n##### Enhance Harbor Satellite for Artifact Replication from Remote Registry to Edge\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#enhance-harbor-satellite-for-artifact-replication-from-remote-registry-to-edge)\n\n*   Description: The Harbor Satellite project aims to enable decentralized artifact replication in edge computing environments. This project currently focuses on [Use Case #1](https://github.com/container-registry/harbor-satellite/blob/main/docs/images/satellite_use_case_1.svg), where Harbor Satellite will pull images from a central Harbor registry and store them in a local OCI-compliant registry for use by edge devices. The solution is designed for environments with limited or intermittent internet connectivity, ensuring continuous access to required artifacts by local edge devices even when connectivity is unavailable.\n*   Expected Outcome:\n    *   Enhance Harbor Satellite to enable reliable artifact replication from a central Harbor registry to a local OCI-compliant registry at the edge.\n    *   Implement secure synchronization between central and local registries, especially in air-gapped environments.\n    *   Optimize configuration management for edge container runtimes to pull images from the local registry.\n    *   Provide clear documentation and setup guides for deploying Harbor Satellite in edge environments.\n*   Recommended Skills: Go, OCI-Registries, Distribution-spec\n*   Expected project size: medium (~175 hour projects)\n*   Mentor(s):\n    *   Vadim Bauer (@vad1mo, [vb@container-registry.com](mailto:vb@container-registry.com)) - primary\n    *   Orlin Vasilev (@OrlinVasilev, [orlin@orlix.org](mailto:orlin@orlix.org))\n    *   Prasanth Baskar (@bupd, [bupdprasanth@gmail.com](mailto:bupdprasanth@gmail.com))\n*   Upstream Issue (URL): [goharbor/harbor#21605](https://github.com/goharbor/harbor/issues/21605)\n\n#### Jaeger\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#jaeger)\n\n##### Service performance analysis on top of Elasticsearch / OpenSearch data\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#service-performance-analysis-on-top-of-elasticsearch--opensearch-data)\n\n*   Description: [Jaeger](https://www.jaegertracing.io/) is an open-source, distributed tracing platform designed to monitor and troubleshoot transactions in distributed systems. In its basic deployment it allows collecting tracing data, storing it in a database, and querying & analyzing individual traces in the UI. This workflow is great for deep-diving into individual requests, but it does not answer some higher level questions like \"which endpoints in my service are the slowest?\" To address those questions Jaeger has a special feature called [SPM (Service Performance Management)](https://www.jaegertracing.io/docs/2.2/spm/), which allows the user to see the trends of services' and endpoints' performance and to drill down into the outliers. However, this feature requires a more complicated deployment where a special real-time processor is running and extracting metrics from the traces and storing those metrics in a Prometheus-compatible remote storage. Some of the storage backends supported by Jaeger, such as Elasticsearch & OpenSearch, can provide the same aggregate answers directly from the trace data, which can significantly simplify the deployment. This project aims to enable this integration.\n*   Expected Outcome:\n    *   Support SPM functionality directly in Elasticsearch / OpenSearch backends by implementing the metrics query API\n    *   Enhance existing e2e integration tests to continuously test this new capability\n*   Recommended Skills: Go, basic familiarity with Elasticsearch\n*   Expected project size: large (~350 hour projects)\n*   Mentors:\n    *   Yuri Shkuro (@yurishkuro, [github@ysh.us](mailto:github@ysh.us)) - primary\n    *   Jonah Kowall (@jkowall, [jkowall@kowall.net](mailto:jkowall@kowall.net))\n*   Upstream Issue (URL): [jaegertracing/jaeger#6641](https://github.com/jaegertracing/jaeger/issues/6641)\n\n#### KCL\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kcl)\n\n##### KCL OCI third-party dependency management enhancement\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kcl-oci-third-party-dependency-management-enhancement)\n\n*   Description: KCL is an open-source constraint-based record & functional language mainly used in configuration and policy scenarios. KPM is a package management tool for the KCL language that supports the management of KCL packages in the OCI registry and Git Repo. This topic only applies to third-party dependencies from the OCI registry. Use the layering mechanism in OCI to help KPM implement dependency management of KCL third-party dependencies.\n    \n*   Expected Outcome:\n    \n    *   Refactor the current KPM dependency management module with the OCI's layered mechanism.\n*   Recommended Skills: Go, OCI\n    \n*   Expected project size: medium (~175 hour projects)\n    \n*   Mentor(s):\n    \n    *   Zhe Zong (@zong-zhe, [zongzhe1024@163.com](mailto:zongzhe1024@163.com))\n    *   Heipa (@He1pa, [he1pa404@gmail.com](mailto:he1pa404@gmail.com))\n*   Upstream Issue (URL): [kcl-lang/kpm#598](https://github.com/kcl-lang/kpm/issues/598)\n    \n\n#### Knative Functions\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#knative-functions)\n\n##### Dynamic AI Agent Callbacks\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#dynamic-ai-agent-callbacks)\n\n*   Description: Knative Functions is well-suited for AI agent integration. The serverless nature and isolated runtime environment of Functions make them ideal for creating lightweight, purpose-built services that can be dynamically invoked and even created by agents.\n*   Expected Outcome: This project would be a combination of research and practicum. First, an analysis of current AI agent interaction patterns, including emergent protocols and available frameworks. Second, the development of a Proof-of-concept integration between Functions and AI agents. This would involve at a minimum invocation, with a stretch goal of implementation and deployment by the agent based on a human prompt.\n*   Recommended Skills:\n    *   Strong language and communication skills, with the ability to both research deeply and communicate clearly.\n    *   Experience with AI/ML agents and desire to learn about programmatic LLM integrations.\n    *   Familiarity with the Go programming language (ideal) or Python (secondarily), and web services.\n    *   Familiarity with kubernetes, serveless, and microservices a plus.\n*   Expected project size: Large\n*   Mentor(s):\n    *   Luke Kingland @lkingland (kingland AT redhat DOT com) - primary\n    *   Aleksander Slominski @aslom (aslomins AT redhat DOT com)\n*   Upstream Issue (URL): [knative/func#2690](https://github.com/knative/func/issues/2690)\n\n#### Konveyor\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#konveyor)\n\n##### Extend usage of Konveyor AI to detect and update deprecated Kubernetes API usage in golang applications\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#extend-usage-of-konveyor-ai-to-detect-and-update-deprecated-kubernetes-api-usage-in-golang-applications)\n\n*   Description: [Konveyor](https://www.konveyor.io/) is an application modernization platform that helps organizations migrate legacy applications to Kubernetes at scale. As part of this effort, you will contribute to [Konveyor AI (Kai)](https://github.com/konveyor/kai), an intelligent code assistant that automates source code updates using data from static code analysis and changelog histories. Your work will focus on applying Generative AI techniques to detect and update deprecated Kubernetes APIs in Golang applications. You’ll build a tool that uses a LLM to generate [Konveyor static code analysis rules](https://github.com/konveyor/analyzer-lsp/blob/main/docs/rules.md) from published documentation such as the [Kubernetes deprecated API guide](https://kubernetes.io/docs/reference/using-api/deprecation-guide/). Additionally, you’ll create workflows to identify deprecated API usage in legacy applications and automate code suggestions for updates — all powered by Konveyor AI.\n    \n*   Expected Outcome:\n    \n    *   Develop a prototype tool to convert Kubernetes API deprecation documentation into static code analysis rules.\n    *   Collaborate with the Konveyor AI team to extend support for Golang applications, identify issues, and contribute improvements.\n    *   Demonstrate Konveyor AI’s ability to detect and suggest fixes for deprecated API usage in Golang projects.\n*   Recommended Skills: Golang, Python, Kubernetes, Generative AI\n    \n*   Expected project size: # Large (~350 hours)\n    \n*   Mentor(s):\n    \n    *   John Matthews (@jwmatthews, [jwmatthews@gmail.com](mailto:jwmatthews@gmail.com)) - primary\n    *   Savitha Raghunathan (@savitharaghunathan, [saveetha13@gmail.com](mailto:saveetha13@gmail.com))\n*   Upstream Issue (URL): [konveyor/kai#644](https://github.com/konveyor/kai/issues/644)\n    \n\n#### KubeArmor\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubearmor)\n\n##### Improve KubeArmor Observability Spectrum\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#improve-kubearmor-observability-spectrum)\n\n*   Description: KubeArmor is a security enforcement system that provides runtime protection for Kubernetes workloads. To enhance observability, this task involves exposing key Prometheus metrics related to KubeArmor’s policy enforcement. These metrics will provide insights into security policy activity and alerting within a Kubernetes cluster.\n    \n    For starters, the following metrics can be started with:\n    \n    *   Number of Policies Applied\n    *   Number of Alerts Triggered\n    *   List of Active Policies\n    *   Policy Status (Active/Inactive)\n*   Expected Outcome: Prometheus metrics are successfully integrated into KubeArmor, allowing users to monitor policy enforcement and security events effectively. The metrics should be accessible via a Prometheus endpoint and conform to best practices for Prometheus metric exposition.\n    \n*   Recommended Skills: Go, Prometheus, Kubernetes.\n    \n*   Expected project size: 175 hrs\n    \n*   Mentor(s):\n    \n    *   Rishabh Soni (@rootxrishabh, [risrock02@gmail.com](mailto:risrock02@gmail.com))\n    *   Prateek Nandle (@Prateeknandle, [prateeknandle@gmail.com](mailto:prateeknandle@gmail.com))\n    *   Barun Acharya (@daemon1024, [barun1024@gmail.com](mailto:barun1024@gmail.com))\n*   Upstream Issue (URL): [kubearmor/KubeArmor#1902](https://github.com/kubearmor/KubeArmor/issues/1902)\n    \n\n#### KubeBuilder\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubebuilder)\n\n##### Automating Operator Maintenance: Driving Better Results with Less Overhead\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#automating-operator-maintenance-driving-better-results-with-less-overhead)\n\n*   Description:  \n    Code-generation tools like Kubebuilder and Operator-SDK have transformed cloud-native application development by providing scalable, community-driven frameworks. These tools simplify complexity, accelerate results, and enable developers to create tailored solutions while avoiding common pitfalls, laying a strong foundation for innovation.  \n    However, as these tools evolve with ecosystem changes and new features, projects risk becoming outdated. Manual updates are time-consuming, error-prone, and make it challenging to maintain security, adopt advancements, and stay aligned with modern standards.  \n    This project introduces an automated solution for Kubebuilder, with potential applications for similar tools or those built on its foundation. By streamlining maintenance, projects remain aligned with modern standards, improve security, and adopt the latest advancements. It fosters growth and innovation across the ecosystem, letting developers focus on what matters most: building great solutions.  \n    Note that the initial idea is to solve this with **3-way Git merges**. However, users will face conflicts, and in the first phase, we want to study whether AI could help resolve these conflicts in a future phase to achieve this goal.\n    \n*   Expected Outcome\n    \n    *   Conduct research on [3-Way Merge & Advanced Merge Options in Git](https://youtu.be/3Kb9glVJBJM?si=a0g3QMSrW_CMl1L9).\n    *   **Conduct research on how AI could help resolve conflicts**. If open-source solutions are available and align with the proposal, include them for consideration in a second phase.\n    *   Develop a **Proof of Concept (POC)** implementing a **GitHub Action** that automatically creates a **Pull Request (PR)** in a mock repository, demonstrating the feasibility of the proposed solution.\n    *   Successfully complete the proposal for [PEP](https://github.com/kubernetes-sigs/kubebuilder/pull/4302).\n    *   Introduce a new [Kubebuilder Plugin](https://book.kubebuilder.io/plugins/plugins) that scaffolds the **GitHub Action** based on the POC. This plugin will be released as an **alpha feature**, allowing users to opt-in for automated updates. The initial solution does **not need to have AI**, but AI integration could be a future enhancement if feasible.\n*   Recommended Skills\n    \n    *   Golang\n    *   GitHub Actions\n    *   Software Automation\n    *   CI/CD\n    *   Git\n    *   IA\n*   Expected project size: **Large** (~350 hour projects)\n    \n*   Mentor(s)\n    \n    *   Camila Macedo (@camilamacedo86, [camilamacedo86@gmail.com](mailto:camilamacedo86@gmail.com)) - Primary\n    *   Varsha Prasad (@varshaprasad96, [varshaprasad1507@gmail.com](mailto:varshaprasad1507@gmail.com))\n    *   TianYi(Tony) (@Kavinjsir)\n*   Upstream Issue: [WIP - Proposal: Automating Operator Maintenance: Driving Better Results with Less Overhead](https://github.com/kubernetes-sigs/kubebuilder/pull/4302)\n    \n\n#### KubeStellar\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubestellar)\n\n##### AI/ML Model Monitoring and Drift Detection in Disconnected Clusters using KubeStellar\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#aiml-model-monitoring-and-drift-detection-in-disconnected-clusters-using-kubestellar)\n\n*   Description: AI/ML models deployed in disconnected environments, such as edge clusters and air-gapped systems, often suffer from model drift—a degradation in model performance due to changes in input data distributions. Without continuous monitoring, models may become inaccurate, leading to unreliable predictions.\n    \n    This project aims to integrate model monitoring and drift detection into KubeStellar, enabling Kubernetes-based AI workloads to detect data drift locally and sync monitoring metrics when connectivity is restored. The solution will use lightweight monitoring agents deployed alongside ML models to track data distribution changes and alert mechanisms to trigger model retraining when necessary.\n    \n    The system will also include policies for efficient metric storage and synchronization between disconnected and central clusters while minimizing bandwidth usage.\n    \n*   Expected Outcome:\n    \n    *   A KubeStellar-compatible AI/ML monitoring component that tracks model drift in disconnected clusters.\n    *   Efficient local storage and synchronization of monitoring metrics when connectivity is restored.\n    *   Policies for adaptive model retraining triggers based on drift detection signals.\n    *   Integration with existing ML tools (e.g., Prometheus, TensorFlow Extended, OpenTelemetry).\n    *   Open-source documentation and example workflows demonstrating how KubeStellar manages AI model monitoring across disconnected clusters.\n*   Recommended Skills:\n    \n    *   Kubernetes and container orchestration\n    *   AI/ML model deployment & monitoring\n    *   Python, Go (for Kubernetes integrations)\n    *   Experience with logging/monitoring tools (Prometheus, OpenTelemetry)\n    *   Familiarity with KubeStellar (preferred but not required)\n*   Expected Project Size: Large (~350 hours) This project requires implementing multiple components: local monitoring, drift detection, synchronization, and integration with KubeStellar. It also involves research into efficient data synchronization strategies for low-bandwidth environments.\n    \n*   Mentor(s):\n    \n    *   Andy Anderson (@clubanderson, [andy@clubanderson.com](mailto:andy@clubanderson.com)) - Primary Mentor\n    *   \\[Second Mentor's Name\\] (@second-mentor-github, second-mentor-email)\n*   Upstream Issue (URL): [kubestellar/kubestellar#2791](https://github.com/kubestellar/kubestellar/issues/2791)\n    \n\n#### Kubewarden\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#kubewarden)\n\n##### Allow policies to be written using JavaScript\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#allow-policies-to-be-written-using-javascript)\n\n*   Description: Kubewarden is a Policy Engine powered by WebAssembly policies that enforces security and compliance in Kubernetes clusters. Its policies can be written in CEL, Rego (OPA & Gatekeeper flavours), Rust, Go, YAML, and others.\n    \n    Kubewarden does not have a JavaScript SDK yet. Recent work done inside of the Bytecode Alliance made possible to compile Javascript code into WebAssembly . This means It's now possible to create such a SDK. This task consists on writing a JavaScript SDK that provides an idiomatic way to write Kubewarden policies.\n    \n*   Expected Outcome: A new JavaScript SDK is created. The SDK API is documented, and the policy tutorial as well.\n    \n*   Recommended Skills: JavaScript, Kubernetes.\n    \n*   Expected project size: Large\n    \n*   Mentor(s):\n    \n    *   Victor Cuadrado (@viccuad, [vcuadradojuan@suse.com](mailto:vcuadradojuan@suse.com)) - primary\n    *   Flavio Castelli (@flavio, [fcastelli@suse.com](mailto:fcastelli@suse.com))\n    *   José Guilherme Vanz (@jvanz, [jguilhermevanz@suse.com](mailto:jguilhermevanz@suse.com))\n    *   Fabrizio Sestito (@fabriziosestito, [fabrizio.sestito@suse.com](mailto:fabrizio.sestito@suse.com))\n*   Upstream Issue (URL): [kubewarden/community#37](https://github.com/kubewarden/community/issues/37)\n    \n\n##### Elevate our .NET SDK into a first class citizen\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#elevate-our-net-sdk-into-a-first-class-citizen)\n\n*   Description: Kubewarden is a Policy Engine powered by WebAssembly policies that enforces security and compliance in Kubernetes clusters. Its policies can be written in CEL, Rego (OPA & Gatekeeper flavours), Rust, Go, YAML, and others.\n    \n    Kubewarden has a .NET SDK that allows policy authors to write policies in C#. Starting with .NET 8, a big chunk of the work from [https://github.com/dotnet/dotnet-wasi-sdk](https://github.com/dotnet/dotnet-wasi-sdk) made its way upstream. This means it's a good time to revisit Kubewarden's .NET SDK for policies. This task consists on bringing our .NET SDK up to standard with the rest of our SDKs such as the [Go](https://github.com/kubewarden/policy-sdk-go) or [Rust](https://github.com/kubewarden/policy-sdk-rust) ones.\n    \n*   Expected Outcome: Our .NET SDK has been ported to .NET 9, and supports the same capabilities as our other SDKs. The SDK API is documented, and the policy tutorial as well.\n    \n*   Recommended Skills: C#, .NET, Kubernetes.\n    \n*   Expected project size: medium\n    \n*   Mentor(s):\n    \n    *   Victor Cuadrado (@viccuad, [vcuadradojuan@suse.com](mailto:vcuadradojuan@suse.com)) - primary\n    *   Flavio Castelli (@flavio, [fcastelli@suse.com](mailto:fcastelli@suse.com))\n    *   José Guilherme Vanz (@jvanz, [jguilhermevanz@suse.com](mailto:jguilhermevanz@suse.com))\n    *   Fabrizio Sestito (@fabriziosestito, [fabrizio.sestito@suse.com](mailto:fabrizio.sestito@suse.com))\n*   Upstream Issue (URL): [kubewarden/policy-sdk-dotnet#47](https://github.com/kubewarden/policy-sdk-dotnet/issues/47)\n    \n\n#### Lima\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#lima)\n\n##### VM plugin subsystem\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#vm-plugin-subsystem)\n\n*   Description: Lima ([https://lima-vm.io](https://lima-vm.io/)) is a project that provides Linux virtual machines with a focus on running containers. Lima supports several VM backends via built-in drivers: `qemu`, `vz` (Apple Virtualization.framework), and `wsl2` (see [`lima/pkg/driverutil/instance.go`](https://github.com/lima-vm/lima/blob/v1.0.5/pkg/driverutil/instance.go#L11-L20)). The idea for GSoC is to make a plugin subsystem that decouples the built-in VM drivers into separate binaries that communicate with the main Lima binary via some RPC (probably gRPC). This idea will improve the maintainability of the code base, and also help supporting additional VM backends (e.g., `vfkit` and cloud-based drivers).\n*   Expected Outcome:\n    *   Design the plugin subsystem and its RPC (probably gRPC)\n    *   Migrate the existing built-in VM drivers to the new plugin subsystem\n    *   Implement additional VM plugins if the time allows\n*   Recommended Skills: Go, gRPC, QEMU, macOS\n*   Expected project size: medium (~175 hour projects)\n*   Mentor(s):\n    *   Akihiro Suda (@AkihiroSuda, [suda.kyoto@gmail.com](mailto:suda.kyoto@gmail.com)) - primary\n    *   Anders Björklund (@afbjorklund, [anders.f.bjorklund@gmail.com](mailto:anders.f.bjorklund@gmail.com))\n*   Upstream Issue (URL): [lima-vm/lima#2007](https://github.com/lima-vm/lima/discussions/2007)\n\n#### LitmusChaos\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#litmuschaos)\n\n##### Terraform Support for LitmusChaos\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#terraform-support-for-litmuschaos)\n\n*   Description: [LitmusChaos](https://litmuschaos.io/) is an open-source Chaos Engineering platform that helps teams uncover weaknesses and potential outages in their applications by running controlled chaos experiments. However, before injecting chaos, several prerequisite steps must be completed, including user and project creation, connecting target infrastructure, and setting up experiments. To streamline this process, developers and SREs often seek automation, especially when integrating chaos testing into CI/CD pipelines. This Google Summer of Code (GSoC) project proposes developing a Terraform provider for LitmusChaos, enabling users to automate these essential setup steps and seamlessly manage chaos experiments through Terraform.\n    \n*   Expected Outcome:\n    \n    *   LitmusChaos will have a terraform provider supporting user, project, infrastructure, and experiment resource operations along with proper documentation and usage scripts.\n    *   A stretch goal for the mentee would be to become an official maintainer of the Litmus Terraform provider project.\n*   Recommended Skills: Golang, Terraform\n    \n*   Expected project size: large (~175 hour projects)\n    \n*   Mentor(s):\n    \n    *   Saranya Jena (@Saranya-jena, [saranya.jena@harness.io](mailto:saranya.jena@harness.io))\n    *   Sarthak Jain (@SarthakJain26, [sarthak.jain@harness.io](mailto:sarthak.jain@harness.io))\n*   Upstream Issue (URL): [litmuschaos/litmus#5042](https://github.com/litmuschaos/litmus/issues/5042)\n    \n\n#### Meshery\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#meshery)\n\n##### Multi-player Collaboration: Resilient Websockets and GraphQL Subscriptions\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#multi-player-collaboration-resilient-websockets-and-graphql-subscriptions)\n\n*   Description: Meshery's current implementation of websockets and GraphQL subscriptions is in need of refactoring for increased reliability and resiliency. This client and server-side refactoring includes use of webworkers and separation of concerns for the client-side, and the use of a message broker for the server-side. The project has implications on Meshery's implementation of multi-player collaboration functionality.\n    \n*   Expected Outcome: Resilient websockets and GraphQL subscriptions for Meshery, enabling multi-player collaboration functionality.\n    \n*   Recommended Skills: Golang, Kubernetes, Azure, well-written and well-spoken English\n    \n*   Expected project size: large (~175 hour project)\n    \n*   Mentor(s):\n    \n    *   Lee Calcote (@leecalcote, [leecalcote@gmail.com](mailto:leecalcote@gmail.com))\n    *   Aabid Sofi (@aabidsofi19, [mailtoaabid01@gmail.com](mailto:mailtoaabid01@gmail.com))\n*   Upstream Issue: [meshery/meshery#13554](https://github.com/meshery/meshery/issues/13554)\n    \n\n##### Support for Azure in Meshery\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#support-for-azure-in-meshery)\n\n*   Description: Enhance Meshery's existing orchestration capabilities to include support for Azure. The [Azure Service Operator](https://azure.github.io/azure-service-operator/)Azure Service Operator (ASO) provides a wide variety of Azure Resources via Kubernetes custom resources. as first-class [Meshery Models](https://docs.meshery.io/concepts/logical/models). This involves enabling Meshery to manage and orchestrate Azure services and their resources, similar to how it handles other Kubernetes resources. The project will also include generating support for Azure services and their resources in Meshery's Model generator.\n    \n*   Expected Outcome: Meshery will be able to orchestrate and manage all Azure services supported by ASO. This includes the ability to discover, configure, deploy, and operate the lifecycle of Azure services through Meshery. The Meshery Model generator will be updated to automatically generate models for Azure services, simplifying their integration and management within Meshery. This will be an officially supported feature of Meshery.\n    \n*   Recommended Skills: Golang, Kubernetes, Azure, well-written and well-spoken English\n    \n*   Expected project size: large (~175 hour project)\n    \n*   Mentor(s):\n    \n    *   Lee Calcote (@leecalcote, [leecalcote@gmail.com](mailto:leecalcote@gmail.com))\n    *   Mia Grenell (@miacycle, [mia.grenell2337@gmail.com](mailto:mia.grenell2337@gmail.com))\n*   Upstream Issue: [meshery/meshery#11244](https://github.com/meshery/meshery/issues/11244)\n    \n\n##### Distributed client-side inference (policy evaluation) with WebAssembly (WASM) and OPA in Meshery\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#distributed-client-side-inference-policy-evaluation-with-webassembly-wasm-and-opa-in-meshery)\n\n*   Description: Meshery's highly dynamic infrastructure configuration capabilities require real-time evaluation of complex policies. Policies of various types and with a high number of parameters need to be evaluted client-side. With policies expressed in Rego, the goal of this project is to incorporate use of the [https://github.com/open-policy-agent/golang-opa-wasm](https://github.com/open-policy-agent/golang-opa-wasm) project into Meshery UI, so that a powerful, real-time user experience is possible.\n    \n*   Expected Outcome: The goal of this project is to enhance Meshery's infrastructure configuration capabilities by incorporating real-time policy evaluation using the golang-opa-wasm project. This project will integrate the capabilities of golang-opa-wasm into the Meshery UI, enabling users to experience the existing, powerful, server-side policy evaluation client-side.\n    \n*   Recommended Skills: WebAssembly, Golang, Open Policy Agent, well-written and well-spoken English\n    \n*   Expected project size: large (~175 hour project)\n    \n*   Mentor(s): Lee Calcote (@leecalcote, [leecalcote@gmail.com](mailto:leecalcote@gmail.com)), James Horton (@hortison, [james.horton2337@gmail.com](mailto:james.horton2337@gmail.com))\n    \n*   Upstream Issue: [meshery/meshery#13555](https://github.com/meshery/meshery/issues/13555)\n    \n\n#### Open Cluster Management\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#open-cluster-management)\n\n##### Privacy-preserving and efficient AI model training across multi-cluster\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#privacy-preserving-and-efficient-ai-model-training-across-multi-cluster)\n\n*   Description: Open Cluster Management (OCM) streamlines multi-cluster workload management through APIs that align with SIG-Multicluster standards. Beyond traditional workload orchestration, OCM enables scalable AI training and inference across distributed environments.\n    \n    As machine learning (ML) expands across clusters, data privacy becomes a critical concern. ML models rely on vast datasets, making it essential to safeguard sensitive information across clusters without compromising model performance.\n    \n    This project integrates Federated Learning (FL) into OCM, enabling privacy-preserving, collaborative model training without transferring raw data between clusters. Instead, training occurs locally where the data resides, ensuring compliance, enhancing efficiency, and reducing bandwidth and storage costs.\n    \n    By leveraging OCM's Placement, ManifestWork, and other APIs. we standardize FL workflows and seamlessly integrate frameworks like Flower and OpenFL through a unified interface. This approach harnesses OCM's capabilities to deliver scalable, cost-efficient, and privacy-preserving AI solutions in multi-cluster environments.\n    \n*   Expected Outcome:\n    \n    *   Comprehensive Documentation:\n        *   Define the scenarios addressed by the prototype, highlighting its purpose and value.\n        *   Provide an intuitive and architectural comparison between **Federated Learning (FL)** and **OCM**, mapping FL terminology to OCM APIs to showcase OCM’s native support for FL.\n        *   Illustrate the complete **Federated Learning workflow** within **Open Cluster Management**.\n    *   Extended Prototype (or CRD) Support:\n        *   Enable model aggregation persistence in **AWS S3** (currently supports only **native PVC**).\n        *   Extend compatibility to support additional **Federated Learning frameworks** like [OpenFL](https://github.com/securefederatedai/openfl) (currently supports **Flower**). This requires understanding how **OpenFL** works, containerizing it, and integrating it into the prototype.\n*   Recommended Skills: Golang, Kubernetes, Federated Learning, Open Cluster Management, Scheduling\n    \n*   Expected project size: medium (~175 hour projects)\n    \n*   Mentor(s):\n    \n    *   Meng Yan (@yanmxa, [myan@redhat.com](mailto:myan@redhat.com)) - primary\n    *   Qing Hao (@haoqing0110, [qhao@redhat.com](mailto:qhao@redhat.com))\n*   Upstream Issue (URL): [open-cluster-management-io/ocm#825](https://github.com/open-cluster-management-io/ocm/issues/825)\n    \n\n#### ORAS\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#oras)\n\n##### Enhance Java ORAS SDK\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#enhance-java-oras-sdk)\n\n*   Description: The ORAS project aims to enhance its Java SDK to support a broader range of features from the OCI Distribution spec. This involves implementing missing functionality, improving existing features, and expanding the SDK’s overall capabilities.\n*   Expected Outcome:\n    *   Implement missing features from the OCI Distribution and Image Specifications, such as [chunked uploads](https://github.com/opencontainers/distribution-spec/blob/main/spec.md#pushing-blobs) and the [Referrers API](https://github.com/opencontainers/distribution-spec/blob/main/spec.md#endpoints)\n    *   Improve existing features, robustness and tests to ensure full compatibility with the OCI Distribution and Image Specifications.\n    *   Enhance documentation and provide more comprehensive examples.\n    *   Add support for additional authentication methods, including using credentials from docker config.json\n*   Recommended Skills: java, oci\n*   Expected project size: medium (~175 hour projects)\n*   Mentor(s):\n    *   Valentin Delaye (@jonesbusy, [jonesbusy@gmail.com](mailto:jonesbusy@gmail.com)) - primary\n    *   Feynman Zhou (@FeynmanZhou, [zpf0610@gmail.com](mailto:zpf0610@gmail.com))\n*   Upstream Issues: [https://github.com/oras-project/oras-java/issues](https://github.com/oras-project/oras-java/issues)\n\n#### The Update Framework (TUF)\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#the-update-framework-tuf)\n\n##### Snapshot Merkle trees\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#snapshot-merkle-trees)\n\n*   Description: The TUF [_snapshot_ role](https://theupdateframework.com/docs/metadata/) is responsible for consistency proofs in a TUF repository. In certain high-volume repositories, the related snapshot metadata file can become prohibitively large, and thus impose a significant overhead for TUF clients. [TAP 16](https://github.com/theupdateframework/taps/blob/master/tap16.md) proposes a method for reducing the size of snapshot metadata a client must download without significantly weakening the security properties of TUF. In this project you will add TAP 16 support to [python-tuf](https://github.com/theupdateframework/python-tuf).\n*   Expected Outcome: Snapshot Merkle trees are implemented in python-tuf Metadata API and `ngclient`\n*   Recommended Skills: Python, data structures (merkle trees)\n*   Expected project size: medium (~175 hour projects)\n*   Mentor(s):\n    *   Lukas Pühringer (@lukpueh) - primary\n    *   Justin Cappos (@JustinCappos)\n*   Upstream Issue (URL): [theupdateframework/taps#134](https://github.com/theupdateframework/taps/issues/134)\n\n#### Vitess\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#vitess)\n\n##### Enhancements for FAQ Chatbot for Vitess\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#enhancements-for-faq-chatbot-for-vitess)\n\n*   Description: Vitess is a distributed database system built on MySQL. Developers often need to search through documentation, Slack discussions, and GitHub issues to find answers. We are starting a project to implement an AI-powered FAQ chatbot using **Retrieval-Augmented Generation**, integrating **vector search** with an **LLM** (such as OpenAI, DeepSeek, GPT-4, Mistral, Llama 3). The chatbot will be available via a **CLI and Slack bot** for developer support.\n    \n    In the next phase, which will be implemented in this Summer Of Code (SOC) project, we will be adding more features like:\n    \n    *   Content filtering for chatbot safety and response validation\n    *   Fine-tuning the model for improved accuracy\n    *   Pipelines for refreshing data from new/updated docs\n    *   Caching previous replies to reduce LLM costs\n    *   Rate-limiting\n    *   Better benchmarking for iterative improvements\n    *   User feedback integration to improve relevancy\n*   Expected Outcome: Improved chatbot that provides accurate Vitess-related answers via CLI and Slack, using indexed documentation and discussions for retrieval.\n    \n*   Recommended Skills: golang, python, LLM APIs, vector databases\n    \n*   Expected project size: large (~350 hour projects)\n    \n*   Mentor(s):\n    \n    *   Rohit Nayak (@rohit-nayak-ps, [rohit@planetscale.com](mailto:rohit@planetscale.com))\n    *   Manan Gupta (@GuptaManan100, [manan@planetscale.com](mailto:manan@planetscale.com))\n*   Upstream Issue: [vitessio/vitess#17690](https://github.com/vitessio/vitess/issues/17690)\n    \n\n#### WasmEdge\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#wasmedge)\n\n##### Virtual filesystem security for WasmEdge plug-ins with exporting WASI APIs\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#virtual-filesystem-security-for-wasmedge-plug-ins-with-exporting-wasi-apis)\n\n*   Description: The WASI proposal defines the variety of rules to guarantee the virtual filesystem security and isolation when executing WASM binaries. However, besides using WASI directly in WASM, developers can also implement the host functions to access the filesystem in their guest programming language. This will break the sandbox of WebAssembly. In this program, our goal is to export the WASI APIs in WasmEdge, and use the APIs in WasmEdge plug-ins to ensure the filesystem security and WebAssembly isolation.\n*   Expected Outcome:\n    *   Export needed WASI APIs in WasmEdge internal to provide the functions of checking and accessing host filesystem.\n    *   Apply the APIs in some WasmEdge plug-ins which accessing the filesystem, such as WASI-NN.\n    *   Implement test suites to verify the above behaviors.\n*   Recommended Skills:\n    *   C++\n    *   WebAssembly\n*   Expected project size: Large (~350 hour projects)\n*   Mentor(s):\n    *   YiYing He (@q82419 , [yiying@secondstate.io](mailto:yiying@secondstate.io)) - Primary\n    *   Shen-Ta Hsieh (@ibmibmibm , [beststeve@secondstate.io](mailto:beststeve@secondstate.io))\n*   Upstream Issue (URL): [WasmEdge/WasmEdge#4012](https://github.com/WasmEdge/WasmEdge/issues/4012)\n\n##### Port WasmEdge and the WASI-NN ggml backend to the s390x platform\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#port-wasmedge-and-the-wasi-nn-ggml-backend-to-the-s390x-platform)\n\n*   Description: WasmEdge provides cross-platform support for amd64 and arm64 for executing AI/LLM applications. We would like to support as many new hardware platforms as possible, so developers and users will no longer need to worry about the actual hardware. All they need to do is develop their AI agent or LLM applications once and deploy their services anywhere. For more information, please check the upstream issue.\n*   Expected Outcome:\n    *   Make the WasmEdge toolchain support the s390x platform, including the interpreter and the AOT mode.\n    *   Ensure the WASI-NN ggml plugin can execute without any issues on the s390x platform.\n    *   Implement test suites to verify the above behaviors.\n    *   Write a document discussing the compilation, installation, execution, and verification of the work.\n*   Recommended Skills:\n    *   C++\n    *   s390x\n    *   LLVM\n*   Expected project size: Large (~350 hour projects)\n*   Mentor(s):\n    *   Hung-Ying Tai (@hydai, [hydai@secondstate.io](mailto:hydai@secondstate.io)) - Primary\n    *   dm4 (@dm4, [dm4@secondstate.io](mailto:dm4@secondstate.io))\n*   Upstream Issue (URL): [WasmEdge/WasmEdge#4010](https://github.com/WasmEdge/WasmEdge/issues/4010)\n\n##### Use Runwasi with WasmEdge runtime to test multiple WASM apps as cloud services\n\n[](https://github.com/cncf/mentoring/blob/main/programs/summerofcode/2025.md#use-runwasi-with-wasmedge-runtime-to-test-multiple-wasm-apps-as-cloud-services)\n\n*   Description: With WasmEdge serving as one of Runwasi’s standard runtimes, and as our C++-implemented library continues to evolve, we also need a verification process integrated into Runwasi to streamline and validate the stability of both container and cloud environments.\n*   Expected Outcome:\n    *   A concise GitHub workflow demonstrates Runwasi end-to-end testing on Kubernetes.\n        *   Need to design an interactive application scenario that supports multiple nodes\n        *   Try to incorporate the use of the WasmEdge plugin into this scenario\n    *   Document\n*   Recommended Skills:\n    *   Rust\n    *   C++\n    *   GDB\n    *   git / github workflow\n    *   shell script\n*   Expected project size: Large (~350 hour projects)\n*   Mentor(s):\n    *   Vincent (@CaptainVincent, [vincent@secondstate.io](mailto:vincent@secondstate.io)) - Primary\n    *   yi (@0yi0 [yi@secondstate.io](mailto:yi@secondstate.io))\n*   Upstream Issue (URL): [WasmEdge/WasmEdge#4011](https://github.com/WasmEdge/WasmEdge/issues/4011)\n"}