{"name":"GNU Radio","description":"The free & open software radio ecosystem","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/gnu-radio","ideas_url":"https://wiki.gnuradio.org/index.php?title=GSoCIdeas","logo":"https://summerofcode.withgoogle.com/media/org/gnu-radio/v1g5y6exzlwgfulv-360.png","technologies":["python","c++","qt","simd"],"topics":["real-time","dsp","communications engineering","cybersecurity","Software-Defined Radio"],"projects":[{"project_name":"FM Broadcast Radio application","summary":"Create an FM broadcast receiver that automatically scans frequencies, builds a channel list, and allows users to tune in, enhancing user interface and signal processing integration.","difficulty":"Easy"},{"project_name":"5G Cell Scanner","summary":"Develop a cell scanner using GNU Radio to decode cell signals and provide detailed information about connectivity, with potential for simultaneous frequency band observation.","difficulty":"Medium"},{"project_name":"Expanding the GNU Radio 4.0 Block Set","summary":"Migrate existing GR 3.x signal processing blocks to GR 4.0, facilitating application development with a more extensive block library.","difficulty":"Medium"},{"project_name":"Graphical interoperability between CyberEther and GNU Radio","summary":"Integrate CyberEther graphical sinks into GNU Radio for enhanced data visualization through a user-friendly GUI workflow.","difficulty":"Medium"},{"project_name":"GPU Accelerated Signal Processing Blocks","summary":"Create a library of GPU-accelerated processing blocks using CUDA to enhance the performance of signal processing routines within GNU Radio.","difficulty":"Medium"},{"project_name":"GRC and GR 4.0","summary":"Update GRC to integrate with the new plugin architecture of GNU Radio 4.0, allowing dynamic flowgraph construction and better block introspection.","difficulty":"Challenging"},{"project_name":"Revitalize in-tree and out-of-tree (OOT) modules","summary":"Update OOT modules and in-tree blocks to be compatible with recent GNU Radio versions, improving usability and functionality.","difficulty":"Easy - Medium"},{"project_name":"CI for maintenance branches and select OOT modules","summary":"Implement continuous integration for GNU Radio maintenance branches to streamline testing and facilitate package distribution.","difficulty":"Easy"}],"jina_response":"Title: GSoCIdeas - GNU Radio\n\nURL Source: https://wiki.gnuradio.org/index.php?title=GSoCIdeas\n\nMarkdown Content:\nNote- also check out [Grant Ideas](https://wiki.gnuradio.org/index.php?title=Grant_Ideas \"Grant Ideas\") for additional ideas that are more suited towards grant money than GSoC.\n\nSummer of Code 2025: Project ideas list\n---------------------------------------\n\nThis is the list of project ideas for the summer of code 2025 within GNU Radio.  \nRemember that these are **ideas** and are merely meant as an inspiration for you to write your own proposal.\n\nStudents who do not find a fit among these projects are encouraged to engage with us and suggest new ones. The [GNU Radio discussion mailing list](https://wiki.gnuradio.org/index.php?title=MailingLists \"MailingLists\") is the best place to contact all of us. Please do not contact us off-list for the sake of discussing the summer of code, unless you're contacting a mentor listed here to get feedback on a proposal.\n\nReviewing the [Google GSoC FAQ](https://developers.google.com/open-source/gsoc/faq) page for a broader understanding of project, mentor, and student responsibilities is recommended.\n\nIf you need a USRP or other radio hardware to complete the project, we will be able to arrange something.\n\nPlease add ideas to this list (you may cannibalize old ideas, of course!).\n\nGuidelines for good projects (when suggesting projects, please consider these):\n\n*   Clearly defined scope, with a main target that can be done in 3 months\n*   Clear benefits for the GNU Radio project\n*   Not specific to a certain hardware. No specific embedded devices, either, please.\n*   Both OOTs and in-tree improvements are welcome\n\n### FM Broadcast Radio application\n\nGNU Radio has built-in capabilities to receive, decode and play FM broadcast radio stations. With additional projects [https://github.com/bastibl/gr-rds](https://github.com/bastibl/gr-rds) we are able to decode RDS data alongside. The project does not (yet) have a fully fledged demo application which would allow potential users and beginners to see how to build a production-grade application (almost). The goal for this project is to build an application which works plug&play with many SDRs and automatically scans (all) potential FM broadcast frequencies, gives a channel list and allows users to tune/select a radio station they would like to listen to.\n\nTherefore one part of the project is to focus on a polished user experience in the frontend application. Since this should be a good demo the other part of the project should focus on developing a well-functioning flowgraph with the existing signal processing blocks and potentially also porting gr-rds to a newer GNU Radio and/or integrating it in the GNU Radio source tree. This flowgraph should then be started/halted on demand of the frontend application. Potentially multiple streams could be recorded at the same time or decoded and some of the signal processing signals can be shown in a debug view so potential beginners and users can perform introspection on the application.\n\n**Prerequisites**\n\n*   Programming skills in Python\n*   Interest in designing a functional and polished graphical user interface\n*   Preferred: Familiarity with basic signal processing libraries in Python (e.g., SciPy).\n*   Interest working with real radio signals\n\n**Expected Outcome**\n\n*   Fully fledged FM broadcast receiver application with integrated RDS and spectrum scanning\n*   A clean example application which shows how the signal processing can be combined well with a GUI\n\n**Project Length**\n\n*   Small (100 hours) – Medium (200 hours)\n\n**Difficulty'**\n\n*   Easy\n\n**Mentor(s)**\n\n*   Andrej Rode\n\n### 5G Cell Scanner\n\nCell scanning by passively observing the RF environment using an SDR and decoding received signals based on the waveforms defined in the 2G/3G/4G/5G standards is a well-established approach for assessing cellular connectivity in the surrounding environment. While multiple cell scanners are publicly available, they often employ opaque signal processing methods and frequently cease analysis prematurely, failing to provide detailed information about the cells. This includes not decoding the Master Information Block (MIB) and the System Information Block (SIB1) to extract cell properties and signal quality metrics. Our objective is to develop a high-quality cell scanner using GNU Radio in a transparent way that delivers the most information possible (depending on the cells’ signal levels) in a trustable manner. The general procedure will be based on the initial synchronization and cell identification process on the user-equipment side of 5G (see further reads). Depending on the student’s experience, we can also go a step further and parallelize the cell scanning process by observing multiple frequency bands simultaneously by applying channelization and parallel processing techniques to the signal.\n\n**Prerequisites**\n\n*   Proficiency with GNU Radio.\n*   Basic programming skills in Python.\n*   Preferred: Familiarity with basic signal processing libraries in Python (e.g., SciPy).\n*   Preferred: General understanding of the 5G waveform and experience with 5G processing libraries in Python.\n\n**Expected Outcome**\n\n*   Development of an Out-Of-Tree (OOT) module or flowgraphs capable of interacting with SDR input streams and automatically generating detailed visualizations of cell search results.\n*   Capability to export results as a function of time and SDR location to enable the creation of coverage maps.\n\n**Further Reads**\n\n*   [https://de.mathworks.com/help/5g/ug/nr-cell-search-and-mib-and-sib1-recovery.html](https://de.mathworks.com/help/5g/ug/nr-cell-search-and-mib-and-sib1-recovery.html)\n*   [https://de.mathworks.com/help/5g/gs/synchronization-signal-blocks-and-bursts.html](https://de.mathworks.com/help/5g/gs/synchronization-signal-blocks-and-bursts.html)\n\n**Project Length**\n\n*   Small (100 hours) – Medium (200 hours)\n\n**Difficulty'**\n\n*   Medium\n\n**Mentor(s)**\n\n*   Michael Petry\n*   Andrej Rode\n\n### Expanding the GNU Radio 4.0 Block Set\n\nGNU Radio 4.0 has reached a stage where real signal processing applications can achieve performance improvements over GNU Radio 3.x. To maximize its adoption, we aim to expand the set of available blocks, making it easier for the community to build applications with readily available components. The goal of this project is to migrate existing GR 3.x blocks (e.g. gr-digital, gr-analog, gr-audio ...) into GR 4.0. A good list of blocks in GR3 that should be ports has been maintained here: [\\[1\\]](https://github.com/fair-acc/gnuradio4/issues/161)\n\n**Prerequisites**\n\n*   Knowledge of modern C++\n*   Signal processing understanding\n\n**Outcome**\n\n*   GR4 OOT module with a substantial number of blocks\n*   Each block should have CI tests and an example flowgraph\n*   Document the process so that other block developers can be guided\n\n**Project length**\n\nLong (350 hours)\n\n**Difficulty**\n\nMedium\n\n**Mentor(s)**\n\nJohn Sallay, Josh Morman\n\n### Graphical interoperability between CyberEther and GNU Radio\n\nThe [CyberEther](https://github.com/luigifcruz/CyberEther) project comes with some neat graphical sinks that would be great to have access to in GNU Radio. This project entails creating a new CyberEther GUI workflow much like the [gr-bokehgui](https://github.com/gnuradio/gr-bokehgui) project, such that users can create flowgraphs with CyberEther sinks. This would allow the user to visualize GNU Radio data streams in one of the high-performance CyberEther plots (lineplot, waterfall, spectrogram, etc).\n\n**Prerequisites**\n\n*   Knowledge of C++ and some Python\n*   Familiarity with graphical APIs (OpenGL, Vulkan, Metal)\n*   Basic Qt understanding\n\n**Outcome**\n\n*   OOT module with CyberEther sinks\n*   Support for both GNU Radio main branch and 3.10?\n\n**Project length**\n\nLong (350 hours)\n\n**Difficulty**\n\nMedium\n\n**Mentor(s)**\n\nLuigi Cruz, Håkon Vågsether\n\n### GPU Accelerated Signal Processing Blocks\n\nGPUs offer incredible capability for accelerating a number of signal processing routines when the calculations can be done in parallel. Also, GNU Radio 3.10 brought in a \"custom buffers\" feature which provides support generally for accelerator devices by allowing blocks to have direct access to device memory, finally making accelerator processing feasible through a flowgraph (see [FOSDEM 2022 Presentation](https://fosdem.org/2022/schedule/event/radio_gr3_10/).\n\nOne piece that is missing for GNU Radio is a library of blocks that accelerate common DSP routines. There are several interesting libraries of GPU accelerated signal processing - primarily using CUDA because of its accessible programming paradigm and the ubiquity of NVIDIA hardware:\n\n*   [Matx](https://github.com/NVIDIA/MatX)\n*   [cuSignal](https://github.com/rapidsai/cusignal) (Python signal processing)\n*   [CUSP](https://github.com/gnuradio/cusp)\n\nIntegration of any of this functionality, along with additional kernels for signal processing would need to be predicated on using [gr-cuda](https://github.com/gnuradio/gr-cuda) custom buffers, and expanding this module as needed\n\nThis project can be broken into several subprojects:\n\n*   Create gr-matx OOT\n    *   Add Matx Custom Buffer Type (after gr-cuda)\n    *   Create blocks wrapping Matx operations\n*   Expand gr-cuda\n    *   Additional custom buffer types - pinned, unified\n    *   Create python custom buffers allowing zero copy into python blocks\n*   Create gr-cuSignal\n    *   Wrap cuSignal functionality (dependent on python zero copy)\n*   Replicate existing GR blocks as CUDA accelerated (things not in cuSignal or Matx)\n    *   Target for extensions to Matx, cuSignal, or CUSP (within our control)\n    *   FIR Filters\n    *   Polyphase Resampler\n    *   Signal Source\n    *   Moving Average\n    *   Polyphase Clock Sync\n    *   Stream Operators\n    *   ...\n\n**Prerequisites**\n\n*   Knowledge of C++ and Python.\n*   Familiarity with CUDA programming\n\n**Outcome**\n\nDepends on chosen subprojects (see above).\n\n**Project length**\n\n350 hours\n\n**Difficulty**\n\nMedium\n\n**Mentor(s)**\n\nJosh Morman, Andrej Rode\n\n### GRC and GR 4.0\n\nDevelopment of GR 4.0 is progressing quickly. In the current runtime prototype a plugin architecture is used to properly register blocks with the runtime. This allows a more dynamic construction of flowgraphs and introspection into the blocks. But this means the current way of assembling a flowgraph by generating a Python or C++ file needs updates.\n\nThe idea is to port and change necessary parts of GRC (Qt development version) to use the block registry in the new GNU Radio runtime [https://github.com/gnuradio/gnuradio4/](https://github.com/gnuradio/gnuradio4/) and assemble some of the example flowgraphs defined in GRC files and make them run. The design for this is not finalized and therefore you will have freedom to propose your ideas.\n\n**Prerequisites**\n\n*   Good Knowledge of C++ and Python\n*   Experience with inter-language bindings (not necessarily C++ & Python) is useful\n*   Basic Qt understanding\n\n**Outcome**\n\n*   Prototype integration of GRC with the new plugin architecture of GR 4.0\n\n**Project length**\n\nLong (350 hours)\n\n**Difficulty**\n\nChallenging\n\n**Mentor(s)**\n\nAndrej Rode, Josh Morman\n\n### Revitalize in-tree and out-of-tree (OOT) modules\n\nA lot has changed since version 3.7, and GNU Radio has made great technical strides the last few years. However, some OOT modules haven't been updated to support the latest versions of GNU Radio, and these modules currently require the user to install an older version of the framework. This is unfortunate, and lowers the useability of GNU Radio as a whole. Some of these modules have been superseded by others, but might still have some blocks or flowgraphs that are useful, and these could be updated and moved in-tree. Some in-tree modules are also in need of attention, like gr-wavelet, which does not have any examples.\n\n**Prerequisites**\n\n*   Knowledge of C++, Python and DSP.\n\n**Outcome**\n\n*   More example code, tests and flowgraphs for various in-tree modules\n*   Porting various OOT modules to support recent versions of GNU Radio\n*   Possibly blocks/flowgraphs from old OOT modules moved in-tree\n\n**Project length**\n\nSmall (90 hours) - Medium (175 hours)\n\n**Difficulty**\n\nEasy - Medium\n\n**Mentor(s)**\n\nAndrej Rode, Håkon Vågsether\n\n### CI for maintenance branches and select OOT modules\n\nIt would be useful to have nightly builds for GNU Radio's maintenance branches (3.8, 3.9, 3.10) and some select OOTs.\n\n**Prerequisites**\n\n*   Experience with Docker?\n*   ?\n\n**Outcome**\n\n*   Automated PPAs, Snaps, Flatpak apps\n\n**Project length**\n\n175 hours\n\n**Difficulty**\n\nEasy\n\n**Mentor(s)**\n\nHåkon Vågsether, ?\n\nOld Ideas\n---------\n\nFeel free to browse [old ideas](https://wiki.gnuradio.org/index.php?title=OldGSoCIdeas) from previous years for inspiration.\n"}