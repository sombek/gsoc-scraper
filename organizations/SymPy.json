{"name":"SymPy","description":"SymPy is a Python library for symbolic mathematics","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/sympy","ideas_url":"https://github.com/sympy/sympy/wiki/GSoC-Ideas","logo":"https://summerofcode.withgoogle.com/media/org/sympy/iz2tcxocrknp1sm0-360.png","technologies":["python","numpy","jupyter"],"topics":["mathematics","physics","symbolic mathematics"],"projects":[{"project_name":"GSoC Ideas","summary":"A compilation of project ideas for students interested in applying for Google Summer of Code (GSoC) with SymPy. The list provides various directions that students can explore to contribute to the SymPy library and encourages discussion with mentors.","difficulty":"Varied"},{"project_name":"Project length","summary":"GSoC projects are categorized by length, with durations of 90, 175, or 350 hours specified based on the project's scope. Some projects can be extended or condensed based on discussions with mentors.","difficulty":"Varied"},{"project_name":"Submitting Your Own Idea","summary":"Students are encouraged to propose their own ideas for GSoC projects, focusing on areas they are passionate and knowledgeable about. Ideas must be discussed with mentors beforehand to ensure they fit within SymPy's scope.","difficulty":"Varied"},{"project_name":"Potential Mentors","summary":"A list of potential mentors who are available to guide students during their GSoC projects. Mentors have varying expertise in different areas of SymPy.","difficulty":"N/A"},{"project_name":"High Priority Section","summary":"This section highlights high priority ideas such as Polynomial GCD, Benchmarks and Performance, and Assumptions, which are particularly critical to the SymPy community.","difficulty":"Varied"},{"project_name":"Mathematics Projects","summary":"A set of ideas focused on advancing mathematics functionalities within SymPy. Examples include improvements to solvers, integration algorithms, and polynomial handling.","difficulty":"Varied"},{"project_name":"Physics Projects","summary":"Project ideas targeted at enhancing SymPy's physics-related capabilities, including control systems, quantum mechanics, and continuum mechanics.","difficulty":"Varied"},{"project_name":"Computer Science, Graphics, and Infrastructure Projects","summary":"Projects aimed at improving the computational and graphical infrastructure of SymPy, including LLM integration, code generation, and plotting enhancements.","difficulty":"Varied"},{"project_name":"User Application Projects","summary":"Ideas that focus on applying SymPy's functionalities in various user-oriented applications or domains.","difficulty":"Varied"},{"project_name":"Idea Prompts","summary":"Prompts for potential project ideas across different areas of mathematics, physics, and computer science, encouraging creative solutions to existing challenges.","difficulty":"Varied"},{"project_name":"Other Related Projects","summary":"Additional projects and extensions related to the main SymPy functionality that can further enhance its application and community contributions.","difficulty":"Varied"},{"project_name":"Non-Ideas","summary":"A list of ideas and projects that have been deemed out of scope or inappropriate for inclusion in the SymPy project based on community discussions.","difficulty":"N/A"}],"jina_response":"Title: GSoC Ideas\n\nURL Source: https://github.com/sympy/sympy/wiki/GSoC-Ideas\n\nMarkdown Content:\nIntroduction\n------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#introduction)\n\nThis is the list of ideas for students wishing to apply for Google Summer of Code. For more information on how to apply, see the [GSoC Student Instructions](https://github.com/sympy/sympy/wiki/GSoC-Student-Instructions). This list is here for inspiration and to give students an idea of what directions may be good for SymPy.\n\nIf you want to pursue an idea listed here, you should contact us on our [mailing list](http://groups.google.com/group/sympy) and discuss it. **Be sure to always ask about these ideas to get the latest information about what is implemented and what exactly has to be done.**\n\nThe order of ideas in this list has no bearing to the chances of an idea to be accepted. All of them are equally good and your chances depend on the quality of your application. Also do not worry if there are no mentors assigned to a given idea. If the application is good, we will find a mentor. As already said, you can very well submit your own idea not listed here.\n\nProject length\n--------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#project-length)\n\nGSoC allows three different project lengths, 90 hours, 175, hours and 350 hours. The ideas below specify which project length is the best fit.\n\nIn some cases, it may be possible to extend a smaller project into a larger one by extending the ideas of what can be done in the project. Similarly, in some cases a larger project can be shortened by only implementing part of the full idea and leaving the rest for a future project. In either case, if you want to do this, please discuss it with us first.\n\nSubmitting Your Own Idea\n------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#submitting-your-own-idea)\n\nYou can apply with something completely different if you like. The best project for you is one you are interested in, and are knowledgeable about. That way, you will be the most successful in your project and have the most fun doing it, while we will be the most confident in your commitment and your ability to complete it.\n\nIf you do want to suggest your own idea, please [discuss it](http://groups.google.com/group/sympy) with us first, so we can determine if it is already been implemented, if it is enough work to constitute a summer's worth of coding, if it is not too much work, and if it is within the scope of our project.\n\nPlease be aware that some ideas are specifically [out of scope for SymPy](https://github.com/sympy/sympy/wiki/GSoC-Ideas#non-ideas) and may be a better fit for other GSoC organizations. Also be aware that ideas that propose completely new modules to SymPy are less likely to be accepted, unless they have already been mentioned on this page or somewhere in the SymPy issue tracker. This is because most of the things that are in-scope for SymPy already have at least a partial implementation in a submodule in SymPy. However, many of these things are not fleshed out very well yet and doing so can often make a good project. If you are unsure, it doesn't hurt to ask us.\n\nPotential Mentors\n-----------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#potential-mentors)\n\nIf you are willing to mentor, please add yourself here. Also please register at [https://summerofcode.withgoogle.com](https://summerofcode.withgoogle.com/) and add your email that you registered with. Finally, list your name with any projects below that you would be willing to mentor.\n\n(Note from Aaron, the org admin: if your name is on this list, I'm assuming you're willing to either mentor or at least help review applications. If you aren't able to help this year, please remove your name from the list. If you have any questions about mentoring feel free to email me.)\n\n*   Aaron Meurer - [asmeurer@gmail.com](mailto:asmeurer@gmail.com)\n*   Oscar Benjamin - [oscar.j.benjamin@gmail.com](mailto:oscar.j.benjamin@gmail.com)\n*   Sachin Agarwal - [sachinagarwal0499@gmail.com](mailto:sachinagarwal0499@gmail.com) (for `sympy.series`)\n*   Smit Lunagariya - [smitplunagariya@gmail.com](mailto:smitplunagariya@gmail.com)\n*   Francesco Bonazzi - [franz.bonazzi@gmail.com](mailto:franz.bonazzi@gmail.com)\n*   Amit Kumar - [dtu.amit@gmail.com](mailto:dtu.amit@gmail.com) (for `sympy.solvers`)\n*   Jason Moore - [moorepants@gmail.com](mailto:moorepants@gmail.com) (physics.vector/mechanics/biomechanics, parsing.autolev, utilities.autowrap/codegen/lambdify)\n*   Yathartha Joshi - [yathartha32@gmail.com](mailto:yathartha32@gmail.com)\n*   Naman Gera - [namangera15@gmail.com](mailto:namangera15@gmail.com) (for `sympy.physics`)\n*   Akshansh Bhatt - [qaz.akshansh@gmail.com](mailto:qaz.akshansh@gmail.com) (for `sympy.physics.control`)\n*   Ishan Joshi - [ishanaj98@gmail.com](mailto:ishanaj98@gmail.com)\n*   Nijso Beishuizen - [nijso.beishuizen@gmail.com](mailto:nijso.beishuizen@gmail.com) (for ode and pde solvers)\n*   Faisal Riyaz - [faisalriyaz011@gmail.com](mailto:faisalriyaz011@gmail.com)\n*   Prakhar Saxena - [prakharrsaxena@gmail.com](mailto:prakharrsaxena@gmail.com) (for `sympy.physics.continuum_mechanics`)\n*   Naveen Sai - [naveensaisreenivas@gmail.com](mailto:naveensaisreenivas@gmail.com)\n*   Sudeep Sidhu - [sudeepmanilsidhu@gmail.com](mailto:sudeepmanilsidhu@gmail.com) (physics.vector/mechanics)\n*   Mohit Balwani - [mohitbalwani.ict17@gmail.com](mailto:mohitbalwani.ict17@gmail.com) (for `sympy.solvers.ode`)\n*   Sidharth Mundhra - [sidharthmundhra16@gmail.com](mailto:sidharthmundhra16@gmail.com) (for 'sympy.series')\n*   Mohit Gupta - [mohitgupta6678@gmail.com](mailto:mohitgupta6678@gmail.com)\n*   Nikhil Maan - [nikhilmaan22@gmail.com](mailto:nikhilmaan22@gmail.com)\n*   Advait Pote - [apote2050@gmail.com](mailto:apote2050@gmail.com) (for `sympy.physics.continuum_mechanics`)\n*   Anurag Bhat - [anuragbhatgsoc23@gmail.com](mailto:anuragbhatgsoc23@gmail.com)\n*   Anutosh Bhat - [anutosh.bhat.21@gmail.com](mailto:anutosh.bhat.21@gmail.com) (for `sympy.series`, `sympy.concrete`)\n*   Timo Stienstra - [timostienstra00@gmail.com](mailto:timostienstra00@gmail.com) (for `sympy.physics.mechanics`/`vector`/`biomechanics`)\n*   Ishan Pandhare - [ishan9096137017@gmail.com](mailto:ishan9096137017@gmail.com)\n*   Peter Stahlecker - [peter.stahlecker@gmail.com](mailto:peter.stahlecker@gmail.com) (for `sympy.physics.mechanics` (Kane's method)\\`)\n*   Hwayeon Kang - [hwayeonniii@gmail.com](mailto:hwayeonniii@gmail.com) (for `sympy.physics.mechanics`)\n\nTable of Contents\n-----------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#table-of-contents)\n\n*   [High Priority](https://github.com/sympy/sympy/wiki/GSoC-Ideas#high-priority)\n    *   [Polynomial GCD](https://github.com/sympy/sympy/wiki/GSoC-Ideas#polynomial-gcd)\n    *   [Benchmarks and performance](https://github.com/sympy/sympy/wiki/GSoC-Ideas#benchmarks-and-performance)\n    *   [Assumptions](https://github.com/sympy/sympy/wiki/GSoC-Ideas#assumptions)\n*   [Mathematics Projects](https://github.com/sympy/sympy/wiki/GSoC-Ideas#mathematics-projects)\n    *   [Solvers](https://github.com/sympy/sympy/wiki/GSoC-Ideas#solvers)\n    *   [Optimize floating point expressions](https://github.com/sympy/sympy/wiki/GSoC-Ideas#optimize-floating-point-expressions)\n    *   [Group theory](https://github.com/sympy/sympy/wiki/GSoC-Ideas#group-theory)\n    *   [Risch algorithm for symbolic integration](https://github.com/sympy/sympy/wiki/GSoC-Ideas#risch-algorithm-for-symbolic-integration)\n    *   [Rule-based symbolic integration](https://github.com/sympy/sympy/wiki/GSoC-Ideas#rule-based-symbolic-integration)\n    *   [ODE ideas](https://github.com/sympy/sympy/wiki/GSoC-Ideas#ode-ideas)\n    *   [Improving Series Expansions & Limit Computations](https://github.com/sympy/sympy/wiki/GSoC-Ideas#improving-series-expansions--limit-computations)\n    *   [Cylindrical algebraic decomposition](https://github.com/sympy/sympy/wiki/GSoC-Ideas#cylindrical-algebraic-decomposition)\n    *   [Efficient Groebner bases and their applications](https://github.com/sympy/sympy/wiki/GSoC-Ideas#efficient-groebner-bases-and-their-applications)\n    *   [Multivariate polynomials and factorization](https://github.com/sympy/sympy/wiki/GSoC-Ideas#multivariate-polynomials-and-factorization)\n    *   [Univariate polynomials over algebraic domains](https://github.com/sympy/sympy/wiki/GSoC-Ideas#univariate-polynomials-over-algebraic-domains)\n    *   [Concrete module: Implement Karr algorithm, a decision procedure for symbolic summation](https://github.com/sympy/sympy/wiki/GSoC-Ideas#concrete-module-implement-karr-algorithm-a-decision-procedure-for-symbolic-summation)\n*   [Physics Projects](https://github.com/sympy/sympy/wiki/GSoC-Ideas#physics-projects)\n    *   [Symbolic Control Systems (`sympy.physics.control`)](https://github.com/sympy/sympy/wiki/GSoC-Ideas#symbolic-control-systems-sympyphysicscontrol)\n    *   [Symbolic quantum mechanics (`sympy.physics.quantum`)](https://github.com/sympy/sympy/wiki/GSoC-Ideas#symbolic-quantum-mechanics-sympyphysicsquantum)\n    *   [Continuum Mechanics: Create a Rich 2D Beam Solving System](https://github.com/sympy/sympy/wiki/GSoC-Ideas#continuum-mechanics-create-a-rich-2d-beam-solving-system)\n    *   [Classical Mechanics](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics)\n    *   [Classical Mechanics: Generalize the Equations of Motion System Output](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-generalize-the-equations-of-motion-system-output)\n    *   [Classical Mechanics: Implement and Benchmark Equations of Motion Methods](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-and-benchmark-equations-of-motion-methods)\n    *   [Classical Mechanics: Efficient Equations of Motion Generation](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-efficient-equations-of-motion-generation)\n    *   [Classical Mechanics: Implement Wrapping Geometry and Pathways for Musculoskeletal Modeling](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-wrapping-geometry-and-pathways-for-musculoskeletal-modeling)\n    *   [Classical Mechanics: Implement Specific Forces and Torques](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-specific-forces-and-torques)\n    *   [Classical Mechanics: Constructing Systems From Bodies and Joints](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-constructing-systems-from-bodies-and-joints)\n    *   [Classical Mechanics: Implement an O(N) Equations of Motion Method](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-an-on-equations-of-motion-method)\n*   [Computer Science, Graphics, and Infrastructure Projects](https://github.com/sympy/sympy/wiki/GSoC-Ideas#computer-science-graphics-and-infrastructure-projects)\n    *   [Official LLM Tool Agent for SymPy](https://github.com/sympy/sympy/wiki/GSoC-Ideas#official-llm-tool-agent-for-sympy)\n    *   [Enhancing the flexibility of MatchPy](https://github.com/sympy/sympy/wiki/GSoC-Ideas#enhancing-the-flexibility-of-matchpy)\n    *   [Code Generation](https://github.com/sympy/sympy/wiki/GSoC-Ideas#code-generation)\n    *   [Code Generation: Efficient Jacobian and Hessian Evaluation for Optimization and ODE Integration](https://github.com/sympy/sympy/wiki/GSoC-Ideas#code-generation-efficient-jacobian-and-hessian-evaluation-for-optimization-and-ode-integration)\n    *   [Parsing](https://github.com/sympy/sympy/wiki/GSoC-Ideas#parsing)\n    *   [Improve the plotting module](https://github.com/sympy/sympy/wiki/GSoC-Ideas#improve-the-plotting-module)\n    *   [Documentation tooling](https://github.com/sympy/sympy/wiki/GSoC-Ideas#documentation-tooling)\n    *   [Hypothesis testing](https://github.com/sympy/sympy/wiki/GSoC-Ideas#hypothesis-testing)\n*   [User Application Projects](https://github.com/sympy/sympy/wiki/GSoC-Ideas#user-application-projects)\n*   [LFortran SymPy Project Ideas](https://github.com/sympy/sympy/wiki/GSoC-Ideas#lfortran-sympy-project-ideas)\n    *   [SymPy -\\> Fortran Code Generation and JIT](https://github.com/sympy/sympy/wiki/GSoC-Ideas#sympy---fortran-code-generation-and-jit)\n    *   [Parsing Fortran code to SymPy](https://github.com/sympy/sympy/wiki/GSoC-Ideas#parsing-fortran-code-to-sympy)\n*   [Idea Prompts](https://github.com/sympy/sympy/wiki/GSoC-Ideas#idea-prompts)\n*   [Other Related Projects](https://github.com/sympy/sympy/wiki/GSoC-Ideas#other-related-projects)\n*   [Non-Ideas](https://github.com/sympy/sympy/wiki/GSoC-Ideas#non-ideas)\n\n**Mentors, please use the following template to add ideas to this page:**\n\n```\n## Title\n\n**Idea**\n\n(Specify your idea with proper explanation)\n\n**Status**\n\n(What is the Status of this Idea in the Sympy Community currently, previous\nwork done and Issues)\n\n**Involved Software**\n\n(Any other Software Involved that would be required to implement your idea)\n\n**Difficulty**\n\n(Advanced, Intermediate, or Beginner and any specific comments on the\ndifficulty)\n\n**Prerequisite Knowledge**\n\n(Any prerequisite knowledge or approach needed)\n\n**Project Length**\n\nWhether this project is appropriate for a 90, 175, or 350 hours GSoC project.\nThe same idea can have different project length sub-ideas.\n\nNOTE: This section is required by Google. Be sure to include it for\nany idea!\n```\n\nHigh Priority\n-------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#high-priority)\n\nPolynomial GCD\n--------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#polynomial-gcd)\n\n**Idea**\n\nAdd new algorithms for computing the greatest common divisor (GCD) of polynomials in the sparse representation. This would improve the speed of many parts of sympy such as matrices, solvers, integration and so on.\n\nThe issues and potential solutions along with many references are discussed in this issue: [https://github.com/sympy/sympy/issues/23131](https://github.com/sympy/sympy/issues/23131)\n\n**Status**\n\nThere is plenty of work that can be done in this area so this is effectively an open-ended area for improvement in sympy.\n\n**Involved Software**\n\n**Difficulty**\n\nMedium to high difficulty\n\n**Prerequisite Knowledge**\n\nPython, some understanding of abstract algebra and of algorithms.\n\n**Project Length**\n\n175 or 350 hours, depending on the scope of the project.\n\nBenchmarks and performance\n--------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#benchmarks-and-performance)\n\n**Idea**\n\nSpeed is important for SymPy. One issue is that it's difficult to tell what is too slow, and, more importantly, if a given change makes things faster or slower.\n\nSymPy needs more benchmarks. It also needs an automated system to run them. That way, when someone adds some code that slows things down in an unexpected way, we will know about it.\n\nThere are already some benchmarks at [https://github.com/sympy/sympy\\_benchmarks](https://github.com/sympy/sympy_benchmarks), and some others in the main SymPy repo. But not all benchmarks are in the sympy\\_benchmarks repo. Also, the repo uses asv, but the results are run and hosted _ad hoc_, as we don't have a dedicated machine to run the benchmarks.\n\nThis project should do the following:\n\n*   Move benchmarks from the sympy repo to the sympy\\_benchmarks repo.\n*   Add new benchmarks as needed.\n*   Work with the community to set up a dedicated machine that can constantly run asv to warn about benchmarks. It would also be nice if this could be set up to warn for performance regressions on PRs.\n*   Make improvements to SymPy to improve performance issues found throughout the project.\n*   Improve the usability of the current GitHub Actions bot that adds benchmarks outputs to pull requests.\n\nSome prior art:\n\n*   ASV (what we are using now)\n*   PyPy benchmarks page\n*   See [https://www.youtube.com/watch?v=d65dCD3VH9Q](https://www.youtube.com/watch?v=d65dCD3VH9Q) for some ideas/warnings about setting up benchmarking.\n*   See this issue for ways to run benchmarks on GitHub Actions [https://github.com/sympy/sympy/issues/21374](https://github.com/sympy/sympy/issues/21374).\n\n**Status**\n\nWe currently have a benchmarking suite and run the benchmarks on GitHub Actions, but this is limited and is often buggy.\n\n**Involved Software**\n\n**Difficulty**\n\nMedium to low difficulty\n\n**Prerequisite Knowledge**\n\nPython\n\n**Project Length**\n\n175 hours or 350 hours, depending on the scope of the project.\n\nAssumptions\n-----------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#assumptions)\n\n**Idea**\n\nThe project is to completely remove our old assumptions system, replacing it with the new one. The difference between the two systems is outlined in the first two sections of [this blog post](http://matthewrocklin.com/blog/work/2013/02/05/Assuming).\n\nThis project is challenging. It requires deep understanding of the core of SymPy, basic logical inference, excellent code organization, and attention to performance. It is also very important and of high value to the SymPy community.\n\nNumerous related tasks are mentioned in the \"Ideas\" section.\n\n**Status**\n\nThere has been a significant amount of merged and unmerged work on this topic. A list of detailed issues can be found at [this issue](https://github.com/sympy/sympy/issues/6730). You should take a look at the work started at [https://github.com/sympy/sympy/pull/2508](https://github.com/sympy/sympy/pull/2508).\n\n[This mailing list post](https://groups.google.com/d/msg/sympy/PHR136kdxc4/eW4pKFcWmzIJ) by Aaron Meurer outlines the status of the project and some ideas of what to do. It is from 2015 but most of what is written there is still true. The main thing that is new is that the new assumptions call the old assumptions (`ask(Q.real(Symbol('x', real=True)))`). See also the prior GSoC projects on assumptions, including [this one](https://github.com/sympy/sympy/wiki/GSoC-2015-Application-Sudhanshu-Mishra:-Assumptions), which was accepted, but there may be parts of it that were not completed, and [https://github.com/sympy/sympy/wiki/GSoC-2013-Application-Tom-Bachmann:-Removing-the-old-assumptions-module](https://github.com/sympy/sympy/wiki/GSoC-2013-Application-Tom-Bachmann:-Removing-the-old-assumptions-module), which was not accepted (the student chose to do another project), but contains some good ideas.\n\n**Involved Software**\n\nNone\n\n**Difficulty**\n\nAdvanced\n\n**Prerequisite Knowledge**\n\nNumber theory, Boolean algebra, etc.\n\n**Project Length**\n\n350 hours\n\nMathematics Projects\n--------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#mathematics-projects)\n\nSolvers\n-------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#solvers)\n\n**Idea**\n\nSymPy already has a pretty powerful `solve` function. But it has a lot of major issues\n\n1.  It doesn't have a consistent output for various types of solutions It needs to return a lot of types of solutions consistently:\n    \n    *   single solution : ` x == 1`\n    *   Multiple solutions: `x**2 == 1`\n    *   No Solution: `x**2 + 1 == 0; x is real`\n    *   Interval of solution: `floor(x) == 0`\n    *   Infinitely many solutions: `sin(x) == 0`\n    *   Multivariate functions with point solutions `x**2 + y**2 == 0`\n    *   Multivariate functions with non point solution `x**2 + y**2 == 1`\n    *   System of equations `x + y == 1` and `x - y == 0`\n    *   Relational `x > 0`\n    *   And the most important case \"We don't Know\"\n2.  The input API is also a mess, there are a lot of parameter. Many of them are not needed and they makes it hard for the user and the developers to work on solvers.\n    \n3.  There are cases like finding the maxima and minima of function using critical points where it is important to know if it has returned all the solutions. `solve` does not guarantee this.\n    \n\n**Salient Features of `solveset`**\n\n*   `solveset` has a cleaner input and output interface: `solveset` returns a set object and a set object take care of all the types of the output. For cases where it doesn't \"know\" all the solutions a `NotImplementedError` is raised. For input only takes the equation and the variables for which the equations has to be solved.\n    \n*   `solveset` can return infinitely many solutions. For example solving for `sin(x) = 0` returns {2⋅n⋅π | n ∊ ℤ} ∪ {2⋅n⋅π + π | n ∊ ℤ} Whereas `solve` only returns \\[0, π\\]\n    \n*   There is a clear code level and interface level separation between solvers for equations in complex domain and equations in real domain. For example solving `exp(x) = 1` when x is complex returns the set of all solutions that is {2⋅n⋅ⅈ⋅π | n ∊ ℤ} . Whereas if x is a real symbol then only {0} is returned.\n    \n*   `solveset` returns a solution only when it can guarantee that it is returning all the solutions.\n    \n\n**Status**\n\n**[GSoC 2014 Project: Harsh Gupta](https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers)** During the summer of 2014 Harsh Gupta worked to improve solvers as part of his GSoC project. Instead of making changes in the current `solve` function a new submodule named `solveset` was written.\n\n**[GSoC 2015 Project: Amit Kumar](https://github.com/sympy/sympy/wiki/GSoC-2015-Application-AMiT-Kumar--Solvers-:-Extending-Solveset)** In the summer of 2015 Amit Kumar worked on this project to improve solveset, implement complex sets as a part of his GSoC project.\n\n**[GSoC 2016 Project: Kshitij SaraogiKshitij Saraogi](https://docs.google.com/document/d/1GljN3hj_qDzMvTAUW2X7idcsoDPhJ0uAqmMrqykSGGg/edit?usp=sharing) | [GSoC 2016 Project: Shekhar Rajak](https://github.com/sympy/sympy/wiki/GSoC-2016-Shekhar-Prasad-Rajak-Application:-Solvers:-Completing-Solveset)** In the summer of 2016, two projects were selected to participate in Google Summer of Code to work on the Solvers. New solver helper functions such as `solve_decomposition` and `nonlinsolve` were implemented to facilitate the porting from `solve` to `solveset`. Also, the inequality solver `solve_univariate_inequality` was refactored and added to `solveset`. Several methods related to functional analysis, such as `periodicty`, `continuous_domain` and `function_range` were implemented.\n\n**[GSoC 2018 Project: Yathartha Joshi](https://docs.google.com/document/d/1kcZCdQuY3XxgHPuSA8vvwc6O8AbVZ-nYskMuXIia9hA/edit#)** In the summer of 2018, Yathartha worked on the project to implement transcendental equation solver for `solveset`. `transolve` alongwith its helper solvers was implemented as a result of it.\n\n**TODOs**\n\n*   Extending `transolve`: As part of the work done in the summer of 2018, `transolve` is fully designed and is now able to handle logarithmic and exponential equations for `solveset`. To make `solveset` fully fledged and replace `solve` completely we expect it to handle equations like:\n    \n    *   Lambert type equations (PR [#14972](https://github.com/sympy/sympy/pull/14972))\n    *   Handling modular equations ([#13178](https://github.com/sympy/sympy/issues/13178))\n    *   Solving transcendental equations in complex domain.\n    \n    There may be other types of equations that `transolve` can be made to handle. It's still under development!! Feel free to propose any of your ideas.\n    \n*   Integrating helper solvers with `solveset`: Currently, `solveset` only solves a single equation for a single variable. In the future, we expect it to be capable of solving a system of equations and for more than one variable. `linsolve`: Solves a system of linear equations `nonlinsolve`: Solves a system of non-linear equations `solve_decomposition`: Solves a varied class of equations using the concept of Rewriting and Decomposition These are the helper functions that have been implemented in `solveset` during the past few years. We would like to have all these solvers(including `transolve`) to be integrating in `solveset` so as to increase its power.\n    \n*   Build the set infrastructure: This includes implementing functions to handle multidimensional ImageSet etc., This part must go hand in hand with the improvements in the solvers as set module can be a universe in itself. Also there can be fundamental limits on the things you can do.\n    \n*   `nonlinsolve` is not able to handle system having trigonometric/transcendental equations correctly all the time. Improve solveset's trigonometric solver and handle trig system of equations separately in `nonlinsolve`.\n    \n\n**References** There had been a lot of discussion during and before the project and you should know why we did what we did. Here are some links:\n\n*   [Discussion on the mailing list](https://groups.google.com/forum/#!searchin/sympy/solvers/sympy/Oyz8SkR2fRk/RMpooqwu3oMJ)\n*   [Action Plan on solvers](https://github.com/sympy/sympy/pull/2948)\n*   [Harsh Gupta's proposal for GSoC 2014](https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers)\n*   [Harsh's blog for GSoC](http://hargup.github.io/categories/sympy.html)\n*   [solveset pull request](https://github.com/sympy/sympy/pull/7523)\n*   [Amit's blog for GSoC](http://iamit.in/blog/)\n*   [Solveset Documentation](https://github.com/sympy/sympy/blob/master/doc/src/modules/solvers/solveset.rst)\n*   [GSoC 2016 Solvers Progress and blog links](https://github.com/sympy/sympy/wiki/GSoC-2016-Solvers-Progress)\n*   [Yathartha's blog for GSoC](https://yathartha22.github.io/)\n*   [transolve pull request](https://github.com/sympy/sympy/pull/14736)\n*   [GSoC 2018 Solvers Progress](https://github.com/sympy/sympy/wiki/GSoC-2018-Solvers-Progress)\n\n**Involved Software**\n\nSymPy\n\n**Difficulty**\n\nThis project is difficult because it requires a good deal of thought in the application period. You should have a clear plan of most of what you plan to do in your application: waiting until the Summer to do the designing will not work.\n\n[#10006](https://github.com/sympy/sympy/issues/10006) and [#8711](https://github.com/sympy/sympy/issues/8711) can be good entry points.\n\n**Prerequisite Knowledge**\n\nAlgebraic and differential equations\n\nPotential mentor - Co-mentor: Shekhar (@Shekharrajak)\n\n**Project Length**\n\n350 hours.\n\nOptimize floating point expressions\n-----------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#optimize-floating-point-expressions)\n\n**Idea**\n\nOptimize floating point expressions (à la [https://herbie.uwplse.org/](https://herbie.uwplse.org/)). The user will supply a SymPy expression and an optional range of \"x\" (and other variables) and the module would determine which symbolic simplifications make sense to make things more accurate and/or faster.\n\nPart of this project would also be to provide faster implementations of special functions, say if it is determined that \"x\" in sin(x) is in the range \\[0, 1e-3\\], then there are much faster polynomial approximations that give the same accuracy (the same is possible for other finite ranges, e.g., \\[1.5, 1.7\\]).\n\nOne mode is to concentrate on accuracy (possibly with larger/slower expression). Another mode is to concentrate on speed, and this mode can have a user prescribed accuracy, say 1e-16 for machine precision, or 1e-3 for lower accuracy. For lower accuracies one can replace functions like sin(x) with a much faster polynomial approximation.\n\n**Difficulty**\n\nIntermediate, Advanced\n\n**Project Length**\n\n350 hours, although you may propose a 175 hour project with a more limited scope.\n\nGroup theory\n------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#group-theory)\n\n**Idea**\n\nContinue developing the group theory functionality of the combinatorics module. You should take a look at the GAP library, as this is the canonical group theory computation system right now.\n\nAlgorithms to think about implementing:\n\n*   Computation of various subgroups of infinite finitely presented groups\n*   Computation of Galois groups for a given polynomial\n*   Finding kernels of homomorphisms with infinite domains\n*   Extend functionalities of polycyclic groups\n*   Quotient groups\n*   Automorphism groups\n\n**Status**\n\nPrevious projects on the topic include:\n\n*   [GSoC 2012 Aleksandar Makelov: Computational Group Theory](https://github.com/sympy/sympy/wiki/GSoC-2012-Report-Aleksandar-Makelov:-Computational-Group-Theory)\n*   [GSoC 2016 Gaurav Dhingra: Computational Group Theory](https://gxyd.github.io/blogs/Gsoc2016-project/)\n*   [GSoC 2017 Valeriia Gladkova: Computational Group Theory](https://github.com/sympy/sympy/wiki/GSoC-2017-Report-Valeriia-Gladkova:-Group-Theory)\n*   [GSoC 2018 Ravi Charan: Computational Group Theory](https://ravicharann.github.io/blog//final-report/)\n*   [GSoC 2019 Divyanshu Thakur: Computational Group Theory](https://github.com/sympy/sympy/wiki/GSoC-2019-Report-Divyanshu-Thakur:-Group-Theory)\n\nA good amount of work has been done on polycyclic groups, polycyclic presentation with the base class collector were introduced in 2019 GSoC project but still there are a lot of things to be added for e.g. polycyclic orbit stabilizer and canonical polycyclic sequence to check if two polycylic subgroups are equal or not could be implemented. In addition, few other algorithms like abelian invariants and composition series implemented in 2019 GSoC project can be extended for infinite groups.\n\nSome major algorithms for finitely presented groups include coset enumeration (there's been work on modified Todd-Coxeter in the 2018 GSoC project: see [this PR](https://github.com/sympy/sympy/pull/14830)), low index subgroup search and Reidemeister-Schreier algorithm for subgroup presentation. Rewriting systems together with the Knuth-Bendix completion algorithm are available but could be made more efficient.\n\nAdditionally, the 2017 project implemented group homomorphisms and the 2018 project implemented the computation of the isomorphism between 2 groups, an automaton for word reduction and a few additional algorithms. Find the complete work done during 2018 in the project report in the link below.\n\nSee the [2016](https://gxyd.github.io/blogs/Gsoc2016-project/), [2017](https://github.com/sympy/sympy/wiki/GSoC-2017-Report-Valeriia-Gladkova:-Group-Theory) and [2019](https://github.com/sympy/sympy/wiki/GSoC-2019-Report-Divyanshu-Thakur:-Group-Theory) reports for suggestions on where the work could continue.\n\nQuite a lot of work has been done on permutation groups, but still, some things remain (some of those mentioned in [GSoC 2012 Report by Aleksandar Makelov](https://github.com/sympy/sympy/wiki/GSoC-2012-Report-Aleksandar-Makelov:-Computational-Group-Theory#after-gsoc) are still relevant, e.g. subgroup intersection). Some work is already done on discrete groups. Nonetheless, there is still much that can be done both for discrete groups and for Lie groups.\n\n**Difficulty**: Medium/Difficult\n\n**Resources**: _Handbook of Computational Group Theory_ by _Derek F. Holt_, _Bettina Eick_ and _Eamonn A. O'Brien_\n\n**Prerequisite Knowledge**: Basic knowledge of Abstract Algebra\n\nPotential mentor - Co-mentor: Divyanshu Thakur (@divyanshu132)\n\n**Project Length**\n\n350 hours.\n\nRisch algorithm for symbolic integration\n----------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#risch-algorithm-for-symbolic-integration)\n\n**Idea**\n\nThe Risch algorithm is a complete algorithm to integrate any elementary function. Given an elementary function, it will either produce an antiderivative, or prove that none exists. The algorithm described in Bronstein's book deals with transcendental functions (functions that do not have algebraic functions, so `log(x)` is transcendental, but `sqrt(x)` and `sqrt(log(x))` are not).\n\n**Status**\n\nThe project is to continue where Aaron Meurer left off in his 2010 GSoC project, implementing the algorithm from Manuel Bronstein's book, _Symbolic Integration I: Transcendental Functions_. If you want to do this project, be sure to ask on the mailing list or our IRC channel to get the status of the current project.\n\nThe algorithm has already been partially implemented, but there is plenty of work remaining to do. Contact Aaron Meurer for more information. There was also work done in 2013, which hasn't been completely merged yet. A good place to start would be to look at finishing this work: [https://github.com/sympy/sympy/pulls/cheatiiit](https://github.com/sympy/sympy/pulls/cheatiiit). See [https://groups.google.com/forum/#!msg/sympy/bYHtVOmKEFs/UZoyDX81eP4J](https://groups.google.com/forum/#!msg/sympy/bYHtVOmKEFs/UZoyDX81eP4J) for some more details on this project (nothing has changed since that email thread).\n\n**Involved Software**\n\n**Difficulty**\n\n**Prerequisite Knowledge**\n\nYou should have at least a semester's worth of knowledge in abstract algebra. Knowing more, especially about differential algebra, will be beneficial, as you will be starting from the middle of a project. Take a look at the first chapter of Bronstein's book (you should be able to read it for free via Google Books) and see how much of that you already know. If you are unsure, discuss this with Aaron Meurer (asmeurer).\n\n**Project Length**\n\n350 hours.\n\nRule-based symbolic integration\n-------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#rule-based-symbolic-integration)\n\n**Idea**\n\nSymbolic integration can also be performed with a \"rule-based\" system, which pattern matches the integrand against a set of known integrals uses them to return a result. This is a different approach to the Risch algorithm discussed in the previous approach, and is generally seen as complementary to it. For instance, the Risch algorithm can handle very complex expressions but it can only work with elementary integrals. Rule-based systems are limited to expressions that can match the given set or rules, but it can work with a large set of special functions.\n\n**Status**\n\nThe main work here is a software called [RUBI](https://rulebasedintegration.org/), which is a rule-based integration system written in Wolfram Language. Several previous GSoC projects have worked on integrating RUBI in SymPy, but this work has not yet been successfully completed.\n\nSee\n\n*   [GSoC-2017-Report-Abdullah-Javed-Nesar:-Rule-based-Integrator](https://github.com/sympy/sympy/wiki/GSoC-2017-Report-Abdullah-Javed-Nesar%3A-Rule-based-Integrator)\n*   [GSoC 2018 Rubi Final Report](https://github.com/ashishkg0022/Gsoc-proposal-Rubi/wiki/GSoC-2018-Rubi-Final-Report)\n*   [Improving-Rule-Based-Integrator](https://github.com/sympy/sympy/wiki/Improving-Rule-Based-Integrator)\n*   Tracking issue [#12233](https://github.com/sympy/sympy/issues/12233)\n\nThe RUBI code that has been written is now at [https://github.com/sympy/rubi](https://github.com/sympy/rubi). The primary issue with it is that RUBI is very large and the Python translation is too slow to be useful.\n\nRUBI also involves using MatchPy (see [Enhancing the flexibility of MatchPy](https://github.com/sympy/sympy/wiki/GSoC-Ideas#enhancing-the-flexibility-of-matchpy)), which enables the sort of Mathematica-style pattern matching needed for integration.\n\nBecause previous projects have failed to integrate the entirety of RUBI due to its size, a project working on RUBI should focus on integrating parts of it at a time.\n\nSymPy also has a separate module called [manualintegrate](https://github.com/sympy/sympy/blob/master/sympy/integrals/manualintegrate.py) which implements a pattern-based integration system. It only has a limited of patterns right now, but could be extended. A potential project could just be to extend manualintegrate and not involve RUBI.\n\n**Involved Software**\n\n*   MatchPy\n*   RUBI\n\n**Difficulty**\n\nIntermediate to difficult\n\n**Prerequisite Knowledge**\n\nIf working on RUBI knowledge of Mathematica code will be useful, but not required. Prior knowledge of special functions will be useful, but can also quite easily be learned.\n\n**Project Length**\n\nFor anything involving RUBI, this should be 350 hours.\n\nSmaller 175 or even 90 hour projects to just improve manualintegrate are possible. Discuss with us.\n\nODE ideas\n---------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#ode-ideas)\n\nYou also might want to look at [Manuel Bronstein's sumit](http://www-sop.inria.fr/cafe/Manuel.Bronstein/sumit/index.html).\n\n*   \"Solving Differential Equations in Terms of Bessel Functions\" by Ruben Debeerst. (basic idea is [already implemented](https://github.com/sympy/sympy/pull/16581).)\n    \n    *   Webpage: [http://rubendebeerst.de/master/](http://rubendebeerst.de/master/)\n    *   Master Thesis: [http://rubendebeerst.de/master/master.pdf](http://rubendebeerst.de/master/master.pdf)\n    *   Corresponding ISSAC 08 paper: [http://rubendebeerst.de/master/paper\\_issac2008.pdf](http://rubendebeerst.de/master/paper_issac2008.pdf)\n*   Lie groups and symmetry related:\n    \n    *   [\"Integrating factors for second order ODEs\" by E.S. Cheb-Terrab and A.D. Roche](https://drive.google.com/file/d/1-XktJVEzpRK9nOlaMjE7arEgMgGlV_sN/view?usp=sharing)\n    *   [\"Abel ODEs: Equivalence and Integrable Classes\" by E.S. Cheb-Terrab and A.D. Roche](https://drive.google.com/file/d/1XpGRJc6ZQ_ReTgRSBc3_tnToZ-hjCNgS/view?usp=sharing) Note: Original version (12 pages): July 1999. Revised version (31 pages): January 2000\n\n**Status**\n\n**Involved Software**\n\n**Difficulty**\n\nMedium\n\n**Prerequisite Knowledge**\n\nDifferential equations\n\n**Project Length**\n\n175 hours or 350 hours, depending on the project details (discuss with us).\n\nImproving Series Expansions & Limit Computations\n------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#improving-series-expansions--limit-computations)\n\n**Idea**\n\nThis includes numerous smaller subprojects and is more of a bug burn down project than implementing things from scratch. Hence we should aim at solving as many bugs and possible issues having the label series or limits on them. There are around **146** open issues with the series label & around **26** open issues with the limits label with some overlap and the proposal should have a comprehensive list of ideas to fix a significant portion of these issues.\n\n*   improve series expansions\n    *   [relevant issues](https://github.com/sympy/sympy/labels/series)\n*   improve limit computations\n    *   [relevant issues](https://github.com/sympy/sympy/labels/limits)\n*   improve formal power series\n*   asymptotic series (for instance aseries for gamma, bessel, error type functions)\n    *   [issue 1](https://github.com/sympy/sympy/issues/26207), [issue 2](https://github.com/sympy/sympy/issues/26208), [issue 3](https://github.com/sympy/sympy/issues/26210), [issue 4](https://github.com/sympy/sympy/issues/26096)\n*   Better support for Order term arithmetic (for example, expression of the order term of the series around a point that is not 0, like O((x - a)\\*\\*3)).\n    *   [issue 1](https://github.com/sympy/sympy/issues/22836)\n    *   Read through [discussion](https://github.com/sympy/sympy/pull/22247#issuecomment-977811355) & comments for fixing [issue](https://github.com/sympy/sympy/issues/21315)\n    *   Fix \\_eval\\_subs method to hanlde [issue 1](https://github.com/sympy/sympy/issues/19120), [issue 2](https://github.com/sympy/sympy/issues/10290), [issue 3](https://github.com/sympy/sympy/issues/7872), [issue 4](https://github.com/sympy/sympy/issues/15915)\n*   Fix limit computations for piecewise functions\n    *   revamp work on [PR](https://github.com/sympy/sympy/pull/22339) and test properly, [relevant issue](https://github.com/sympy/sympy/issues/24127)\n*   All other problems, which are described in wiki page about [series](https://github.com/sympy/sympy/wiki/UD-series) and [current situation](https://github.com/sympy/sympy/wiki/UD-series-situation)\n\n**Status**\n\nThere is already a fast implementation called `rs_series` in SymPy. This project would extend it to work for all functions and then make it the default series expansion in SymPy.\n\nSymPy now has support for Formal Power Series (series.formal). The algorithm is more or less complete. The module should be made faster. There are also a lot of XFAIL tests that can be made to pass.\n\nA new algorithm for computing limits of sequences has also been added (series.limitseq). There are still XFAIL tests that can be made to pass.\n\n**Some references**\n\n1.  \"Formal Power Series\" by Dominik Gruntz and Wolfram Koepf\n2.  \"A New Algorithm Computing for Asymptotic Series\" by Dominik Gruntz\n3.  \"Computing limits of Sequences\" by Manuel Kauers\n4.  \"Symbolic Asymptotics: Functions of Two Variables, Implicit Functions\" by Bruno Savly and John Shackell\n5.  \"Symbolic Asymptotics: Multiseries of Inverse Functions\" by Bruno Savly and John Shackell\n\n**Involved Software**\n\nSymPy\n\n**Difficulty**\n\nMedium\n\n**Prerequisite Knowledge**\n\nCalculus\n\n**Project Length**\n\n175 hours or 350 hours, depending on the project details (discuss with us).\n\nCylindrical algebraic decomposition\n-----------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#cylindrical-algebraic-decomposition)\n\n**Idea**\n\n*   Implement the Cylindrical algebraic decomposition algorithm\n    \n*   Use CAD to do quantifier elimination\n    \n*   Provide an interface for solving systems of polynomial inequalities\n    \n*   Some references:\n    \n    *   Cylindrical Algebraic Decomposition [http://mathworld.wolfram.com/CylindricalAlgebraicDecomposition.html](http://mathworld.wolfram.com/CylindricalAlgebraicDecomposition.html)\n    *   \"Algorithms in Real Algebraic Geometry\" [http://perso.univ-rennes1.fr/marie-francoise.roy/bpr-ed2-posted1.html](http://perso.univ-rennes1.fr/marie-francoise.roy/bpr-ed2-posted1.html) (useful background resource, but contains much more information)\n    *   \"Cylindrical Algebraic Decomposition I: The Basic Algorithm\" by Dennis S. Arnon, George E. Collins, Scot McCallum\n    *   \"Computing Cylindrical Algebraic Decomposition via Triangular Decomposition\" by Marc Moreno Maza, Changbo Chen, Bican Xia, Lu Yang\n    *   \"Simple CAD Construction and its Applications\" by Christopher W. Brown\n    *   \"Improved Projection for Cylindrical Algebraic Decomposition\" by Christopher W. Brown\n    *   \"Symbolic Computation for Inequalities\" by Manuel Kauers [http://www.sfb013.uni-linz.ac.at/uploads/media/SymCompIneq.pdf](http://www.sfb013.uni-linz.ac.at/uploads/media/SymCompIneq.pdf)\n    *   \"How To Use Cylindrical Algebraic Decomposition\" by Manuel Kauers\n\n**Status**\n\n**Involved Software**\n\n**Difficulty**\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n350 hours\n\nEfficient Groebner bases and their applications\n-----------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#efficient-groebner-bases-and-their-applications)\n\n**Idea**\n\nGroebner bases computation is one of the most important tools in computer algebra, which can be used for computing multivariate polynomial LCM and GCD, solving systems of polynomial equations, symbolic integration, simplification of rational expressions, etc. Currently there is an efficient version of Buchberger algorithm implemented and of the F5B algorithm, along with naive multivariate polynomial arithmetic in monomial form. There is also the FGLM algorithm converting reduced Groebner bases of zero-dimensional ideals from one ordering to another.\n\nImprove efficiency of Groebner basis algorithm by using better selection strategy (e.g. sugar method) and implement Faugere F4 algorithm and analyze which approach is better in what contexts. Implement the generic Groebner walk converting between Groebner basis of finite-dimensional ideals; there are efficient algorithms for it, by Tran (2000) and Fukuda et al. (2005).\n\nApply Groebner bases in integration of rational and transcendental functions and simplification of rational expressions modulo a polynomial ideal (e.g. trigonometric functions).\n\n**Status**\n\nThere was a project last year relating to Groebner bases. Please take a look a the source and discuss things with us to see what remains to be done.\n\nSome Groebner bases algorithms, in particular F4, require strong linear algebra. Thus, if you want to do that, you may have to first improve our matrices (see the ideas relating to this above).\n\n**Involved Software**\n\n**Difficulty**\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n350 hours\n\nMultivariate polynomials and factorization\n------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#multivariate-polynomials-and-factorization)\n\n**Idea**\n\nFactorization of multivariate polynomials is an important tool in algebra systems, very useful by its own, also used in symbolic integration algorithms, simplification of expressions, partial fractions, etc. Currently multivariate factorization algorithm is based on Kronecker's method, which is impractical for real life problems. Undergo there is implementation of Wang's algorithm, the most widely used method for the task.\n\nStart with implementing efficient multivariate polynomial arithmetic and GCD algorithm. You do this by improving existing code, which is based on recursive dense representation or implement new methods based on your research in the field. There are many interesting methods, like Yan's geobuckets or heap based algorithms (Monagan & Pearce). Having this, implement efficient GCD algorithm over integers, which is not a heuristic, e.g. Zippel's SPMOD, Musser's EZ-GCD, Wang's EEZ-GCD. Help with implementing Wang's EEZ factorization algorithm or implement your favorite method, e.g. Gao's partial differential equations approach. You can go further and extend all this to polynomials with coefficients in algebraic domains or implement efficient multivariate factorization over finite fields.\n\n**Status**\n\nSome work on this may already be done. Take a look at `sympy/polys/factortools.py` in the SymPy source code.\n\n**Involved Software**\n\n**Difficulty**\n\nAdvanced\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n350 hours\n\nUnivariate polynomials over algebraic domains\n---------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#univariate-polynomials-over-algebraic-domains)\n\n**Idea**\n\nChoose a univariate polynomial representation in which elements of algebraic domains will be efficiently encoded. By algebraic domains we mean algebraic numbers and algebraic function fields. Having a good representation, implement efficient arithmetic and GCD algorithm. You should refer to work due to Monagan, Pearce, van Hoeij et. al. Having this, implement your favorite algorithm for factorization over discussed domains. This will require algorithms for computing minimal polynomials (this can be done by using LLL or Groebner bases). You can also go ahead and do all this in multivariate case.\n\n**Status**\n\nCurrently SymPy features efficient univariate polynomial arithmetic, GCD and factorization over modular rings and integers (rationals). This is, however, insufficient in solving real life problems, and has limited use for symbolic integration and simplification algorithms. For example, the support for finite fields GF(p^n) is missing.\n\n**Involved Software**\n\n**Difficulty**\n\nAdvanced\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n350 hours\n\nConcrete module: Implement Karr algorithm, a decision procedure for symbolic summation\n--------------------------------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#concrete-module-implement-karr-algorithm-a-decision-procedure-for-symbolic-summation)\n\n**Idea**\n\nAlgorithm due to Karr is the most powerful tool in the field of symbolic summation, which you will implement in SymPy. There are strong similarities between this method and Risch algorithm for the integration problem. You will start with implementing the indefinite case and later can extend it to support definite summation (see work due to Schneider and Kauers). Possibly you will also need to work on solving difference equations.\n\n*   Some references:\n    *   \"A=B\" by Marko Petkovsek, Herbert S. Wilf, Doron Zeilberger\n    *   \"Symbolic Summation with Radical Expressions\" by Manuel Kauers and Carsten Schneider\n    *   \"An Implementation of Karr's Summation Algorithm in Mathematica\" by Carsten Schneider\n    *   Manuel Kauers, webpage: [http://www.risc.jku.at/home/mkauers](http://www.risc.jku.at/home/mkauers)\n    *   Carsten Schneider, webpage: [http://www.risc.jku.at/people/cschneid](http://www.risc.jku.at/people/cschneid)\n    *   \"Algorithmen für mehrfache Summen\", by Torsten Sprenger\n\n**Status**\n\nSymPy currently features Gosper algorithm and some heuristics for computing sums of expressions. Special preference is for summations of hypergeometric type. It would be very convenient to support more classes of expressions, like (generalized) harmonic numbers etc. There is already an complete algorithm rational expression summation.\n\n**Involved Software**\n\n**Difficulty**\n\nAdvanced\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n350 hours\n\nPhysics Projects\n----------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#physics-projects)\n\nSymbolic Control Systems (`sympy.physics.control`)\n--------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#symbolic-control-systems-sympyphysicscontrol)\n\n**Idea**\n\nA Control Systems subpackage ([`sympy.physics.control`](https://github.com/sympy/sympy/tree/master/sympy/physics/control)) was added to SymPy in the summer of 2020, by Naman Gera. This was built upon further by Akshansh Bhatt in 2021 and Anurag Bhat in 2023. It would be great to continue its development and make it more accessible to the public. Since the users are mostly students and researchers in the field of Control theory, a set of problems from a textbook can be solved in the documentation, as the development proceeds.\n\n[https://www.cds.caltech.edu/~murray/amwiki/Second\\_Edition.html](https://www.cds.caltech.edu/~murray/amwiki/Second_Edition.html) can be used as a reference.\n\n**Status**\n\nThe functionalities of the project can be viewed here:\n\n[https://docs.sympy.org/latest/modules/physics/control/lti.html#module-sympy.physics.control.lti](https://docs.sympy.org/latest/modules/physics/control/lti.html#module-sympy.physics.control.lti)\n\nFuture Work (can be modified after discussion):\n\n*   Refactor the old plots - All the plots that were implemented previously namely - **Pole Zero**, **Step Response**, **Impulse Response**, **Ramp Response**, **Bode Magnitude** and **Bode Phase** plot use `numpy` and `matplotlib`. The numerical methods were used for speed but they sacrifice on precision. Sympy's symbolic methods are used in the first place to the precision they provide, hence these numerical methods should be replaced by algebraic methods.  \n    [Davide](https://github.com/Davide-sd), a fellow contributor has been revamping the plotting module. I would like to point out this [roadmap](https://github.com/sympy/sympy/issues/19263#issuecomment-1685859671), according to which `SymPy` will soon have it's own `plot_list` function after which this refactoring could be done with ease.\n    \n*   Complete newly implemented plots - The plots added in this GSoC project namely - **Root Locus**, **Nichols** and **Nyquist** plot are draft pull requests. The have clear ideas to follow and some comments which can be addressed once `SymPy` no longer depends upon `matplotlib` and `numpy`.\n    \n*   Implementations for the `StateSpace` class -\n    \n    1.  Solve examples mentioned in [#25502](https://github.com/sympy/sympy/issues/25502) and add them to the `control_problems` file . The required functionality is already supported in the pull request.\n    2.  Add a symbolic solver (and a numeric solver if required) with the help of the ODE module to solve `x' = Ax + Bu` form.\n    \n    Make the class more feature rich:\n    \n    1.  Read about Laub's or Horner's method to evaluate system transfer function at complex frequency. This will be the equivalent of `eval_frequency` for Transfer Functions.\n    2.  Add Feedback interconnection between 2 state space LTI systems.\n    3.  Other features can be picked up on comparison with `MATLAB` and `python-control`.\n*   Adding a **Discrete time model** - A Discrete-time `TransferFunction` and Discrete-time `StateSpace` model. Discussing the API and making things compatible with the current implementation is a challenging task. It has already been a component of the `MATLAB` CST package from the beginning. As a control module, we have to realize that all signals in practical real life use are always discrete in nature. This is my motivation for wanting this model, so that users can have extensive use of `SymPy’s` CST package in their projects.\n    \n\nIt is best to follow the [final report](https://github.com/sympy/sympy/wiki/GSoC-2023-:-Improving-and-Expanding-the-Functionalities-of-SymPy's-Control-Module-by-Anurag-Bhat) and [blog](https://faze-geek.github.io/) to know more about the status.\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nIntermediate\n\n**Prerequisite Knowledge**\n\nUndergraduate level Control Systems knowledge will suffice. Otherwise, one _can_ complete the project if they self-learn required topics and then contribute voraciously.\n\n**Project Length**\n\n350 hours.\n\nSymbolic quantum mechanics (`sympy.physics.quantum`)\n----------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#symbolic-quantum-mechanics-sympyphysicsquantum)\n\nIn the past, Brian Granger was the maintainer of the `sympy.physics.quantum` subpackage. He has stepped down from this position. Until someone takes over the maintenance of this subpackage, we will not be able to mentor any GSoC projects in this area. If you have questions about this, please contact Ondřej Čertík.\n\nContinuum Mechanics: Create a Rich 2D Beam Solving System\n---------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#continuum-mechanics-create-a-rich-2d-beam-solving-system)\n\n**Idea**\n\nSingularity functions are a popular tool for solving beam bending stress and deflection problems in mechanical design. This is traditionally done by hand calculations and can be very tedious and error prone. This process could be improved greatly by a CAS implementation of the functions and some high level abstractions for constructing beam loading profiles.\n\nThe deliverable would be a unit tested and documented sub-package for SymPy 2D and 3D beams that can solve many beam problems, add in arbitrary cross sections, plotting, be robust, and add any other relevant features.\n\n**Status**\n\nSampad Saha implemented Singularity Functions in 2016. The 2017 and 2018 GSoC projects created the functionality shown here:\n\n[https://docs.sympy.org/dev/modules/physics/continuum\\_mechanics/beam\\_problems.html](https://docs.sympy.org/dev/modules/physics/continuum_mechanics/beam_problems.html)\n\nThe next steps involve making it easier to define complex cross sectional geometry via the geometry package, developing the 3D Beam into a well tested and robust class, and polishing to the plotting for 2D and 3D beams. Adding a large set of example problems that exercise the functionally.\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nIntermediate\n\n**Prerequisite Knowledge**\n\nNo specific prerequisite knowledge is necessary but it would help if the student had some knowledge of beam stress/strain analysis methods.\n\n**Project Length**\n\n350 hours.\n\nClassical Mechanics\n-------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics)\n\nThe following project ideas are in approximate order of priority.\n\nClassical Mechanics: Generalize the Equations of Motion System Output\n---------------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-generalize-the-equations-of-motion-system-output)\n\n**Idea**\n\nWe would like an ecosystem in which you can define/create your mechanical system in a general way using joints, bodies, forces, torques, etc., compute the equations of motion based on different methods like `LagrangesMethod` and `KanesMethod`, to be used in numerical purposes, like simulations and optimizations.\n\nThe above is the general picture for which a lot of work has been done over the years on the different parts. However, some parts are disjoint while other parts are still missing or should almost be entirely replaced.\n\nNote that defining/creating the mechanical system falls into two other projects, namely:\n\n*   [Classical Mechanics: Constructing Systems From Bodies and Joints](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-constructing-systems-from-bodies-and-joints)\n*   [Classical Mechanics: Implement Specific Forces and Torques](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-specific-forces-and-torques)\n*   [Classical Mechanics: Implement and Benchmark Equations of Motion Methods](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-and-benchmark-equations-of-motion-methods)\n\n**Status**\n\nPrevious work covers quite a few different parts, which can be improved and extended, but mostly require to be tied together more properly:\n\n*   An abstract base class as an interface to the different equations of motion generation methods has been introduced in [#21778](https://github.com/sympy/sympy/pull/21778).\n*   Refer to the project [Classical Mechanics: Constructing Systems From Bodies and Joints](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-constructing-systems-from-bodies-and-joints) for the status of bodies and joints.\n*   Refer to the project [Classical Mechanics: Implement Specific Forces and Torques](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-specific-forces-and-torques) for the status of implementing specific loads.\n*   In [#25560](https://github.com/sympy/sympy/pull/25560) a `System` class was introduced as a general frontend to define a mechanical system and generate the equations of motion using either of the implemented methods, i.e. `LagrangesMethod` and `KanesMethod`.\n*   In [#11431](https://github.com/sympy/sympy/pull/11431) as `SymbolicSystem` was introduced as a data class to store all information about a system and its equations of motion in a general format.\n*   In [PyDy](https://github.com/pydy/pydy) there also exists a [`System` class](https://github.com/pydy/pydy/blob/master/pydy/system.py), which can be used to simulate a system that was solved using `KanesMethod`.\n\nThe goal of this project is to implement a class to function as a general interface of a system from which the equations of motion can be used for numerical purposes. This class would be an extension or replacement of `sympy.physics.mechanics.system.SymbolicSystem`. Some of the features it should offer are:\n\n*   A general representation of the equations of motion and the algebraic constraints.\n*   Methods to code generate the functions to be used in simulation purposes, like with `scipy.integrate.solve_ivp` and `scikits.odes.dae`.\n*   It should use `sympy.physics.mechanics.system.System` for the basic system information. It could possibly have multiple methods to be instantiated, like a normal `__init__` where all equations and things need to be provided as is currently the case with `SymbolicSystem`, and a classmethod `from_system`, where it extracts most information from the `System` instance.\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nAdvanced\n\n**Prerequisite Knowledge**\n\nThis project requires basic understanding of dynamical systems and at least understanding of one method of generating the equations of motion for a multi-body system.\n\n**Project Length**\n\n350 hours.\n\nClassical Mechanics: Implement and Benchmark Equations of Motion Methods\n------------------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-and-benchmark-equations-of-motion-methods)\n\n**Idea**\n\nThere are many methods to derive the equations of motion. Each method has its advantageous and disadvantageous when modeling different systems. SymPy currently contains only two methods: `KanesMethod` and `LagrangesMethod`. The idea of this project is to develop more methods to form the equations of motion and to benchmark them for different models to also give users more insight what model they should use for their application.\n\n**Status**\n\n*   An abstract base class as an interface to the different equations of motion generation methods has been introduced in [#21778](https://github.com/sympy/sympy/pull/21778).\n\nThis project could roughly entail the following steps:\n\n*   Improve the abstract base class, `sympy.physics.mechanics.method._Methods` of the equations of motion generation methods, e.g. `KanesMethod`.\n*   Improve the implementation of `KanesMethod` and `LagrangesMethod`.\n*   Implementing more methods to generate the equations of motion, like `NetwonEulersMethod` or `HamiltonsMethod`.\n*   Develop a benchmark suite deriving the equations of motion using the different methods and measure their performance. Examples could include a 5-DoF planar kinematic chain, a four-bar linkage, and the Carvallo-Whipple bicycle model.\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nIntermediate\n\n**Prerequisite Knowledge**\n\nThis project requires basic understanding of dynamical systems and at least understanding of one method of generating the equations of motion for a multi-body system.\n\n**Project Length**\n\n175 or 350 hours.\n\nClassical Mechanics: Efficient Equations of Motion Generation\n-------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-efficient-equations-of-motion-generation)\n\n**Idea**\n\nCurrently we have basic equation of motion generation with automated Kane's and Lagrange's methods. These methods work well but can take many minutes to complete for hard problems. The algorithms that derive these equations of motion can be improved in both speed of computation and the resulting simplification of the equations of motion. This project would involve profiling to find the slow functions and speeding up the slow parts. This may involve digging into the SymPy codebase for trigonometric simplification and other relevant function calls to speed up the EoM generation. These modification will help speed up both the entire SymPy codebase and the Mechanics package.\n\n**Status**\n\nThere is no previous work on this topic.\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nBeginner\n\n**Prerequisite Knowledge**\n\nThere are no prequisites to this project.\n\n**Project Length**\n\n175 or 350 hours.\n\nClassical Mechanics: Implement Wrapping Geometry and Pathways for Musculoskeletal Modeling\n------------------------------------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-wrapping-geometry-and-pathways-for-musculoskeletal-modeling)\n\n**Idea**\n\nSymPy Mechanics includes classes to manage how forces and torques act on connected bodies when the path of action is a complex pathway that wraps over geometric features. This is critical for accurate musculotendon force generation. The [Biomechanical Model Example](https://docs.sympy.org/dev/tutorials/physics/biomechanics/biomechanical-model-example.html) shows a simple cylindrical wrapping of a muscle around the elbow. This idea involves adding more wrapping surfaces and pathways that are useful for musculoskeletal modeling.\n\n**Status**\n\n*   [Cylinder and sphere wrapping geometry exist](https://docs.sympy.org/dev/modules/physics/mechanics/api/wrapping_geometry.html)\n*   [Linear and obstacle pathway exist](https://docs.sympy.org/dev/modules/physics/mechanics/api/pathway.html#sympy.physics.mechanics.pathway.WrappingPathway)\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nBeginner to intermediate\n\n**Prerequisite Knowledge**\n\nThis project requires basic understanding geometry, forces, and anatomy.\n\n**Project Length**\n\n90, 175, or 350 hours (depends on how many features you'd like to implement)\n\nClassical Mechanics: Implement Specific Forces and Torques\n----------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-specific-forces-and-torques)\n\n**Idea**\n\nMany forces and torques still have to be manually created by the user. It would be helpful if we had a set of typical and common forces and torques. Some possible examples:\n\n*   Actuator forces and torques\n*   Aerodynamic forces\n*   Contact force models\n*   Friction force models\n*   Linear and nonlinear springs and dampers\n*   Musculotendon models, like the Hill type muscle model\n*   Controller forces (like PID or full state feedback)\n*   [Eardrum model](https://www.cfm.brown.edu/people/dobrush/am33/Mathematica/ch4/nspring.html)\n\nSome kind of force and torque objects will likely be needed as well as symbolic mathematical descriptions of the force and torque models. The forces and torques should work with SymPy's code generation to generate efficient and robust numerical codes. Here is a [soft introduction to forces and torques](https://moorepants.github.io/learn-multibody-dynamics/loads.html).\n\n**Status**\n\n*   Timo Stienstra introduced a `Force` and `Torque` class, refer to [#24258](https://github.com/sympy/sympy/issues/24240) and [#24641](https://github.com/sympy/sympy/pull/24641).\n*   Sam Brockie implemented an abstract base class to define actuators and implemented several types of actuators, like a `LinearSpring` and `LinearDamper`, refer to [#25518](https://github.com/sympy/sympy/pull/25518).\n*   Sam Brockie implemented base classes for Musculotendon force generators, refer to the [musculotendon API](https://docs.sympy.org/dev/modules/physics/biomechanics/api/musculotendon.html)\n*   Hwayeon Kang implemented [CoulombKineticFriction](https://docs.sympy.org/dev/modules/physics/mechanics/api/actuator.html#sympy.physics.mechanics.actuator.CoulombKineticFriction) and [DuffingSpring](https://docs.sympy.org/dev/modules/physics/mechanics/api/actuator.html#sympy.physics.mechanics.actuator.DuffingSpring) classes, refer to [#26438](https://github.com/sympy/sympy/pull/26438) and [#26412](https://github.com/sympy/sympy/pull/26412).\n*   Initial idea for the Hill muscle model is introduced in [#26443](https://github.com/sympy/sympy/pull/26443) -- it will be helpful to refer to the `DeGroote2016` classes in `sympy.physics.biomechanics.activation` together.\n\nSome load types that could be worked on are:\n\n*   Contact force models\n*   Aerodynamic forces\n*   Nonlinear springs and dampers\n*   Models involving biomechanics, refer to [#24240](https://github.com/sympy/sympy/issues/24240) for ideas.\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nBeginner to intermediate\n\n**Prerequisite Knowledge**\n\nThis project requires basic understanding of dynamics and numerical methods.\n\n**Project Length**\n\n90, 175, or 350 hours (depends on how many features you'd like to implement)\n\nClassical Mechanics: Constructing Systems From Bodies and Joints\n----------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-constructing-systems-from-bodies-and-joints)\n\n**Idea**\n\nWe'd like to be able to construct multibody systems by specifying descriptions of rigid bodies and the joints and constraints that connect them.\n\n**Status**\n\n*   Sahil Shekewat worked on implementing a joint-based descriptor for systems: [https://github.com/sympy/sympy/pulls/sahilshekhawat](https://github.com/sympy/sympy/pulls/sahilshekhawat)\n*   Sudeep Sidhu completed Sahil's work and merged a functioning joint-based system that can solve open-chain problems. See his report: [https://github.com/sympy/sympy/wiki/GSoC-2021-Report-Sudeep-Sidhu-:-Implement-JointsMethod](https://github.com/sympy/sympy/wiki/GSoC-2021-Report-Sudeep-Sidhu-:-Implement-JointsMethod)\n*   Timo Steinstra furthered the work by enhancing the joint definition, adding new joints, and developing examples of using the joints framework.\n\nThe next steps are, in order of priority:\n\n*   Fix any existing bugs with the joints.\n*   Add many different example problems to test the robustness of the implementation.\n*   Allow parsing constants as generalized coordinates to `Joint`, such as `pi / 2` to the `PinJoint`, as if it is just a fixed pin.\n*   Implement and test quaternion rotations.\n*   Implement a `Mobilizer` joint or `CustomJoint` for describing complex motions, refer to ([#23920 comment](https://github.com/sympy/sympy/pull/23920#issue-1337665929)).\n*   Implement an option to choose the generalized speeds efficiently, refer to [#24053 comment](https://github.com/sympy/sympy/pull/24053#issuecomment-1262468801).\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nIntermediate to Advanced\n\n**Prerequisite Knowledge**\n\nThis project requires familiarity with multibody dynamics. At the least, one should know how to form the equations of motion of complex systems with one method.\n\n**Project Length**\n\n90, 175, or 350 hours\n\nClassical Mechanics: Implement an O(N) Equations of Motion Method\n-----------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#classical-mechanics-implement-an-on-equations-of-motion-method)\n\n**Idea**\n\nRoy Featherstone, Abhi Jain, and others developed recursive methods of forming the right-hand side of the differential equations for complex multibody systems that have an evaluation time of O(N) instead of O(N^3). This project would be dedicated to implementing a symbolic O(N) method to complement the `LagrangesMethod` and `KanesMethod` classes. This project would involve implementing 6D vectors and spatial operators, as well as the recursive methods. This would give a significant speed boost in numerical evaluation for systems with bodies greater than 20 or so.\n\n**Status**\n\nBrandom Milam made significant headway in this project in 2016. See:\n\n*   [https://github.com/sympy/sympy/wiki/GSoC-2016-Application-James-Brandon-Milam:-Base-Class-and-Increased-Efficiency-for-Equation-of-Motion-Generators](https://github.com/sympy/sympy/wiki/GSoC-2016-Application-James-Brandon-Milam:-Base-Class-and-Increased-Efficiency-for-Equation-of-Motion-Generators)\n*   [https://github.com/sympy/sympy/pulls/jbm950](https://github.com/sympy/sympy/pulls/jbm950)\n\n**Involved Software**\n\nPython, Git\n\n**Difficulty**\n\nExtremely Advanced\n\n**Prerequisite Knowledge**\n\nThis project requires proficiency with multibody dynamics. At the least, one should know how to form the equations of motion of complex systems with one method. The ideal candidate will have experience forming the equations of motion with the aforementioned Featherstone or Jain methods.\n\n**Project Length**\n\n350 hours.\n\nComputer Science, Graphics, and Infrastructure Projects\n-------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#computer-science-graphics-and-infrastructure-projects)\n\nOfficial LLM Tool Agent for SymPy\n---------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#official-llm-tool-agent-for-sympy)\n\n**Idea**\n\nThis project proposes developing an official LLM tool agent for SymPy. Large Language Models (LLMs) are increasingly used to interact with interfaces through function calling. While SymPy's extensive library interface offers powerful symbolic computation capabilities, it's not readily accessible to LLMs. This agent will bridge this gap by providing a structured interface that allows LLMs to discover and execute SymPy functions based on natural language user requests. This involves creating a machine-readable description of SymPy's public interface (function and class definitions, docstrings, usage examples) that LLMs can understand and use to construct valid function calls. The agent will be designed to be framework-agnostic, supporting popular LLM frameworks like LangChain, LlamaIndex, Haystack, and ell-ai. This project aims to:\n\n1.  Create templates for LLM tools wrapping SymPy’s library interface.\n2.  Implement integrations with multiple LLM frameworks (LangChain, llama-index, ...), demonstrating usability.\n3.  Design a testing interface that evaluates and reports statistical metrics to assess the correctness of results.\n4.  Develop an interface to facilitate debugging of LLM agent traces.\n\n_**Examples of Multi-Step SymPy Operations:**_\n\nA key motivation for this project is the ability to handle mathematical problems requiring multiple SymPy function calls. Here are some examples:\n\n1.  _**Finding the minimum of a function subject to a constraint**_: This typically involves:\n\n*   Defining the function and the constraint using SymPy symbols.\n*   Calculating the derivative of the function using diff().\n*   Solving the system of equations formed by setting the derivative to zero and applying the constraint using solve().\n*   Potentially evaluating the second derivative using diff() again to confirm that the solution is a minimum (second derivative test).\n\nFor example: \"Find the minimum of x^2 + y^2 subject to x + y = 1.\"\n\n2.  _**Solving a differential equation and then evaluating it at a point**_: This requires:\n\n*   Defining the differential equation using Eq() and Function().\n*   Solving the differential equation using dsolve().\n*   Substituting a specific value for the independent variable into the solution using subs().\n\nFor example: \"Solve dy/dx = y with y(0) = 1 and evaluate the solution at x = 2.\"\n\n3.  _**Calculating the area under a curve and then finding the centroid of that area**_: This involves:\n\n*   Defining the function using SymPy symbols.\n*   Integrating the function using integrate().\n*   Calculating the moments of the area using integrate() again (with appropriate weighting functions).\n*   Calculating the centroid coordinates by dividing the moments by the area.\n\nFor example: \"Find the area under the curve y = x^3 from x = 0 to x = 2 and then find the x-coordinate of the centroid of that area.\"\n\nThese examples demonstrate the need for an LLM agent that can orchestrate multiple function calls within SymPy to solve more complex mathematical problems. The agent needs to understand the dependencies between different operations and handle intermediate results effectively. This capability is beyond the scope of simple one-to-one function call mappings and requires the more sophisticated approach proposed in this project.\n\n**Status**\n\nCurrently, there is no official, structured approach for LLMs to interact with SymPy. While users can attempt to use LLMs to generate SymPy code, this approach is unreliable and prone to errors due to the LLM's limitation for code generation.\n\n**Involved Software**\n\n*   Libraries for LLM interaction/frameworks (LangChain, LlamaIndex, Haystack, LLM-AI)\n*   An LLM available. If no APIs\n\n**Difficulty**\n\nIntermediate to Advanced. This project requires:\n\n*   Familiarity with SymPy’s library interface and codebase.\n*   Understanding of LLM concepts and function calling.\n\n**Prerequisite Knowledge**\n\n*   Python programming.\n*   LLM agents and tool calling.\n*   Self-host an LLM with tool support.\n\n**Project Length**\n\nThis project is suitable for both 175-hour and 350-hour GSoC projects.\n\nEnhancing the flexibility of MatchPy\n------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#enhancing-the-flexibility-of-matchpy)\n\n**Idea**\n\nMatchPy, a Python library, provides associative-commutative pattern matching and replacement rules for expression trees. This functionality enhances the usability of computer algebra systems, simplifying the formulation of transformation rules for mathematical formulas.\n\nIn essence, MatchPy expressions can be likened to \"regular expressions with an awareness of commutative and associative properties”. MatchPy also supports the simultaneous execution of multiple matches, contributing to its exceptional efficiency.\n\nHowever, the current requirement for expression trees and wildcards to be subclasses of MatchPy objects presents a significant inflexibility. This constraint forces SymPy to delve into metaclass intricacies to function, limiting the ability to work with expression trees whose node type lacks identification by an object.\n\nThis proposal seeks to enhance MatchPy by restructuring its node type identification, the iteration criteria and wildcard definitions. This involves replacing type checks with custom node identification and iteration rules, fostering greater flexibility in working with various expression tree structures.\n\nSince MatchPy is currently under a separate project and has experienced a period of inactivity, forking MatchPy becomes necessary for the progress of this project.\n\nAdditionally, if time allows it, this project also envisions exploring the possibility of a Rust implementation of MatchPy, aiming to enhance its speed and efficiency.\n\n**Status**\n\nAn experimental connector to MatchPy has been successfully implemented and can be found in sympy.utilities.matchpy\\_connector. For a comprehensive understanding of the algorithm that drives MatchPy, refer to the paper authored by its creators, available at [https://arxiv.org/abs/1710.06915](https://arxiv.org/abs/1710.06915). Furthermore, it's worth noting that MatchPyCpp, an integral submodule of SymEngine, features a translation of the main MatchPy algorithms into C++. However, its performance is presently constrained by the absence of support for coroutines.\n\n**Involved software**\n\nPython, MatchPy\n\n**Difficulty**\n\nAdvanced.\n\nThis project very likely requires the MatchPy library to be forked.\n\nThis project necessitates proficiency in executing tree-visiting algorithms.\n\n**Project Length**\n\n350 hours.\n\nCode Generation\n---------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#code-generation)\n\n**Idea**\n\nThere are quite a few potential projects for codegen.\n\nThe code generation system in SymPy has been overhauled to use AST nodes from `sympy.codegen.ast`, there are however lot of more nodes that can be added for e.g. Fortran in `sympy.codegen.fnodes`. It could also be useful if the code printers could output parallel code using OpenMP directives (e.g. parallel for loops for C and Fortran, including use of reduction). Most printers do not yet support the new AST nodes, it would be useful if those were extended so that they can express ASTs created e.g. by functions in `sympy.codegen.algorithms`.\n\nAnother idea for codegen is to add more support for directly working with matrices. For instance, matrix expressions (sympy.matrices.expressions objects) should print LAPACK calls.\n\n**Status**\n\nWe have support for a number of backends and basic code gen classes in place. There is work on updating the system ongoing. Please ask on the mailing list.\n\nYou can check out the work done by Ankit Pandey to extend codegen to support matrix operations at [Extending Codegen GSoC 2019](https://github.com/sympy/sympy/wiki/GSoC-2019-Report-Ankit-Pandey:-Extending-Codegen)\n\n**Involved Software**\n\nFortran, C, C++, Julia, Rust, Python, LLVM, Javascript, Octave, Matlab, etc.\n\n**Difficulty**\n\nIntermediate to Advanced\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n175 hours or 350 hours, depending on the project details (discuss with us).\n\nCode Generation: Efficient Jacobian and Hessian Evaluation for Optimization and ODE Integration\n-----------------------------------------------------------------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#code-generation-efficient-jacobian-and-hessian-evaluation-for-optimization-and-ode-integration)\n\n**Idea**\n\nWhen solving optimization problems with gradient based solutions, you typically need to evaluate the function to optimize along with its Jacobian and/or Hessian (or the Lagrangian of the Hessian). SciPy offers many optimization routines, many which accept three functions for evaluating the function, the Jacobian, and the Hessian. If you create a function in SymPy, then having the ability to do something like:\n\nrosenbrock\\_expr \\= (a \\- x)\\*\\*2 + b\\*(y \\- x\\*\\*2)\\*\\*2\neval\\_f, eval\\_j, eval\\_h \\= generate\\_minimize\\_derivative\\_funcs(expr, (x, y), extra\\_args\\=(a, b))\nresult \\= minimize(eval\\_f, x0, jac\\=eval\\_j, hess\\=eval\\_h)\n\nwould make it very easy to solve optimization problems from functions defined in SymPy. If the expression is very large, the computational cost of evaluating those three functions needs to be minimized. With careful use of lambdify, autorwrap, and shared common sub expressions, SymPy can generate very efficient versions of these functions.\n\nSimilarly, when numerically integrating ordinary differential equations, the Jacobian of the integrand (and its sparsity information) can be useful for the integration algorithms.\n\nrhs \\= \\[\n    v(t),\n    (\\-sign(v(t))\\*B\\*v(t)\\*\\*2 \\- k\\*x(t) \\- c\\*v(t) + A\\*sin(w\\*t))/m\n\\]\neval\\_f, eval\\_j, sparsity \\= generate\\_ode\\_derivative\\_funcs(rhs, (x(t), v(t)), extra\\_args\\=(A, B, m, c, k))\nresult \\= solve\\_ivp(eval\\_f, (0.0, 1.0), y0, jac\\=eval\\_j, jac\\_sparsity\\=sparsity)\n\nOnce again, for very large expressions, generating computationally efficient code becomes very important for fast integration performance.\n\n**Status**\n\nThere are existing tools where these basic ideas have been implemented outside of SymPy. For example:\n\n*   [pyodesys](https://github.com/bjodah/pyodesys): integrates ODEs defined with SymPy\n*   [symopt](https://github.com/spcornelius/symopt): optimizes functions defined with SymPy\n*   [opty](https://github.com/csu-hmc/opty): generates a numerical function and its sparse jacobian\n*   [simple stackoverflow question](https://stackoverflow.com/questions/34115233/python-optimization-using-sympy-lambdify-and-scipy)\n*   [optimization problem that doesn't quite connect sympy to scipy](https://gist.github.com/XavierMBP/5b783b4b03100483c107d7425070a15b)\n*   [symjit](https://github.com/siravan/symjit) has a simple API for generated numerical functions on-the-fly.\n\nRiccardo added a new Jacobian function in 2024 that efficiently computes Jacobians of very large expressions in [#26773](https://github.com/sympy/sympy/pull/26773). We should be able to use this, at least optionally, for computing derivatives.\n\nSee the SciPy documentation:\n\n*   [SciPy Optimization](https://docs.scipy.org/doc/scipy/tutorial/optimize.html)\n*   [solve\\_ivp](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.solve_ivp.html)\n\n**Involved Software**\n\nNone\n\n**Difficulty**\n\nIntermediate to Advanced\n\n**Prerequisite Knowledge**\n\nKnowledge of optimization and ODE integration and their associated numerical methods.\n\n**Project Length**\n\n175 or 350\n\nParsing\n-------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#parsing)\n\n**Idea**\n\nSymPy has the ability to generate Python, C, and Fortran code from SymPy expressions.\n\nIt would be very interesting to go the other way, to be able to parse Python, C, and Fortran code and produce SymPy expressions. This would allow SymPy to easily read in, alter, and write out computational code. This project would enable many other projects in the future. Ideally, this project would create a general framework for parsers and then use this system to implement parsers for a few of the languages listed above. See the other parsing ideas on this page, as well as [Parsing](https://github.com/sympy/sympy/wiki/Parsing).\n\n**Status**\n\nSymPy currently has a parsing module that supports parsing LaTeX and autolev using ANTLR, C, and Fortran. The parsing module also supports a Python parser, with special extensions to support things like implicit multiplication (`2a` -\\> `2*a`) and implicit function application (`sin x` -\\> `sin(x)`), which uses the Python `tokenize` module.\n\nYou can check out the work done on the C and Fortran parsers at [Creating a C and Fortran Parser GSoC 2019](https://github.com/sympy/sympy/wiki/GSoC-2019-Report-Nikhil-Maan:-Creating-a-C-and-Fortran-parser-for-SymPy)\n\nThe existing parsers could be improved by adding support for more features of the programming languages, or new parsers could be added for other languages like Julia, Octave, MATLAB, etc.\n\n**Involved Software**\n\nFortran, C, C++, Julia, Rust, Python, LLVM, Octave, Matlab, etc.\n\n**Difficulty**\n\nIntermediate to Advanced\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n175 hours or 350 hours, depending on the project details (discuss with us).\n\nImprove the plotting module\n---------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#improve-the-plotting-module)\n\n**Idea**\n\nA new plotting module [sympy-plot-backends](https://github.com/Davide-sd/sympy-plot-backends) has been written, which is planned to replace the existing `sympy.plot` module (see [https://github.com/sympy/sympy/issues/23036](https://github.com/sympy/sympy/issues/23036)).\n\nThe idea is to merge this module into SymPy, also implementing substantial improvements and possibly new functionalities.\n\nA very approximate guesstimate is given.\n\n*   medium/hard: Refactoring of \\*Series classes in order to reduce code repetition and allow the implementation of new features.\n*   easy/medium: Improve numerical evaluation.\n*   medium/hard: implement custom theming for interactive applications and fix a behaviour affecting the current interactive module.\n*   easy/medium: Implement new functionalities:\n    *   2D and 3D linear operators (the effect of a matrix on a plane/3D space)\n    *   Phase portrait for Ordinary Differential Equations.\n    *   Improve plot\\_parametric\\_region to better visualize complex maps.\n    *   Animations.\n*   easy/medium: Packaging: while the main plotting functionalities work just with sympy, numpy and matplotlib, the full plotting module relies on several other packages. It has been observed that building a conda package with the full dependencies is difficult: most of the time the build succeed but the installation fails. Debug and fix it.\n*   easy/medium: Implement a intelligent routine that automatically determines the regions of interest for plotting.\n*   Fix related things/bugs in SymPy\n\nMore detailed information can be found on [this page](https://github.com/Davide-sd/sympy-plot-backends/wiki/Roadmap-to-version-2).\n\n**Status**\n\nCurrently, the new plotting module lives on an external repository: [sympy-plot-backends](https://github.com/Davide-sd/sympy-plot-backends)\n\n**Involved Software**\n\nPython, HTML, Javascript, CSS\n\n**Difficulty**\n\nIntermediate to Advanced: working with several different packages can be overwhelming.\n\n**Prerequisite Knowledge**\n\n**Project Length**\n\n350 hours.\n\nDocumentation tooling\n---------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#documentation-tooling)\n\n**Idea**\n\nSymPy's documentation makes use of Sphinx and several Sphinx extensions. The idea here is to improve the tooling around the docs by developing some Sphinx extensions. Some ideas here\n\n*   Write a Sphinx extension that improves the way autodoc cross references work (see [https://github.com/sympy/sympy/issues/23081](https://github.com/sympy/sympy/issues/23081))\n*   Add autosummary to our docs so that each function is on a separate page. This may require writing a Sphinx extension or some other tooling. See [https://github.com/sympy/sympy/pull/22589](https://github.com/sympy/sympy/pull/22589) for why default autosummary does not work.\n*   Implement linters for various parts of markup so that people can avoid common mistakes. Mistakes include:\n    *   Using the wrong type of markup for math, code, and cross-references (see also [https://github.com/sympy/sympy/issues/13519](https://github.com/sympy/sympy/issues/13519))\n    *   Common mistakes in LaTeX $math$ (see for instance [https://github.com/sympy/sympy/issues/17803](https://github.com/sympy/sympy/issues/17803))\n    *   Various things outlined in the [documentation style guide](https://docs.sympy.org/dev/guides/contributing/docstring.html)\n*   Improved tooling to make sure every docstring is included in Sphinx and every docstring has a doctest (see the `bin/coverage_doctest` script in the SymPy repo, which needs improvement)\n*   Some way to make it so that headers in docstrings can be easily linked to and cross-referenced [https://github.com/sympy/sympy/issues/17599](https://github.com/sympy/sympy/issues/17599)\n*   Allow subheaders in docstrings [https://github.com/sympy/sympy/issues/17618](https://github.com/sympy/sympy/issues/17618)\n*   Several other small issues, mostly relating to the way autodoc generates documentation. See these issues for some additional ideas [https://github.com/sympy/sympy/labels/GSoD](https://github.com/sympy/sympy/labels/GSoD).\n\n**NOTE: Google requires that any GSoC project be primarily coding. This project is _not_ primarily about writing documentation, as such a project is not allowed. It is instead about developing tooling to improve the SymPy documentation system.**\n\n**Status**\n\nSome things are already implemented, for instance, we have an extension that lets us use dollar signs for math in RST [https://github.com/sympy/sphinx-math-dollar](https://github.com/sympy/sphinx-math-dollar). See the above issues for the status of any specific item.\n\n**Involved Software**\n\nThis would primarily involve working with Sphinx and building Sphinx extensions or modifying existing ones. If relevant, we may prefer to upstream changes to Sphinx itself (although the Sphinx developers will not be mentors on this project, so we should not rely on this happening).\n\n**Difficulty**\n\nIntermediate to advanced (working with Sphinx can often be difficult)\n\n**Prerequisite Knowledge**\n\nPrior experience with RST and using autodoc is recommended.\n\n**Project Length**\n\nA project to implement all or the majority of the above ideas would require a 350 hours project, but a 175 hours or even 90 hours project can also be done that only implements a subset of the above ideas.\n\nHypothesis testing\n------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#hypothesis-testing)\n\n**Idea**\n\n[Hypothesis](https://hypothesis.readthedocs.io/en/latest/) is a Python library for property-based testing. Hypothesis tests work by specifying properties that a function should satisfy, and automatically generating inputs to test it. There are more details of the idea of adding hypothesis to SymPy in [this issue](https://github.com/sympy/sympy/issues/20914).\n\nThe idea is to explore adding hypothesis testing to SymPy. We should start small, ideally with a function that is already well tested and has relatively easy to generate inputs. From there we can expand the testing.\n\nSome work has begun on this but hypothesis is currently only used in a couple of tests (search the sympy codebase for \"hypothesis\" to see where it is currently used). However, we would like for much larger fractions of the tests to use hypothesis.\n\nWork on this project will involve adding tests to more functions, adding more hypothesis strategies for different kinds of inputs, and reporting and potentially fixing any SymPy bugs that you find along the way.\n\nIt's expected that throughout this process you will find many bugs in SymPy. You may end up spending a lot of time in this project debugging failures, fixing bugs, or working around bugs that are not so easily fixed.\n\n**Status**\n\nSymPy has some basic hypothesis tests, which demonstrate a proof-of-concept of using it. However, the usage could be expanded significantly, as only a handful of functions currently have hypothesis tests.\n\n**Involved Software**\n\nThe hypothesis testing library.\n\n**Difficulty**\n\nIntermediate to Advanced.\n\nHypothesis testing is simple in principle, but using it in practice can be difficult because it will uncover many bugs in SymPy. It will also not be straightforward to use hypothesis to test symbolic expressions (there are some ideas on how to do this outlined in the issue).\n\n**Prerequisite Knowledge**\n\nPrior experience with using hypothesis would be a huge plus, but it is not a hard requirement. If you have not used hypothesis before it is recommended that you play around with it and perhaps try adding some simple tests for something (in SymPy or somewhere else) to get familiar with it.\n\n**Project Length**\n\n350 hours (175 hours is possible, but the longer is preferred since there will be many things to do for this project).\n\nUser Application Projects\n-------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#user-application-projects)\n\nLFortran SymPy Project Ideas\n----------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#lfortran-sympy-project-ideas)\n\n[LFortran](https://gitlab.com/lfortran/lfortran) is a modern open-source (BSD licensed) interactive Fortran compiler built on top of LLVM. It can execute user's code interactively to allow exploratory work (much like Python, MATLAB or Julia) as well as compile to binaries with the goal to run user's code on modern architectures such as multi-core CPUs and GPUs.\n\nThe basic idea of LFortran is to provide the infrastructure that can be used as a foundation to do anything related to Fortran (tools that need any of: parsing, source code generation, code transformation, machine code generation, etc.)\n\nLFortran is currently written in Python. Down the line it will get rewritten into C++ for speed and robustness, but even then it will have Python wrappers, so the Python API should not change much.\n\nThere are many potential projects regarding Fortran in general and . Please see the two ideas here first for background information:\n\n[https://github.com/sympy/sympy/wiki/GSoC-Ideas#code-generation](https://github.com/sympy/sympy/wiki/GSoC-Ideas#code-generation) [https://github.com/sympy/sympy/wiki/GSoC-Ideas#parsing](https://github.com/sympy/sympy/wiki/GSoC-Ideas#parsing)\n\nAnd then read through LFortran's documentation, mainly the [Developer Tutorial](https://docs.lfortran.org/developer_tutorial/) to understand LFortran's AST and ASR.\n\nThis page contains a few well developed ideas.\n\nSymPy -\\> Fortran Code Generation and JIT\n-----------------------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#sympy---fortran-code-generation-and-jit)\n\n**Idea**\n\nCode generation from SymPy -\\> ASR, and then have two options: ASR -\\> AST -\\> source code, or ASR -\\> LLVM -\\> JIT and load it from Python to test it out.\n\nDown the road the LLVM route might even be producing better (faster) code than using SymEngine-\\>LLVM, because one can do optimizations on the ASR itself and before it is lowered to LLVM (as part of LFortran down the road), especially if one starts using do loops and arrays, because one knows more semantic information at the Fortran level than the LLVM level. And one can at least see the high level Fortran code (for debugging), as opposed to the relatively low level LLVM IR.\n\nCurrently SymPy represents Fortran code as a SymPy AST which is a combination of `sympy.codegen.ast` and `sympy.codegen.fnodes`. The `sympy.printing.fcode` module then has a visitor pattern that transforms this `ast`/`fnodes` AST into Fortran source code.\n\nAs a first step, one would change `fcode()` to transform this SymPy AST to LFortran's ASR. That will greatly simplify the printing, as LFortran will take care of transforming ASR -\\> AST (adding variable definitions mostly) and AST-\\>source code. So SymPy code will get simplified. But also this will enable to then use LFortran to just in time compile this ASR and execute it from Python, thus allowing to interactively test the generated code.\n\nOne would port all the features from `fcode()` into LFortran, where it makes sense. SymPy should only do things which are SymPy specific.\n\nAfter this is done, one can implement more features. For example it could be useful if the code printers could output parallel code using OpenMP directives (e.g. parallel for loops for C and Fortran, including use of reduction). Most printers do not yet support the new AST nodes, it would be useful if those were extended so that they can express ASTs created e.g. by functions in `sympy.codegen.algorithms`.\n\nAnother idea for codegen is to add more support for directly working with matrices. For instance, matrix expressions (`sympy.matrices.expressions` objects) should print LAPACK calls.\n\n**Project Length**\n\n350 hours.\n\nParsing Fortran code to SymPy\n-----------------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#parsing-fortran-code-to-sympy)\n\n**Idea**\n\nLFortran can parse Fortran source code to AST and then convert AST to ASR. This ASR will then get inspected and Fortran expressions identified and converted to SymPy expressions. This would allow SymPy to easily read in, alter, and write out computational Fortran code. This project would enable many other projects in the future.\n\nThis would be a general framework, some applications of this (some of which can be part of this project):\n\n*   load the right hand side expressions and generate manufactured solution\n*   check that a special function (e.g., spherical harmonics) Fortran implementation has the right expressions in it\n\nPart of this project can also be to implement a capability in LFortran to track the values of variables (\"x\") that go into an expression when you actually run the code on production data.\n\nA separate project idea is to:\n\n*   optimize floating point expressions (à la [https://herbie.uwplse.org/](https://herbie.uwplse.org/))\n*   Based on the range of \"x\" (and other variables), determine which symbolic simplifications make sense to make things more accurate --- and to provide faster implementations of special functions, say if it is determined that \"x\" in sin(x) is in the range \\[0, 1e-3\\], then there are much faster polynomial approximations that give the same accuracy (the same might be possible if the range is say \\[1.5, 1.7\\], or any other finite range).\n\nSee [https://github.com/sympy/sympy/wiki/GSoC-Ideas#optimize-floating-point-expressions](https://github.com/sympy/sympy/wiki/GSoC-Ideas#optimize-floating-point-expressions) for the expansion of this idea, as this capability is independent of LFortran.\n\n**Project Length**\n\n350 hours.\n\nIdea Prompts\n------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#idea-prompts)\n\n*   Linear algebra\n    \n    *   Improve the matrices module documentation\n    *   Refactor the `MatrixBase` class.\n    *   Add more special matrices to the matrix expressions module, and migrate some special matrices from the quantum physics module.\n    *   Add more matrix decomposition methods: Schur Decomposition, Polar Decomposition, Hermite Decomposition, ...\n    *   Make the matrices use the specialized data types (Modular Integers, Gaussian Rationals, Polynomial Ring, ...) from the `polys` module.\n*   improve the integration algorithm\n    \n    *   integration of functions on domains of maximum extent, etc.\n    *   Interesting idea: \"SYMBOLIC COMPUTATION OF INTEGRALS BY RECURRENCE\" by MICHAEL P. BARNETT\n    *   A Simple Method for Computing Some Pseudo-Elliptic Integrals in Terms of Elementary Functions, [https://arxiv.org/pdf/2004.04910.pdf](https://arxiv.org/pdf/2004.04910.pdf)\n*   definite integration & integration on complex plane using residues. Note that we already have a strong algorithm that uses Meijer G-Functions implemented. So we need to first determine if such an algorithm would be worthwhile, or if it would be better to extend the current algorithm. Note that there are many integrals that are easy to compute using residues that cannot be computed by the current engine. Other possibilities: the ability to closed path integrals in the complex plane, which is not possible with the Meijer G algorithm.\n    \n    *   [https://www.researchgate.net/publication/312366307\\_Contour\\_Integration\\_or\\_what\\_is\\_still\\_missing\\_in\\_Mathematica\\_Part\\_1\\_Residues\\_and\\_Contour\\_Integration](https://www.researchgate.net/publication/312366307_Contour_Integration_or_what_is_still_missing_in_Mathematica_Part_1_Residues_and_Contour_Integration)\n    *   [https://www.researchgate.net/publication/312343785\\_Contour\\_Integration\\_or\\_what\\_is\\_still\\_missing\\_in\\_Mathematica\\_Part\\_2\\_Construction\\_of\\_sophisticated\\_Contour\\_Paths\\_Location\\_of\\_Poles\\_insideoutside\\_Closed\\_Contours\\_Special\\_Functions\\_Representations\\_by\\_Cont](https://www.researchgate.net/publication/312343785_Contour_Integration_or_what_is_still_missing_in_Mathematica_Part_2_Construction_of_sophisticated_Contour_Paths_Location_of_Poles_insideoutside_Closed_Contours_Special_Functions_Representations_by_Cont)\n    *   [https://www.researchgate.net/publication/319554309\\_Contour\\_Integration\\_or\\_what\\_is\\_still\\_missing\\_in\\_Mathematica\\_Part\\_3\\_Contour\\_Integrals\\_of\\_Functions\\_with\\_Branch\\_Cuts](https://www.researchgate.net/publication/319554309_Contour_Integration_or_what_is_still_missing_in_Mathematica_Part_3_Contour_Integrals_of_Functions_with_Branch_Cuts)\n    *   [http://www.cs.kent.edu/~pwang/Paul-phd-dissertation.pdf](http://www.cs.kent.edu/~pwang/Paul-phd-dissertation.pdf)\n    \n*   Groebner bases and their applications in geometry, simplification and integration\n    \n    *   improve Buchberger's algorithm and implement Faugere F4 (compare their speed) _Note: This has already been implemented by a previous GSoC student. Please check with us to see the current state of Groebner bases in SymPy_\n*   improve polynomial algorithms (gcd, factorization) by allowing coefficients in algebraic extensions of the ground domain\n    \n*   implement efficient multivariate polynomials (arithmetic, gcd, factorization)\n    \n    *   Implement a sparse representation for polynomials (see the dummy files in sympy/polys/ starting with \"sparse\" in the SymPy source code for a start to this project).\n    *   Figure out which representations to use where (sparse vs. dense).\n    *   implement efficient arithmetic (e.g. using geobuckets (Yan) or heaps (Monagan & Pearce))\n*   improve SymPy's pattern matching abilities (efficiency and generality)\n    \n    *   implement similarity measure between expression trees\n    *   expression complexity measures (e.g. Kolmogorov's complexity)\n    *   implement expressions signatures and heuristic equivalence testing\n    *   implement semantic matching (e.g. expression: cos(x), pattern: sin(a\\*x) + b)\n        *   e.g by using power series for this purpose (improve series speed)\n    *   Expand the capabilities of Wild() and match() to support regular expression-like quantifiers.\n*   improve simplification and term rewriting algorithms\n    \n    *   add (improve) verbatim and semi-verbatim modes (more control on expression rewriting)\n    *   implement more expression rewrite functions (to an exact form that user specifies). This may involve rewriting the rewrite framework to be more expressive. For example, should cos(x).rewrite(sin) return sqrt(1 - sin(x)\\*\\*2) or sin(pi/2 - x)?\n    *   maybe put transformation rules in an external database (e.g. prolog), what about speed?\n    *   improve context (e.g. input) depended simplification steps in different algorithms\n        *   e.g. the integrator needs different sets of rules to return \"better\" output for different input\n        *   but there are more: recurrences, summations, solvers, polynomials with arbitrary coefficients\n    *   what about information carried by expressions?\n        *   what is simpler: chebyshevt(1, x) or x ?\n        *   what is simpler: chebyshevt(1000, x) or (...) ?\n    *   improve trigonometric simplification. See for example the paper by fu et. al.\n*   implement symbolic (formal) logic and set theory\n    \n    *   implement predicate (e.g. first-order), modal, temporal, description logic\n    *   implement multivalued logic; fuzzy and uncertain logic and variables\n    *   implement rewriting, minimization, normalization (e.g. Skolem) of expressions\n    *   implement set theory, cardinal numbers, relations etc.\n    *   This task is heavily tied to the assumptions system.\n*   implement symbolic global optimization (value, argument) with/without constraints, use assumptions\n    \n*   continue work on objects with indices (tensors)\n    \n    *   include the index simplification algorithms used in [xAct](http://www.xact.es/) and [cadabra](http://cadabra.phi-sci.com/).\n*   generalized functions - Dirac delta, P(1/x), etc... Convolution, Fourier and Laplace transforms\n    \n    *   Fourier and Laplace transforms are implemented but we can not do many cases involving distributions _Is this enough alone for a project though? -Aaron_\n*   vector calculus, differential fields, maybe Lie algebras & groups\n    \n*   parametric integrals asymptotic expansion (integral series)\n    \n*   Integral equations. See for example the work started at [http://code.google.com/p/sympy/issues/detail?id=2344](http://code.google.com/p/sympy/issues/detail?id=2344). This could be part of a project on ODEs, for example.\n    \n*   partial differential equations. Currently, SymPy can't solve any PDEs, though a few tools related to separation of variables are implemented. The PDE module should be structured similarly to the ODE module (see the source code of sympy/solvers/ode.py).\n    \n*   improve SymPy's Common Subexpression Elimination (CSE) abilities.\n    \n    *   Poly factorization [http://cseweb.ucsd.edu/~kastner/papers/tcad06-poly\\_factorization\\_cse.pdf](http://cseweb.ucsd.edu/~kastner/papers/tcad06-poly_factorization_cse.pdf)\n*   Singular analysis and test continuous.\n    \n    *   find singularities of the function and classify them.\n    *   test the function whether it is continuous at some point or not. And in the interval. Note: Please discuss this idea with us if you are interested, as as it currently presented, it is somewhat vague.\n*   Control theory. systems for Maple and Mathematica might provide insight here. [http://www.mcs.anl.gov/~wozniak/papers/wozniak\\_mmath.pdf](http://www.mcs.anl.gov/~wozniak/papers/wozniak_mmath.pdf) might be useful.\n    \n*   Diophantine Equations: SymPy does have substantial support for solving these, nevertheless there is more work possible to improve the solver.\n    \n\nOther Related Projects\n----------------------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#other-related-projects)\n\nNon-Ideas\n---------\n\n[](https://github.com/sympy/sympy/wiki/GSoC-Ideas#non-ideas)\n\nEvery year, people ask about implementing various things that we have already decided do not belong in SymPy. Among these are:\n\n*   Out-of-scope ideas. SymPy is primarily a symbolic mathematics software. Ideas that are not related to **symbolic** mathematics are generally out of scope (with the exception of related topics like plotting or code generation, which are already mentioned here).\n*   Graph theory. The [NetworkX](http://networkx.github.com/) package already does a great job of graph theory in Python. If you are interested in working in graph theory, you should contact them.\n*   Numerical solvers. SymPy is a symbolic library, so the code should focus on solving things symbolically. There are already many libraries for solving problems numerically ([NumPy](http://www.numpy.org/), [SciPy](http://www.scipy.org/), ...).\n"}