{"name":"SQLancer","description":"Automatically testing database systems","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/sqlancer","ideas_url":"https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas","logo":"https://summerofcode.withgoogle.com/media/org/sqlancer/hzunjobwazuptdb6.png","technologies":["java","sql"],"topics":["fuzzing","Automated Testing","Logic bugs","Database systems"],"projects":[{"project_name":"Adding Grammars to Test New Database Systems","summary":"Develop SQL statement generators for new database systems using a domain-specific language, SGL, which enhances the current SQLancer functionality.","difficulty":"Medium"},{"project_name":"Adding a Feedback-guided Fuzzing Approach","summary":"Implement mutation-based fuzzing support in SQLancer to enhance the generation of test cases and introduce a feedback mechanism for testing.","difficulty":"Medium"},{"project_name":"Adding support for latest Postgres version","summary":"Update SQLancer to support the latest versions of Postgres, addressing deprecations and new features, particularly for version 17.","difficulty":"Medium"},{"project_name":"Architecture redesign for SQLancer","summary":"Create a unified connection mechanism for SQLancer to improve the integration and reuse of test oracles across different DBMSs.","difficulty":"Medium"},{"project_name":"Supporting Automated Scripts for DBMS Deployment","summary":"Develop automation scripts that simplify the setup of database management systems for testing with SQLancer, potentially using Docker.","difficulty":"Easy"},{"project_name":"Automating Testing Workflow of SQLancer","summary":"Design an intelligent LLM-based automation tool to streamline the testing workflow of SQLancer, enabling automatic deployment and bug reporting.","difficulty":"Hard"},{"project_name":"Integrating Published Testing Approaches into SQLancer","summary":"Incorporate effective automated testing methodologies like Differential Query Execution (DQE) into SQLancer while minimizing changes to its architecture.","difficulty":"Medium"}],"jina_response":"Title: GSoC 2025 Ideas\n\nURL Source: https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas\n\nMarkdown Content:\nContributor Guidance\n--------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#contributor-guidance)\n\nWhen reaching out to us, please understand that we might not respond to overly generic messages that could be sent to any of the GSoC organizations. We appreciate specific and informed requests, thoughts, or ideas.\n\nTo maximize your chance of submitting a successful proposal, we recommend the following:\n\n*   Read the [GSoC student guide](https://google.github.io/gsocguides/student/).\n*   Go through the SQLancer resources, in particular, the [CONTRIBUTING.md](https://github.com/sqlancer/sqlancer/blob/master/CONTRIBUTING.md) document as well as the [SQLancer YouTube tutorial](https://www.youtube.com/playlist?list=PLm7ofmclym1E2LwBeSer_AAhzBSxBYDci).\n*   Join the [SQLancer Slack](https://join.slack.com/t/sqlancer/shared_invite/zt-eozrcao4-ieG29w1LNaBDMF7OB_~ACg), which is the main means of communication used by the SQLancer developers, and introduce yourself. We also encourage you to share your ideas with us using this platform, so we can support you with your proposal.\n*   It would significantly strengthen your case if you could show your aptitude by finding an opportunity to create one or multiple PRs. Refactorings would be a low-hanging fruit. For example, you could factor out common functionality in statement generators [like in a previous PR for `UPDATE` SQL statements](https://github.com/sqlancer/sqlancer/pull/662). As another example, you could [update an outdated database system version](https://github.com/sqlancer/sqlancer/blob/main/README.md#faq).\n\nProjects Ideas\n--------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#projects-ideas)\n\nAdding Grammars to Test New Database Systems\n--------------------------------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#adding-grammars-to-test-new-database-systems)\n\nSQLancer supports close to 20 database systems (see the subdirectories with the relevant database names at [src/sqlancer](https://github.com/sqlancer/sqlancer/tree/master/src/sqlancer)). Adding support for a new database system involves developing generators that generate SQL statements specific to the database system under test. The process of adding a new database system is described in the [CONTRIBUTING.md](https://github.com/sqlancer/sqlancer/blob/master/CONTRIBUTING.md#implementing-support-for-a-new-dbms) guide.\n\nRecently, we have developed a new domain-specific language called [SQL Generation Language (SGL)](https://github.com/albertZhangTJ/sqlancer-lancerfuzz/tree/grammar_optimization/src/lancerfuzz) which should be used to aid you with this process. SGL takes in a grammar file that describes syntaxes of the target SQL dialect. The language is designed based on [ANTLR](https://github.com/sqlancer/sqlancer/wiki/antlr.org) which describes context-free grammars (to be exact, parser expression grammars) for parsing, on top of which language constructs for maintaining fuzzing contexts and enforcing semantic constraints are added.\n\n*   **Required skills**: Experience with using Git as well as basic SQL knowledge is expected\n*   **Expected size**: Either 175 or 350 hour\n*   **Difficulty**: Medium\n*   **Expected outcomes**: Support for one (or multiple) new database systems as well as reporting of bugs found in that system\n*   **Potential mentors**: [@albertZhangTJ](https://github.com/albertZhangTJ)\n\nVarious additional hints:\n\n*   Most implementations use JDBC, which is well-supported by SQLancer.\n*   To get an idea of what database systems you could consider supporting, the [DB-Engines ranking](https://db-engines.com/en/ranking/relational+dbms) or the [Database of Databases](https://dbdb.io/) might be useful.\n*   It would be useful to first contact the developers of the database system to check whether they would welcome a testing effort of their system.\n\nAdding a Feedback-guided Fuzzing Approach\n-----------------------------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#adding-a-feedback-guided-fuzzing-approach)\n\nCurrently, the main approach used by SQLancer to generate test cases is generation-based and black-box. The goal of this project is to add mutation-based fuzzing support to SQLancer. To this end, random decisions in the generators (mostly implemented in the [Randomly class](https://github.com/sqlancer/sqlancer/blob/8f4966a1b67dff22951f2bf3e0a02ad301fb86f1/src/sqlancer/Randomly.java)) should be recorded as seed inputs (so-called [decision seeds](https://arxiv.org/pdf/2109.11277)), and further mutated. Different ways of measuring whether a test input triggers an interesting behavior should be tried and experimented with; for example, [query plans are one potential feedback signal](https://arxiv.org/pdf/2312.17510).\n\n*   **Required skills**: Strong Java skills are essential and experience with using Git as well as basic SQL knowledge is expected\n*   **Expected size**: Either 175 or 350 hour\n*   **Difficulty**: Medium\n*   **Expected outcomes**: Initial prototype that can be merged into the main SQLancer repository\n*   **Potential mentors**: [@albertZhangTJ](https://github.com/albertZhangTJ)\n\nAdding support for latest Postgres version\n------------------------------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#adding-support-for-latest-postgres-version)\n\nToday, SQLancer only supports Postgres version 12, which became [End-of-Life](https://www.postgresql.org/support/versioning/) in Nov 2024. The goal of this project is to advance SQLancer to support the latest version of Postgres, which would involve not just modifying generators to address deprecations and new features launched.\n\nChanges in a Postgres version can be reviewed in the release notes (for e.g. in order to make SQLancer support version 17 of Postgres, the [v17 release notes](https://www.postgresql.org/docs/release/17.0/) would highlight the key changes). A stretch goal would be to add support for features, such as additional data-types (JSON), procedural extensions, etc. Additionally, for databases that are already supported by SQLancer, it would be beneficial to extend support to their latest versions.\n\n*   **Required skills**: Strong Java skills are essential and experience with using Git as well as basic SQL knowledge is expected\n*   **Expected size**: Either 175 or 350 hour\n*   **Difficulty**: Medium\n*   **Expected outcomes**: Support the latest version of Postgres (HEAD branch)\n*   **Potential mentors**: [@robins](https://github.com/robins)\n\nArchitecture redesign for SQLancer\n----------------------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#architecture-redesign-for-sqlancer)\n\nSQLancer has undergone efforts to redesign its architecture to improve reusability of test oracles across different database management systems (DBMSes). However, this effort faced challenges due to incorrect assumptions regarding the DBProvider and DBConnection components. For example, the majority of DBMSes have a JDBC implementation, but [CnosDB](https://github.com/sqlancer/sqlancer/tree/main/src/sqlancer/cnosdb/client) does not, requiring the development of a custom client. This means that common test oracle will not work in such cases.\n\nThe goal of this project is to design and implement a common connection mechanism that will standardize how oracles send and receive data from DBMSes. By doing so, we aim to reduce code duplication, simplify the integration of new DBMSes, and facilitate further development in SQLancer. Additionally, we aim to continue the creation of common test oracles, particularly by expanding on the subtypes of Ternary Logic Partitioning ([see implementation for Postgres](https://github.com/sqlancer/sqlancer/tree/main/src/sqlancer/postgres/oracle/tlp)).\n\n*   **Required skills**: Moderate Java programming skills and Unix/Linux familiarity. SQL knowledge is not necessary\n*   **Expected size**: 175 hours\n*   **Difficulty**: Medium\n*   **Expected outcomes**: A unified connection component and more implementations of common test oracles\n*   **Potential mentors**: [@malwaregarry](https://github.com/malwaregarry)\n\nSupporting Automated Scripts for DBMS Deployment\n------------------------------------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#supporting-automated-scripts-for-dbms-deployment)\n\nSQLancer is a tool to automatically test Database Management Systems, but setting up the corresponding DBMS instances for testing demands significant manual effort. Beginners often find it challenging to navigate the process, which involves carefully reading documentation to build and start the server, followed by configuring SQLancer to initiate fuzzing.\n\nThe goal of this project is to develop a suite of automation scripts that streamline the entire process: automatically building DBMSs, starting them, configuring SQLancer, and launching tests. Docker is a potential solution. Additionally, providing these unified deployment scripts can make the bug reproduction both simpler and more reliable.\n\n*   **Required skills**: Moderate Docker and Unix/Linux familiarity. SQL or Java knowledge is not necessary\n*   **Expected size**: Either 90 or 175 hours\n*   **Difficulty**: Easy\n*   **Expected outcomes**: Scripts to deploy the DBMS and start SQLancer testing\n*   **Potential mentors**: [@suyZhong](https://github.com/suyZhong)\n\nAutomating Testing Workflow of SQLancer\n---------------------------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#automating-testing-workflow-of-sqlancer)\n\nSQLancer supports close to 20 database systems (see the subdirectories with the relevant database names at [src/sqlancer](https://github.com/sqlancer/sqlancer/tree/master/src/sqlancer)); however, testing a new DBMS demands manual tasks such as building the system, starting the DBMS server, running SQLancer to execute tests, and subsequently reporting any discovered bugs.\n\nTo address these challenges, the project will design and implement an intelligent automation tool--potentially leveraging a large language model (LLM) agent--that delivers a push-button testing procedure. This tool will automatically build and initiate the DBMS server according to its documentation, run SQLancer tests, and generate bug reports automatically.\n\n*   **Required skills**: Moderate Python programming skills, Docker and Unix/Linux familiarity. SQL or Java knowledge is not necessary\n*   **Expected size**: 350 hours\n*   **Difficulty**: Hard\n*   **Expected outcomes**: An LLM agent that can automatically deploy the DBMS and start SQLancer testing\n*   **Potential mentors**: [@suyZhong](https://github.com/suyZhong)\n\nIntegrating Published Testing Approaches into SQLancer\n------------------------------------------------------\n\n[](https://github.com/sqlancer/sqlancer/wiki/GSoC-2025-Ideas#integrating-published-testing-approaches-into-sqlancer)\n\nVarious effective automated testing approaches for database systems [such as Differential Query Execution (DQE)](https://ieeexplore.ieee.org/document/10172736) have been published, but not integrated into SQLancer. The goal of this project is to integrate DQE and potentially also other testing approaches into SQLancer.\n\nThe integration should happen while minimizing invasive changes to the existing architecture and aiming to make it easier to integrate future approaches. Thus, this project will require understanding SQLancer's architecture and how existing approaches could be elegantly integrated.\n\n*   **Required skills**: Java programming skills. SQL knowledge is not necessary\n*   **Expected size**: 175 hours\n*   **Difficulty**: Medium\n*   **Expected outcomes**: Integration of DQE and potentially other automated testing approaches\n*   **Potential mentors**: [@JensonSung](https://github.com/JensonSung)\n"}