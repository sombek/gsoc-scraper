{"name":"Plone Foundation","description":"Python-based CMS, with React front-end.","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/plone-foundation","ideas_url":"https://plone.org/community/gsoc/2025","logo":"https://summerofcode.withgoogle.com/media/org/plone-foundation/wivpatiziuhidzjw-360.png","technologies":["python","javascript","react"],"topics":["web","cms"],"projects":[{"project_name":"Keyword manager for Volto","summary":"Development of a tool to manage tags/keywords efficiently and prevent duplicates within Volto sites.","difficulty":"intermediate"},{"project_name":"Installation and documentation","summary":"Streamline and simplify Plone installation instructions for various target audiences, combining resources from different platforms.","difficulty":"intermediate"},{"project_name":"GUI for export/import","summary":"Create a GUI-based interface for the existing plone.importexport tool to enhance usability for non-technical users.","difficulty":"intermediate"},{"project_name":"Volto themes","summary":"Design and implement new ready-to-use themes for Volto, providing users with more customization options.","difficulty":"intermediate"},{"project_name":"Workflow manager for Volto","summary":"Build a new workflow management system within Volto to enhance content management capabilities.","difficulty":"hard"},{"project_name":"Social media sharing","summary":"Develop a feature that allows users to share content easily across various social media platforms.","difficulty":"easy"},{"project_name":"Update pas.plugins.authomatic","summary":"Bring the pas.plugins.authomatic plugin up-to-date with the latest standards and requirements from different providers.","difficulty":"intermediate"},{"project_name":"Repeater block","summary":"Enable the reuse of block types within listings to enhance functionality for users when displaying varied content types.","difficulty":"intermediate"},{"project_name":"Content warnings","summary":"Create a content warning system that alerts users about potential content issues based on custom guidelines.","difficulty":"intermediate"},{"project_name":"Integrate akismet.com","summary":"Integrate the Akismet service into Plone to help manage and filter spam within content submissions.","difficulty":"intermediate"},{"project_name":"Python GraphQL","summary":"Develop a Python-based GraphQL API for Plone to improve data retrieval efficiency and allow more complex data queries.","difficulty":"hard"}],"jina_response":"Title: Google Summer of Code Project Ideas 2025\n\nURL Source: https://plone.org/community/gsoc/2025\n\nMarkdown Content:\nProject Ideas are proposed by Mentors from the Plone organization. Potential contributors never propose ideas. If the Plone organization is accepted to participate in GSoC on [February 27, 2025](https://developers.google.com/open-source/gsoc/timeline), then potential contributors may discuss application ideas with Mentors in the [Community Forum](https://community.plone.org/tag/gsoc). See the [Google Summer of Code 2025 Timeline](https://developers.google.com/open-source/gsoc/timeline).\n\nPlone Google Summer of Code guidelines\n--------------------------------------\n\nThe Plone Foundation has been a mentoring organization for the Google Summer of Code program for many years. It is great to have students working on Plone and related projects during the summer, it has brought many new contributors to the community.\n\nSince a few years ago, the number of candidates has been significantly growing, and we are very happy about that. However, the amount of candidates is not easy to manage for us as a community.\n\nWe want to list here some dos and don'ts for the GSoC candidates, to help them to get started with Plone and to help us to manage the amount of candidates.\n\n### **Do** learn about Plone\n\nPlone is a complex system, and it is not easy to get started with it. We expect that you have started to learn about Plone before applying.\n\nThe best way to learn about Plone is to follow our [online trainings](https://training.plone.org/) and our [documentation](https://docs.plone.org/).\n\n### **Don't** create issues, pull requests, or comments in GitHub\n\nGitHub is used by contributors who use Plone for their work. GitHub is not a place for GSoC candidates to ask for guidance, help, or support. GSoC candidates should not create pull requests, issues, or comments.\n\nDo not request to ask to become a Plone Contributor, you will engage this procedure only if your GSoC project is accepted.\n\nIn fact, doing so may result in you getting suspended or banned from the Plone GitHub organization. It also may hurt your chances of being selected to participate in GSoC.\n\n### **Do** introduce yourself to the community\n\nIntroduce yourself to our community by starting a new post or joining a conversation here in the [community forum](https://community.plone.org/tag/gsoc).\n\nYou can ask questions about Plone, and more importantly, you can discuss the GSoC projects on their dedicated threads. You can ask questions about the projects, and you can propose your own ideas.\n\n### **Don't** be disrespectful\n\nCandidates must treat other developers and GSOC mentors with respect, both in text and communication. And also respect their limited time that they make available to our project and cause. If you don't receive an answer from a Team Lead, other developer or Release Manager, it is considered impolite to start pinging them in comments every day for an answer. Pinging 4 or 5 other developers because you didn't get an answer is considered rude as well.\n\n### **Do** focus on your application\n\nWhat will make the real difference between candidates is the quality of their application, not the amount of GitHub issues they have commented on.\n\nMake your application stand out by showing that you have learned about Plone and that you have a good understanding of the project you are applying for.\n\n**The GSoC contributor application period will start on March 24, 2025.**\n\n**Thank you!**\n\nIdeas\n-----\n\nNote: This is a draft list, the ideas listed here will be refined and detailed in the coming days, and we might add new ones too.\n\n### Keyword manager for Volto\n\nSkills: React and Python\n\nAn implementation of KeywordManager for Volto. Basically, it is a tool to manage tags/keywords on a site. Over time, as multiple people tag content items, it is almost inevitable that there will be duplicates (\"labor\" vs \"labour\", various spellings of countries, etc).\n\nA way to handle (merge, change, delete) keywords should be more or less a core feature, but it's probably safer to have it as add-on first. That's the objective of this project.\n\nThe UX for Products.Keywordmanager has always been a bit clunky, but functional. As it targets mainly site admins or 'senior editors', it doesn't have to be super user friendly but should cope with hundreds or thousands of keywords.\n\nThere could be ways to help (like marking words that are spelled similarly) but ultimately it is an editor decision to say that e.g. \"global warming\" and \"climate change\" should be merged as tags, or not.\n\nSize: 350\n\nRating: intermediate\n\nPossible mentors:\n\nExpected outcome: a working Volto add-on implementing the feature, with tests and documentation.\n\n### Installation and documentation\n\nSkills: Python\n\nA mix of dev and documentation: streamline/simplify the Plone installation instructions, which are spread out over docs.plone.org, training.plone.org, plone.org.\n\nThey have different target audiences to consider: back end devs, front end devs, add-on devs, I Just Wanna Have Fun And Use Plone people, with docker and without dockerâ€¦\n\nSize: 175\n\nRating: intermediate\n\nPossible mentor:\n\nExpected outcome: documentation.\n\n### GUI for export/import\n\nSkills: React, Python\n\nWe have plone.importexport but we should have it GUI-based so mortals can use it.\n\nHere are the UI mockups from the last time this was attempted as a GSoC: [https://github.com/collective/plone.importexport/issues/15](https://github.com/collective/plone.importexport/issues/15)\n\nBuilding on top of the excellent exportimport and using react would make this a lot more achievable now.\n\nSize: 350\n\nRating: intermediate\n\nPossible mentors:\n\nExpected outcome: a working Volto add-on implementing the feature, with tests and documentation.\n\n### Volto themes\n\nSkills: React\n\nThe objective of this project is to create new ready-to-use Volto themes.\n\nSize: 175\n\nRating: intermediate\n\nPossible mentor: Rafael\n\nExpected outcome: Volto themes and documentation\n\n### Workflow manager for Volto\n\nSkills: React and Python\n\nSize: 350\n\nRating: hard\n\nPossible mentor: Rafael\n\nExpected outcome: a working Plone add-on implementing the feature, with tests and documentation.\n\n### Social media sharing\n\nSkills: React, Python\n\nSize: 175\n\nRating: easy\n\nPossible mentor:\n\nExpected outcome: a working Plone add-on implementing the feature, with tests and documentation.\n\n### Update pas.plugins.authomatic to the current state of different providers\n\nSkills: React, Python\n\nSize: 175\n\nRating: intermediate\n\nPossible mentor: Jens W. Klein\n\nExpected outcome: a working Plone add-on implementing the feature, with tests and documentation.\n\n### Repeater block\n\nSkills: React, Python\n\nThe ability to reuse blocks types as the items in a listing to make listings more powerful. e.g. teaser listing, image listing etc.\n\nIn addition the ability to have sources plugins so listings can be other kinds of data not just plone search, for example social media posts, RSS feeds, related/recommended items to this content or links to search pages with different facets preselected.\n\nSize: 175\n\nRating: intermediate\n\nPossible mentor: Rafael\n\n### Content warnings\n\nSkills: React, Python\n\nAn content warning system for when content violates custom rules, such as WCAG guidelines, design system rules or other organisation specific guidance. Similar to content rules but warning during edits as well as reports across the whole site.\n\nSize: 175\n\nRating: intermediate\n\nPossible mentor:\n\nExpected outcome: a working Plone add-on implementing the feature, with tests and documentation.\n\n### Integrate akismet.com\n\nSkills: React, Python\n\n### Python GraphQL\n\nSkills: Python\n\nSize: 350\n\nPossible mentor:\n\nRating: hard\n\nThere was a previous GSoC which made a kind of wrapper graphql specifically for gatsby. But it's js and underneath just uses restapi calls.\n\nThe key benefit of graphql is to be able to optimise your queries so you return just the information you need in a single query.\n\nThis is done in two ways.\n\n*   One is having a standard on how to specify just what parts of the data you want, so instead of a restapi content call returning all sorts of data you might throwaway or can reduce the size of the return json significantly.\n*   The second is to have a standard way to return related information in one query instead of returning an initial result and using that to make additional queries. plone restapi has some aspects that try to do this, like @expand and ways to get additional data about items using relations or querystring. But a well thoughtout plone graphql would let you describe more complex queries such as getting data on children of related items, or items related to items returned by a querystring etc or any combination you can think of.\n\nIf graphql was done in python then this could be made efficient because its using ZODB not restapi queries underneath. I think you could reuse most of plone.rest and plone.restapi so it's not like making a whole new api from scratch.  \nThe goal would be an api that is useful for many applications not just gatsby and focusing on opening up the unique way plone content works in a hierarchy and being able to take advantage of that in a efficient way via an headless frontend.\n"}