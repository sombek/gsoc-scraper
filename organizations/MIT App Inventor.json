{"name":"MIT App Inventor","description":"Anyone can build apps with global impact","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/mit-app-inventor","ideas_url":"https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025","logo":"https://summerofcode.withgoogle.com/media/org/mit-app-inventor/8ppq0spvr3j3gx8q-360.png","technologies":["javascript","java","gwt","swift"],"topics":["education","development tools","android","ios"],"projects":[{"project_name":"Trainable ChatBot interface and AI component","summary":"Develop a customizable ChatBot tool that integrates into App Inventor, enhancing AI features similar to existing classifiers.","difficulty":"Hard"},{"project_name":"Property editor for creating transfer-learning ML models","summary":"Create property editors in App Inventor for simplifying the building and training of ML models without external websites.","difficulty":"Hard"},{"project_name":"ListView Component Update","summary":"Enhance the ListView component with new layouts and improved usability for complex list items.","difficulty":"Medium"},{"project_name":"iOS Implementation of Menu Component","summary":"Implement previously created menu components for iOS to match their Android functionality, ensuring cross-platform support.","difficulty":"Hard"},{"project_name":"Responsive (Mobile phone) layout","summary":"Refactor the App Inventor interface to provide a user-friendly layout for mobile devices, improving accessibility.","difficulty":"Medium"},{"project_name":"Better behavior for unimplemented components","summary":"Improve the iOS Companion’s handling of unimplemented components to prevent crashes and provide user feedback.","difficulty":"Medium"},{"project_name":"Assets Library","summary":"Create an interface for users to upload and organize assets, facilitating easier project asset management within App Inventor.","difficulty":"Medium"},{"project_name":"Learning Management System (LMS) Integrations","summary":"Integrate App Inventor with LMS systems like Google Classroom for better assignment management and submissions.","difficulty":"Medium"},{"project_name":"User defined components/extensions","summary":"Allow users to create reusable App Inventor components, enhancing modularity and collaboration among users.","difficulty":"Hard"},{"project_name":"Github workflow hooks","summary":"Implement hooks to help manage dual-master workflows in the App Inventor repository, aligning with Github expectations.","difficulty":"Medium"}],"jina_response":"Title: Google Summer of Code 2025\n\nURL Source: https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025\n\nMarkdown Content:\nIntroduction\n------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#introduction)\n\nWelcome to Google Summer of Code with MIT App Inventor.\n\nWe have an application process in addition to Google's application process. You must do both. Please apply to Google for GSoC through [Google’s Website](https://summerofcode.withgoogle.com/get-started/). All applications have to go through Google.\n\nWe will be receiving applications within the timeframe allocated by GSoC. Please consult the [GSoC website](https://summerofcode.withgoogle.com/get-started/) for details. For bite-sized issues to work on as part of the community introduction phase, please see the [help wanted issue list](https://github.com/mit-cml/appinventor-sources/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22).\n\nBelow is the list of projects we are proposing for the summer; you can choose one or more projects from the list, or come up with your own project. Also note that these projects could be worked on outside GSoC if you would like to volunteer during the summer.\n\nInformation for students\n------------------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#information-for-students)\n\n### How to apply\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#how-to-apply)\n\n[Our application form for GSoC 2025 is here](https://docs.google.com/forms/d/e/1FAIpQLScxYQfEYtplIpTI1g_SvFP0tNEolfsLzYaTgUgdks_8KF_7qA). Additional instructions are linked from the application form.\n\nPotential Projects\n------------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#potential-projects)\n\nThis is what you might expect from projects in the list below:\n\n*   Brief explanation: An explanation of what the project is about. Please note that this might be just an idea, and as part of your work in the project you will be defining and scoping the project.\n    \n*   Technical Difficulty: A rough idea of how difficult the project is given knowledge of the language but not necessarily the knowledge of the frameworks involved.\n    \n*   Estimated Time Commitment: An estimate for the total number of hours required to be spent on the project to produce a working solution with testing.\n    \n*   Knowledge Prerequisite: A brief list of the technologies needed in order to work on this project.\n    \n*   Potential Mentor: The currently active team member you will probably be working with during the summer (this can also change depending on which projects are chosen).\n    \n\n* * *\n\nProjects list\n-------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#projects-list)\n\nArtificial Intelligence Projects\n--------------------------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#artificial-intelligence-projects)\n\n### Trainable ChatBot interface and AI component\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#trainable-chatbot-interface-and-ai-component)\n\n**Brief Explanation:** App Inventor has a growing offering of artificial intelligence features and is looking to add more cutting-edge AI learning experiences. We are looking to build a tool to create a trainable and customizable ChatBot that can be imported into an App Inventor app. This would be a similar experience to our Personal Image Classifer (PIC) and Personal Audio Classifer (PAC) extensions wherein there are external websites to build and train models, and these models are then exported and imported into App Inventor.\n\n*   PIC: [https://classifier.appinventor.mit.edu/](https://classifier.appinventor.mit.edu/)\n*   PAC: [https://c1.appinventor.mit.edu/](https://c1.appinventor.mit.edu/)\n\nFamiliarity with RAG implementations and SLMs will be helpful.\n\n**Technical Difficulty:** Hard\n\n**Estimated Time Commitment:** 350 hours\n\n**Knowledge Prerequisites:** Java, GWT, Javascript.\n\n**Potential Mentors:** Natalie Lao\n\n### Property editor for creating transfer-learning ML models\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#property-editor-for-creating-transfer-learning-ml-models)\n\n**Brief Explanation:** Our Personal Image Classifer (PIC) and Personal Audio Classifer (PAC) components use external websites to build and train models. Those models then have to be exported and imported into App Inventor. It's a cumbersome process.\n\n*   PIC: [https://classifier.appinventor.mit.edu/](https://classifier.appinventor.mit.edu/)\n*   PAC: [https://c1.appinventor.mit.edu/](https://c1.appinventor.mit.edu/)\n\nBuild these sites as property editors in core App Inventor.\n\n**Technical Difficulty:** Hard\n\n**Estimated Time Commitment:** 350 hours\n\n**Knowledge Prerequisites:** Java, GWT, Javascript.\n\n**Potential Mentors:** Jeff Schiller\n\nComponent Projects\n------------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#component-projects)\n\n### ListView Component Update\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#listview-component-update)\n\n**Brief Explanation:** The ListView component offers a sophisticated set of behavior options. It supports both the addition of simple list elements by comma-delimited string and complex items by an interactive editor in the web designer. It supports several different layouts of list elements that include strings and images. Lists elements can display in a scrolling list style or a \"swipe left\" single element card style. Several parts of this need to be enhanced or refactored.\n\n**Expected Results:** Add features: New layout matching a swipe-left browser with a large central image with text below as captions; refactor of web designer list item editor to use UIBinder layout template, be more user-friendly, and be keyboard navigable; multi-select support. Update some iOS features that do not work properly.\n\n**Knowledge Prerequisites:** Java, GWT, swift\n\n**Technical Difficulty**: Medium\n\n**Estimated Time:** 175 hours\n\n**Potential Mentors:** Susan Rati Lane\n\n### iOS Implementation of Menu Component\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#ios-implementation-of-menu-component)\n\n**Brief Explanation:** A previous GSoC project created a set of menu components for Android apps. We were never able to release it because by the time PR review was complete, we were fully supporting iOS, and these components were not implemented in iOS.\n\n**Expected Results:** Implement Menu, Sidebar, and Floating Action components in iOS to match the functionality in this PR: [https://github.com/mit-cml/appinventor-sources/pull/2299](https://github.com/mit-cml/appinventor-sources/pull/2299). It is not up-to-date with master, but it should compile and run in a development environment.\n\n**Knowledge Prerequisites:** swift\n\n**Technical Difficulty**: Hard\n\n**Estimated Time:** 350\n\n**Potential Mentors:** Susan Rati Lane\n\nDesigner Projects\n-----------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#designer-projects)\n\nImprovements for the Designer view. This part of the system is built mainly with Java using the Google Web Toolkit.\n\n### Responsive (Mobile phone) layout\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#responsive-mobile-phone-layout)\n\n**Brief Explanation:** In 2023, App Inventor rolled out an extensive refactor of our user interface to support GWT's UiBinder framework. This allows us to provide multiple user interface layouts based on device or user preferences. We see a growing number of users accessing App Inventor with mobile phones, and handheld devices are globally more accessible than desktops or laptops. We would like to provide a user interface option that makes App Inventor a more practical option for small screens.\n\n**Technical Difficulty:** Medium\n\n**Estimated Time Commitment:** 350 hours\n\n**Knowledge Prerequisites:** Java, GWT, UiBinder.\n\n**Potential Mentors:** Susan Lane\n\n### Better behavior for unimplemented components\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#better-behavior-for-unimplemented-components)\n\nCurrently, when an Android-only component is added to a project and loaded into the iOS Companion, the app just crashes. We would like our iOS Companion to be able to detect that it is trying to load an unimplemented component and present the user with useful information about it. We would also like the app to run if it is possible without the unimplemented component.\n\n**Technical Difficulty:** Medium\n\n**Estimated Time:** 175\n\n**Knowledge Prerequisite:** Swift\n\n**Potential Mentors:** Evan Patton, Susan Lane\n\n### Assets Library\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#assets-library)\n\n**Brief Explanation:** Allow users to upload sets of assets to be imported easily into different projects.\n\n**Expected Results:** An interface that allows for uploading and organizing assets (images and sounds) to be used within App Inventor apps through the Designer.\n\n**Knowledge Prerequisites:** JavaScript and Java\n\n**Technical Difficulty**: Medium\n\n**Estimated Time:** 175 hours\n\n**Potential Mentors:** Evan Patton, Jose Dominguez or Jeff Schiller\n\n### Learning Management System (LMS) Integrations\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#learning-management-system-lms-integrations)\n\n**Brief Explanation:** Integrate App Inventor with one or more LMS systems such as Google Classroom and Canvas.\n\n**Expected Results:** An interface that allows course organisers to assign course work and manage submissions and grading of App Inventor projects through an existing LMS.\n\n**Knowledge Prerequisites:** JavaScript and Java\n\n**Technical Difficulty:** Medium\n\n**Estimated Time:** 175 hours\n\n**Potential Mentors:** Jose Dominguez or Jeff Schiller\n\n### User defined components/extensions\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#user-defined-componentsextensions)\n\n**Brief Explanation:** Add the ability to create user-defined components (or extensions). By which we mean an App Inventor user could take a set of App Inventor components (and blocks using those components) and wrap them up together in a single reusable unit which exposed a set of properties, methods and events. In the initial implementation, perhaps, those units could only be used in the project in which they are defined, but ultimately you'd like for them to be exportable/importable, so that they could be used by other users (or that same user in other projects).\n\n**Expected Results:** App Inventor users can create reusable components.\n\n**Knowledge Prerequisites:** App Inventor, Java, GWT, UIBinder\n\n**Technical Difficulty**: Hard\n\n**Estimated Time:** 350 hours\n\n**Potential Mentors:** Mark Friedman\n\nAdditional Projects\n-------------------\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#additional-projects)\n\n### Github workflow hooks\n\n[](https://github.com/mit-cml/appinventor-sources/wiki/Google-Summer-of-Code-2025#github-workflow-hooks)\n\n**Brief Explanation:** The appinventor-sources repository behaves differently from the Github workflow expectations. In particular, we have two branches that function as master: master and ucr (Upcoming Component Release). Changes that must be installed on devices (Android or iOS Companion) need to be released at specific times of the year, so that work is branched from and merged into ucr. Changes that affect the web designer can be released at any time and are branched into/merged into master. Github does not recognize ucr for the purpose of updating linked issues and other features. We also would like to manage other issue labels, like updating when PRs need additional review, etc.\n\n**Expected Results:** Write Github hooks to match our dual-master workflow.\n\n**Knowledge Prerequisites:** Python, Git, Github\n\n**Technical Difficulty**: Medium\n\n**Estimated Time:** 175 hours\n\n**Potential Mentors:** Evan Patton, Jeff Schiller, or Susan Rati Lane\n"}