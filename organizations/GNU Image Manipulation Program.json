{"name":"GNU Image Manipulation Program","description":"GIMP is a cross-platform image editor","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/gnu-image-manipulation-program","ideas_url":"https://developer.gimp.org/core/internship/ideas/","logo":"https://summerofcode.withgoogle.com/media/org/gnu-image-manipulation-program/n73ytwpnna15tra2-360.png","technologies":["c","GEGL"],"topics":["graphics","design","photography","illustration"],"projects":[{"project_name":"Robust OpenCL operations","summary":"Improve existing OpenCL implementations in GEGL for reliability and performance, ensuring functionality without crashing GIMP.","difficulty":"Intermediate"},{"project_name":"Implement In-Painting Tool","summary":"Create a core GIMP tool for in-painting using techniques from existing plug-ins and algorithms, enhancing image restoration capabilities.","difficulty":"Intermediate"},{"project_name":"Image Segmentation Improvements","summary":"Research and implement new algorithms for better image selection tools in GIMP, optimizing for varied image processing tasks.","difficulty":"Intermediate"},{"project_name":"Improving unit testing","summary":"Revamp the unit testing framework for GIMP to facilitate better testing practices and higher code reliability through automation.","difficulty":"Intermediate"},{"project_name":"Fuzz testing integration","summary":"Develop a fuzz testing suite to detect security vulnerabilities and issues caused by new code in GIMP.","difficulty":"Intermediate"},{"project_name":"Implement sandboxing for plug-ins","summary":"Create a sandbox environment for plug-ins to enhance security when executing potentially unsafe code in GIMP.","difficulty":"Complicated"},{"project_name":"Improving the text tool","summary":"Reconstruct the text tool to enhance UI/UX, adding modern features and OpenType support for better text handling.","difficulty":"Intermediate"},{"project_name":"Implement GEGL operations for GIMP","summary":"Migrate and implement GEGL operations in GIMP to improve image processing capabilities using floating point precision.","difficulty":"Intermediate"},{"project_name":"Implement OpenColorIO Color Management","summary":"Add OpenColorIO color management support to GIMP, improving workflows for film and animation industries.","difficulty":"Intermediate"},{"project_name":"Implement GEGL Filter Browser","summary":"Create a user-friendly browser for GEGL filters in GIMP, allowing easier access to various installed filters and their functionalities.","difficulty":"Intermediate"},{"project_name":"Improve Non-Destructive Editing","summary":"Enhance existing non-destructive editing features in GIMP, with a focus on user interface and new functional capabilities.","difficulty":"Intermediate"},{"project_name":"Improving off-canvas editing","summary":"Develop features to better support off-canvas editing, enabling more flexibility and control in image editing tasks.","difficulty":"Intermediate"},{"project_name":"Improve Metadata Editor and Viewer","summary":"Revamp the metadata handling in GIMP to support a wider range and better interface for editing image metadata.","difficulty":"Intermediate"},{"project_name":"Extension website","summary":"Build a static website for GIMP's upcoming extension platform, focusing on minimal maintenance and security.","difficulty":"Intermediate"},{"project_name":"Convert gimp-help build system from autotools to meson","summary":"Transition the gimp-help build system from autotools to meson, updating build processes for improved maintainability.","difficulty":"Intermediate"}],"jina_response":"Title: GIMP Developer - Project ideas for internship programs\n\nURL Source: https://developer.gimp.org/core/internship/ideas/\n\nMarkdown Content:\nTable of Contents\n\n*   [Robust OpenCL operations](https://developer.gimp.org/core/internship/ideas/#robust-opencl-operations)\n*   [Implement In-Painting Tool](https://developer.gimp.org/core/internship/ideas/#implement-in-painting-tool)\n*   [Image Segmentation Improvements](https://developer.gimp.org/core/internship/ideas/#image-segmentation-improvements)\n*   [Improving unit testing](https://developer.gimp.org/core/internship/ideas/#improving-unit-testing)\n*   [Fuzz testing integration](https://developer.gimp.org/core/internship/ideas/#fuzz-testing-integration)\n*   [Implement sandboxing for plug-ins](https://developer.gimp.org/core/internship/ideas/#implement-sandboxing-for-plug-ins)\n*   [Improving the text tool](https://developer.gimp.org/core/internship/ideas/#improving-the-text-tool)\n*   [Implement GEGL operations for GIMP](https://developer.gimp.org/core/internship/ideas/#implement-gegl-operations-for-gimp)\n*   [Implement OpenColorIO Color Management](https://developer.gimp.org/core/internship/ideas/#implement-opencolorio-color-management)\n*   [Implement GEGL Filter Browser](https://developer.gimp.org/core/internship/ideas/#implement-gegl-filter-browser)\n*   [Improve Non-Destructive Editing](https://developer.gimp.org/core/internship/ideas/#improve-non-destructive-editing)\n*   [Improving off-canvas editing](https://developer.gimp.org/core/internship/ideas/#improving-off-canvas-editing)\n*   [Improve Metadata Editor and Viewer](https://developer.gimp.org/core/internship/ideas/#improve-metadata-editor-and-viewer)\n*   [Extension website](https://developer.gimp.org/core/internship/ideas/#extension-website)\n*   [Convert gimp-help build system from autotools to meson](https://developer.gimp.org/core/internship/ideas/#convert-gimp-help-build-system-from-autotools-to-meson)\n\nThis page is shared for events such as Google Summer of Code or similar internship programs which GIMP might participate in, as a list of project ideas for participants. You may choose to implement exactly one of the proposed ideas, propose new ideas inspired from this list, or suggest completely new projects (which is perfectly fine if your proposition makes sense). Our [roadmaps](https://developer.gimp.org/core/roadmap/) may also be a good source of inspiration.\n\nYou will be selected on the quality of the proposal and on your attitude within the context of a Free Software Community. Also we prefer smaller projects which end up in our main codebase, rather than over-ambitious projects which you won’t have time to finish and might end bitrotting for years.\n\nPlease also read the [main page on internship programs with GIMP](https://developer.gimp.org/core/internship/).\n\n[Robust OpenCL operations](https://developer.gimp.org/core/internship/ideas/#robust-opencl-operations \"Permalink to Robust OpenCL operations\")\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nGEGL, OpenCL, hardware acceleration\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, Øyvind\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nReviewing and fixing existing or writing new OpenCL implementations of GEGL ops\n\nWikipedia defines OpenCL as: “_OpenCL (Open Computing Language) is a framework for writing programs that execute across heterogeneous platforms consisting of central processing units (CPUs), graphics processing units (GPUs), digital signal processors (DSPs), field-programmable gate arrays (FPGAs) and other processors or hardware accelerators._”\n\nThe GEGL engine has had OpenCL alternative implementations for many operations, and it was enabled by default at some point. Unfortunately it proved unreliable, sometimes with slower processing, wrong rendering or even crashes.\n\nIt would be extremely worthwhile to test all existing implementations, debug and improve them. Unit-testing in GEGL repo to compare OpenCL and “standard” implementations of a same operation would definitely be a huge plus too.\n\nAdditionally adding more OpenCL implementations would be a good bonus.\n\nThe main goal of this project is: **robustness**. No need to get GPU or other hardware acceleration if the result is wrong or if it crashes GIMP. We want to be confident in the quality of the code in order to re-enable OpenCL acceleration by default.\n\nSee the list of [opened bug reports with “OpenCL” label](https://gitlab.gnome.org/GNOME/gimp/-/issues/?sort=updated_desc&state=opened&label_name%5B%5D=5.%20OpenCL&first_page_size=20).\n\nCategory\n\nUser Interface, Core, Tools, GEGL\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, CmykStudent\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nimplementation of the tool in GIMP codebase\n\nGIMP has had support for in-painting (filling in an area based on the surrounding image) for many years with the third-party [Resythesizer plug-in](https://github.com/bootchk/resynthesizer). There have been many requests to implement the feature as a tool directly in core GIMP. In addition to this algorithm, there is also the GEGL operation [alpha-inpaint](https://gitlab.gnome.org/GNOME/gegl/-/blob/master/operations/workshop/alpha-inpaint.c) which works similarly.\n\nRelevant discussions that would assist with implementing this feature can be found [here](https://gitlab.gnome.org/GNOME/gimp/-/issues/8692) and [here](https://gitlab.gnome.org/GNOME/gimp/-/issues/4762).\n\n*   Study the Resynthesizer plug-in, `gegl:alpha-inpaint` operation, and other implementations\n*   Design a potential implementation and UI\n*   Improve the implementation of the algorithms as needed\n*   Implement the tool\n\n[Image Segmentation Improvements](https://developer.gimp.org/core/internship/ideas/#image-segmentation-improvements \"Permalink to Image Segmentation Improvements\")\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nCore, Tools\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, CmykStudent\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nNew and/or improved algorithms for selecting parts of images\n\nGIMP has many different tools and algorithms for selecting specific sections of an image - from the standard Rectangle and Ellipse Select tools to the more advanced Paint Select and Foreground Select tools. Yet there are always new algorithms and methods for segmenting images.\n\n*   Find an existing algorithm or propose a new one\n*   Implement, optimize and test for real image processing work on a variety of images\n*   Design how it should be used in GIMP\n    *   An additional mode in an existing tool\n    *   A new tool entirely\n\n[Improving unit testing](https://developer.gimp.org/core/internship/ideas/#improving-unit-testing \"Permalink to Improving unit testing\")\n----------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nUnit testing\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, Jacob\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nImproved unit testing infrastructure and new unit tests\n\nCurrently GIMP unit testing framework is really outdated, adding new tests is complex and therefore never happens. We should specify and code a proper framework for testing GIMP features.\n\nThis implies automated tests we can run in our Continuous Integration in Gitlab and not interactive tools (though such tools can be interesting too, as additional process, if someone has something nice to propose).\n\n*   Port existing tests to the new framework;\n*   Testing all libgimp functions;\n*   Testing GEGL operations implemented within GIMP codebase;\n*   Testing plug-ins (in priority the file import/export ones, but not only);\n*   Testing core code;\n*   Testing GUI code if possible;\n*   Writing down the procedure to add unit tests to make it a mandatory process in future development.\n\n[Fuzz testing integration](https://developer.gimp.org/core/internship/ideas/#fuzz-testing-integration \"Permalink to Fuzz testing integration\")\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nUnit testing, Security\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, Jacob\n\nDifficulty\n\nIntermediate\n\nIn addition to unit testing, we would also like to build a robust automated fuzz testing suite. Integrating a fuzzer would help us better detect when new code could lead to a security vulnerability or incorrect behavior in GIMP. This project would cover many aspects of GIMP, from core code to plug-ins to public API.\n\n*   Study GIMP and determine what areas to cover in initial implementation\n*   Review fuzzing techniques and tools\n*   Design a test suite and process\n*   Implement fuzz testing suite\n\n[Implement sandboxing for plug-ins](https://developer.gimp.org/core/internship/ideas/#implement-sandboxing-for-plug-ins \"Permalink to Implement sandboxing for plug-ins\")\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nSecurity, Plug-ins\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, Jacob\n\nDifficulty\n\nComplicated\n\nMany features of GIMP such as image import and export are implemented with separate plug-ins. For this project, we would like to run them in a sandbox environment for safety and security.\n\nThis is a complex project, and requires knowledge of both GIMP’s architecture as well as extensive research into security. Mentors would be learning alongside the student, so any interested individual would need to be able to work well independently. Please [contact us](https://www.gimp.org/discuss.html#irc-matrix) to discuss your proposal for this project.\n\n[Improving the text tool](https://developer.gimp.org/core/internship/ideas/#improving-the-text-tool \"Permalink to Improving the text tool\")\n-------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nGEGL, color science\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nLiam Quin\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nImprovement of the text tool\n\nOur text tool is a bit of a UI and UX mess and deserves a proper rewrite/enhancement project:\n\n*   Re-specify text editing and formating as well as the tool option, for existing features, but also adding new features for modern text editing (see also this [draft](https://gui.gimp.org/index.php?title=OnCanvasTextEditing));\n*   Add [OpenType support](https://gui.gimp.org/index.php?title=OpenTypeSupport).\n\n[Implement GEGL operations for GIMP](https://developer.gimp.org/core/internship/ideas/#implement-gegl-operations-for-gimp \"Permalink to Implement GEGL operations for GIMP\")\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nGEGL, image processing\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, Øyvind\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nimplementation or improvements of GEGL operations in GIMP or GEGL codebase\n\nThe migration of GIMP to use GEGL has accelerated - for some GIMP functionality the main hurdle to migrate is having GEGL ops that can act as drop in replacement for the core processing functionality (some ops would be desired directly in GIMP others could likely go directly into GEGL).\n\nFor most code involved, porting to GEGL involves understanding what the current code does; and port or reimplement it as a floating point processing operation (floating point math often ends up shorter and more readable than the 8bit equivalents.\n\nThere are also some filters which were ported to GEGL, but some people prefer the old one (e.g. the Sharpen filter). It would be worth investigating the difference and either implement the old one or improve the new one.\n\n[Talk to us](https://www.gimp.org/discuss.html#irc-matrix) for specifics on which operations would be a good project\\`.\n\n[Implement OpenColorIO Color Management](https://developer.gimp.org/core/internship/ideas/#implement-opencolorio-color-management \"Permalink to Implement OpenColorIO Color Management\")\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nUser Interface, Core, Tools, GEGL\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\ndrc, CmykStudent\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nimplementation of the OCIO color management system in GIMP codebase\n\nGIMP uses industry standard [ICC Color profiles](https://www.color.org/profiles2.xalter) to allow users to match and maintain colors for image editing and printing. The film industry utilizes a separate standard, [OpenColorIO](https://opencolorio.org/), which focuses more on manipulating colors in a space rather than trying to keep them consistent across multiple devices.\n\nThis project would involve adding support for OCIO color management in addition to the existing system. This addition would improve user workflows for motion picture and animation work, as well as improve compatibility with other OCIO-supporting software like Blender and Krita. The project would involve the following:\n\n*   Research OCIO and color management systems in general\n    *   The Krita manual has an [excellent overview of the subject](https://docs.krita.org/en/general_concepts/colors/color_managed_workflow.html)\n*   Design and test a user interface\n*   Implement the code\n\n[Implement GEGL Filter Browser](https://developer.gimp.org/core/internship/ideas/#implement-gegl-filter-browser \"Permalink to Implement GEGL Filter Browser\")\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nGEGL, User Interface\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nimplementation of the feature in GIMP codebase\n\nDuring the 3.0 development process, a new filter API was created that allows script and plug-in developers to apply any valid GEGL filter they have installed. However, GIMP doesn’t not currently have a built-in browser to easily find the name, descriptions, and properties of these filters.\n\nFor this project, you would design and develop a GEGL Browser, similar to the existing Plug-in and Procedure Browsers. This will involve both code development and UX/UI Design.\n\n[Improve Non-Destructive Editing](https://developer.gimp.org/core/internship/ideas/#improve-non-destructive-editing \"Permalink to Improve Non-Destructive Editing\")\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nGEGL, User Interface\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, CmykStudent\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nimplementation of the feature in GIMP codebase\n\nAs of version 3.0, GIMP now has initial support for non-destructive editing with layer effects. Yet there is much more work to be done. Our [roadmap](https://developer.gimp.org/core/roadmap/#non-destructive-filters) provides some ideas for the next areas to improve, or you can propose your own:\n\n*   Studying the current implementation\n*   Design improvements to UI or functionality\n*   Implement the improvements\n\n[Improving off-canvas editing](https://developer.gimp.org/core/internship/ideas/#improving-off-canvas-editing \"Permalink to Improving off-canvas editing\")\n----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nUser Interface, Core\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nimplementation of the feature in GIMP codebase\n\nGIMP recently got the ability to view the image out of the canvas. This is still incomplete. Among the many possible improvements:\n\n*   Being able to select off-canvas.\n*   Being able to see off-canvas but with an effect (e.g. dimming).\n*   Having various tools and features working differently when “Show All” is enabled.\n\nCategory\n\nMetadata, Plug-in, User Interface\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nC\n\nPossible mentors\n\nJehan, Jacob\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nImproved metadata UI and codebase\n\nOur image metadata viewer and editor could use some code review and improvements. It currently supports only a subset of all valid metadata, and the UI could be improved to allow easier editing and viewing of metadata.\n\nAdditionally, some image formats such as HEIC, FITs, and DICOM have custom metadata. Another aspect of this project might be considering how to handle these in a way that is easily extensible and maintainable.\n\nFor further inspiration, you can review open issues [tagged with the Metadata label](https://gitlab.gnome.org/GNOME/gimp/-/issues/?label_name%5B%5D=5.%20Metadata) in our tracker.\n\n*   Review metadata related issues and develop a plan\n*   Design user interface and code structure\n*   Implement planned changes in the metadata plug-in\n\n[Extension website](https://developer.gimp.org/core/internship/ideas/#extension-website \"Permalink to Extension website\")\n-------------------------------------------------------------------------------------------------------------------------\n\nCategory\n\nWeb\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nHTML, Javascript and other web technologies\n\nPossible mentors\n\nJehan\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nNew website and build scripts for continuous integration\n\nWe would want a website for our future extension platform, with very specific criteria. Apart from some necessary dynamic parts, we want a website as static as possible, with generated pages when possible. GIMP is a software project, which relies on community. We don’t want to spend all our time having to maintain and manage a website with a lot of moving parts. So we need simplicity first, security first, with just the right amount of dynamicity.\n\nSee [this document](https://gitlab.gnome.org/Infrastructure/gimp-extensions-web/-/blob/master/docs/README.md) for an early overview of what we are looking for.\n\nCategory\n\ngimp-help, build system\n\nProject size (GSoC)\n\nLarge (350 hours)\n\nSkills\n\nPython, some understanding of autotools and Makefiles\n\nPossible mentors\n\nJacob\n\nDifficulty\n\nIntermediate\n\nOutcome\n\nThe gimp-help repository can be built using meson\n\nMore and more projects move from autotools to meson for building. GIMP itself already uses meson as main build system. We would want all targets in our autotools build converted to meson. The main ones being able to build html for all languages, validate the xml files, create the distribution packages, making pdf quickreference guides, etc.\n\nSome guidelines for porting from autotools to meson can be found [here](https://mesonbuild.com/Porting-from-autotools.html), and more Gnome specific [here](https://wiki.gnome.org/Initiatives/GnomeGoals/MesonPorting).\n\nThe build system needs to function on Linux, Windows and Mac. This would need to be integrated in our CI builds. There is an almost 2 year old [repository](https://gitlab.gnome.org/GNOME/gimp-help/-/commits/wip/wormnest/meson) where some work was done, but we ran into some problems due to the more strict directory and other requirements of meson. However, there have been improvements to meson which may make it easier now.\n\nIt is possible that you may have to write a meson module like the [gnome one](https://mesonbuild.com/Gnome-module.html), which has functions for handling yelp, gtkdoc, etc. Don’t forget to check out the i18n module, you may be able to use that too.\n"}