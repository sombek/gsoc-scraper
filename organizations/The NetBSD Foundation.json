{"name":"The NetBSD Foundation","description":"Of course it runs NetBSD","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/the-netbsd-foundation","ideas_url":"https://wiki.NetBSD.org/projects/gsoc/","logo":"https://summerofcode.withgoogle.com/media/org/the-netbsd-foundation/gi3vozsqpecopqku-360.png","technologies":["c","shell script","make","unix","bsd"],"topics":["kernel","packaging","userland","unix","bsd"],"projects":[{"project_name":"Google Summer of Code Participation","summary":"NetBSD has actively participated in Google's Summer of Code (GSoC) from 2005 to 2024, encouraging a variety of project proposals and student applications.","difficulty":"Varies by project"},{"project_name":"Project Application Suggestions","summary":"A list of suggested projects for GSoC students to apply for, spanning various skills and difficulties to attract a broad spectrum of applicants.","difficulty":"Varies by project"},{"project_name":"Kernel-level Projects","summary":"Projects focused on kernel development, categorized by difficulty; includes tasks such as emulating missing syscalls and implementing high-resolution timers.","difficulty":"Easy, Medium, Hard"},{"project_name":"Userland Projects","summary":"Focused on enhancing user-level application functionality and system features while also categorized by difficulty for prospective students.","difficulty":"Easy, Medium, Hard"},{"project_name":"Code Quality Improvement Projects","summary":"Efforts to improve code quality within the NetBSD codebase, involving additional tooling and enhancement integrations of existing libraries.","difficulty":"Medium, Hard"},{"project_name":"pkgsrc Projects","summary":"Projects aimed at expanding and refining the pkgsrc framework, including UI improvements and better support for binary packages.","difficulty":"Easy, Medium, Hard"},{"project_name":"Other Projects","summary":"Additional project ideas that are primarily medium in difficulty, encompassing diverse topics to engage student interest.","difficulty":"Medium"}],"jina_response":"Title: Google Summer of Code project proposals\n\nURL Source: https://wiki.netbsd.org/projects/gsoc/\n\nMarkdown Content:\nNetBSD participated successfully in the following Google's Summer of Code programs (see our results of [2005](https://www.netbsd.org/foundation/press/soc-summary.html), [2006](https://www.netbsd.org/foundation/press/soc2006-summary.html), [2007](https://www.netbsd.org/foundation/press/soc2007-summary.html), [2008](https://www.netbsd.org/foundation/press/soc2008-summary.html), [2009](https://www.netbsd.org/foundation/press/soc2009.html), [2010](https://blog.netbsd.org/tnf/entry/google_summer_of_code_2010), [2011](https://blog.netbsd.org/tnf/entry/netbsd_s_google_summer_of), [2012](https://blog.netbsd.org/tnf/entry/netbsd_s_google_summer_of1), [2013](https://blog.netbsd.org/tnf/entry/netbsd_s_google_summer_of2), [2016](https://blog.netbsd.org/tnf/entry/google_summer_of_code_2016), [2017](https://blog.netbsd.org/tnf/entry/google_summer_of_code_2017), 2018, 2019, [2020](https://blog.netbsd.org/tnf/entry/google_summer_of_code_2020), 2021, 2022, 2023, 2024).\n\nThis page contains a list of concrete suggestions for projects we would like to see applications for in the next Summer of Code. Note that they vary a lot in required skills and difficulty. We hope to get applications with a broad spectrum.\n\nIn addition, you may wish to discuss your proposal on IRC -- look for us on Libera.chat's #netbsd-code or for pkgsrc-related discussions, #pkgsrc. If you want to just meet the community, visit #netbsd.\n\nWe encourage you to come up with your own suggestions, if you cannot find a suitable project here. You can find more project ideas on the [NetBSD projects page](https://wiki.netbsd.org/projects/)). These are not directly applicable to Summer-of-Code, but may serve as ideas for your own suggestions. You might find other ideas in [src/doc/TODO](http://cvsweb.netbsd.org/bsdweb.cgi/src/doc/TODO?rev=HEAD&content-type=text/x-cvsweb-markup) and [pkgsrc/doc/TODO](http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/doc/TODO?rev=HEAD&content-type=text/x-cvsweb-markup).\n\nDeadlines and directions for students' applications to the Google Summer-of-Code can be found [on the Google pages](https://developers.google.com/open-source/gsoc/).\n\nApplication process\n-------------------\n\nTo make the job of sorting out proposals and applications for NetBSD-related projects, e.g. in the Google Summer-of-Code, easier for us, there are a few questions that we would like to see answered.\n\nIf you are interested in working on any of the projects below, please contact the mailing list referenced on each item, and possibly answer as many questions from our [project application guidelines](https://wiki.netbsd.org/projects/application/) as possible. The interested developers will be glad to respond to you there.\n\n**Please note that Google Summer-of-Code projects are a full (day-) time job.**\n\nA positive mid-term evaluation is only possible if usable code has been committed by that time. Make sure your schedule allows for this.\n\nKernel-level projects\n---------------------\n\nEasy\n----\n\n*   [Emulating missing linux syscalls (350h)](https://wiki.netbsd.org/projects/project/linux_timer/)\n*   [Making a network driver MPSAFE (175h)](https://wiki.netbsd.org/projects/project/mpsafe_net_driver/)\n\nMedium\n------\n\n*   [Convert a Wi-Fi driver to the new Wi-Fi stack (175h)](https://wiki.netbsd.org/projects/project/Convert_a_Wi-Fi_driver_to_the_new_Wi-Fi_stack/)\n*   [ALTQ Refactoring and NPF Integration (350h)](https://wiki.netbsd.org/projects/project/altq/)\n*   [Test root device and root file system selection (350h)](https://wiki.netbsd.org/projects/project/kernel_setroot_tests/)\n*   [RFC 5927 countermeasures against IPv6 ICMP attacks on TCP](https://wiki.netbsd.org/projects/project/rfc5927/)\n*   [auto create swap on memory pressure (175h)](https://wiki.netbsd.org/projects/project/swap-auto/)\n*   [Merge code from two Realtek Wifi Drivers (175h)](https://wiki.netbsd.org/projects/project/urtwn_rtwn_merge/)\n*   [Userland PCI drivers (350h)](https://wiki.netbsd.org/projects/project/userland_pci/)\n*   [VMWare graphical acceleration (350h)](https://wiki.netbsd.org/projects/project/vmwgfx/)\n\nHard\n----\n\n*   [Real asynchronous I/O (350h)](https://wiki.netbsd.org/projects/project/aio/)\n*   [NPF user/group filtering](https://wiki.netbsd.org/projects/project/npf_user_group_filtering/)\n*   [Tickless NetBSD with high-resolution timers (350h)](https://wiki.netbsd.org/projects/project/tickless/)\n\nUserland projects\n-----------------\n\nEasy\n----\n\n*   [Inetd enhancements -- Add new features to inetd (175h)](https://wiki.netbsd.org/projects/project/inetd-enhancements/)\n*   [iscsictl(1) enhancement (175h)](https://wiki.netbsd.org/projects/project/iscsictl/)\n*   [Test Linux emulation (350h)](https://wiki.netbsd.org/projects/project/linuxtest/)\n*   [Modern cryptographic algorithms to netpgp, netpgpverify (350h)](https://wiki.netbsd.org/projects/project/netpgpverify/)\n\nMedium\n------\n\n*   [Add UEFI boot options](https://wiki.netbsd.org/projects/project/Add_UEFI_boot_options/)\n*   [Audio visualizer for the NetBSD base system (350h)](https://wiki.netbsd.org/projects/project/audioviz/)\n*   [Light weight precision user level time reading (350h)](https://wiki.netbsd.org/projects/project/fast-time/)\n*   [Query optimizer for find(1) (350h)](https://wiki.netbsd.org/projects/project/findoptimizer/)\n*   [IKEv2 daemon for NetBSD (350h)](https://wiki.netbsd.org/projects/project/ikev2/)\n*   [Port launchd (350h)](https://wiki.netbsd.org/projects/project/launchd-port/)\n*   [Add support for OpenCL and Vulkan to NetBSD xsrc (175h)](https://wiki.netbsd.org/projects/project/mesavulkan/)\n*   [Automatic tests for PAM](https://wiki.netbsd.org/projects/project/pam-tests/)\n*   [Efficient Package Distribution](https://wiki.netbsd.org/projects/project/project__47__efficient-package-distribution/)\n*   [SASL-C implementation for the OpenLDAP client (350h)](https://wiki.netbsd.org/projects/project/saslc_openldap/)\n*   [Secure-PLT - supporting RELRO binaries (350h)](https://wiki.netbsd.org/projects/project/secureplt/)\n*   [Research and integrate the static code analyzers with the NetBSD codebase (350h)](https://wiki.netbsd.org/projects/project/static-analyzers/)\n*   [Sysinst alternative interface (350h)](https://wiki.netbsd.org/projects/project/sysinst-xinterface/)\n\nHard\n----\n\n*   [Hermetic builds for the base system](https://wiki.netbsd.org/projects/project/build-system-rework/)\n*   [Userspace Emulation For Fun And Profit](https://wiki.netbsd.org/projects/project/userspace-emulation-for-fun-and-profit/)\n*   [Verification tool for NetBSD32 (350h)](https://wiki.netbsd.org/projects/project/verify_netbsd32/)\n\nCode Quality Improvement projects\n---------------------------------\n\nEasy\n----\n\nMedium\n------\n\n*   [Add KNF (NetBSD style) clang-format configuration (175h)](https://wiki.netbsd.org/projects/project/clang-format/)\n*   [Integrate libFuzzer with the basesystem (350h)](https://wiki.netbsd.org/projects/project/libfuzzer/)\n*   [Integrate LLVM/GCC Sanitizers with pkgsrc (350h)](https://wiki.netbsd.org/projects/project/pkgsrc-sanitizers/)\n*   [Integrate Scudo with the basesystem (350h)](https://wiki.netbsd.org/projects/project/scudo/)\n*   [Enhance the syzkaller support for NetBSD (350h)](https://wiki.netbsd.org/projects/project/syzkaller/)\n\nHard\n----\n\npkgsrc projects\n---------------\n\nEasy\n----\n\n*   [Improve UI/UX of pkgsrc MESSAGE (175h)](https://wiki.netbsd.org/projects/project/pkgsrc-ui-message/)\n\nMedium\n------\n\n*   [Port the Enlightenment desktop environment to NetBSD (350h)](https://wiki.netbsd.org/projects/project/enlightenment/)\n*   [pkgin improvements (350h)](https://wiki.netbsd.org/projects/project/pkgin_improve/)\n*   [Improve support for NetBSD sensors and audio APIs in third-party software (350h)](https://wiki.netbsd.org/projects/project/pkgsrc_sensors/)\n\nHard\n----\n\n*   [Add dependency information to binary packages (350h)](https://wiki.netbsd.org/projects/project/pkgsrc_binpkg_depends/)\n\nOther projects\n--------------\n\nMedium\n------\n\nComments\n--------\n\nWe are trying to be fair; expect easy projects to require less knowledge and skill, but quite a bit of work.\n\nMedium and hard projects are hard enough to qualify as practical part of a master's thesis (it'll qualify as thesis topic if you can add sufficient quality theoretical parts). We had the honor to mentor several in past GSoCs. Talk to your adviser(s) if and how you can claim academic credit for the project you do with us.\n\nWe have not yet failed a student who worked hard and actually talked (and listened) to their mentors and the community. If unexpected roadblocks make your project goals too hard to reach in the time given, the goals can be re-negotiated. They will not be for rampant slacking, though.\n\nWhat we expect from contributors (both GSoC students and generally) is that they cooperate, that they are able to communicate (this will mean some English skills, sorry; we will try to support with mentors speaking the same contributor language if that can be a problem), and that they meet a minimum of good manners towards other people on our lists and other venues. Note that being a specific color, gender, nationality, religion, etc is not listed: If you are willing and able to contribute in a constructive manner, you are welcome.\n"}