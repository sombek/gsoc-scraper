{"name":"Git","description":"Fast,Scalable,Distributed revision control system","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/git","ideas_url":"https://git.github.io/SoC-2025-Ideas/","logo":"https://summerofcode.withgoogle.com/media/org/git/mbqqznjbaohwgq80-360.png","technologies":["shell script","git","c language"],"topics":["version control","dvcs"],"projects":[{"project_name":"Consolidate ref-related functionality into git-refs","summary":"Streamline Git’s reference management by unifying functionality into the `git-refs` command, ensuring backward compatibility while consolidating commands related to reference management.","difficulty":"Medium"},{"project_name":"Refactoring in order to reduce Git’s global state","summary":"Modernize Git’s environment handling code by refactoring to reduce global state, moving configuration into local contexts for better maintainability and future multi-repository handling.","difficulty":"Medium"},{"project_name":"Machine-Readable Repository Information Query Tool","summary":"Create a new Git command for querying repository metadata in JSON format, improving programmatic access to repository information and enhancing the interface for scripts and tools.","difficulty":"Medium"},{"project_name":"Implement support for reftables in 'dumb' HTTP transport","summary":"Add support for fetching repositories using the 'dumb' protocol with reftable backend, addressing an existing limitation for clients that require this interaction.","difficulty":"Medium"}],"jina_response":"Title: SoC 2025 Ideas\n\nURL Source: https://git.github.io/SoC-2025-Ideas/\n\nMarkdown Content:\n![Image 1: git logo >](https://git-scm.com/images/logos/downloads/Git-Logo-2Color.svg)\n\nThis is the idea page for Summer of Code 2025 for Git.\n\n_Please completely read the [general application information](https://git.github.io/General-Application-Information) page before reading the idea list below._\n\nSummer of code main project ideas\n---------------------------------\n\n**Students**: Please consider these ideas as starting points for generating proposals. We are also more than happy to receive proposals for other ideas related to Git. Make sure you have read the “Note about refactoring projects versus projects that implement new features” in the [general application information](https://git.github.io/General-Application-Information) page though.\n\n### Note about limit of project selection\n\nKindly note that considering the bandwidth of available mentors, the Git project would only mentor up to 3 contributors this year.\n\nThis is not a hard and fast rule. It may change if more community members are willing to mentor in the coming days. For instance, this may happen when a new project is proposed and some community member volunteers to mentor the same.\n\nThis project aims to streamline Git’s reference management into the existing `git-refs` command by consolidating functionality currently spread across multiple commands. The new command will provide subcommands for listing, getting, checking existence, writing, and optimizing references, replacing the functionality currently handled by git-update-ref(1), git-for-each-ref(1), git-show-ref(1), and git-pack-refs(1).\n\nThe consolidation work should ensure backward compatibility with existing commands. The work involves C programming in Git’s codebase, creating comprehensive tests, and updating documentation.\n\nRequired skills include C programming, familiarity with Git’s codebase, and experience with command-line tool development. The project is expected to take 12 weeks, with existing commands being maintained for backward compatibility while development focuses on the new unified interface.\n\nGetting started: Build Git from source, study the existing ref-related commands, and submit a micro-patch to demonstrate familiarity with the codebase.\n\n_Expected Project Size_: 175 hours or 350 hours\n\n_Difficulty_: Medium\n\n_Languages_: C, shell(bash)\n\n_Possible mentors_:\n\n*   Patrick Steinhardt < [ps@pks.im](mailto:ps@pks.im) \\>\n*   Jialuo She < [shejialuo@gmail.com](mailto:shejialuo@gmail.com) \\>\n*   Christian Couder < [christian.couder@gmail.com](mailto:christian.couder@gmail.com) \\>\n*   Ghanshyam Thakkar < [shyamthakkar001@gmail.com](mailto:shyamthakkar001@gmail.com) \\>\n\n### Refactoring in order to reduce Git’s global state\n\nThis project focuses on modernizing Git’s environment handling by refactoring the `environment.c` code to reduce global state. The goal is to move environment variables and configuration from global scope into more appropriate local contexts, primarily into the `struct repository` / `struct repository_settings` structure. This architectural improvement will make the codebase more maintainable and potentially enable better multi-repository handling in the future. The project involves careful refactoring of Git’s core environment handling code, requiring strong C programming skills and attention to detail.\n\nThe student will identify global variables that can be moved to local scope, implement the necessary structural changes, and ensure all affected code paths continue to work correctly. This includes updating tests, fixing any regressions, and documenting the architectural changes.\n\n_Expected Project Size_: 90 or 175 hours or 350 hours\n\n_Difficulty_: Medium\n\n_Languages_: C, shell(bash)\n\n_Possible mentors_:\n\n*   Patrick Steinhardt < [ps@pks.im](mailto:ps@pks.im) \\>\n*   Karthik Nayak < [karthik.188@gmail.com](mailto:karthik.188@gmail.com) \\>\n*   Jialuo She < [shejialuo@gmail.com](mailto:shejialuo@gmail.com) \\>\n*   Christian Couder < [christian.couder@gmail.com](mailto:christian.couder@gmail.com) \\>\n*   Ghanshyam Thakkar < [shyamthakkar001@gmail.com](mailto:shyamthakkar001@gmail.com) \\>\n\n### Machine-Readable Repository Information Query Tool\n\nThis project aims to create a new Git command dedicated to querying repository metadata and configuration in a structured, machine-readable format. Currently, much of this functionality exists within git-rev-parse(1), which has evolved beyond its original purpose. The new command will provide a cleaner, more focused interface for programmatically accessing repository information using JSON output.\n\nThe student will design and implement this new command, focusing on identifying what repository information should be exposed, designing a consistent JSON schema, and implementing the necessary interfaces to Git’s internal APIs. Key challenges include determining which subset of information from git-rev-parse to expose via this new command, ensuring backward compatibility, and creating a clean, well-documented command interface that’s useful for scripts and tools.\n\nWhile this is an exploratory project that hasn’t been extensively discussed in the Git community, it addresses a real need for better programmatic access to repository information.\n\n_Expected Project Size_: 175 hours or 350 hours\n\n_Difficulty_: Medium\n\n_Languages_: C, shell(bash)\n\n_Possible mentors_:\n\n*   Patrick Steinhardt < [ps@pks.im](mailto:ps@pks.im) \\>\n*   Karthik Nayak < [karthik.188@gmail.com](mailto:karthik.188@gmail.com) \\>\n*   Ghanshyam Thakkar < [shyamthakkar001@gmail.com](mailto:shyamthakkar001@gmail.com) \\>\n\n### Implement support for reftables in “dumb” HTTP transport\n\nFetching Git repositories uses one of two major protocols:\n\n*   The “dumb” protocol works without requiring any kind of interactive negotiation like a CGI module. It can thus be served by a static web server.\n    \n*   The “smart” protocol works by having the client and server exchange multiple messages with each other. It is more efficient, but requires support for Git in the server.\n    \n\nWhile almost all servers nowadays use the “smart” protocol, there are still some that use the “dumb” protocol.\n\nThe “dumb” protocol cannot serve repositories which use the “reftable” backend though. While there exists a “info/refs” file that is supposed to be backend-agnostic, this file does not contain information about the default branch. Instead, clients are expected to download the “HEAD” file and derive the default branch like that. This file is a mere stub in the “reftable” backend though, which breaks this protocol.\n\nThe goal of this project is to implement “reftable” support for “dumb” fetches.\n\nSee:\n\n*   [https://git-scm.com/docs/reftable](https://git-scm.com/docs/reftable)\n\n**Note**: While both ideas are valuable, we prioritize the ‘Consolidate ref-related functionality into git-refs’ proposal over support for reftables in “dumb” HTTP transport. If we receive applications for both projects, preference will be given to applications focusing on the git-refs consolidation work.\n\n_Expected Project Size_: 175 hours or 350 hours\n\n_Difficulty_: Medium\n\n_Languages_: C, shell(bash)\n\n_Possible mentors_:\n\n*   Patrick Steinhardt < [ps@pks.im](mailto:ps@pks.im) \\>\n*   Karthik Nayak < [karthik.188@gmail.com](mailto:karthik.188@gmail.com) \\>\n"}