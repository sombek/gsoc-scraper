{"name":"Debian","description":"The Universal Operating System","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/debian","ideas_url":"https://wiki.debian.org/SummerOfCode2025/Projects","logo":"https://summerofcode.withgoogle.com/media/org/debian/mmld9soj4mti8bjn-360.png","technologies":["python","java","perl","c++","rust"],"topics":["ai","CI/CD","autopkgtest","raspberrypi_builds","mobian"],"projects":[{"project_name":"Quality assurance and continuous integration for biological and medical applications inside Debian","summary":"Focuses on implementing Continuous Integration tests for Debian Med applications to enhance quality and reliability, particularly for medical and biological software.","difficulty":"Medium"},{"project_name":"Device-specific Tweaks Management","summary":"Aims to create a flexible service for managing device-specific tweaks needed for non-x86 Linux-capable devices, improving support for ARM and other systems.","difficulty":"Medium"},{"project_name":"Enhancing Debian packages with ROCm GPU acceleration","summary":"Involves enhancing existing Debian packages for AMD GPU support and creating new tools to leverage ROCm for better performance on AMD hardware.","difficulty":"Medium"},{"project_name":"Make Debian for Raspberry Build Again","summary":"Targets the revival of Debian images for Raspberry Pi, ensuring they are up-to-date, automatically built and tested, enhancing accessibility.","difficulty":"Easy"},{"project_name":"Package LLM Inference Libraries","summary":"Involves the packaging of Large Language Model inference libraries to enable efficient LLM deployment and performance tuning on Debian systems.","difficulty":"Medium"},{"project_name":"Autopkgtests for the rsync package","summary":"Focuses on adding comprehensive autopkgtests for the rsync package to ensure reliability and prevent regressions in future updates.","difficulty":"Easy"},{"project_name":"Salsa CI in Debian","summary":"Aims to improve the Salsa CI framework, enhancing the integration and testing capabilities for Debian projects managed on Gitlab.","difficulty":"Medium"},{"project_name":"bsdutils: Reimplementation of BSD Utilities in Rust","summary":"Targets the Rust-based reimplementation of essential BSD utilities while ensuring full compatibility with existing tools and GNU tests.","difficulty":"Large"},{"project_name":"login: Reimplementation of Login Infrastructure Tools in Rust","summary":"Involves the reimplementation of login infrastructure tools using Rust, focusing on security and compatibility with existing login systems.","difficulty":"Large"},{"project_name":"procps: Development of System Monitoring, Statistics and Information Tools in Rust","summary":"Aims to develop a Rust version of system monitoring tools to enhance performance and security while maintaining full option compatibility.","difficulty":"Large"},{"project_name":"util-linux: Development of System Utilities in Rust","summary":"Engages in the Rust-based reimplementation of various system utility tools to improve reliability and security in Linux operations.","difficulty":"Large"}],"jina_response":"Title: SummerOfCode2025/Projects - Debian Wiki\n\nURL Source: https://wiki.debian.org/SummerOfCode2025/Projects\n\nMarkdown Content:\nContents\n\n1.  [Approved Projects](https://wiki.debian.org/SummerOfCode2025/Projects#Approved_Projects)\n    1.  [Quality assurance and continuous integration for biological and medical applications inside Debian](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FApprovedProjects.2FDebianMedQA.Quality_assurance_and_continuous_integration_for_biological_and_medical_applications_inside_Debian)\n    2.  [Device-specific Tweaks Management](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FApprovedProjects.2FDeviceTweaksManagement.Device-specific_Tweaks_Management)\n    3.  [Enhancing Debian packages with ROCm GPU acceleration](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FApprovedProjects.2FEnhancingPackagesWithROCm.Enhancing_Debian_packages_with_ROCm_GPU_acceleration)\n    4.  [Make Debian for Raspberry Build Again](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FApprovedProjects.2FMakeDebianForRaspberryBuildAgain.Make_Debian_for_Raspberry_Build_Again)\n    5.  [Package LLM Inference Libraries](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FApprovedProjects.2FPackageLLMInferenceLibraries.Package_LLM_Inference_Libraries)\n    6.  [Autopkgtests for the rsync package](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FApprovedProjects.2FRsyncAutopkgtests.Autopkgtests_for_the_rsync_package)\n    7.  [Salsa CI in Debian](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FApprovedProjects.2FSalsaCI.Salsa_CI_in_Debian)\n2.  [Unapproved Projects with confirmed mentors](https://wiki.debian.org/SummerOfCode2025/Projects#Unapproved_Projects_with_confirmed_mentors)\n    1.  [bsdutils: Reimplementation of BSD Utilities in Rust](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FPendingProjects.2Frust-bsdutils.bsdutils:_Reimplementation_of_BSD_Utilities_in_Rust)\n    2.  [login: Reimplementation of Login Infrastructure Tools in Rust](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FPendingProjects.2Frust-login.login:_Reimplementation_of_Login_Infrastructure_Tools_in_Rust)\n    3.  [procps: Development of System Monitoring, Statistics and Information Tools in Rust](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FPendingProjects.2Frust-procps.procps:_Development_of_System_Monitoring.2C_Statistics_and_Information_Tools_in_Rust)\n    4.  [util-linux: Development of System Utilities in Rust](https://wiki.debian.org/SummerOfCode2025/Projects#SummerOfCode2025.2FPendingProjects.2Frust-util-linux.util-linux:_Development_of_System_Utilities_in_Rust)\n\nThe main page is at [SummerOfCode2025](https://wiki.debian.org/SummerOfCode2025).\n\nApproved Projects\n-----------------\n\nQuality assurance and continuous integration for biological and medical applications inside Debian\n--------------------------------------------------------------------------------------------------\n\n**Description of the project:** The Debian Med Blend has packaged a lot of [applications used in medicine and biology](https://blends.debian.org/med/tasks) for Debian. To enhance and continuously ensure the quality of the packaged software we try to implement Continuous Integration tests for all our packages. This was accomplished thanks to several past interns. These tests are of specific importance since only a very small share of the developers inside the Debian Med project are actual users of the software and thus automated testing is required to provide our users with the quality we like to approach. Interns are also not necessarily comfortable with the topic of medicine and biology - reading documentation or publications or directly contact the authors of the software frequently gives sensible ideas how to write a test for the software.\n\n*   **Confirmed Mentor**: Andreas Tille\n    \n*   **How to contact the mentor:** [tille@debian.org](mailto:tille@debian.org)\n    \n*   **Confirmed co-mentors:** Emmanuel Arias <[eamanu@debian.org](mailto:eamanu@debian.org)\\>, Étienne Mollier <[emollier@debian.org](mailto:emollier@debian.org)\\>\n    \n*   **Difficulty level**: medium\n    \n*   **Project size:** Depending from students availability this project can be medium or large. The advantage of the project is it can be split into small pieces\n    \n*   **Deliverables of the project**:Continuous integration tests for Debian Med applications lacking a test, Quality Assurance review and bug fixing if issues might be uncovered\n    \n*   **Desirable skills**: Background in bioinformatics, medical imaging could be an advantage, but interest in scientific software and reading relevant documentation and papers might be sufficient. Debian packaging skills are an extra plus but can be taught in the project run.\n    \n*   **What the intern will learn:** Detailed insight into the software maintained by the Debian Med team, bug triaging in scientific software, Debian packaging skills, optimising bioinformatics and other scientific tools\n    \n*   **Application tasks:** Pick bugs like [1035121](https://bugs.debian.org/1035121 \"DebianBug\"), [1035175](https://bugs.debian.org/1035175 \"DebianBug\"), [1035178](https://bugs.debian.org/1035178 \"DebianBug\"), [1035182](https://bugs.debian.org/1035182 \"DebianBug\"), [1035188](https://bugs.debian.org/1035188 \"DebianBug\"), [1035200](https://bugs.debian.org/1035200 \"DebianBug\"), [1035277](https://bugs.debian.org/1035277 \"DebianBug\"), [1036500](https://bugs.debian.org/1036500 \"DebianBug\"), [1036506](https://bugs.debian.org/1036506 \"DebianBug\") and try fixing it - asking the mentor for help is perfectly fine and actually recommended. This is on one hand proof that the student is able to understand Debian packaging and understands the actual topic at a sufficient level.\n    \n*   **Related projects:** [SummerOfCode2016/Projects/BioToolsTesting](https://wiki.debian.org/SummerOfCode2016/Projects/BioToolsTesting), [SummerOfCode2017/Projects/QA\\_BiologyApps](https://wiki.debian.org/SummerOfCode2017/Projects/QA_BiologyApps), [?](https://wiki.debian.org/Outreachy/Round15/Projects/#Outreachy.2FRound15.2FProjects.2FContinuousIntegrationBioInformatics)Continuous\\_Integration\\_for\\_biological\\_applications\\_inside\\_Debian, [SummerOfCode2019/ApprovedProjects/CIforDebianMed](https://wiki.debian.org/SummerOfCode2019/ApprovedProjects/CIforDebianMed) [SummerOfCode2020/ApprovedProjects/DebianMedQA](https://wiki.debian.org/SummerOfCode2020/ApprovedProjects/DebianMedQA)[GSoC and Outreachy Project Proposal: Quality Assurance and Continuous integration for applications in life sciences and medicine](https://salsa.debian.org/med-team/community/work-over-summer-and-beyond/-/wikis/GSoC-and-Outreachy-Project-Proposal:-Quality-Assurance-and-Continuous-integration-for-applications-in-life-sciences-and-medicine)\n    \n\nDevice-specific Tweaks Management\n---------------------------------\n\n**Description of the project:** A significant number of non-x86 Linux-capable devices made it to the market in the past few years, especially ARM64 laptops, mobile phones and tablets. Most of those, inheriting their design from embedded systems (and therefore lacking support for software interfaces such as ACPI/UEFI), need device-specific \"tweaks\" (configuration files/fragments, shell scripts...). As the number of supported devices grows rapidly, providing device-specific Debian packages containing those tweaks doesn't scale, and limits our ability to provide a generic system image/rootfs.\n\nThis project aims at researching and implementing a more flexible way of managing those tweaks, by creating a service capable of identifying the exact device it's running on, selecting the appropriate tweaks based on its configuration file, and installing them to the system. Reaching this goal will ultimately ease supporting new devices in Debian.\n\n*   **Confirmed Mentor**: Arnaud Ferraris (UTC+2)\n    \n*   **How to contact the mentor:** Matrix (a-wai on [mobian-dev:matrix.org](https://matrix.to/#/#mobian-dev:matrix.org) or email ([aferraris@debian.org](mailto:aferraris@debian.org))\n    \n*   **Difficulty level**: Mostly medium, although difficulty level is expected to increase over the project's course\n    \n*   **Project size:** The whole project is a large (350 hours) one, although its scope could be reduced to fit either a 90 hours or a 175 hours project.\n    \n*   **Deliverables of the project**:\n    \n    *   Analysis and discussion of the current state of device tweaks management in Debian and Mobian\n    *   Proposal for a unified, run-time approach\n    *   Initial implementation of a \"tweaks management\" service\n    *   Packaging of this service and tweaks data/configuration for at least one device\n*   **Desirable skills**:\n    \n    *   Familiarity with ARM64 devices (RPi 3+, Pine{Book,Phone,Tab} etc)\n    *   Basic understanding of Linux systems (common services and middleware, user/admin/distro-specific configuration...)\n    *   Shell scripting and basic programming skills\n    *   (optional) basic Rust knowledge\n*   **What the intern will learn:** Through this project, the intern will improve their analysis and project management skils, gain a better understanding of Linux systems from a low-level perspective along with basic embedded software skills. They will also learn about Debian development (on both technical and philosophical levels) and likely learn/improve their Rust knowledge.\n    \n*   **Application tasks:**\n    \n    *   Locate current tweaks packages (in both Debian and Mobian) targeting mobile devices and their source code\n    *   Briefly analyze one or several of those tweaks and either:\n        *   Explain their use\n        *   Rework them, ideally making them more generic\n        *   Offer to remove them, explaining the reasoning\n*   **Related projects:**\n    \n    *   [Mobian](https://wiki.debian.org/Mobian)\n        \n    *   [DebianOnMobile](https://wiki.debian.org/Teams/DebianOnMobile) team\n        \n    *   [mobile-tweaks](https://tracker.debian.org/pkg/mobile-tweaks)\n        \n    *   [tweakster](https://gitlab.com/mobian1/tweakster)\n        \n\nEnhancing Debian packages with ROCm GPU acceleration\n----------------------------------------------------\n\n**Description of the project:** There now exists a solid foundation of AMD ROCm components packaged within Debian, so it is time to start making use of them! This project would consist of enhancements to existing packages that have AMD GPU support available upstream but not enabled in Debian, or the packaging of new tools and libraries that would be useful for AMD GPU users. A (non-exhaustive) list of potential packages include: adios2, blaspp, cp2k, cupy, dbcsr, elpa, gloo, hpx, hypre, jax, kokkos, lammps, lapackpp, magma, mfem, mpich, onnxruntime, papi, paraview, petsc, pyfr, pytorch, slepc, spfft, sundials, superlu-dist, or trilinos. There are a lot of options of varying difficulty, so it may be possible to tune the project to the skills and time available to the contributor.\n\n*   **Confirmed Mentor**: Cordell Bloor\n    \n*   **How to contact the mentor:** [cgmb@slerp.xyz](mailto:cgmb@slerp.xyz)\n    \n*   **Difficulty level**: Medium\n    \n*   **Project size:** Large (350 hours) if attempting to enhance as many packages as possible, but the scope could be reduced to fit a Medium (175 hour) or Small (90 hour) project\n    \n*   **Deliverables of the project**:\n    \n    *   New Debian packages with GPU support\n    *   Enhanced GPU support within existing Debian packages\n    *   More autopackagetests running on the Debian ROCm CI\n*   **Desirable skills**:\n    \n    *   Strong familiarity with Debian and/or Ubuntu\n    *   Proficiency with CLIs\n    *   Some experience with build systems (e.g. CMake)\n*   **What the intern will learn:**\n    \n    *   Debian packaging (.deb) and maintenance within the Debian ecosystem\n    *   Interacting with a broad variety of other groups within Debian, for example the Release Team and ftp-master\n    *   How to work with ROCm (the AMD alternative to CUDA)\n*   **Application tasks:**\n    \n    *   Read the Debian New Maintainer's Guide and the Developer's reference\n    *   Analyze which packages you would target\n    *   Try to enhance one Debian package with AMD ROCm support\n*   **Related projects:**\n    \n    *   [AMD ROCm GitHub](https://github.com/ROCm/ROCm/)\n        \n\nMake Debian for Raspberry Build Again\n-------------------------------------\n\n**Description of the project:** There is an available set of images for running Debian in Raspberry Pi computers (all models below the 5 series)! However, I (the maintainer) am severely lacking time to take care for them; I [called for help](https://gwolf.org/2023/08/interested-in-adopting-the-rpi-images-for-debian.html) for somebody to adopt them, but have not been successful. The image generation scripts might have _bitrotted_ a bit, but it is mostly all done. And there is a lot of interest and use still in having the images freshly generated and decently tested! This GSoC project is about getting the \\[\\[[https://raspi.debian.net/](https://raspi.debian.net/) | Raspberry Pi Debian images\\] site working reliably again, and ideally making it easily deployable to be run in project machines.\n\n*   **Confirmed Mentor**: Gunnar Wolf\n    \n*   **How to contact the mentor:** [gwolf@debian.org](mailto:gwolf@debian.org), IRC: gwolf on OFTC\n    \n*   **Difficulty level**: Easy\n    \n*   **Project size:** Medium\n    \n*   **Deliverables of the project**:\n    \n    *   Refreshing the set of _daily-built images_\n        \n    *   Having the set of _daily-built images_ become automatic again — that is, go back to the promise of having it daily-built\n        \n    *   Write an Ansible playbook / Chef recipe / Puppet whatsitsname to define a virtual serve and have it build daily\n    *   Do the (very basic!) hardware testing on several Raspberry computers. Do note, naturally, this will require having access to the relevant hardware.\n*   **Desirable skills**:\n    \n    *   Understanding the early-boot process of a single-board computer\n    *   Declarative configuration (for vmdb2 as well as for Ansible/Chef/Puppet)\n    *   Writing systemd units and timers\n*   **What the intern will learn:** The Raspberry Pi family of computers are ARM-based computers, which have a boot process quite different from “traditional” UEFI-based PCs. You will get acquinted with how a different architecture (that is growing in importance!) boots, how Device Tree maps the hardware for the operating system to use it (and maybe even how to work with overlays). You will also learn how deployment of production-level code is done to servers so they run reliably.\n    \n*   **Application tasks:**\n    \n    *   We try to diverge _the least possible_ from regular Debian installs with these images, but the RPi's way of working forces us to take some decisions.\n        \n        *   How much do we differ?\n        *   Do you think all of our modifications make sense, or we might be carrying over some cruft that could be removed?\n    *   We use the vmdb2 image building system. It is not much known outside Debian. How do you compare it with other image building tools?\n*   **Related projects:** We are filling approximately the same role as our [debian-installer](https://www.debian.org/devel/debian-installer/) tool, but generating for a series of computers where users often _flash ready-to-use images_ instead of doing an explicit install. Of course, the images we provide could be compared to what [Raspberry Pi OS](https://www.raspberrypi.com/software/) offers, but giving the quality and free-software guarantees that Debian has.\n    \n\nPackage LLM Inference Libraries\n-------------------------------\n\n**Description of the project:** Package Large Language Model (LLM) inference libraries, in particular vLLM. It is needless to explain how LLMs are important. Currently, in the Debian archive, we only have [?](https://wiki.debian.org/PyTorch)PyTorch, but downstream applications are still missing. One of the most promising downstream applications is LLM inference. There are already people working on llama.cpp and Ollama, but vLLM still lacks lots of dependencies to land onto Debian. For multi-GPU inference and concurrency, vLLM has its advantages over llama.cpp. The missing packages are, for instance, transformers, huggingface-hub, etc. We would like to trim the dependency tree a little bit at the beginning until we get a minimum working instance of vLLM. Such, this project involves the Debian packaging work for vLLM and its dependencies that are missing from Debian, as well as fixing issues (if there is any) in existing packages to make vLLM work.\n\n*   **Confirmed Mentor**: Mo Zhou\n    \n*   **How to contact the mentor:** [lumin@debian.org](mailto:lumin@debian.org)\n    \n*   **Confirmed co-mentors:** Christian Kastner ([ckk@debian.org](mailto:ckk@debian.org)), Xuanteng Huang ([xuanteng.huang@outlook.com](mailto:xuanteng.huang@outlook.com)). On the other hand, Debian Deep Learning Team ([debian-ai@lists.debian.org](mailto:debian-ai@lists.debian.org)) could offer help.\n    \n*   **Difficulty level**: Medium (There might be some hard bits. Some packages that we are going to deal with have a clearly above-average difficulty than general Debian packages.\n    \n*   **Project size:** 350 hour (large). I get this rough estimate by looking at the pipdeptree of the vllm package. The tree is a little deep.\n    \n*   **Deliverables of the project**: Eventually I hope we can make vLLM into Debian archive, based on which we can deliver something for LLM inference out-of-the-box. If the amount of work eventually turns to be beyond my expectation, I'm still happy to see how far we can go towards this goal. If the amount of work required for vLLM is less than I expected, we can also look at something else like SGLang, another open source LLM inference library.\n    \n*   **Desirable skills**: Long term Linux user (familiarity with Debian family is preferred), Python, [?](https://wiki.debian.org/PyTorch)PyTorch, and experience of running Large Language Models locally.\n    \n*   **What the intern will learn:** Through this project, the intern will learn about the Debian development process, and gain more experience of running LLMs locally, including the inference performance tuning.\n    \n*   **Application tasks:** Analyze how [?](https://wiki.debian.org/PyTorch)PyTorch is packaged in Debian, including how the CUDA variant of [?](https://wiki.debian.org/PyTorch)PyTorch is prepared. Those details are very important for the whole reverse dependency tree. And, the intern also needs to setup vLLM locally using pip or uv, and run the LLM inference locally for reference.\n    \n*   **Related projects:** The [?](https://wiki.debian.org/PyTorch)PyTorch packaging repository is here: [https://salsa.debian.org/deeplearning-team/pytorch](https://salsa.debian.org/deeplearning-team/pytorch)\n    \n\nAutopkgtests for the rsync package\n----------------------------------\n\n**Description of the project:** A recent series of breakages caused in the rsync package as part of CVE fixes exposed the lack of testing coverage on Debian, e.g.: [https://github.com/RsyncProject/rsync/issues/702](https://github.com/RsyncProject/rsync/issues/702). The rsync package on Debian has no autopkgtest. This project is for adding these tests to the rsync package, covering as many usecases as possible, making impossible for regressions to go unnoticed. These tests will also be submitted to stable through the proposed-updates mechanism.\n\n*   **Confirmed Mentor**: [SamuelHenrique](https://wiki.debian.org/SamuelHenrique)\n    \n*   **How to contact the mentor:** [samueloph@d.o](mailto:samueloph@d.o), @samueloph:matrix.org, samueloph @ OFTC.\n    \n*   **Confirmed co-mentors:** N/A\n    \n*   **Difficulty level**: Easy\n    \n*   **Project size:** 90 hour (small project)\n    \n*   **Deliverables of the project**: Autopkgtests for the rsync package\n    \n*   **Desirable skills**: Debian packaging, autopkgtest, shell scripting, rsync.\n    \n*   **What the intern will learn:** How the Debian project does CI, how to write CI tests for the rsync package.\n    \n*   **Application tasks:** Debian packaging contributions. It is required to have a non-virtualized machine running Debian Stable or Testing (no WSL, no containers, no VMs).\n    \n*   **Related projects:** N/A\n    \n*   **More Resources:** [https://salsa.debian.org/ci-team/autopkgtest/-/blob/master/doc/README.package-tests.rst](https://salsa.debian.org/ci-team/autopkgtest/-/blob/master/doc/README.package-tests.rst)\n    \n\nSalsa CI in Debian\n------------------\n\n**Description of the project:** Salsa CI is a custom-built continuous integration framework that is used in the Debian Gitlab instance (Salsa) and helps Debian maintainers manage roughly 9,000 projects. The Salsa CI pipeline emulates the Debian build process and runs several Debian quality tests, helping to increase the probability that packages can migrate from Debian Unstable to Testing reliably, quickly, and without issue. When new source code triggers a Salsa CI pipeline, 17 different jobs run to build and test it automatically. Salsa CI checks to see whether the to-be-uploaded packages build on multiple architectures (at the moment, amd64 and i386, and optionally on Arm), runs autopkgtest test suites to try to identify potential regressions, and checks for common errors with our custom linter, lintian, among other tests.\n\n*   **Confirmed Mentor**: Otto Kekäläinen\n    \n*   **How to contact the mentor:** [otto@debian.org](mailto:otto@debian.org)\n    \n*   **Confirmed co-mentors:** Emmanuel Arias <[eamanu@debian.org](mailto:eamanu@debian.org)\\>\n    \n*   **Difficulty level**: Medium\n    \n*   **Project size:** Medium sized (175 hours). Depending on the student's availability, this project can be medium or large. The advantage of the project is it can be split into small pieces.\n    \n*   **Deliverables of the project**: Fix and discuss [issues reported](https://salsa.debian.org/salsa-ci-team/pipeline/-/issues/?sort=created_asc&state=opened&first_page_size=20) to Salsa CI. [Specially Labels \"Nice-to-have\", \"Accepting MRs\".](https://salsa.debian.org/salsa-ci-team/pipeline/-/issues/?sort=created_date&state=opened&label_name%5B%5D=Accepting%20MRs&label_name%5B%5D=Nice-To-Have&first_page_size=100)\n    \n*   **Desirable skills**: Awareness of [GitLab](https://wiki.debian.org/GitLab) CI. Working with git. Basic knowledge of Debian packaging.\n    \n*   **What the intern will learn:** Debian Release process, Debian package building, Debian CI process, Basic QA of Debian packages.\n    \n*   **Application tasks:** Pick issues from [here](https://salsa.debian.org/salsa-ci-team/pipeline/-/issues/?sort=created_asc&state=opened&first_page_size=20), discuss with the team and try to fix them.\n    \n*   More resources:\n    *   [https://debconf20.debconf.org/talks/47-where-is-salsa-ci-right-now/](https://debconf20.debconf.org/talks/47-where-is-salsa-ci-right-now/)\n        \n    *   [https://about.gitlab.com/blog/2023/09/19/debian-customizes-ci-tooling-with-gitlab/](https://about.gitlab.com/blog/2023/09/19/debian-customizes-ci-tooling-with-gitlab/)\n        \n    *   [https://debconf19.debconf.org/talks/148-salsa-ci-debian-pipeline-for-developers/](https://debconf19.debconf.org/talks/148-salsa-ci-debian-pipeline-for-developers/)\n        \n\nTo add a new project proposal, please enter a WikiName in one of the boxes below (the contents will be used as a wiki page name, please **avoid spaces**) and hit the button! Then, fill in the template, and drop us a line on the debian-outreach mailing-list.\n\n**Please note that below projects aren't approved yet. Please don't apply for non-approved projects. The list of approved projects is available above.**\n\nUnapproved Projects with confirmed mentors\n------------------------------------------\n\nbsdutils: Reimplementation of BSD Utilities in Rust\n---------------------------------------------------\n\n**Description of the project:** Create Rust versions of BSD utility tools, with a focus on full option compatibility and passing GNU tests. This project involves the Rust-based reimplementation of essential BSD utility tools that provide functionality for process management, logging, and terminal session recording. The objective is to implement these tools as drop-in replacements for the original bsdutils suite, ensuring full compatibility with all options and passing all relevant tests. To improve your chances to be selected, please contribute a few changes to the project to demonstrate your commitment and understanding of the project.\n\n*   **Confirmed Mentor**: Sylvestre Ledru\n    \n*   **How to contact the mentor:** [sylvestre@debian.org](mailto:sylvestre@debian.org)\n    \n*   **Confirmed co-mentors:** Daniel Hofstetter <[daniel.hofstetter@42dh.com](mailto:daniel.hofstetter@42dh.com)\\>\n    \n*   **Difficulty level**: Large\n    \n*   **Project size:** 350 hours\n    \n*   **Deliverables of the project**: Robust BSD utility tools, including:\n    \n    *   /usr/bin/renice - change the priority of running processes\n    *   /usr/bin/logger - add logs to the system log files\n    *   /usr/bin/script - record a terminal session\n    *   /usr/bin/scriptlive - real-time variant of the script command\n    *   /usr/bin/scriptreplay - replay a terminal session recorded with script\n    *   /usr/bin/wall - broadcast a message to all logged-in users\n*   **Desirable skills**: Rust expertise, knowledge of process management, logging systems, and terminal operations.\n    \n*   **What the intern will learn:** How BSD utilities work, process priority management, system logging, and terminal session handling.\n    \n*   **Application tasks:** Implement or improve one of the BSD utilities from the bsdutils project: [https://github.com/uutils/bsdutils](https://github.com/uutils/bsdutils)\n    \n\n**Description of the project:** Create Rust versions of login infrastructure tools, with a focus on full option compatibility and passing GNU tests. This project involves the Rust-based reimplementation of essential login infrastructure tools that provide functionality for logins and changing effective user or group IDs. The objective is to implement these tools as drop-in replacements for the original shadow-utils suite, ensuring full compatibility with all options and passing all relevant tests. To improve your chances to be selected, please contribute a few changes to the project to demonstrate your commitment and understanding of the project.\n\n*   **Confirmed Mentor**: Sylvestre Ledru\n    \n*   **How to contact the mentor:** [sylvestre@debian.org](mailto:sylvestre@debian.org)\n    \n*   **Confirmed co-mentors:** Daniel Hofstetter <[daniel.hofstetter@42dh.com](mailto:daniel.hofstetter@42dh.com)\\>\n    \n*   **Difficulty level**: Large\n    \n*   **Project size:** 350 hours\n    \n*   **Deliverables of the project**: Robust login infrastructure tools, including:\n    \n    *   /bin/login - the program that invokes a user shell on a virtual terminal\n    *   /usr/bin/faillog - tool for displaying and maintaining failure records\n    *   /usr/bin/lastlog - examine the last login record\n    *   /usr/bin/newgrp - change to a new group\n    *   /usr/sbin/nologin - a dummy shell for disabled user accounts\n    *   /usr/bin/sg - execute command with different group ID\n*   **Desirable skills**: Rust expertise, knowledge of Linux authentication systems, user/group management, and security considerations.\n    \n*   **What the intern will learn:** How login infrastructure works, system security concepts, authentication mechanisms, and privilege management.\n    \n*   **Application tasks:** Implement or improve one of the login tools from the shadow-utils project: [https://github.com/shadow-maint/shadow](https://github.com/shadow-maint/shadow)\n    \n\n**Description of the project:** Create Rust versions of system monitoring and statistics tools, with a focus on full option compatibility and passing GNU tests. This project involves the Rust-based development of system monitoring and statistics tools: top, vmstat, tload, w, and watch. And process management and information tools: ps, pgrep, pidwait, pkill, skill, and snice. The objective is to achieve full compatibility with all options and to pass GNU tests, ensuring these tools provide accurate and reliable system insights. To improve your chances to be selected, please contribute a few changes to the project to demonstrate your commitment and understanding of the project. Debian can lead in this space with security and Rust!\n\n*   **Confirmed Mentor**: Sylvestre Ledru\n    \n*   **How to contact the mentor:** [sylvestre@debian.org](mailto:sylvestre@debian.org)\n    \n*   **Confirmed co-mentors:**Daniel Hofstetter <[daniel.hofstetter@42dh.com](mailto:daniel.hofstetter@42dh.com)\\>\n    \n*   **Difficulty level**: Large\n    \n*   **Project size:** 350 hours\n    \n*   **Deliverables of the project**: Robust tools for system monitoring and statistics, fully compatible with existing options and verified by GNU tests.\n    \n*   **Desirable skills**: Rust expertise, knowledge of system performance metrics, familiarity with GNU testing frameworks.\n    \n*   **What the intern will learn:** How the Coreutils work, the low level part of the OS\n    \n*   **Application tasks:** Fix one or more GNU test listed on: [https://uutils.github.io/coreutils/book/test\\_coverage.html](https://uutils.github.io/coreutils/book/test_coverage.html)\n    \n\nutil-linux: Development of System Utilities in Rust\n---------------------------------------------------\n\n**Description of the project:** Create Rust versions of util-linux tools, with a focus on full option compatibility and passing GNU tests. This project involves the Rust-based reimplementation of various util-linux tools, including system information tools (dmesg, lscpu), filesystem tools (mountpoint, fsfreeze), partition management tools, process management tools, and utility tools. The objective is to achieve full compatibility with all options and to pass GNU tests, ensuring these tools function as drop-in replacements for the original util-linux suite. To improve your chances to be selected, please contribute a few changes to the project to demonstrate your commitment and understanding of the project.\n\n*   **Confirmed Mentor**: Sylvestre Ledru\n    \n*   **How to contact the mentor:** [sylvestre@debian.org](mailto:sylvestre@debian.org)\n    \n*   **Confirmed co-mentors:** Daniel Hofstetter <[daniel.hofstetter@42dh.com](mailto:daniel.hofstetter@42dh.com)\\>\n    \n*   **Difficulty level**: Large\n    \n*   **Project size:** 350 hours\n    \n*   **Deliverables of the project**: Robust tools for system utilities, fully compatible with existing options and verified by GNU tests.\n    \n*   **Desirable skills**: Rust expertise, knowledge of system utilities and Linux internals, familiarity with GNU testing frameworks.\n    \n*   **What the intern will learn:** How util-linux tools work, the low level part of the OS, system management, and filesystem operations\n    \n*   **Application tasks:** Implement or improve one of the tools listed in the util-linux repository: [https://github.com/uutils/util-linux](https://github.com/uutils/util-linux)\n"}