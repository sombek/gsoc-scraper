{"name":"CGAL Project","description":"C++ library of computational geometry","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/cgal-project","ideas_url":"https://github.com/CGAL/cgal/wiki/Project-Ideas","logo":"https://summerofcode.withgoogle.com/media/org/cgal-project/9ubuadbe0eg5xfcw-360.png","technologies":["c++","qt"],"topics":["geometry","mesh processing","computation geometry","geometry processing"],"projects":[{"project_name":"Enhancing the 2D Regularized Boolean Operation Demo","summary":"Enhance the demo of the 2D Regularized Boolean Operations package to support Boolean operations on polygons with non-linear curves, among other improvements.","difficulty":"Medium"},{"project_name":"Tetrahedral Isotropic Remeshing Parallelization","summary":"Parallelize the Tetrahedral Remeshing algorithm in CGAL to improve performance by utilizing concurrent mesh operations.","difficulty":"High"},{"project_name":"New Mesh Subdivision Methods","summary":"Implement new and classic mesh subdivision methods and assess their effectiveness compared to existing algorithms.","difficulty":"Medium"},{"project_name":"Enhanced Dual Contouring","summary":"Improve the Dual Contouring method's robustness and speed, focusing on manifold contouring and possibly exploring GPU implementations.","difficulty":"High"},{"project_name":"Topological Filtering of Features in Triangle Meshes","summary":"Develop a method for detecting sharp features in triangle meshes using Topological Data Analysis to enhance remeshing outputs.","difficulty":"High"},{"project_name":"Improving ARAP in CGAL","summary":"Investigate improvements to the As-Rigid-As-Possible (ARAP) surface modeling approach and extend it to 3D volume deformation.","difficulty":"High"},{"project_name":"Extending 2D Arrangement Drawings","summary":"Enhance the 2D Arrangement package's capabilities for drawing various geometric arrangements more efficiently and accurately.","difficulty":"Medium"},{"project_name":"Hexahedral mesh generation","summary":"Implement a method for generating locally refined hexahedral meshes based on a previous research paper using a linear cell complex.","difficulty":"Medium"},{"project_name":"Cut by plane a volumetric mesh","summary":"Create a method to robustly cut a 3D volumetric mesh with a plane, focusing on proper face insertion along edge paths.","difficulty":"Medium"},{"project_name":"Improvement of Named Parameters","summary":"Apply compile-time checks for named parameters in CGAL functions and enhance this feature across the library.","difficulty":"Medium"},{"project_name":"Adding Support for New File Formats for Meshes","summary":"Expand CGAL's capabilities by adding support for additional mesh file formats like glTF and gmsh, depending on project scope.","difficulty":"Variable"}],"jina_response":"Title: Project Ideas\n\nURL Source: https://github.com/CGAL/cgal/wiki/Project-Ideas\n\nMarkdown Content:\nTable of Contents\n-----------------\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#table-of-contents)\n\n*   [GSoC 2025 Projects](https://github.com/CGAL/cgal/wiki/Project-Ideas#gsoc-2025-projects)\n    *   [Enhancing the 2D Regularized Boolean Operation Demo](https://github.com/CGAL/cgal/wiki/Project-Ideas#enhancing-the-2d-regularized-boolean-operation-demo)\n    *   [Tetrahedral Isotropic Remeshing Parallelization](https://github.com/CGAL/cgal/wiki/Project-Ideas#tetrahedral-isotropic-remeshing-parallelization)\n    *   [New Mesh Subdivision Methods](https://github.com/CGAL/cgal/wiki/Project-Ideas#new-mesh-subdivision-methods)\n    *   [Enhanced Dual Contouring](https://github.com/CGAL/cgal/wiki/Project-Ideas#enhanced-dual-contouring)\n    *   [Topological Filtering of Features in Triangle Meshes](https://github.com/CGAL/cgal/wiki/Project-Ideas#topological-filtering-of-features-in-triangle-meshes)\n    *   [Improving ARAP in CGAL](https://github.com/CGAL/cgal/wiki/Project-Ideas#improving-arap-in-cgal)\n    *   [Extending 2D Arrangement Drawings](https://github.com/CGAL/cgal/wiki/Project-Ideas#extending-2d-arrangement-drawings)\n    *   [Hexahedral mesh generation](https://github.com/CGAL/cgal/wiki/Project-Ideas#hexahedral-mesh-generation)\n    *   [Cut by plane a volumetric mesh](https://github.com/CGAL/cgal/wiki/Project-Ideas#cut-by-plane-a-volumetric-mesh)\n    *   [Improvement of Named Parameters](https://github.com/CGAL/cgal/wiki/Project-Ideas#improvement-of-named-parameters)\n    *   [Adding Support for New File Formats for Meshes](https://github.com/CGAL/cgal/wiki/Project-Ideas#adding-support-for-new-file-formats-for-meshes)\n*   [Information Candidates Should Supply](https://github.com/CGAL/cgal/wiki/Project-Ideas#information-candidates-should-supply)\n*   [Previous Project Ideas and Successful Projects](https://github.com/CGAL/cgal/wiki/Project-Ideas#previous-project-ideas-and-successful-projects)\n\nThe CGAL Project is a mentoring organization of the [Google Summer of Code](https://summerofcode.withgoogle.com/) 2025. On this page we present some project ideas as well the [information](https://github.com/CGAL/cgal/wiki/Project-Ideas#information-candidates-should-supply) applicants have to provide us. **GSoC applicants are welcome to propose other ideas and check if a mentor is interested in supervising it**. For new project proposals, contact us at [gsoc-cgal@inria.fr](mailto:gsoc-cgal@inria.fr).\n\nGSoC 2025 Projects\n------------------\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#gsoc-2025-projects)\n\n### Enhancing the 2D Regularized Boolean Operation Demo\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#enhancing-the-2d-regularized-boolean-operation-demo)\n\n**Mentor**: Efi Fogel\n\n**Project description:** The new demonstration program of the \"2D Regularized Boolean Operations\" package demonstrates various operations on polygons, such as, union, intersection, and Minkowski sum. It also demonstrates the application of several operations in a pipeline fashion. The demo has not been published yet; it requires a few enhancements, such as the support of Boolean operations on general polygons bounded by non-linear curves.\n\n**Required Skills:** Qt6, geometry, code development tools (e.g., git), and C++14 proficiency\n\n**Contact:** [efifogel@gmail.com](mailto:efifogel@gmail.com)\n\n**Duration:** 350h\n\n### Tetrahedral Isotropic Remeshing Parallelization\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#tetrahedral-isotropic-remeshing-parallelization)\n\n**Mentor**: Jane Tournois\n\n**Project description:**\n\nThe goal of this project is to parallelize the code of the [Tetrahedral Remeshing](https://doc.cgal.org/latest/Tetrahedral_remeshing/index.html) algorithm available in CGAL. This multi-material tetrahedral remeshing algorithm \\[2\\] is based on local and atomic operations such as edge collapse, edge split and edge flip, that could be performed in parallel to improve the performances of the code. The 3D Triangulations \\[3\\] and Tetrahedral Mesh Generation package \\[4\\] provide a framework to implement mesh operations concurrently. The same framework will be used to parallelize the remeshing algorithm, with the Intel TBB library \\[5\\].\n\nResources:\n\n*   \\[1\\] CGAL [Tetrahedral Remeshing package](https://doc.cgal.org/latest/Tetrahedral_remeshing/index.html)\n*   \\[2\\] The original publication [Multi-Material Adaptive Volume Remesher](https://perso.telecom-paristech.fr/boubek/papers/MADVolumeRemesher)\n*   \\[3\\] CGAL [3D Triangulations](https://doc.cgal.org/latest/Triangulation_3/index.html)\n*   \\[4\\] CGAL [Tetrahedral Mesh Generation package](https://doc.cgal.org/latest/Mesh_3/index.html)\n*   \\[5\\] Intel [Threading Building Blocks](https://www.intel.com/content/www/us/en/developer/tools/oneapi/onetbb.html)\n\n**Required Skills:** C++17, Mesh Processing, Computational Geometry, Parallelism with TBB\n\n**Contact:** [jane.tournois@geometryfactory.com](mailto:jane.tournois@geometryfactory.com)\n\n**Duration:** 350h\n\n### New Mesh Subdivision Methods\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#new-mesh-subdivision-methods)\n\n**Mentor**: Mael Rouxel-Labb√©\n\n**Project description:**\n\nSubdivision methods are efficient techniques to produce smooth surfaces from polygonal meshes. Within CGAL \\[1\\], a handful of classic subdivision techniques already exist ([CatmullClark subdivision](https://doc.cgal.org/latest/Subdivision_method_3/group__PkgSurfaceSubdivisionMethod3Functions.html#ga8e6c8dd3c26d7a27c070b3a091684679), [Loop subdivision](https://doc.cgal.org/latest/Subdivision_method_3/group__PkgSurfaceSubdivisionMethod3Functions.html#gafa1e441c4e07eb06e1f6efecef7ff268) [DooSabin subdivision](https://doc.cgal.org/latest/Subdivision_method_3/group__PkgSurfaceSubdivisionMethod3Functions.html#gae8a9a19d84dc91f9e2f8a30216b8b9c9), [Sqrt3 subdivision](https://doc.cgal.org/latest/Subdivision_method_3/group__PkgSurfaceSubdivisionMethod3Functions.html#gad797e33b45f7fc8685159edc9cff94b8)). The goal of this project is two-fold: (a) implement newer subdivision techniques -- such as Interpolatory SQRT(3) Subdivision \\[2\\], which builds upon an algorithm that is already found in CGAL -- and compare them to our existing algorithms (b) Investigate the use of these newer techniques as a preprocessing step in some of CGAL's newer remeshing techniques (such as adaptive remeshing).\n\nResources:\n\n*   \\[1\\] CGAL [Subdivision package](https://doc.cgal.org/latest/Subdivision_method_3/index.html)\n*   \\[2\\] [Interpolatory SQRT(3) Subdivision](https://people.eecs.berkeley.edu/~sequin/CS284/PAPERS/root3subdiv.pdf)\n*   \\[3\\] [Gaussian-Product Subdivision Surfaces](https://dl.acm.org/doi/pdf/10.1145/3306346.3323026)\n*   \\[4\\] [CGAL's upcoming adaptive remeshing algorithms](https://github.com/CGAL/cgal/pull/7837)\n\n**Required Skills:** C++17, Mesh Processing\n\n**Contact:** [mael.rouxel.labbe@geometryfactory.com](mailto:mael.rouxel.labbe@geometryfactory.com)\n\n**Duration:** 350h\n\n### Enhanced Dual Contouring\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#enhanced-dual-contouring)\n\n**Mentor**: Mael Rouxel-Labb√©, Pierre Alliez\n\n**Project description:**\n\nA previous GSoC launched the process of adding classic contouring methods to CGAL: Marching Cubes and Dual Contouring. This package is about to be finalized and will be integrated soon into CGAL ([https://github.com/CGAL/cgal/pull/6849](https://github.com/CGAL/cgal/pull/6849)). Many enhancements exist for the Dual Contouring method to improve its robustness: placement of the dual point, improved conditioning of the SVD matrices, or on-the-fly refinement of the underlying grid \\[1\\]. Another aspect is speed, as a grid structure is well adapted to GPU computation.\n\nThe project will first focus on manifold contouring methods and robustness in standard C++. If there is time and the candidate has the required skills, we can also explore runtime aspects and the conversion to a GPU implementation. If there is time and the candidate does not have the required skills, we shall explore the implementation of other contouring methods such as Dual Marching Cubes \\[2\\].\n\nResources:\n\n*   \\[1\\] [Manifold Dual Contouring](https://ieeexplore.ieee.org/document/4297690)\n*   \\[2\\] [Dual Marching Cubes](https://www.cs.rice.edu/~jwarren/papers/dmc.pdf)\n*   [Feature-Sensitive Subdivision and Isosurface Reconstruction](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=b2209e3f6c05091f65d6abf91580a985adb2c37f)\n\n**Required Skills:** C++17, Dual Contouring, linear algebra / quadric error metrics, possibly GPU algorithms\n\n**Contact:** [mael.rouxel.labbe@geometryfactory.com](mailto:mael.rouxel.labbe@geometryfactory.com)\n\n**Duration:** 350h\n\n### Topological Filtering of Features in Triangle Meshes\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#topological-filtering-of-features-in-triangle-meshes)\n\n**Mentor**: Sebastien Loriot\n\n**Project description:**\n\nRemeshing algorithms in CGAL requires the proper extraction of sharp features so that they can be represented in the output mesh ([like here for example](https://doc.cgal.org/latest/Mesh_3/index.html#fig__figuretwo_spheres_mesh)). Classical method to detect sharp features are based on collecting edges with sharp dihedral surface angles. However, depending on the quality of the input mesh, some noisy edges might be detected, or some edges might be detected. To workaround these issues, it might be interesting to rely on tools from Topological Data Analysis, like for example persistence. Indeed, extra data or missing data are all related to a notion of scale at which the problem is looked at. The goal of this project is to implement such a strategy for provide curated feature edge graph to the meshing algorithm of CGAL. If time allows, extension to detection of significant handles might also be looked at.\n\nResources:\n\n*   [A Practical Solver for Scalar Data Topological Simplification](https://arxiv.org/abs/2407.12399)\n*   [To cut or to fill: a global optimization approach to topological simplification](https://www.cse.wustl.edu/~taoju/research/cutfill.pdf)\n*   [Topological Simplification of Nested Shapes](https://www.cs.wustl.edu/~taoju/research/nested_self.pdf)\n*   [Gudhi library](https://gudhi.inria.fr/)\n\n**Required Skills:** C++17, Mesh Processing, Topological Data Analysis\n\n**Contact:** [sebastien.loriot@geometryfactory.com](mailto:sebastien.loriot@geometryfactory.com)\n\n**Duration:** 350h\n\n### Improving ARAP in CGAL\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#improving-arap-in-cgal)\n\n**Mentor**: Andreas Fabri\n\n**Project description:**\n\nAs-Rigid-As-Possible (ARAP) surface modeling is one of the most well known approach for deformation of surfaces. It has been implemented in CGAL, within the Surface Mesh Deformation package ([https://doc.cgal.org/latest/Surface\\_mesh\\_deformation/index.html#Chapter\\_SurfaceMeshDeformation](https://doc.cgal.org/latest/Surface_mesh_deformation/index.html#Chapter_SurfaceMeshDeformation)). Since the original paper (Sorkine & Alexa, 2007 - _As-Rigid-As-Possible Surface Modeling_), which is implemented in CGAL, a number of improvements have been proposed. The goal of this project is to investigate these improvements, and enhance the CGAL implementation. Another direction of interest is the extension of the ARAP formulation to the setting of volume deformation of tetrahedral meshes.\n\nResources:\n\n*   [As-Rigid-As-Possible Surface Modeling](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=4991d60869eb4eed9dbe30997b4162c9f397e2ab)\n*   [ARAP Revisited Discretizing the Elastic Energy using Intrinsic Voronoi Cells](https://cybertron.cg.tu-berlin.de/projects/iARAP/media/iARAP.pdf)\n*   [Higher Order Continuity for Smooth As-Rigid-As-Possible Shape Modeling](https://igl.ethz.ch/projects/smootharap/smooth_arap_paper_arxiv.pdf)\n\n**Required Skills:** C++17, linear algebra\n\n**Contact:** [andreas.fabri@geometryfactory.com](mailto:andreas.fabri@geometryfactory.com)\n\n**Duration:** 350h\n\n### Extending 2D Arrangement Drawings\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#extending-2d-arrangement-drawings)\n\n**Mentor**: Efi Fogel\n\n**Project description:** The \"2D Arrangement\" package partially supports limited drawing of a 2D arrangements. The goal of this project is extend the capabilities of 2D arrangement drawing. In particular:\n\n1.  The drawing is limited. An instance of the the `Arrangement_2<Traits,Dcel>` template can be used to represent 2D arrangements on the plane. The 2D Arrangement package supports ten traits classes that can substitute the `Traits` parameter. A traits class determines the family of curves that induce the arrangement, e.g., Bezier curves. Currently, arrangement induced by curves of several families cannot be drawn.\n2.  The drawing is inefficient and should be optimized.\n3.  The drawing of arrangements induced by geodesic arcs on the sphere in 3D is deficient. Currently only the curves are drawn (and the faces are not). The Earth demo exhibit some drawing of such arrangements, but it applies a trick that restricts the drawing to faces that do not cross the equator of the sphere. Addressing this item requires knowledge and experience in 3D graphics.\n\n**Required Skills:** Qt6 and 3D graphics, geometry, code development tools (e.g., git), and C++17 proficiency\n\n**Contact:** [efifogel@gmail.com](mailto:efifogel@gmail.com)\n\n**Duration:** 350h\n\n### Hexahedral mesh generation\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#hexahedral-mesh-generation)\n\n**Mentor**: Guillaume Damiand\n\n**Project description:**\n\nThe goal of this project is to implement the method of the paper \\[1\\] \"A template-based approach for parallel hexahedral two-refinement\", Steven J. Owen, Ryan M. Shih, Corey D. Ernst; in CGAL. This method allows to generate a locally refined hexahedral mesh, starting from a coarse grid, and using different templates for refinement. It will be implemented using a 3D linear cell complex \\[2\\] as underlying data-structure. To implement the different templates, we can use the volumic Query-replace operation \\[3\\]. The project was started last year and a preliminary version of the method already exists. The goal of this project is to finish this development, and to propose an integration in CGAL. To do so, the work to do is: (1) finish the sequential version, adding displacement of new vertices in order to obtain smooth meshes; (2) validate results on many different input meshes; (3) write the doc and the examples; (4) finish the parallel version.\n\n**Resources:**\n\n*   \\[1\\] The paper to be implemented: [\"A template-based approach for parallel hexahedral two-refinement\"](https://www.osti.gov/servlets/purl/1328173)\n*   \\[2\\] CGAL [Linear cell complex package](https://doc.cgal.org/latest/Linear_cell_complex/index.html)\n*   \\[3\\] [Query-replace operations for topologically controlled 3D mesh editing](https://hal.science/hal-03717765) and the [Gitlab repository](https://gitlab.liris.cnrs.fr/gdamiand/3d-query-replace/)\n\n**Required Skills:** C++17, Geometry Processing, Mesh Processing, Computational Geometry\n\n**Contact:** [guillaume.damiand@cnrs.fr](mailto:guillaume.damiand@cnrs.fr)\n\n**Duration:** 175h\n\n### Cut by plane a volumetric mesh\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#cut-by-plane-a-volumetric-mesh)\n\n**Mentor**: Guillaume Damiand and Sebastien Loriot\n\n**Project description:**\n\nThe goal of this project is to implement a method allowing to cut a 3D volumetric mesh (represented by a 3D linear cell complex) by a plane. There are some code available for the two first steps of the method (insert vertices on the cut edges, and insert edges between the new vertices to split faces); it remains the last step which consists in inserting new faces along path of edges. The method must be robust, i.e. deal with any configuration of volumetric mesh. To do so, the work to do is: (1) implement the 3 steps in CGAL; (2) validate results on many different input meshes; (3) write the doc and the examples.\n\n**Required Skills:** C++17, Geometry Processing, Mesh Processing, Computational Geometry\n\n**Contact:** [guillaume.damiand@cnrs.fr](mailto:guillaume.damiand@cnrs.fr) [sloriot.ml@gmail.com](mailto:sloriot.ml@gmail.com)\n\n**Duration:** 175h\n\n### Improvement of Named Parameters\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#improvement-of-named-parameters)\n\n**Mentor**: Sebastien Loriot and Laurent Rineau\n\n**Project description:**\n\nThe goal of this project is to continue the work started in the pull-request [https://github.com/CGAL/cgal/pull/7966](https://github.com/CGAL/cgal/wiki/Project-Ideas#7966). This change proposal implements a mechanism that allows the user to check at compile time that the options passed are used by the function (currently a flow of our mechanism). The proof of concept is there, but now we need to apply it globally in CGAL to all the functions using named parameters. As the function are documented, one way to tackle this project is to write a (python?) script that will collect for all the function the expected named parameters and add the macro calls in the function. There are also other improvements that can be implemented during this project if time allows (automatic extraction of a subset of options, more friendly developer interface, ...)\n\n**Required Skills:** C++17, Scritping Language such as Python, with knowledge in parsing\n\n**Contact:** [sloriot.ml@gmail.com](mailto:sloriot.ml@gmail.com)\n\n**Duration:** 175h\n\n### Adding Support for New File Formats for Meshes\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#adding-support-for-new-file-formats-for-meshes)\n\n**Mentor**: Sebastien Loriot and Mael Rouxel-Labb√©\n\n**Project description:**\n\nThe CGAL library provides several functions to read and write meshes (surface and volume) in the [Stream Support package](https://doc.cgal.org/latest/Stream_support). The list of currently supported file format is available [here](https://doc.cgal.org/latest/Stream_support/IOStreamSupportedFileFormats.html). The goal of this project is to add support to more file formats. We could for example add support for glTF, gmsh format, 3mf v2, ... The duration of the project will depend on the file format proposed for addition.\n\n**Required Skills:** C++17\n\n**Contact:** [sloriot.ml@gmail.com](mailto:sloriot.ml@gmail.com)\n\n**Duration:** 90h, 175h, or 350h\n\nInformation Candidates Should Supply\n------------------------------------\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#information-candidates-should-supply)\n\nThe application process has several steps. Before contacting anybody verify that you are eligible (Check section 7.1 of the official [rules](https://summerofcode.withgoogle.com/rules)). The next step is to contact the mentor of the project you are interested in. You have to convince him that you are the right person to get the job done. The next step is to work out more details and to contact the mentoring organization by providing the following information by email to [gsoc-cgal@inria.fr](mailto:gsoc-cgal@inria.fr):\n\n*   Project:\n    \n    *   Select a project in the list and provide your personal and detailed description. If you wish to work on another idea of your own, we are pretty open as long as this serves the goal of consolidating CGAL as a whole.\n    *   Provide a proposal of a technical solution with your envisioned methodology. The more detailed the better.\n    *   Explain how the solution will be available to the user, in which form. Do not forget the documentation, unitary tests and cross-platform aspects.\n    *   Provide a realistic schedule with objectives (one every two weeks for example) and deadlines. Focus on mid-term objectives as well as on the final evaluation.\n*   Personal data:\n    \n    *   First name, last name, affiliation and geographical location.\n    *   A brief list of the main studies and programming courses attended, with ranking.\n    *   List of the most important software projects contributed and success.\n    *   Which are your best skills in terms of programming and scientific computing?\n    *   In general what is your taste in terms of programming? language, methodology, team work, etc.\n    *   Is there anything that prevents you from working full time on the project during the program period?\n    *   How do you see your involvement after the program ends? Do you see yourself pushing the project further, or do you see yourself contributing to other CGAL projects?\n    *   Are you more interested in the theory/scientific aspect of CGAL, or do you feel more like a hacker?\n    *   What are your long-term wishes in terms of job?\n\nPrevious Project Ideas and Successful Projects\n----------------------------------------------\n\n[](https://github.com/CGAL/cgal/wiki/Project-Ideas#previous-project-ideas-and-successful-projects)\n\n*   [2024](https://github.com/CGAL/cgal/wiki/GSoC_2024)\n*   [2023](https://github.com/CGAL/cgal/wiki/GSoC_2023)\n*   [2022](https://github.com/CGAL/cgal/wiki/GSoC_2022)\n*   [2021](https://github.com/CGAL/cgal/wiki/GSoC_2021)\n*   [2020](https://github.com/CGAL/cgal/wiki/GSoC_2020)\n*   [2019](https://github.com/CGAL/cgal/wiki/GSoC_2019)\n*   [2018](https://github.com/CGAL/cgal/wiki/GSoC_2018)\n*   [2017](https://www.cgal.org/gsoc/2017.html)\n*   [2016](https://www.cgal.org/gsoc/2016.html) (not accepted)\n*   [2015](https://www.cgal.org/gsoc/2015.html) (not accepted)\n*   [2014](https://www.cgal.org/gsoc/2014.html)\n*   [2013](https://www.cgal.org/gsoc/2013.html)\n*   [2012](https://www.cgal.org/gsoc/2012.html)\n*   [2011](https://www.cgal.org/gsoc/2011.html)\n*   [2010](https://www.cgal.org/gsoc/2010.html)\n"}