{"name":"Unicode, Inc.","description":"Bringing internationalization to software!","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/unicode-inc","ideas_url":"https://docs.google.com/document/u/2/d/e/2PACX-1vQbj0-VFkRjYdnivuPPXuHM3IW4LuHxK6E0LVO3O8ZU_-k8CYH_eFMZ_IwFg_r-oBw3FCEOmHCb5jrn/pub","logo":"https://summerofcode.withgoogle.com/media/org/unicode-inc/cev3zg8tjatag4mt.png","technologies":["java","c++","rust","unicode"],"topics":["compilers","linguistics","languages","internationalization"],"projects":[{"project_name":"Integrate Unicode Inflection Into Message Format 2","summary":"Develop a method for the ICU4C MessageFormatter to utilize Unicode Inflection for generating grammatically correct sentences in multiple languages.","difficulty":"Higher"},{"project_name":"Create distribution packages of Unicode Inflection","summary":"Establish a process for producing portable distribution packages for the Unicode Inflection library, facilitating easier access and usage.","difficulty":"Lower"},{"project_name":"Use ICU4X in Unicode Demo Pages","summary":"Migrate functionalities of util.unicode.org to the ICU4X library for improved performance and reduced server costs by running demos client-side.","difficulty":"Medium"},{"project_name":"Using AI to Better Segment Complex Scripts","summary":"Enhance machine learning models to accurately segment languages that lack clear word delimiters, focusing on performance and internationalization.","difficulty":"Higher"},{"project_name":"Leveraging LLMs to validate locale data","summary":"Utilize large language models to automatically assess the accuracy of Unicode locale data, improving data quality and reliability.","difficulty":"Higher"},{"project_name":"Reading Cross-Platform Locale Settings in Rust","summary":"Implement a Rust crate that extracts locale information from various operating systems, aiding internationalization support.","difficulty":"Medium"},{"project_name":"Using AI for Unicode Spoof Detection","summary":"Create a tool leveraging AI to identify and classify visually similar Unicode characters to enhance security and prevent misuse.","difficulty":"Higher"},{"project_name":"Expand Unicode Conformance Test Suite with More Data and Implementations","summary":"Improve the Unicode Conformance project by adding new features and test cases for additional Unicode components, ensuring broader testing capabilities.","difficulty":"Low to Medium"},{"project_name":"Add support for a new language in Unicode Inflection","summary":"Extend the Unicode Inflection project by incorporating additional languages to enhance grammatical inflection capabilities.","difficulty":"Medium"}],"jina_response":"Title: Unicode GSoC 2025 Project Ideas\n\nURL Source: https://docs.google.com/document/u/2/d/e/2PACX-1vQbj0-VFkRjYdnivuPPXuHM3IW4LuHxK6E0LVO3O8ZU_-k8CYH_eFMZ_IwFg_r-oBw3FCEOmHCb5jrn/pub\n\nMarkdown Content:\nUnicode GSoC 2025 Project Ideas\n\n![Image 1](https://lh7-rt.googleusercontent.com/docsz/AD_4nXdZM8Ao1iXDPhNlk9lHEV2xupU54PPV0HxeVoExJRgK_IUkaSzmcd4jlnADEyWxBMQTkHR_-XEtfSZjaCl7f0vibth-TBE5lxrR44hcTA9WbvR48iO374YSZ1Y52dtJh-s?key=jziKB3kXmzWQx0DLE_9N5X4e)\n\nSelf Link: [https://docs.google.com/document/d/e/2PACX-1vQbj0-VFkRjYdnivuPPXuHM3IW4LuHxK6E0LVO3O8ZU\\_-k8CYH\\_eFMZ\\_IwFg\\_r-oBw3FCEOmHCb5jrn/pub](https://www.google.com/url?q=https://docs.google.com/document/d/e/2PACX-1vQbj0-VFkRjYdnivuPPXuHM3IW4LuHxK6E0LVO3O8ZU_-k8CYH_eFMZ_IwFg_r-oBw3FCEOmHCb5jrn/pub&sa=D&source=editors&ust=1740815223233761&usg=AOvVaw1dDXZwQ9b6DHeLsKiZ9Anl)\n\nIntegrate Unicode Inflection Into Message Format 2\n--------------------------------------------------\n\nMain issue: Create a way for the [MessageFormatter in ICU4C](https://www.google.com/url?q=https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/classicu_1_1message2_1_1MessageFormatter.html&sa=D&source=editors&ust=1740815223234389&usg=AOvVaw2DUQlbSWKDtUg4ubsq_ALo)¬†to leverage the [Unicode Inflection](https://www.google.com/url?q=https://github.com/unicode-org/inflection&sa=D&source=editors&ust=1740815223234510&usg=AOvVaw2r-HkGbO984OsIKSgUaDAc)¬†project for creating grammatically correct sentences.\n\nDifficulty/Size: Higher\n\nPossible Mentors: George Rhoten\n\nThe goal is to make MessageFormatter use as much of the Unicode Inflection capability as possible. ¬†Unicode Inflection supports all of the use cases in the expected outcomes, but MessageFormatter has no way to use such functionality at this time.\n\nBelow is background material for the Unicode Inflection concepts with 3 different syntaxes that are not the MessageFormat 2 syntax. Unicode Inflection supports all of the use cases in the expected outcomes.\n\n*   [UTW 2023 Automatic Grammar Agreement in Message Formatting](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DC2e7hYIkqoM&sa=D&source=editors&ust=1740815223234910&usg=AOvVaw2cblrefXFDBbNN4Hjew_W1)\n*   [S12T1 Authoring Grammatically Correct Conversational Templates for Siri](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DemlIWUTaJFM&sa=D&source=editors&ust=1740815223235079&usg=AOvVaw3uho2sPpF9dvS5Q1_1XKxy)\n*   [Let's Come To An Agreement About Our Words :: IMUG 2017.02.16](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DKclVxxHX26k&sa=D&source=editors&ust=1740815223235205&usg=AOvVaw3TQBEUkP_QbW7tPcJbBiTT)\n\nHere is some additional background information between these projects.\n\n*   [UTW 2024 Solving Inflection](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DZ9M8SwIbvMM&sa=D&source=editors&ust=1740815223235403&usg=AOvVaw3SrJqAV59btCV1mo21OIMQ)\n*   [UTW 2024 MessageFormat 2 Technical Preview: Where Are We Now?](https://www.google.com/url?q=https://www.youtube.com/watch?v%3D4jucYXE42_s&sa=D&source=editors&ust=1740815223235520&usg=AOvVaw1xYMexli8woZ3mlcxjJCSz)\n\nExpected Outcomes\n-----------------\n\n*   A minimum viable integration can generate these messages depending on the grammatical properties of the object being inserted into the sentence.\n\n1.  English\n\n*   The {object} is on\n*   The {object} are on\n\n2.  French\n\n*   La {object} est allum√©e\n*   Les {object} sont allum√©es\n*   L'{object} est allum√©\n*   Le {object} est allum√©\n*   Les {object} sont allum√©s\n\n*   Bonus integrations include the following topics\n\n1.  Support quantities. E.g. 1 foot/2 feet\n2.  Support lists. E.g. An object, and a table\n3.  Support pronouns, especially in Spanish and Arabic. E.g. Here is {pronoun} location.\n4.  Support spoken text. E.g. one foot/two feet.\n5.  Support inflecting words. E.g. mouse + plural ‚Üí mice\n6.  Support SemanticConcept to allow custom inflections.\n7.  Support inflection alternative when the word being inserted into the sentence is not in the lexical dictionary. ¬†E.g. üòÄ isn‚Äôt in the lexical dictionary. So you may want to use ‚ÄúL(a|e) üòÄest allum√©(e)‚Äù in French.\n\nSkills\n------\n\n*   Required: C/C++\n*   Required: Ability to use cmake for building the code\n*   Preferred: Love of languages.\n\nCreate distribution packages of Unicode Inflection\n--------------------------------------------------\n\nMain issue: A process is needed to create portable distribution packages of [Unicode Inflection](https://www.google.com/url?q=https://github.com/unicode-org/inflection&sa=D&source=editors&ust=1740815223236852&usg=AOvVaw3glF4gM9m1bfXdNebeAsBI)\n\nDifficulty/Size: Lower\n\nPossible Mentors: George Rhoten\n\nRight now, the Unicode Inflection project is only available as source code. Binary distributions are needed of the library and its associated data for other people to reuse. ¬†It‚Äôs sort of possible to create such packages for macOS and Linux right now. The code has not been tested on Windows, and that is where most of the effort is likely to be contained. Some effort is likely needed to modify the cmake files.\n\nExpected Outcomes\n-----------------\n\n*   Create an automated way (preferably through cmake) to generate packages for a release.\n*   Create a tarball or zip file of the source code.\n*   Create packages of the shared library and data for Windows, Linux and macOS.\n\nSkills\n------\n\n*   Required: Experience with cmake\n*   Required: Experience with compression tools, like zip, tar or gzip\n*   Required: Experience with Windows, Linux, macOS\n*   Preferred: Experience with using docker images of Linux\n*   Preferred: Experience with C or C++\n*   Preferred: Experience with a scripting language like bash or Python\n\nUse ICU4X in Unicode Demo Pages\n-------------------------------\n\nMain issue: [https://github.com/unicode-org/unicodetools/issues/1004](https://www.google.com/url?q=https://github.com/unicode-org/unicodetools/issues/1004&sa=D&source=editors&ust=1740815223237869&usg=AOvVaw3R6M-23Bf5K9j5niODNjXB)\n\nDifficulty/Size: Medium\n\nPossible Mentors: Shane, Josh\n\n[util.unicode.org](https://www.google.com/url?q=http://util.unicode.org&sa=D&source=editors&ust=1740815223238106&usg=AOvVaw3zXpWL1xJhj4tqnRaeM7iw)¬†is a web site containing a variety of tools for testing and interacting with the Unicode Standard and the Unicode Character Database.\n\nIn order to reduce latency and server costs, we would like to migrate parts of util.unicode.org to use [ICU4X](https://www.google.com/url?q=https://github.com/unicode-org/icu4x&sa=D&source=editors&ust=1740815223238282&usg=AOvVaw2X5Z2T7gyCJqWXko51SQ9m), a new Rust-based library that runs in WebAssembly. The migrated demos would run client-side, reducing server costs.\n\nWith this project, we are looking for a student to build and help deploy a new Web interface using ICU4X that implements some of the high-impact features of util.unicode.org.\n\nExpected Outcomes\n-----------------\n\n*   Create a functional, attractive web application for one or more core features of util.unicode.org\n*   Add any potential missing features fo ICU4X\n*   Build a pipeline for building and deploying the components\n*   Stretch (with more time): migrate additional features on util.unicode.org\n\nSkills\n------\n\n*   Required: Experience building and deploying modern web applications\n*   Preferred: Experience interoperating with WebAssembly\n*   Preferred: Background knowledge of the Unicode Standard and Unicode Character Database\n\nUsing AI to Better Segment Complex Scripts\n------------------------------------------\n\nProject link: [https://github.com/unicode-org/lstm\\_word\\_segmentation](https://www.google.com/url?q=https://github.com/unicode-org/lstm_word_segmentation&sa=D&source=editors&ust=1740815223239282&usg=AOvVaw2fb_N-Frh6_U-XXmw2s_R9)\n\nDifficulty/Size: Higher\n\nPossible Mentors: Younies, Shane, Sahand\n\nA number of languages in East and South-East Asia do not use spaces or other characters for separating words, creating a challenge for computers to accurately lay out text written in those languages on a screen. The state-of-the-art models have known limitations, and they put digitally disadvantaged languages (DDLs) at a disadvantage.\n\nWith this project, we are looking for a student who can tune a machine learning model to be faster and more i18n-friendly than the state of the art. You will be paired with a mentor who is familiar with the Unicode segmentation pipeline and can guide you through the process to tune and train the models.\n\nExpected Outcomes\n-----------------\n\n*   Build a reproducible test suite for evaluating complex script segmentation models on metrics including accuracy, size, and speed. The suite should test at least three languages: a CJK language (like Japanese), a SEA language (like Thai), and a DDL language (like Cantonese).\n*   Evaluate all current Unicode models (Dictionary, LSTM, and AdaBoost) against these metrics. This may involve re-training and tuning existing models so that they work in all of the languages under test.\n*   Build and train at least one new model that outperforms a current Unicode model on at least one axis (accuracy, size, and speed) in at least one language.\n*   Stretch: Build and train a model that has improved accuracy on both a major language and a DDL in the same script. This may require first acquiring training data in the DDL.\n*   Stretch: Implement one of the new models in ICU4X (Rust).\n\nSkills\n------\n\n*   Required: Experience building, training, and evaluating AI models.\n*   Preferred: Experience with Keras or TensorFlow in Python.\n*   Preferred: Experience with natural language processing (NLP).\n*   Preferred: Love of languages.\n*   Preferred: Familiarly with a disadvantaged language in a complex script, such as Cantonese, Shan, Mon, or Karen.\n\nLeveraging LLMs to validate locale data\n---------------------------------------\n\nDifficulty/Size: Higher\n\nPossible Mentors: Shane, Younies\n\nUnicode publishes over a million individual pieces of locale data to run algorithms including date/time formatting, measurement unit conversion, text segmentation, collation, language display names, and more. With the growth of LLMs, there is opportunity to perform automated quality control on these data given the knowledge of the LLMs.\n\nWith this project, we are looking for a student to leverage an LLM to ingest Unicode locale data and evaluate how well it matches the expectations of the LLM in order to build a classifier that could flag suspicious locale data entries to translators.\n\nExpected Outcomes\n-----------------\n\n*   Figure out how to query an LLM to generate results similar to those in CLDR.\n*   Compare the results of the LLM with those in CLDR/ICU.\n*   Denoise the results and file issues for any serious problems found.\n*   Stretch: Automate the system to run with the push of a button in the cloud.\n\nSkills\n------\n\n*   Required: Experience interacting with large language models (LLMs).\n*   Required: Ability to write code to call ICU functions in Java, C++, or Rust.\n*   Preferred: Love of languages.\n*   Preferred: Experience with workflow automation.\n\nReading Cross-Platform Locale Settings in Rust\n----------------------------------------------\n\nMain issue: [https://github.com/unicode-org/icu4x/issues/3990](https://www.google.com/url?q=https://github.com/unicode-org/icu4x/issues/3990&sa=D&source=editors&ust=1740815223241678&usg=AOvVaw0I0ht5hDiy8XkpbvqzW96M)\n\nDifficulty/Size: Medium\n\nPossible Mentors: Robert, Henri\n\nICU4X, described above, aims to bring i18n support to new platforms and ecosystems. One of the foundational inputs for i18n is the user's locale. We need a common mechanism for loading the locale from a variety of systems.\n\nWith this project, we are looking for a student to implement a Rust crate that loads this information from all operations systems to which we deploy.\n\nExpected Outcomes\n-----------------\n\n*   Write code that reads the locale information from the student's current operating system.\n*   Add bindings into the other operating systems we would like to support in this mode: macOS, Windows, Linux, Android, and iOS. This may involve spinning up VMs to test the code locally.\n*   Add testing in GitHub Actions for all stated operating systems.\n*   Stretch: Add support for additional operating systems.\n\nSkills\n------\n\n*   Required: Comfort working with low-level system calls in C and Rust\n*   Preferred: Ability to access all of the above listed operating systems.\n\nUsing AI for Unicode Spoof Detection\n------------------------------------\n\nDifficulty/Size: Higher\n\nPossible Mentors: Shane, Frank\n\nNote: Only the most exceptional proposals on this topic are likely to be considered.\n\nUnicode contains over 200 writing systems (scripts). Many of these scripts, such as Latin (in western Europe) and Cyrillic (in eastern Europe), contain characters that are look-alike. This can cause security problems when malicious actors use characters in one script to mimic the appearance of characters in another.\n\nWith this project, we are looking for a student to build a tool to automate the process for identifying confusable characters. The student should use AI/ML techniques to find code points in various fonts that are look-alike and ultimately improve Unicode security mechanisms.\n\nExpected Outcomes\n-----------------\n\n*   Build an AI model that evaluates the similarity between two characters. Use existing fonts as training data.\n*   Run the model over Unicode code points to generate confusability data.\n*   Submit the new confusability data to the UCD.\n*   Stretch: Automate the system to run with the push of a button in the cloud.\n\nSkills\n------\n\n*   Required: Experience building, training, and evaluating AI models.\n*   Preferred: Experience with Keras or TensorFlow in Python.\n*   Preferred: Experience with image modeling.\n*   Preferred: Experience with workflow automation.\n\nExpand Unicode Conformance Test Suite with More Data and Implementations\n------------------------------------------------------------------------\n\nProject link: [https://github.com/unicode-org/conformance](https://www.google.com/url?q=https://github.com/unicode-org/conformance&sa=D&source=editors&ust=1740815223244006&usg=AOvVaw3lBEDqhvMt2JWKmAx0sZub)\n\nDifficulty/Size: Low to Medium\n\nPossible Mentors: Elango, Craig\n\nNote: Only the most exceptional proposals on this topic are likely to be considered.\n\nThe Unicode Conformance project provides a universal framework for testing the conformance of i18n libraries against Unicode specifications.\n\nWe are looking for a student to expand the project to support additional features, such as Unicode Sets and List Formatting. This will involve learning about the specification of these features, crafting test cases, and implementing the test cases in all of our supported libraries including C++, Java, JavaScript, and Rust.\n\nExpected Outcomes\n-----------------\n\n*   Add high-quality, high-coverage data for at least 2 new components into the CLDR test data directory.\n*   Implement testing using this data in all i18n implementations in the Conformance Suite, including C++, Java, JavaScript, Dart, and Rust.\n*   Stretch: Add a third new component.\n\nSkills\n------\n\n*   Required: Attention to detail\n*   Required: Familiarity with basic internationalization concepts\n*   Required: Experience writing code in multiple languages, including common concepts such as standard input/output streams\n*   Preferred: Experience with all five stated languages\n\nAdd support for a new language in Unicode Inflection\n----------------------------------------------------\n\nMain issue: More languages should be supported in [Unicode Inflection](https://www.google.com/url?q=https://github.com/unicode-org/inflection&sa=D&source=editors&ust=1740815223245395&usg=AOvVaw2whwMBBzSRPgNwejZqw2iU)\n\nDifficulty/Size: Medium\n\nPossible Mentors: George Rhoten\n\nNote: Only the most exceptional proposals on this topic are likely to be considered.\n\nRight now, the Unicode Inflection project [supports](https://www.google.com/url?q=https://github.com/unicode-org/inflection/blob/main/inflection/resources/org/unicode/inflection/locale/supported-locales.properties&sa=D&source=editors&ust=1740815223245909&usg=AOvVaw3CsSxBOB0G9ocyuChhqSnn)¬†Arabic, Danish, German, English, Spanish, French, Hebrew, Hindi, Indonesian, Italian, Japanese, Korean, Malay, Norwegian, Dutch, Portuguese, Russian, Swedish, Thai, Turkish and Chinese. Supporting more languages is desired.\n\nHere is background material for the Unicode Inflection concepts.\n\n*   [UTW 2023 Automatic Grammar Agreement in Message Formatting](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DC2e7hYIkqoM&sa=D&source=editors&ust=1740815223246220&usg=AOvVaw3KVhAzy8DTV1Hpt8nr_aNd)\n*   [S12T1 Authoring Grammatically Correct Conversational Templates for Siri](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DemlIWUTaJFM&sa=D&source=editors&ust=1740815223246394&usg=AOvVaw3vz6WZtdqyiPMWcXCPR6MN)\n*   [Let's Come To An Agreement About Our Words :: IMUG 2017.02.16](https://www.google.com/url?q=https://www.youtube.com/watch?v%3DKclVxxHX26k&sa=D&source=editors&ust=1740815223246522&usg=AOvVaw1DYftJTni6R2ckLJaOlzKY)\n\nExpected Outcomes\n-----------------\n\n*   Unicode Inflection code will be able to inflect nouns and personal pronouns for the language being supported. Examples include:\n\n*   object + plural ‚Üí objects\n*   city + plural,genitive ‚Üí cities‚Äô\n\n*   Optionally inflect articles, prepositions, adjectives and verbs as necessary for a given language.\n*   All tests of supported functionality should pass.\n*   Support a language that isn‚Äôt already supported that has sufficient Wikidata, examples include:\n\n*   Estonian, Malayalam, Greek, Czech, Norwegian (Nynorsk), Slovak, Ukrainian, Bangla, Punjabi, Polish, Urdu, or Finnish\n*   Perhaps others, but the required data would need to be added to Wikidata.\n\n*   The lexical data will be derived from [Wikidata](https://www.google.com/url?q=https://www.wikidata.org/&sa=D&source=editors&ust=1740815223247085&usg=AOvVaw2if_ZX8x7-jYbNBlqseWKH). ¬†There is an existing tool to generate appropriate lexical dictionary for each language, and there are examples of other supported languages.\n\nSkills\n------\n\n*   Required: Working proficiency in English\n*   Required: Understanding of a language that is not already supported in Unicode Inflection.\n*   Required: Experience with writing software on Windows, Linux, or macOS\n*   Required: Experience with C or C++\n*   Preferred: Experience with cmake\n*   Preferred: Ability to edit XML\n*   Preferred: Ability to edit data in Wikidata.\n"}