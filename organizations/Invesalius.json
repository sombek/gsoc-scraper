{"name":"Invesalius","description":"3D Medical visualization and neuronavigation tool","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/invesalius","ideas_url":"https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md","logo":"https://summerofcode.withgoogle.com/media/org/invesalius/ktlk8dmldhfmlyb2-360.png","technologies":["python","cython","numpy","dicom","Vtk"],"topics":["ehealth","medical imaging","3D Reconstruction","3d printing","Neuronavigation"],"projects":[{"project_name":"Add unit tests to InVesalius","summary":"Implementing unit tests using tools like unittest or pytest to ensure new features or bug fixes do not break existing code.","difficulty":"Intermediate"},{"project_name":"Add type information to functions, methods, and classes in InVesalius","summary":"Incorporating type annotations in the InVesalius codebase to improve code quality and maintenance using tools like Mypy.","difficulty":"Intermediate"},{"project_name":"Add logging and error catching tool","summary":"Creating a logging system in InVesalius to track events and errors, which can be saved and analyzed later.","difficulty":"Hard"},{"project_name":"Implement UX principles to improve InVesalius usability","summary":"Refactoring the neuronavigation feature’s UI following UX principles to enhance user experience and workflow.","difficulty":"Hard"},{"project_name":"Performance optimization of real-time neuronavigation","summary":"Improving the performance of the neuronavigation feature through optimization techniques to reduce memory and CPU usage.","difficulty":"Hard"},{"project_name":"3D edition of masks","summary":"Developing a tool to allow users to edit masks slice by slice using the 3D visualization capabilities of InVesalius.","difficulty":"Hard"},{"project_name":"Harmonize and revamp the cross-platform user interface","summary":"Standardizing and enhancing the cross-platform UI of InVesalius for better consistency in appearance and functionality.","difficulty":"Intermediate"},{"project_name":"Surface texture","summary":"Creating a tool in InVesalius to apply texture to surfaces based on tissue images.","difficulty":"Hard"},{"project_name":"Extract surface using Dual contouring","summary":"Implementing a new method for surface extraction from volumetric images, using techniques like Dual Contouring.","difficulty":"Hard"},{"project_name":"Improvements in user response (loading and saving files)","summary":"Adding user feedback mechanisms during file operations to enhance user experience in InVesalius.","difficulty":"Easy"},{"project_name":"Use Github Actions to create installers for macOS","summary":"Setting up Github Actions to automate the creation of installers for macOS, enhancing distribution processes.","difficulty":"Intermediate"},{"project_name":"Convert from Pytorch to ONNX or Tinygrad","summary":"Migrating machine learning tools from Pytorch to ONNX or Tinygrad to reduce installation size and complexity for InVesalius.","difficulty":"Intermediate"},{"project_name":"Convert from Pip and Conda to UV","summary":"Switching dependency management from Pip and Conda to UV to modernize package management in InVesalius.","difficulty":"Easy"},{"project_name":"Segment brain in its subparts","summary":"Developing a segmentation tool using machine learning to identify brain subparts in MRI images for targeted TMS.","difficulty":"Hard"},{"project_name":"Simultaneous visualization and control of Two Robots for Dual Transcranial Magnetic Stimulation","summary":"Implementing features to control two TMS robots simultaneously to improve accuracy and efficiency in procedures.","difficulty":"Hard"},{"project_name":"Implement neuronavigation capability for transcranial focused ultrasound (tFUS)","summary":"Extending InVesalius's neuronavigation capabilities to include tFUS, enhancing its utility in non-invasive brain function studies.","difficulty":"Hard"}],"jina_response":"Title: gsoc/gsoc_2025_ideas.md at main · invesalius/gsoc\n\nURL Source: https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md\n\nMarkdown Content:\nGSoC 2025 Ideas for InVesalius\n------------------------------\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#gsoc-2025-ideas-for-invesalius)\n\nSee also the instructions for applying [here](https://github.com/invesalius/gsoc/blob/main/gsoc_application.md).\n\nAll the current ideas for GSoC 2025 are listed bellow:\n\n### Add unit tests to InVesalius to ease the process of adding new features\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#add-unit-tests-to-invesalius-to-ease-the-process-of-adding-new-features)\n\nUse tools like unittest or pytest to add tests to InVesalius code. That way, when adding new features or bug fixes, you can verify that no previous code has been affected. Also run this code when committing and sending pull requests on Github.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies.\n\n**Deliverables**:\n\n*   Unit tests in InVesalius code\n*   Github-CI action for running tests when committing or posting a pull-request\n\n**Programming Languages**: Python and YAML\n\n**Duration**: 175h\n\n**Difficulty level:** Intermediate\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com)\n\n**References**: [invesalius/invesalius3#496](https://github.com/invesalius/invesalius3/issues/496) and [https://realpython.com/python-testing/](https://realpython.com/python-testing/)\n\n* * *\n\n### Add type information to functions, methods and classes in InVesalius\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#add-type-information-to-functions-methods-and-classes-in-invesalius)\n\nSince python 3.5 it is possible to add type information to the parameters of functions, methods and classes. With this information it is possible to use tools like Mypy to catch calls made with the wrong type. This way you can avoid errors and make your code easier to maintain and grow\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies.\n\n**Deliverables**:\n\n*   Type information added to InVesalius functions, methods and classes.\n*   Github-CI action for catching type errors using tools like Mypy\n\n**Programming Languages**: Python and YAML\n\n**Duration**: 175h\n\n**Difficulty level:** Intermediate\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com)\n\n**References**: [invesalius/invesalius3#497](https://github.com/invesalius/invesalius3/issues/497), [https://docs.python.org/3/library/typing.html](https://docs.python.org/3/library/typing.html) and [https://mypy-lang.org/](https://mypy-lang.org/)\n\n* * *\n\n### Add logging and error catching tool\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#add-logging-and-error-catching-tool)\n\nTool that allows the user to activate the capture of logs and errors. It should be possible to save the sequence of events in a text file. It will be necessary to add logging capture to all functions and functionalities and their respective levels (debug, info, warn, error or critical).\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies.\n\n**Deliverables**:\n\n*   Graphic interface integrated to InVesalius that allows the user to activate the tool and save the logs.\n*   Log support to all InVesalius functions and functionalities.\n\n**Programming Languages**: Python\n\n**Duration**: 350h\n\n**Difficulty level:** Hard\n\n**Mentor:** Paulo Henrique Junqueira Amorim - [paulojamorim@gmail.com](mailto:paulojamorim@gmail.com)\n\n**References**: [invesalius/invesalius3#498](https://github.com/invesalius/invesalius3/issues/498), [https://docs.python.org/3/library/logging.html](https://docs.python.org/3/library/logging.html) and [https://realpython.com/python-logging/](https://realpython.com/python-logging/)\n\n* * *\n\n### Implement UX principles to improve InVesalius usability\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#implement-ux-principles-to-improve-invesalius-usability)\n\nThe neuronavigation feature of InVesalius currently does not follow user experience (UX) principles in the user interface and workflow design. The software usability can be significantly improved by applying the basic UX design principles.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies.\n\n**Deliverables**:\n\n*   Description and documentation of the neuronavigation workflow\n*   Refactored neuronavigation user controls and settings\n\n**Programming Languages**: Python\n\n**Duration**: 350h\n\n**Difficulty level:** Hard\n\n**Mentor:** Victor Hugo Souza - [vhosouza@gmail.com](mailto:vhosouza@gmail.com)\n\n**References**: [invesalius/invesalius3#506](https://github.com/invesalius/invesalius3/issues/506)\n\n* * *\n\n### Performance optimization of real-time neuronavigation\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#performance-optimization-of-real-time-neuronavigation)\n\nThe real-time neuronavigation feature of InVesalius currently works based on multi-threading using Queues, Events, and Jobs (look at [#242](https://github.com/invesalius/invesalius3/pull/242)). Optimization (utilizing the least memory, minimizing its CPU time, and offering high speed) is needed to improve neuronavigation performance.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background of computer graphics.\n\n**Deliverables**:\n\n*   Characterize step-by-step code execution time for neuronavigation\n*   Improve threads’ sleep times\n*   Investigate: WX GUI becomes slower when navigation is on\n*   Optimize 3D rendering/updating scene\n\n**Programming Languages**: Python\n\n**Duration**: 350h\n\n**Difficulty level:** Hard\n\n**Mentor:** Victor Hugo Souza - [vhosouza@gmail.com](mailto:vhosouza@gmail.com)\n\n**References**: [invesalius/invesalius3#529](https://github.com/invesalius/invesalius3/issues/529) and [invesalius/invesalius3#242](https://github.com/invesalius/invesalius3/pull/242)\n\n* * *\n\n### 3D edition of masks\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#3d-edition-of-masks)\n\nUser can edit a mask in InVesalius slice by slice. That is a very repetitive and error prone job. Since InVesalius has 3D visualizations, it's possible to draw over the rendering area and remove the voxels projected in the painted areas.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background of computer graphics.\n\n**Deliverables**:\n\n*   Tool to edit masks using projections.\n\n**Programming Languages**: Python\n\n**Duration**: 350h\n\n**Difficulty level:** Hard\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com)\n\n**References**: [invesalius/invesalius3#91](https://github.com/invesalius/invesalius3/issues/91) and [https://en.wikipedia.org/wiki/3D\\_projection](https://en.wikipedia.org/wiki/3D_projection)\n\n* * *\n\n### Harmonize and revamp the cross-platform user interface over MacOS, Linux, and Windows\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#harmonize-and-revamp-the-cross-platform-user-interface-over-macos-linux-and-windows)\n\nCurrently, the InVesalius interface is not properly designed for different modes (Light and Dark) mode, especially on MacOS, for example.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background of computer graphics.\n\n**Deliverables:**\n\n*   Unify the color scheme to different modes (light and dark)\n*   Apply standard and default colors to UI components\n*   Adjust component sizing that are disrupted across platforms\n*   Introduce modern icons\n\n**Programming Languages**: Python\n\n**Duration**: 175h\n\n**Difficulty level:** Intermediate\n\n**Mentor:** Petrus Kirsten - [petrus.kirsten@gmail.com](mailto:petrus.kirsten@gmail.com) / Victor Malheiro - [victorhugomalheiro@gmail.com](mailto:victorhugomalheiro@gmail.com)\n\n* * *\n\n### Surface texture\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#surface-texture)\n\nAdd texture to a surface based on the image tissue.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background of computer graphics.\n\n**Deliverables**:\n\n*   Tool to set a texture to a surface.\n\n**Programming Languages**: Python\n\n**Duration**: 350h\n\n**Difficulty level:** Hard\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com)\n\n**References**: [https://en.wikipedia.org/wiki/Texture\\_mapping](https://en.wikipedia.org/wiki/Texture_mapping)\n\n* * *\n\n### Extract surface using Dual contouring\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#extract-surface-using-dual-contouring)\n\nInVesalius uses Marching Cubes to extract surface from volumetric images. It's interesting to have other methods like Marching Tetrahedra and Dual Contouring.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background of computer graphics.\n\n**Deliverables**:\n\n*   Tool to generate surfaces using other methods than Marching Cubes.\n\n**Programming Languages**: Python and Cython\n\n**Duration**: 350h\n\n**Difficulty level:** Hard\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com)\n\n**References**: [https://0fps.net/2012/07/12/smooth-voxel-terrain-part-2/](https://0fps.net/2012/07/12/smooth-voxel-terrain-part-2/) [https://en.wikipedia.org/wiki/Marching\\_tetrahedra](https://en.wikipedia.org/wiki/Marching_tetrahedra) [https://en.wikipedia.org/wiki/Isosurface](https://en.wikipedia.org/wiki/Isosurface)\n\n* * *\n\n### Improvements in user response (loading and saving files)\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#improvements-in-user-response-loading-and-saving-files)\n\nWhen saving or loading files (except DICOM), InVesalius does not provide any feedback to the user. The goal of this task is to implement a window that displays the progress when loading or saving the different types of files that InVesalius handles. This task also includes replacing the progress bar of the volume rendering functionality.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background in GUI.\n\n**Deliverables**:\n\n*   Windows with progress bar for the functionalities specified in the referenced issues (references).\n\n**Programming Languages**: Python\n\n**Duration**: 90h\n\n**Difficulty level:** Easy\n\n**Mentor:** Paulo Henrique Junqueira Amorim - [paulojamorim@gmail.com](mailto:paulojamorim@gmail.com)\n\n* * *\n\n### Use Github Actions to create installers for macOS\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#use-github-actions-to-create-installers-for-macos)\n\n[Github Actions](https://docs.github.com/en/actions) is used for various softwares to run tests when a commit or pull request is submitted. Also, it can be used to compile software and create binaries ready to be used by the users. The idea in this task is to use Github Actions to create nightly and release InVesalius installers for macOS.\n\n**Requirements**: Computer with Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies.\n\n**Deliverables**:\n\n*   Github action to create nightly and release installers for InVesalius for macOS.\n\n**Programming Languages**: Python\n\n**Duration**: 175h\n\n**Difficulty level:** Intermediate\n\n**Mentor:** Paulo Henrique Junqueira Amorim - [paulojamorim@gmail.com](mailto:paulojamorim@gmail.com) and Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com)\n\n**References**: [https://docs.github.com/en/actions](https://docs.github.com/en/actions) [https://pyinstaller.org/en/stable/](https://pyinstaller.org/en/stable/)\n\n* * *\n\n### Convert from Pytorch to ONNX or Tinygrad\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#convert-from-pytorch-to-onnx-or-tinygrad)\n\nInVesalius uses Pytorch framework to create machine learning based segmentation. The problem is Pytorch is a very large library which makes InVesalius installer and packages very large too. Also, Pytorch has some features not used by InVesalius. ONNX is a format to export machine learning models and a library too. Tinygrad is simple library alternative to Pytorch. Both ONNX and Tinygrad are smaller and enough to InVesalius use.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background of Machine Learning and AI.\n\n**Deliverables**:\n\n*   Conversion of tool using Pytorch to ONNX or Tinygrad.\n\n**Programming Languages**: Python\n\n**Duration**: 175h\n\n**Difficulty level:** Intermediate\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com) and Paulo Henrique Junqueira Amorim - [paulojamorim@gmail.com](mailto:paulojamorim@gmail.com)\n\n**References**: [https://github.com/tinygrad/tinygrad](https://github.com/tinygrad/tinygrad) and [https://onnx.ai/](https://onnx.ai/)\n\n* * *\n\n### Convert from Pip and Conda to UV\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#convert-from-pip-and-conda-to-uv)\n\nInVesalius uses Pip with requirements.txt. There is also a Conda environment. UV is a fast modern alternative that uses pyproject.toml and other modern Python standards and also can manage Python versions.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies.\n\n**Deliverables**:\n\n*   Conversion to UV and using documentation\n*   Conversion of Cython compilation to use pyproject.toml\n\n**Programming Languages**: Python\n\n**Duration**: 90h\n\n**Difficulty level:** Easy\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com) and Paulo Henrique Junqueira Amorim - [paulojamorim@gmail.com](mailto:paulojamorim@gmail.com)\n\n**References**: [https://github.com/astral-sh/uv](https://github.com/astral-sh/uv)\n\n* * *\n\n### Segment brain in its subparts\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#segment-brain-in-its-subparts)\n\nUse Machine Learning (like [https://deep-mi.org/research/fastsurfer/](https://deep-mi.org/research/fastsurfer/)) or an atlas (like [https://yalebrainatlas.github.io/YaleBrainAtlas/](https://yalebrainatlas.github.io/YaleBrainAtlas/)) or both to segment brain subparts in MRI images. Segmentation of brain subparts in MRIs is crucial for precise targeting in Transcranial Magnetic Stimulation (TMS). It enables accurate identification of specific brain regions, ensuring stimulation is applied to the correct areas for optimal effectiveness. Proper placement of the TMS coil is essential, and with segmented MRI data, the coil’s position can be precisely aligned with the target brain regions.\n\n**Requirements**: Computer with Windows, Linux or Mac OS installed. A source code editor, Python language and InVesalius libraries dependencies. Good background of Machine Learning and AI.\n\n**Deliverables**:\n\n*   Tool to segment brain in its subparts.\n*   Model weights (if used AI).\n\n**Programming Languages**: Python\n\n**Duration**: 350h\n\n**Difficulty level:** hard\n\n**Mentor:** Thiago Franco de Moraes - [totonixsame@gmail.com](mailto:totonixsame@gmail.com) and Paulo Henrique Junqueira Amorim - [paulojamorim@gmail.com](mailto:paulojamorim@gmail.com) and Renan Matsuda – [renan\\_hiroshi@hotmail.com](mailto:renan_hiroshi@hotmail.com)\n\n**References**: [https://yalebrainatlas.github.io/YaleBrainAtlas/](https://yalebrainatlas.github.io/YaleBrainAtlas/) and [https://deep-mi.org/research/fastsurfer/](https://deep-mi.org/research/fastsurfer/)\n\n* * *\n\n### Simultaneous visualization and control of Two Robots for Dual Transcranial Magnetic Stimulation\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#simultaneous-visualization-and-control-of-two-robots-for-dual-transcranial-magnetic-stimulation)\n\nDevelopment and integration of the functionality for simultaneous control of two robots, aimed at applying dual-site Transcranial Magnetic Stimulation (TMS) in InVesalius (currently, support is provided for only one TMS coil attached to one robot). This feature is based on the existing implementation for the use of two or more coils, adapting it for multiple robots. The inclusion of this feature not only improves the speed, accuracy, and safety of the stimulatory process, but also enables the scientific exploration of interactive brain networks, by allowing concurrent, targeted TMS pulses to multiple brain areas.\n\n**Requirements:** Computer with Windows, Linux, or Mac OS installed. Python programming language and InVesalius library dependencies. A source code editor.\n\n**Deliverables:**\n\n*   Visualization interface showing the robots' movements integrated into the InVesalius neuronavigation system.\n*   Coordinate communication between the websocket data receiver, InVesalius brain targets, and GUI.\n*   Software module for control and synchronization of the two robots.\n\n**Programming Languages:** Python\n\n**Duration:** 350h\n\n**Difficulty Level:** Hard\n\n**Mentor:** Renan Matsuda - [renan\\_hiroshi@hotmail.com](mailto:renan_hiroshi@hotmail.com) and Thais Marchetti - [thaismarchetti123@gmail.com](mailto:thaismarchetti123@gmail.com) and Lucas Betioli - [lucasantoniobetioli@gmail.com](mailto:lucasantoniobetioli@gmail.com) and Victor Malheiro - [victorhugomalheiro@gmail.com](mailto:victorhugomalheiro@gmail.com)\n\n**References**:\n\n*   Neuronavigation: [Track multiple coils simultaneously and show stylus/probe #827](https://github.com/invesalius/invesalius3/pull/827)\n*   Robot control: [https://github.com/biomaglab/tms-robot-control](https://github.com/biomaglab/tms-robot-control)\n\n* * *\n\n### Implement neuronavigation capability for transcranial focused ultrasound (tFUS)\n\n[](https://github.com/invesalius/gsoc/blob/main/gsoc_2025_ideas.md#implement-neuronavigation-capability-for-transcranial-focused-ultrasound-tfus)\n\nDevelopment and integration of the functionality for neuronavigation of transcranial focused ultrasound transducers (tFUS). InVesalius currently supports only neuronavigation for Transcranial Magnetic Stimulation (TMS) coils. We aim at extending the support to tFUS, which is becoming an important neuromodulation tool to study and and interact with brain function non-invasively. This new feature will significantly extend the user based on InVesalius to support accurate and reproducible neuroscience.\n\n**Requirements:** Computer with Windows, Linux, or Mac OS installed. Python programming language and InVesalius library dependencies. A source code editor.\n\n**Deliverables:**\n\n*   Visualization interface for coregistration of tFUS transducers.\n*   Targeting and guiding interface for tFUS.\n*   Minor adjustment to UI/UX considering the tFUS user requirements.\n\n**Programming Languages:** Python\n\n**Duration:** 350h\n\n**Difficulty Level:** Hard\n\n**Mentor:** Victor H. Souza - [vhosouza@gmail.com](mailto:vhosouza@gmail.com) and Renan Matsuda - [renan\\_hiroshi@hotmail.com](mailto:renan_hiroshi@hotmail.com) and Victor Malheiro - [victorhugomalheiro@gmail.com](mailto:victorhugomalheiro@gmail.com)\n\n**References**:\n\n*   Neuronavigation: [Track multiple coils simultaneously and show stylus/probe #827](https://github.com/invesalius/invesalius3/pull/827)\n*   tFUS: [tFUS Basics](https://doi.org/10.3389/fnhum.2021.749162)\n"}