{"name":"AboutCode","description":"Scan code for origin, license and vulnerabilities","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/aboutcode","ideas_url":"https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas","logo":"https://summerofcode.withgoogle.com/media/org/aboutcode/pmcafargc6wvl1ck-360.png","technologies":["python","javascript","Django+PostgreSQL","C/Rust/Go"],"topics":["dependencies","vulnerabilities","SoftwareCompositionAnalysis","License","SBOM"],"projects":[{"project_name":"PURLdb - DeadCode","summary":"Track end-of-life code and improve PURL coverage, including syncing data from relevant projects.","difficulty":"Advanced"},{"project_name":"PURLdb - PopularCode","summary":"Determine and track the popularity and usage of open-source code, creating metrics based on dependency graphs and code freshness.","difficulty":"Advanced"},{"project_name":"VulnerableCode: Process unstructured data","summary":"Mine unstructured data from various sources for unreported vulnerabilities using NLP techniques.","difficulty":"Advanced"},{"project_name":"VulnerableCode: Add more data sources","summary":"Integrate additional vulnerability data sources and improve data collection methods.","difficulty":"Intermediate"},{"project_name":"VulnerableCode: On-demand live evaluation","summary":"Implement dynamic importation of vulnerability data based on specific package queries.","difficulty":"Intermediate"},{"project_name":"ScanCode.io: File-system tree view","summary":"Create a tree view for file systems in scanned packages to enhance exploration and detection issues.","difficulty":"Intermediate"},{"project_name":"ScanCode.io: Store/query downloaded packages","summary":"Enable storage of downloaded packages and provide an API for accessing these packages later.","difficulty":"Intermediate"},{"project_name":"ScanCode.io: CI/CD integration","summary":"Enhance ScanCode for use within CI/CD environments, automating scans and compliance checks.","difficulty":"Intermediate"},{"project_name":"ScanCode Toolkit: Variable license sections","summary":"Support variable license sections in license rules to improve detection accuracy.","difficulty":"Intermediate"},{"project_name":"ScanCode Toolkit: Automatic marking of phrases","summary":"Utilize AI/NLP to automatically mark required phrases in license rules to reduce false positives.","difficulty":"Advanced"},{"project_name":"PURLdb - DeadCode: Track End-Of-Life Code","summary":"Develop features in PURLdb to track deprecated code and improve data integration with endoflife.date.","difficulty":"Advanced"},{"project_name":"PURLdb - PopularCode: Popular Open Source Code Tracking","summary":"Implement a system to identify and rank the popularity of open source projects using various metrics.","difficulty":"Advanced"},{"project_name":"VulnerableCode - Process Unstructured Data for Vulnerabilities","summary":"Create tools to mine unstructured sources for vulnerabilities and automate the detection of unreported issues.","difficulty":"Advanced"},{"project_name":"VulnerableCode - Add More Data Sources","summary":"Expand data collection capabilities and mine vulnerabilities to find correlations between them.","difficulty":"Intermediate"},{"project_name":"VulnerableCode - On-Demand Live Evaluation of Packages","summary":"Create a dynamic API for real-time vulnerability assessments of specific packages.","difficulty":"Intermediate"},{"project_name":"ScanCode.io - Create File-System Tree View for Project Scans","summary":"Implement a tree view to navigate file structures for scanned projects easily.","difficulty":"Intermediate"},{"project_name":"ScanCode.io - Store and Query Downloaded Packages","summary":"Develop a system for archiving packages scanned by SCIO for future reference and compliance purposes.","difficulty":"Intermediate"},{"project_name":"ScanCode.io - CI/CD Integration","summary":"Enhance ScanCode tools for compatibility with CI/CD pipelines to automate compliance and vulnerability checks.","difficulty":"Intermediate"},{"project_name":"ScanCode Toolkit - Variable License Sections in License Rules","summary":"Support variability in license detection rules to improve accuracy and flexibility in rule matching.","difficulty":"Intermediate"},{"project_name":"ScanCode Toolkit - Automate Required Phrase Detection with NLP","summary":"Use NLP techniques to automatically mark required phrases in license detection rules to reduce false positives.","difficulty":"Advanced"}],"jina_response":"Title: GSOC 2025 Project Ideas\n\nURL Source: https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas\n\nMarkdown Content:\nSee our page on applying for GSoC 2025: [https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025)\n\nTable of Contents\n-----------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#table-of-contents)\n\n*   [Project Ideas Index](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#project-ideas-index)\n*   [PURLdb project ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#purldb-project-ideas)\n*   [vulnerablecode project ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#vulnerablecode-project-ideas)\n*   [scancode.io projects ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancodeio-project-ideas)\n*   [scancode-toolkit project ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancode-toolkit-project-ideas)\n*   [About our Project Ideas List](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#our-project-ideas)\n\n* * *\n\nHere is a list of candidate project ideas for your consideration. Your own ideas are welcomed too! Please chat about them to get early feedback!\n\nProject Ideas Index\n-------------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#project-ideas-index)\n\n[PURLdb](https://github.com/aboutcode-org/purldb): [project ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#purldb-project-ideas)\n\n[vulnerablecode](https://github.com/aboutcode-org/VulnerableCode): [project ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#vulnerablecode-project-ideas)\n\n[scancode.io](https://github.com/aboutcode-org/scancode.io): [project ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancodeio-project-ideas)\n\n[scancode-toolkit](https://github.com/aboutcode-org/scancode-toolkit): [project ideas](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancode-toolkit-project-ideas)\n\nArchived Project Ideas: [https://github.com/aboutcode-org/aboutcode/wiki/Archived-GSoC-Project-Ideas](https://github.com/aboutcode-org/aboutcode/wiki/Archived-GSoC-Project-Ideas)\n\n* * *\n\nAbbreviations and acronyms used here\n------------------------------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#abbreviations-and-acronyms-used-here)\n\nWe use these now and then:\n\n*   SCIO: ScanCode.io\n*   BOM: Bill of Material, same as SBOM\n*   SBOM: Software Bill of Material\n*   DJCD: DejaCode\n*   SCTK: ScanCode-Toolkit\n*   VCIO: VulnerableCode\n*   NLP: Natural Language Processing\n*   VDR: Vulnerability Disclosure Report\n*   VEX: Vulnerability Exploitability Exchange\n\nPURLdb project ideas\n--------------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#purldb-project-ideas)\n\n### PURLdb - DeadCode: track End-Of-Life code\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#purldb---deadcode-track-end-of-life-code)\n\nCode Repositories: [https://github.com/aboutcode-org/purldb](https://github.com/aboutcode-org/purldb)\n\nDescription:\n\nEventually old code goes unmaintained and dies. The goal of this project are:\n\n*   To add data structures, models, and APIs in purldb to track end-of-life code and in general package and projects activities\n*   To improve purl coverage at endoflife.date, see [https://github.com/endoflife-date/endoflife.date/issues/763](https://github.com/endoflife-date/endoflife.date/issues/763)\n*   To import and sync data from projects such as [https://github.com/endoflife-date/endoflife.date](https://github.com/endoflife-date/endoflife.date)\n*   To design a module that can detect when\n    *   a project is turning end-of-life (using the above)\n    *   a project is unmaintained (use metrics from scorecard/other tools)\n\nNote that on the endoflife.date side, we need to help improve PURL coverage of the database there, as this would be key to integrate with purldb. There\n\nPriority: High\n\nSize: Large\n\nDifficulty Level: Advanced\n\nTags:\n\n*   Python\n*   Django\n*   PostgreSQL\n*   EOL\n*   End of life\n\nMentors:\n\n*   @pombredanne\n*   @JonoYang\n*   @AyanSinhaMahapatra\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/purldb/issues/42](https://github.com/aboutcode-org/purldb/issues/42)\n*   [https://github.com/aboutcode-org/vulnerablecode/issues/722](https://github.com/aboutcode-org/vulnerablecode/issues/722)\n*   [https://github.com/endoflife-date/endoflife.date/issues/763](https://github.com/endoflife-date/endoflife.date/issues/763)\n\n* * *\n\n### PURLdb - PopularCode - Find and track actually used and most popular open source code\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#purldb---popularcode---find-and-track-actually-used-and-most-popular-open-source-code)\n\nCode Repositories: [https://github.com/aboutcode-org/purldb](https://github.com/aboutcode-org/purldb)\n\nDescription:\n\nThere are between 100 and 200 million open source projects and repos out there. Not all of them are equal. Some are much more useful than others, and some could be safely ignored. For instance, the linux kernel is more important, used and popular than a 1st year computer student school assignment project. The goal of this project is to determine when a project is popular and what are the most popular projects. If we do not know what code is used, we can spend a lot of resources to index less used code.\n\nThere are some simple approaches to this, using available statistics for downloads or Github stars, but that is not satisfying alone.\n\nAn idea would be to consider multiple factors to rank popularity and usage.\n\n*   For instance: create a (current and updated) graph of dependencies and compute something like a pagerank but for packages\n*   Then create with a metric on the freshness of the code like when last release and how much downloaded or based on git activity (excluding bots). This would grow for used code and decay for declining packages\n*   Then combine this with the dependencies \"connectedness\"\n\nOr, just a use the graph connections and no download stats, just a giant graph on top of purldb\n\nOr something like this:\n\n*   Finding strongly connected components\n*   Relate packages ignoring versions\n*   Find most connected\n*   Discount distant connections, boost closest\n*   Apply decay based on version freshness or git activity\n\nThe approach would be to start small with a single ecosystem as PoC and then extend this to all packages types.\n\nIdeally, this should be exposed in PurlDB API and integrated in data collection operations.\n\nPriority: High\n\nSize: Large\n\nDifficulty Level: Advanced\n\nTags:\n\n*   Python\n*   Django\n*   PostgreSQL\n*   Popularity\n\nMentors:\n\n*   @pombredanne\n*   @JonoYang\n*   @AyanSinhaMahapatra\n\n* * *\n\nVulnerableCode project ideas\n----------------------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#vulnerablecode-project-ideas)\n\nThere are two main categories of projects for VulnerableCode:\n\n*   A. COLLECTION: this category is to mine and collect or infer more new and improved data. This includes collecting new data sources, inferring and improving existing data or collecting new primary data (such as finding a fix commit of a vulnerability)\n    \n*   B. USAGE: this category is about using and consuming the vulnerability database and includes the API proper, the GUI, the integrations, and data sharing, feedback and curation.\n    \n\n* * *\n\n### VulnerableCode: Process unstructured data sources for vulnerabilities (Category A)\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#vulnerablecode-process-unstructured-data-sources-for-vulnerabilities-category-a)\n\nCode Repositories:\n\n*   [https://github.com/aboutcode-org/vulnerablecode](https://github.com/aboutcode-org/vulnerablecode)\n\nDescription:\n\nThe project would be to provide a way to effectively mine unstructured data sources for possible unreported vulnerabilities.\n\nFor a start this should be focused on a few prominent repos. This project could also find Fix Commits.\n\nSome sources are:\n\n*   mailing lists\n*   changelogs\n*   reflogs of commit\n*   bug and issue trackers\n\nThis requires systems to \"understand\" vulnerability descriptions: as often security advisories do not provide structured information on which package and package versions are vulnerable. The end goal is creating a system which would infer vulnerable package name and version(s) by parsing the vulnerability description using specialized techniques and heuristics.\n\nThere is no need to train a model from scratch, we can use AI models pre-trained on code repositories (maybe [https://github.com/bigcode-project/starcoder](https://github.com/bigcode-project/starcoder)?) and then fine-tune on some prepared datasets of CVEs in code.\n\nWe can either use NLP/machine Learning and automate it all, potentially training data masking algorithms to find these specific data (this also involved creating a dataset) but that's going to be super difficult.\n\nWe could also start to craft a curation queue and parse as much as we can to make it easy to curate by humans and progressively also improve some mini NLP models and classification to help further automate the work.\n\nReferences: [https://github.com/aboutcode-org/vulnerablecode/issues/251](https://github.com/aboutcode-org/vulnerablecode/issues/251)\n\nPriority: Medium\n\nSize: Large\n\nDifficulty Level: Advanced\n\nTags:\n\n*   Python\n*   Django\n*   PostgreSQL\n*   Security\n*   Vulnerability\n*   NLP\n*   AI/ML\n\nMentors:\n\n*   @pombredanne\n*   @tg1999\n*   @keshav-space\n*   @Hritik14\n*   @AyanSinhaMahapatra\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/vulnerablecode/issues/251](https://github.com/aboutcode-org/vulnerablecode/issues/251)\n\n* * *\n\n### VulnerableCode: Add more data sources and mine the graph to find correlations between vulnerabilities (Category A)\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#vulnerablecode-add-more-data-sources-and-mine-the-graph-to-find-correlations-between-vulnerabilities-category-a)\n\nCode Repositories:\n\n*   [https://github.com/aboutcode-org/vulnerablecode](https://github.com/aboutcode-org/vulnerablecode)\n\nDescription:\n\nSee [https://github.com/aboutcode-org/vulnerablecode#how](https://github.com/aboutcode-org/vulnerablecode#how) for background info. We want to search for more vulnerability data sources and consume them.\n\nThere is a large number of pending tickets for data sources. See [https://github.com/aboutcode-org/vulnerablecode/issues?q=is%3Aissue+is%3Aopen+label%3A\"Data+collection](https://github.com/aboutcode-org/vulnerablecode/issues?q=is%3Aissue+is%3Aopen+label%3A%22Data+collection)\"\n\nAlso see tutorials for adding new importers and improvers:\n\n*   [https://vulnerablecode.readthedocs.io/en/latest/tutorial\\_add\\_new\\_importer.html](https://vulnerablecode.readthedocs.io/en/latest/tutorial_add_new_importer.html)\n*   [https://vulnerablecode.readthedocs.io/en/latest/tutorial\\_add\\_new\\_improver.html](https://vulnerablecode.readthedocs.io/en/latest/tutorial_add_new_improver.html)\n\nMore reference documentation in improvers and importers:\n\n*   [https://vulnerablecode.readthedocs.io/en/latest/reference\\_importer\\_overview.html](https://vulnerablecode.readthedocs.io/en/latest/reference_importer_overview.html)\n*   [https://vulnerablecode.readthedocs.io/en/latest/reference\\_improver\\_overview.html](https://vulnerablecode.readthedocs.io/en/latest/reference_improver_overview.html)\n\nNote that this is similar to this GSoC 2022 project (a continuation):\n\n*   [https://summerofcode.withgoogle.com/organizations/aboutcode/projects/details/7d7Sxtqo](https://summerofcode.withgoogle.com/organizations/aboutcode/projects/details/7d7Sxtqo)\n\nReferences: [https://github.com/aboutcode-org/vulnerablecode/issues?q=is%3Aissue+is%3Aopen+label%3A\"Data+collection](https://github.com/aboutcode-org/vulnerablecode/issues?q=is%3Aissue+is%3Aopen+label%3A%22Data+collection)\"\n\nPriority: High\n\nSize: Medium/Large\n\nDifficulty Level: Intermediate\n\nTags:\n\n*   Django\n*   PostgreSQL\n*   Security\n*   Vulnerability\n*   API\n*   Scraping\n\nMentors:\n\n*   @pombredanne\n*   @tg1999\n*   @keshav-space\n*   @Hritik14\n*   @jmhoran\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/vulnerablecode/issues?q=is%3Aissue+is%3Aopen+label%3A\"Data+collection](https://github.com/aboutcode-org/vulnerablecode/issues?q=is%3Aissue+is%3Aopen+label%3A%22Data+collection)\"\n\n* * *\n\n### VulnerableCode: On demand live evaluation of packages (Category A)\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#vulnerablecode-on-demand-live-evaluation-of-packages-category-a)\n\nCode Repositories: [https://github.com/aboutcode-org/vulnerablecode](https://github.com/aboutcode-org/vulnerablecode)\n\nDescription:\n\nCurrently VulnerableCode runs importers in bulk where all the data from advisories are imported (and reimported) at once and stored to be displayed and queried.\n\nThe objective of this project is to have another endpoint and API where we can dynamically import available advisories for a single PURL at a time.\n\nAt a high level this would mean:\n\n*   Support querying a specific package by PURL. This is not for an approximate search but only an exact PURL lookup.\n    \n*   Visit advisories/package ecosystem-specific vulnerability data sources and query for this specific package. For instance, for PyPi, the vulnerabilities may be available when querying the main API. An example is [https://pypi.org/pypi/lxml/4.1.0/json](https://pypi.org/pypi/lxml/4.1.0/json) that lists vulnerabilities. In some other cases, we may need to fetch larger datasets, like when doing this in batch.\n    \n*   This is irrespective of whether data related to this package being present in the db (i.e. both for new packages and refreshing old packages).\n    \n*   A good test case would be to start with a completely empty database. Then we call the new API endpoint for one PURL, and the vulnerability data is fetched, imported/stored on the fly and the API results are returned live to the caller. After that API call, the database should now have vulnerability data for that one PURL.\n    \n*   This would likely imply to modify or update importers to support querying by purl to get advisory data for a specific package. The actual low level fetching should likely be done in FetchCode.\n    \n\nThis is not straightforward as many advisories data source do not store data keyed by package, as they are not package-first, but they are stored by security issue. See specific issues/discussions on these importers for more info. See also how things are done in vulntotal.\n\nPriority: Medium\n\nSize: Medium/Large\n\nDifficulty Level: Intermediate\n\nTags:\n\n*   Python\n*   Django\n*   PostgreSQL\n*   Security\n*   web\n*   Vulnerability\n*   API\n\nMentors:\n\n*   @pombredanne\n*   @tg1999\n*   @keshav-space\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/vulnerablecode/issues/1046](https://github.com/aboutcode-org/vulnerablecode/issues/1046)\n*   [https://github.com/aboutcode-org/vulnerablecode/issues/1008](https://github.com/aboutcode-org/vulnerablecode/issues/1008)\n\n* * *\n\nScanCode.io project ideas\n-------------------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancodeio-project-ideas)\n\n* * *\n\n### ScanCode.io: Create file-system tree view for project scans\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancodeio-create-file-system-tree-view-for-project-scans)\n\nCode Repositories:\n\n*   [https://github.com/aboutcode-org/scancode.io](https://github.com/aboutcode-org/scancode.io)\n\nDescription:\n\nWhen large packages/containers are scanned in scancode.io it is useful to have a tree-view to explore thorugh the file-tree for that package/container to look into scan data for a particular subset of the file-tree/directory or to research more into detections and detection issues.\n\nThis would be something similar to what we have at scancode-workbench for example: [https://scancode-workbench.readthedocs.io/en/develop/ui-reference/directory-tree.html](https://scancode-workbench.readthedocs.io/en/develop/ui-reference/directory-tree.html)\n\nI.e. we need the following features:\n\n*   To be able to toggle showing the directory contents from the directory icon\n*   Show nested directory contents in a tree like structure\n*   Have this view ideally in a pane left to the table-view of resources\n*   Show only info from the selected directory in the table-view of resources\n\nNote that we do have a ProjectCodebaseView in the projects page currently in scancode.io but this is fairly limited as it only lets you browse through the codebase one directory at a time (only shows the files/directories in one directory), and lets you navigate to directories in the current directory or the parent directory from there.\n\nPriority: High\n\nSize: Large\n\nDifficulty Level: Intermediate\n\nTags:\n\n*   Python\n*   Django\n*   UI/UX\n*   File-system\n*   Navigation\n\nMentors:\n\n*   @tdruez\n*   @pombredanne\n*   @AyanSinhaMahapatra\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/scancode.io/issues/697](https://github.com/aboutcode-org/scancode.io/issues/697)\n\n* * *\n\n### ScanCode.io: Add ability to store/query downloaded packages\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancodeio-add-ability-to-storequery-downloaded-packages)\n\nCode Repositories:\n\n*   [https://github.com/aboutcode-org/scancode.io](https://github.com/aboutcode-org/scancode.io)\n\nDescription:\n\nPackages which are downloaded and scanned in SCIO can be optionally stored and accessed to have a copy of the packages which are being used for a specific product for reference and future use, and could be used to meet source redistribution obligations.\n\nThe specific tasks would be:\n\n1.  Store all packages/archives which are downloaded and scanned in SCIO\n2.  Create an API and index by URL/checksum to get these packages on-demand\n3.  Create models to store metadata/history and logs for these downloaded/stored packages\n4.  Additionally support and design external storage/fetch options\n\nThere should be configuration variable to turn this on to enable these features, and connect external databases/storage.\n\nPriority: Low\n\nSize: Medium\n\nDifficulty Level: Intermediate\n\nTags:\n\n*   Python\n*   Django\n*   CI\n*   Security\n*   Vulnerability\n*   SBOM\n\nMentors:\n\n*   @tdruez\n*   @keshav-space\n*   @jyang\n*   @pombredanne\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/scancode.io/issues/1063](https://github.com/aboutcode-org/scancode.io/issues/1063)\n\n* * *\n\n### ScanCode.io: Update SCIO/SCTK for use in CI/CD:\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancodeio-update-sciosctk-for-use-in-cicd)\n\nCode Repositories:\n\n*   [https://github.com/aboutcode-org/scancode.io](https://github.com/aboutcode-org/scancode.io)\n*   [https://github.com/aboutcode-org/scancode-action](https://github.com/aboutcode-org/scancode-action)\n\nDescription:\n\nEnhance SCIO/SCTK to be integrated into CI/CD pipelines such as Github Actions, Azure Piplines, Gitlab, Jenkins. We can start with any one CI/CD provider like GitHub Actions and later support others.\n\nThese should be enabled and configured as required by scancode configuration files to enable specific functions to be carried out in the pipeline.\n\nThere are several types of CI/CD pipelines to choose from potentially:\n\n1.  Generate SBOM/VDRs/VEX with scan results:\n    \n    *   Scan the repo to get all purls: packages, dependencies/requirements\n    *   Scan repository for package, license and copyrights\n    *   Query public.vulnerablecode.io for Vulnerabilities by PackageURL\n    *   Generate SPDX/CycloneDX SBOMs from them with scan and vulnerability data\n2.  License/other Compliance CI/CD pipelines\n    \n    *   Scan repo for licenses and check for detection accuracy\n    *   Scan repo for licenses and check for license clarity score\n    *   Scan repo for licenses and check compliance with specified license policy\n    *   Check for OpenSSF scorecard data and specified policy on community health metrics\n    *   The jobs should pass/fail based on the scan results of these specific cases, so we can have:\n        *   a special mode to fail with error codes\n        *   description of issues and failure reasons, and docs on how to fix these\n        *   ways to configure and set up for these cases with configuration files\n3.  Dependency checkers/linters:\n    \n    *   download and scan all package dependencies, get scan results/SBOM/SBOMs\n    *   check for vulnerable packages and do non-vulnerable dependency resolutuion\n    *   check for test failures after dependency upgrades and add PR only if passes\n4.  Jobs which checks and fixes for misc other errors:\n    \n    *   Replaces standard license notices with SPDX license declarations\n    *   checks and adds ABOUT files for vendored code\n\nWe have an initial CI runner at [https://github.com/nexB/scancode-action](https://github.com/nexB/scancode-action) but we need to improve this with more functions, specially checking against predefined policies and failing/successful CI based on that.\n\nReferences:\n\n*   [https://github.com/aboutcode-org/scancode.io/issues/599](https://github.com/aboutcode-org/scancode.io/issues/599)\n*   [https://github.com/aboutcode-org/scancode.io/issues/1582](https://github.com/aboutcode-org/scancode.io/issues/1582)\n\nPriority: High\n\nSize: Large\n\nDifficulty Level: Intermediate\n\nTags:\n\n*   Python\n*   Django\n*   CI\n*   Security\n*   License\n*   SBOM\n*   Compliance\n\nMentors:\n\n*   @pombredanne\n*   @tdruez\n*   @keshav-space\n*   @tg1999\n*   @AyanSinhaMahapatra\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/scancode.io/issues/599](https://github.com/aboutcode-org/scancode.io/issues/599)\n\n* * *\n\nScanCode Toolkit project ideas\n------------------------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#scancode-toolkit-project-ideas)\n\n* * *\n\n### Have variable license sections in license rules:\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#have-variable-license-sections-in-license-rules)\n\nCode Repositories:\n\n*   [https://github.com/aboutcode-org/scancode-toolkit](https://github.com/aboutcode-org/scancode-toolkit)\n\nDescription:\n\nThere are lots of variability in license notices and declarations in practice, and one example of modeling this is the SPDX matching guidelines. Note that this was also one of the major ways scancode used to detect licenses earlier.\n\n1.  Support grammar for variability in license rules (brackets, no of words)\n2.  Do a massive analysis on license rules and check for similarity and variable sections This can be used to add variable sections (for copyright/names/companies) and reduce rules.\n3.  Support variability in license detection post-processing for `extra-words` case\n4.  Add scripts to add variable sections to rules from detection issues (like bsd detections)\n\nPriority: Medium\n\nSize: Medium\n\nDifficulty Level: Intermediate\n\nTags:\n\n*   Python\n*   Licenses\n*   LicenseDetection\n*   SPDX\n*   Matching\n\nMentors:\n\n*   @AyanSinhaMahapatra\n*   @pombredanne\n*   @jyang\n*   @DennisClark\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/scancode-toolkit/issues/3601](https://github.com/aboutcode-org/scancode-toolkit/issues/3601)\n\n* * *\n\n### Mark required phrases for rules automatically using NLP/AI:\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#mark-required-phrases-for-rules-automatically-using-nlpai)\n\nCode Repositories:\n\n*   [https://github.com/aboutcode-org/scancode-toolkit](https://github.com/aboutcode-org/scancode-toolkit)\n\nDescription:\n\nRequired phrases are present in rules to make sure the rule is not matched to text in a case where the required phrase is not present in the text, which would be a false-positive detection.\n\nWe are marking required phrases automatically based on what is present in other rules and license attributes, but this still leaves a lot of rules without them. See [https://github.com/aboutcode-org/scancode-toolkit/pull/3924](https://github.com/aboutcode-org/scancode-toolkit/pull/3924) where we are also adding a script to add required phrases as individual rules if applicable and also adding required phrases added to other rules.\n\n*   research and choose a model pre-trained on code (StarCoder?)\n*   use the dataset of current SCTK rules to train a model\n*   Mark required phrases in licenses automatically with the model\n*   Test required phrase additions, improve and iterate\n*   Bonus: Create a minimal UI to review rule updates massively\n\nPriority: Medium\n\nSize: Medium\n\nDifficulty Level: Advanced\n\nTags:\n\n*   Python\n*   ML/AI\n*   Licenses\n\nMentors:\n\n*   @AyanSinhaMahapatra\n*   @tg1999\n*   @pombredanne\n\nRelated Issues:\n\n*   [https://github.com/aboutcode-org/scancode-toolkit/issues/2878](https://github.com/aboutcode-org/scancode-toolkit/issues/2878)\n\n* * *\n\nOur Project ideas\n-----------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#our-project-ideas)\n\nHere are some project related attributes you need to keep in mind while looking into prospective project ideas, see also: [guidance on finding the right project](https://google.github.io/gsocguides/student/finding-the-right-project):\n\nProject Priority\n----------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#project-priority)\n\n1.  The repositories/projects are not sorted in order of importance, instead we have a explicit priority mentioned for each project idea and this can be: Low, Medium or High.\n    \n2.  This doesn't mean we will always consider a project proposal with a higher priority idea over a relatively lower priority one, no matter the merit of the proposal. This is only one metric of selection, mostly to prioritize important projects.\n    \n3.  You can also suggest your own project ideas/discuss changes/updates/enhancements based on the provided ideas, but you need to really know what you are doing here and have lots of discussions with the maintainers.\n    \n\nProject Length\n--------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#project-length)\n\nThere are three project lengths:\n\n1.  Small (~90 hours)\n2.  Medium (~175 hours)\n3.  Large (~350 hours)\n\nIf you are proposing an idea from this ideas list, it should match what is listed here, and additionally please have a discussion with the mentors about your proposed length and timeline. Please also open a discussion about the same, if not already present, at [https://github.com/aboutcode-org/aboutcode/discussions/categories/gsoc](https://github.com/aboutcode-org/aboutcode/discussions/categories/gsoc) or discuss this in the respective issues.\n\nWe have marked our ideas with medium/large based on general estimates, but this could vary. In a few cases they are both used to mark a project as it can be both. We have made conscious effort to make sure projects are not too large, have clear deliverables and can be finished successfully, but still note that these are complex projects and you're likely underestimating the complexity (and how much we'll bug you to make sure everything is up to our standards).\n\nYou must discuss your proposal and the size of project you are proposing with a mentor as otherwise we cannot consider your proposal fairly.\n\nWe likely would only select medium/large project ideas only as the small projects are too small to get familiar with and contribute meaningfully to any of our projects.\n\nPlease also note that there is a difference in the stipend based on what you select, and it would not be fair if you're selecting and working on a large project, but getting paid for a medium one (or vice-versa).\n\nProject Tags\n------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#project-tags)\n\nHere are all the tags we use for specific projects, feel free to search this page using these if you only want to look into projects with specific technical background.\n\n\\[Django\\], \\[PostgreSQL\\], \\[Web\\], \\[DataStructures\\], \\[Scanning\\], \\[Javascript\\], \\[UI\\], \\[LiveServer\\] \\[API\\], \\[Metadata\\], \\[PackageManagers\\], \\[SBOM\\], \\[Security\\], \\[BinaryAnalysis\\], \\[Scraping\\], \\[NLP\\], \\[Social\\], \\[Communication\\], \\[Review\\], \\[Decentralized/Distributed\\], \\[Curation\\]\n\nProject Difficulty Level\n------------------------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#project-difficulty-level)\n\nWe are generally using three levels of difficulty to characterize the projects:\n\n*   Easy\n*   Intermediate\n*   Advanced\n\nIf it is a difficult project it means there is significant domain knowledge required to be able to tackle this project successfully, and you must have prior verifiable experience on this (in the form of open source contributions, either on the same topic in our repos, or elsewhere). You must also consult with mentors/maintainers early, ask a lot of domain specific questions and must be ready to research and tackle greenfield projects in certain cases if you choose a project in this difficulty category.\n\nMost other intermediate projects do not require this much domain knowledge and can easily be acquired during proposal writing/contributing, if you're familiar with the tech stack used in the project. But these are still not straight-forward and requires lots of feedback from the mentors. Most projects fall in this category.\n\nThere are also easy projects which only require honest time and effort from the participant, and decent knowledge about the tech stack/problem.\n\nQuestions?\n----------\n\n[](https://github.com/aboutcode-org/aboutcode/wiki/GSOC-2025-Project-Ideas#questions)\n\nPlease feel free to chime in at [https://github.com/aboutcode-org/aboutcode/discussions/133](https://github.com/aboutcode-org/aboutcode/discussions/133) or in our GSoC 2025 chatroom at [https://matrix.to/#/#aboutcode-org\\_gsoc2025:gitter.im](https://matrix.to/#/#aboutcode-org_gsoc2025:gitter.im) if you have any questions related to AboutCode's participation in GSoC or anything in this page.\n"}