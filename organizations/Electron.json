{"name":"Electron","description":"Cross-platform desktop apps with web technologies","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/electron","ideas_url":"https://electronhq.notion.site/Electron-Google-Summer-of-Code-2025-Ideas-List-1851459d1bd1811894dad8b48a68596d","logo":"https://summerofcode.withgoogle.com/media/org/electron/vchyhnp6rhabucgj-360.png","technologies":["javascript","node.js","c++","typescript","Chromium"],"topics":["desktop","framework","javascript"],"projects":[{"project_name":"Documentation PR Previews Automation","summary":"Create an automated tool for generating previews of documentation pull requests to improve visibility before merging.","difficulty":"Intermediate"},{"project_name":"BrowserWindow State Management API","summary":"Design an API to save and restore window states of applications built with Electron, enhancing the native-like experience.","difficulty":"Advanced"},{"project_name":"Improving the Electron Forge CLI","summary":"Redesign the user experience of the Electron Forge Command Line Interface to make it more user-friendly for developers.","difficulty":"Intermediate"},{"project_name":"Electron Fiddle as a VS Code Extension","summary":"Integrate Electron Fiddle's functionality into a VS Code extension to ease debugging and provide better access to Electron's features.","difficulty":"Advanced"},{"project_name":"Release Calendar Automation","summary":"Automate the release tracking process for Electron by integrating with the Chromium API for better communication on release timelines.","difficulty":"Intermediate"},{"project_name":"Fuse Support in Electron Fiddle","summary":"Add support in Electron Fiddle to manage feature toggles (fuses) for running test cases, enhancing debugging capabilities for developers.","difficulty":"Intermediate"},{"project_name":"Modernizing IPC Visibility with Chrome Extension","summary":"Revitalize the Devtron tool or create a new Chrome extension to log inter-process communication events for Electron applications.","difficulty":"Advanced"}],"jina_response":"Title: Notion â€“ The all-in-one workspace for your notes, tasks, wikis, and databases.\n\nURL Source: https://electronhq.notion.site/Electron-Google-Summer-of-Code-2025-Ideas-List-1851459d1bd1811894dad8b48a68596d\n\nMarkdown Content:\n![Image 1: ðŸ’¡](blob:https://electronhq.notion.site/2ae2cc6f0544e8fcceb52fb6a599a7ea)![Image 2: ðŸ’¡](https://notion-emojis.s3-us-west-2.amazonaws.com/prod/svg-twitter/1f4a1.svg)\n\nElectron: Google Summer of Code 2025 Ideas List\n-----------------------------------------------\n\n![Image 3: ðŸ“£](blob:https://electronhq.notion.site/2ae2cc6f0544e8fcceb52fb6a599a7ea)\n\nThe mentors will not provide draft proposal feedback on any draft emailed on Friday, April 4th or later, as it is too close to the application deadline. As a reminder, final submissions need to be made to the [Google Summer of Code portal](https://summerofcode.withgoogle.com/) rather than directly via email.\n\n[Electron](https://electronjs.org/) is a framework for building desktop applications using JavaScript, HTML, and CSS. By embedding [Chromium](https://www.chromium.org/) and [Node.js](https://nodejs.org/) into its binary, Electron allows you to maintain one JavaScript codebase and create cross-platform apps that work on Windows, macOS, and Linux.\n\nThe core code for Electron lives in the [electron/electron](https://github.com/electron/electron) repository on GitHub, and consists of a JavaScript API layer that interfaces with the native Chromium and Node.js code. Most core Electron development is written in C++, and familiarity with Chromium is a huge help for understanding the codebase. (For a beginner-friendly overview of how the codebase works, check out [Charles Kerr - Electron's Codebase for Beginners \\[CovalenceConf 2020\\]](https://www.youtube.com/watch?v=1h8Fv4D-bTA).)\n\nFor GSoC 2025, the Electron Outreach working group has developed 7 project ideas geared towards both C++ and JavaScript developers.\n\nWeâ€™re happy to answer questions via email at [summer-of-code@electronjs.org](mailto:summer-of-code@electronjs.org). Please do not email questions to individual mentors, as they may be missed!\n\nTags: JavaScript, Static Site Generators, MDX, Heroku, Automation, GitHub Actions\n\nScope: Electron maintains its documentation as MDX files in the main electron/electron repository, but the website lives in a separate repo that pulls in the docs as content via webhook.\n\nThereâ€™s a disconnect in our system between when docs get merged and when they appear on the website, so itâ€™s easy for formatting issues to appear. This project would aim to create automation tooling that would create an ephemeral Heroku Review App for each PR containing doc changes which previews the website with the changes, and link it as a comment on the PR.\n\nSuccess Criteria: A successful project will produce documentation PR previews and create a comment on PRs linking that preview.\n\nTypeScript/JavaScript (required)\n\nTags: Electron Core, Feature, Chromium, C++, API development\n\nScope: Currently Electron does not have any built-in mechanism for saving and restoring the state of BrowserWindows, but this is a very common need for apps that want to feel more native. Create an API in Electron to save, restore, and clear window state: position, size, maximized state, etc.\n\nAPI spec is accepted by Electronâ€™s API working group\n\nNew window state API is added to the BrowserWindow module and merged into the main branch for a future Electron release\n\nProper API documentation is added\n\nGitHub issue tracker discussion: â€‹\n\nTags: Electron Forge, TypeScript, Node.js, Bash, CLI tools\n\nScope: Electron Forge is a complete tool for building and publishing Electron applications. In 2022, Forge became the official packaging tool for Electron. However, Forgeâ€™s CLI is not as user friendly and modern as other tools in the JS ecosystem. This project would update the UX for the Forge CLI to make it easier for developers to create new Electron apps entirely from the command line.\n\nThe Electron Forge CLI is updated to include accurate flows from init, start, package and other major commands and expanded to allow configuring the options most commonly used by users.\n\nA new interactive mode to allow for a more user friendly experience.\n\nTested cross-platform on Mac, Windows and Linux\n\nStretch goals would include adding new features to the CLI\n\nTypescript/Javascript (required)\n\nTags: Electron Fiddle, TypeScript, Node.js, VS Code\n\nScope: Electron Fiddle is a standalone tool used daily by Electron maintainers to help debug and fix issues reported in Electron, and is the best way for developers to provide minimal repro cases for their bug reports. This project would involve taking the internals of Electron Fiddle and integrating them as a VS Code extension, to allow using Fiddleâ€™s logic without leaving the IDE, and more easily use Fiddle with a local build of Electron. This would require a reimagining of the Electron Fiddle UX to work within the constraints of the UI/UX available to VS Code extensions, rather than a 1:1 port of the UI from the standalone Electron Fiddle.\n\nA working VS Code extension which integrates @electron/fiddle-core to provide an Electron Fiddle experience, with emphasis on more easily working with local builds of Electron.\n\nAbility to import/export GitHub Gists, integrating with VS Codeâ€™s existing GitHub auth.\n\nTypeScript/JavaScript (required)\n\nfiddle-core repo, with Fiddleâ€™s core logic: â€‹\n\nTags: Electron, web, APIs\n\nScope: Electronâ€™s Releases Working Group currently have several tracks of automation that help us track and communicate details about Electronâ€™s major stable releases. However, the various tracks of automation are currently disjointed, and donâ€™t always communicate with each other. Additionally, we depend on an upstream Chromium release schedule that we update manually, a process we would like to automate.\n\nSuccess Criteria: This project asks the contributor to 1) add new automation to allow Electron to pull dates from Chromiumâ€™s upstream API and 2) make a barebones Release calendar website that the Electron team can view, based on Chromium's alpha, beta and stable release dates.\n\nGoing above and beyond could include:\n\nSetting up a bot that allows the Electron team to update the calendar automatically or add additional dates and details\n\nAlerting [#wg-releases](https://electronhq.slack.com/archives/CC80G2R6H) and updating the calendar automatically if upstream dates change\n\nTypeScript/JavaScript (required)\n\nTags: Electron Fiddle, TypeScript, Node.js\n\nScope: Electron Fiddle is a standalone tool used daily by Electron maintainers to help debug and fix issues reported in Electron, and is the best way for developers to provide minimal repro cases for their bug reports. Electron fuses are feature toggles that are set when packaging an Electron app to enable / disable certain features / restrictions. Currently Electron Fiddle has no support for setting these fuses when running a fiddle, so it cannot be used to to provide repro cases for bug reports involving specific fuse settings. This project would add support to Fiddle for setting fuses before running the fiddle, and include the fuse values in any fiddles uploaded to GitHub Gists.\n\nAn intuitive UI is added to Electron Fiddle which allows users to view and toggle values for Electron fuses to be set on the next run.\n\nFuse values are included in fiddles uploaded to a GitHub gist, and fuse values are set when loading a fiddle from a GitHub gist.\n\nTypeScript/JavaScript (required)\n\nfiddle-core repo, with Fiddleâ€™s core logic: â€‹\n\nTags: JavaScript, TypeScript, Chrome Extension, IPC, Developer Tool\n\nScope: Inter-process communication (IPC) is a key part of building feature-rich desktop applications in Electron. App developers getting started with Electron often struggle in understanding IPC concepts and how to work with them; multiple processes and finding where IPC is sent and received isnâ€™t straightforward. DevtronÂ was a Chrome extension available for Electron which brought visibility to IPC events by adding a new tab under Chrome DevTools where each IPC event was logged. It was eventually deprecated due to a lack of available maintainers, and an aging codebase. This project would modernize the existing Devtron codebase or create a new Chrome extension from scratch (many APIs in Chrome and Electron have changed in the 10 years since Devtron was created) to fill this continuing need for app developers.\n\nA successful project will produce a Chrome extension that, when installed to Electron, displays IPC events sent between processes.\n\nTypeScript/JavaScript (required)\n\nChrome Extensions (preferred)\n"}