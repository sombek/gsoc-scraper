{"name":"ScummVM","description":"Adventure and RPG preservation project","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/scummvm","ideas_url":"https://www.scummvm.org/gsoc-2025-ideas","logo":"https://summerofcode.withgoogle.com/media/org/scummvm/bnok4srtehdy3fbj-360.png","technologies":["python","opengl","c++","assembly","php"],"topics":["games","game engines","software preservation","software archeology"],"projects":[{"project_name":"ScummVM GSoC Participation","summary":"Encouraging students to participate in GSoC with ScummVM, emphasizing that prior experience is not required and providing resources for learning and community engagement.","difficulty":"Easy"},{"project_name":"Improving Game Support","summary":"Students can work on adding new game engines or perfecting existing ones to enhance game compatibility within ScummVM.","difficulty":"Medium"},{"project_name":"Reverse Engineering Games","summary":"Challenging projects involving reverse engineering games without available source code, requiring advanced programming skills and knowledge of specific engines.","difficulty":"Hard"},{"project_name":"General ScummVM Improvements","summary":"Various projects aimed at enhancing the core functionality and performance of ScummVM, suitable for students seeking more straightforward tasks.","difficulty":"Medium"},{"project_name":"Macromedia Director Support","summary":"Improve ScummVM's support for games made with Macromedia Director, requiring moderate programming skills.","difficulty":"Medium"},{"project_name":"HPL2 Engine Port","summary":"Port Frictional Games' HPL2 engine to ScummVM to support specific Amnesia titles, necessitating knowledge of OpenGL.","difficulty":"Hard"},{"project_name":"Finishing Incomplete Engines","summary":"Complete the implementation of several game engines, requiring debugging and final testing efforts.","difficulty":"Medium/High"},{"project_name":"Porting ADL and ACK Engines","summary":"Port lesser-known engines to ScummVM, necessitating familiarity with the engines' original codebases and potential refactoring into C++.","difficulty":"Medium/Hard"},{"project_name":"Developing Game File Integrity System","summary":"Create a system for checking the integrity of game files to ensure users have the correct data for gameplay, involving Python and C++.","difficulty":"Medium"}],"jina_response":"Title: Summer of Code/GSoC Ideas 2025\n\nURL Source: https://www.scummvm.org/gsoc-2025-ideas\n\nMarkdown Content:\nIf you'd like to get involved in ScummVM, we'd love to help you get started!\n\nWe've had a lot of successful student projects as part of Google's Summer of Code in previous years -- we hope to inspire you to work with us and (hopefully) add your own success.\n\nWe often get asks by participants with no experience with ScummVM whether they have the necessary skills to participate with us. The idea of GSoC is to introduce students to open source development, so we are not expecting you to have experience with ScummVM. You will have time during the application and community bonding periods to familiarize yourself with the project. The technical skills required to work with us varies from task to task. For any work on ScummVM, you'll probably need to already be comfortable with a basic level of C++. Some of the tasks might need more specialized knowledge (working on a 3D game engine may need you to understand some OpenGL and 3D math, and some engine tasks may require some assembly or reverse engineering knowledge); we give our thoughts about this alongside each suggested task, below.\n\nMost importantly, we'd like you to join our community. There are many previous GSoC participants who are still involved in our project, and whether or not you participate as part of Summer of Code, we'd love for you to get involved too.\n\nYou should come to our [Discord Server](https://wiki.scummvm.org/index.php?title=Discord_Server \"Discord Server\") and introduce yourself in the #scummvm-gsoc channel! We're friendly, and it's often the easiest way to ask questions about the tasks and the code in general. The channel is the main form of everyday communication for the project, and there will almost always be developers there who can discuss your project ideas, answer questions and help out.\n\nYou can find more information about what we expect from you before you apply at [GSoC Application](https://wiki.scummvm.org/index.php?title=GSoC_Application \"GSoC Application\").\n\nIntroduction\n------------\n\nWe have a list of potential tasks further down on this page, but before you look at them, perhaps you'd like to take a look at some of the successful projects from previous years! We encourage all of our students to maintain a blog during their summer work, which is a nice way to get some sense of what they accomplished.\n\nOne popular type of task is to improve our support for the games you love, whether this means a new game engine, or helping us to perfect an existing one.\n\nSometimes source code is available - in recent summers, students integrated code supporting games such as [QdEngine](https://wiki.scummvm.org/index.php?title=QdEngine \"QdEngine\") ([blog](https://blogs.scummvm.org/kunxl/)) and [Unrest](https://wiki.scummvm.org/index.php?title=Unrest \"Unrest\") ([blog](https://blogs.scummvm.org/hax0kartik/))into ScummVM. In fact, our support for the [Wintermute](https://wiki.scummvm.org/index.php?title=Wintermute \"Wintermute\") engine was not only started by a GSoC student ([blog](http://summermute2012.blogspot.com/)), who integrated the code into our tree, but also [drastically improved](https://wiki.scummvm.org/index.php?title=Wintermute/Games \"Wintermute/Games\") by another student a year later ([blog](https://icodelikeacow.wordpress.com/)).\n\n[![Image 1: GSOC EMI.png](https://wiki.scummvm.org/images/thumb/4/48/GSOC_EMI.png/160px-GSOC_EMI.png)](https://wiki.scummvm.org/index.php?title=File:GSOC_EMI.png) [![Image 2: GSOC zvision.png](https://wiki.scummvm.org/images/thumb/8/8e/GSOC_zvision.png/152px-GSOC_zvision.png)](https://wiki.scummvm.org/index.php?title=File:GSOC_zvision.png) [![Image 3: GSOC EMI asm.png](https://wiki.scummvm.org/images/thumb/7/78/GSOC_EMI_asm.png/147px-GSOC_EMI_asm.png)](https://wiki.scummvm.org/index.php?title=File:GSOC_EMI_asm.png)\n\nA more challenging (but hopefully rewarding) idea is to start (or continue) reverse engineering a game where no source is available. Two good examples are the pair of students who drastically improved support for Escape from Monkey Island ([blog](http://diggingemi.blogspot.com/), [blog](http://akzgsoc.blogspot.com/)), and the work on improving [Operation Stealth](https://wiki.scummvm.org/index.php?title=Operation_Stealth \"Operation Stealth\") ([blog](https://buddhahacks.wordpress.com/)). Another option is to work on merging (and improving) someone else's reverse engineering work, such as was done with the [ZVision](https://wiki.scummvm.org/index.php?title=ZVision \"ZVision\") engine ([blog](http://richiesams.blogspot.com/search/label/ScummVM)).\n\nIf you'd prefer to improve ScummVM more directly, there are even more options available there; in the past, students have (to give some examples) improved our OpenGL support, added support to keymapper to multiple engines ([blog](https://blogs.scummvm.org/markhor/)), improved our scaler code ([blog](http://singron.blogspot.com/)), written a new GUI framework, added loadable modules for embedded platforms ([blog](http://tonypuccinelli.blogspot.com/search/label/ScummVM)), rearchitected our keyboard input code ([blog](http://kenny-gsoc.blogspot.com/)) and added support for high-colour (16bpp and above) graphics. It's difficult for us to imagine ScummVM as it was before some of these projects, you can make a huge difference!\n\nTasks\n-----\n\nGeneral contacts: Our Discord server our mailing list, or contact [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\"), [Arnaud Boutonné](https://wiki.scummvm.org/index.php?title=User:Strangerke \"User:Strangerke\")\n\nThe ideas here are meant to be just that - **ideas**. We hope they help inspire your proposals, but you should also consider suggesting your own completely new project ideas. Pick something you really want to see improved/fixed, and come and talk to us about it!\n\nIf you're looking for more inspiration for ideas, beware of our [TODO](https://wiki.scummvm.org/index.php?title=TODO \"TODO\") (and the other TODO lists linked from there) and our [OpenTasks](https://wiki.scummvm.org/index.php?title=OpenTasks \"OpenTasks\") pages. Many of the tasks listed there might be incomplete or outdated, or too difficult for a new developer. The best thing to do is to come and talk to us!\n\nGame Tasks\n----------\n\nTechnical contacts: Our Discord channel, our mailing list, or contact [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\"), [John Willis](https://wiki.scummvm.org/index.php?title=User:DJWillis \"User:DJWillis\"), [Arnaud Boutonné](https://wiki.scummvm.org/index.php?title=User:Strangerke \"User:Strangerke\"), [Filippos Karapetis](https://wiki.scummvm.org/index.php?title=User:Md5 \"User:Md5\"),\n\nIf you already have reverse engineering experience, you could consider working on one of the external in-development game engines, or even on support for a new game. However, doing this kind of work is very difficult and time-consuming - you would have to convince us that you have the necessary skills to actually be sufficiently productive, probably by demonstrating some actual progress first.\n\nIf you don't feel quite up to that level of challenge, we have lots of other suggestions:\n\n### Macromedia Director\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Difficulty level: Medium. You'll need a reasonable level of programming experience, and probably some [Director](https://wiki.scummvm.org/index.php?title=Director \"Director\") games.\n*   Size: 175 or 350 hours\n\n[Many 90s-era adventure games](https://wiki.scummvm.org/index.php?title=Director/Games \"Director/Games\") were developed using the Macromedia (now Adobe) Director tool. We added so far support for Director 3 and Director 4, but there is much more work related to the specific Xtras, increasing compatibility and working on Director 5 support.\n\nThese days, due to the relatively high compatibility our approach is taking an interesting Director title, trying to play it and fix any issues along the way, thus making the process pretty fun. During playback, we often compare the titles and behaviors with the original.\n\nFor this year, it would be great to have Total Distortion fully working and Meet MediaBand. The latter will require working with QuickTime playback code.\n\nOften we implement stubs for XObjects which are extensions for Director functionality.\n\n### Amnesia: The Dark Descent and A Machine for Pigs (HPL2 engine)\n\n*   Technical contacts [aquadran](https://wiki.scummvm.org/index.php?title=User:Aquadran \"User:Aquadran\") or [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Difficulty level: Hard. OpenGL knowledge is required\n*   Size: 350 hours\n\nFrictional Games has released full sources for their [HPL2 engine](https://en.wikipedia.org/wiki/Frictional_Games#HPL_Engine) under GPLv3 license. In 2022 we added HPL1 engine and now we could consider adding HPL2. The size of the task is huge since the engines are 275k and 240k lines of code respectively, but we already have experience from working on Penumbra.\n\nThe purpose of this project is to port the HPL2 engine to ScummVM, with the goal of supporting _Amnesia: The Dark Descent_ and _Amnesia: A Machine for Pigs_.\n\n### Finishing implementation of incomplete engines\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\") or [strangerke](https://wiki.scummvm.org/index.php?title=User:Strangerke \"User:Strangerke\")\n*   Difficulty level: Medium or High\n*   Size: 175 hours or 350 hours\n\nScummVM currently has a number of engines that are very close to completion. Many of them were parts of previous GSoCs. For them, we need a playthrough and slight bug fixing, or additional portability fixes.\n\nSome of the engines are:\n\n*   [MacVenture](https://wiki.scummvm.org/index.php?title=MacVenture \"MacVenture\"), based on a [JavaScript reimplementation](http://seancode.com/webventure/). Very close to completion, playthrough is missing and rechecking ties to our Mac GUI emulation.\n*   [Avalanche](https://wiki.scummvm.org/index.php?title=Avalanche \"Avalanche\"), some engine parts like Outro are not finished. Complete list is [here](https://wiki.scummvm.org/index.php?title=Avalanche#TO-DO \"Avalanche\")\n*   [DM](https://wiki.scummvm.org/index.php?title=DM \"DM\")\n*   [Comprehend](https://wiki.scummvm.org/index.php?title=Comprehend \"Comprehend\"), finishing support for Transylvania (V2), and adding support for the 16-color Apple IIgs versions\n\n### Porting ADL to ScummVM\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Difficulty level: Medium or High\n*   Size: 350 hours\n\nADL (Adventure Definition Language, not to be confused with [Sierra's ADL](https://wiki.scummvm.org/index.php?title=ADL \"ADL\")) was created in 1987 by Tim Brengle and Ross Cunniff and released as freeware. Subsequent modifications to the engine have been made since and released under GPL. Documentation as well as a compiler and interpreter can be found [at this link](https://adl.sourceforge.net/).\n\nOnly one commercial game is known to have been released using ADL: Transylvania III. The previous 2 entries in the series use the [Comprehend](https://wiki.scummvm.org/index.php?title=Comprehend \"Comprehend\") engine.\n\nThe purpose of this task is to port this engine to ScummVM's Glk engine.\n\n### Porting ACK engine to ScummVM\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Difficulty level: Medium\n*   Size: 350 hours\n\n[ACK (Adventure Creation Kit)](https://mozomedia.com/ack/) was a Pascal-written game development system. Its sources were [released](http://www.80sgaming.org/ack/) under Public Domain, and there is [a port](https://github.com/neutromancer/ackfree) to Free Pascal. The whole solution is mid-size, around 16k lines of code, but it must be converted to C++ before porting. A program such as p2c (Pascal-to-C) converter could be used for the initial code conversion, but then, the manual work on making things work will follow.\n\nThere are several RPG-like games build on the engine, the most notable one is Ultima-like games.\n\nThe purpose of this task is to port this engine to ScummVM as a separate engine engine.\n\n### Porting Ambermoon/Amberstar engine to ScummVM\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Difficulty level: Hard / Very Hard\n*   Size: 350 hours\n\n[Ambermoon](https://www.mobygames.com/game/10789/ambermoon/) and [Amberstar](https://www.mobygames.com/game/3160/amberstar/) were nice Amiga RPGs created by Thalion Software GmbH, a German company in early 90s. There are complete sources released for both games: [here](https://github.com/historicalsource/ambermoon) and \\[[here](https://github.com/historicalsource/amberstar). It is technically possible to rewrite them in C++.\n\nThe task will require learning or knowledge of the beautiful Motorola Assembly language and some knowledge on how Amiga worked with graphics and sound.\n\n### Porting FITD (Alone in the Dark) engine to ScummVM\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\"), [somaen](https://wiki.scummvm.org/index.php?title=User:Somaen \"User:Somaen\")\n*   Difficulty level: Hard\n*   Size: 350 hours\n\n[FITD](https://github.com/yaz0r/FITD) is an engine for playing Alone in the Dark 1-3 games. It is a mid-size engine with 23k lines of code, not in active development now.\n\nThe goal of this project is porting the engine code to ScummVM's OSystem framework. o\n\nThe goal of this project is to rewrite/convert all of this into C++ and add to ScummVM.\n\n### Bring your own Adventure or RPG Reimplementation (only existing games)\n\n*   Technical contacts: Talk to us on Discord, or send us an email.\n*   Difficulty: Hard. You'll need good knowledge of C++, as well as knowledge of (reading) assembly.\n*   Size: 350 hours\n\nOur project consists of re-implementations of classic games, and we have listed a number of potential new game engines that you could work on here on our ideas page. However, you may have a classic 2D Adventure game or Role Playing Game (RPG) you are interested in yourself that is suitable for ScummVM that you would like to reverse engineer and re-implement. If so, great!\n\nAdding a completely new game engine is not easy, and you will have to convince us that you are aware of the challenges involved, that the game you are interested in is feasible, and that you have the necessary skills. Preferably, you will already have done some preliminary investigation, into for example data file formats, disassembly, etc.\n\nPlease come talk to us to see if we have a mentor who would be interested in working with you on such a game. We'd be happy to help out.\n\nSmaller Tasks\n-------------\n\n### Add Keymapper to more games\n\n*   Technical contacts: sev\n*   Difficulty: Easy\n*   Size: 175 or 350 hours, depending on the number of games\n\nScummVM includes a global fully configurable keymapper, but this requires engines to be adapted to use it. The feature documentation: [Keymapper](https://wiki.scummvm.org/index.php?title=Keymapper \"Keymapper\"), some reference implementations: Wintermute has [per-game keymaps](https://github.com/scummvm/scummvm/blob/master/engines/wintermute/keymapper_tables.h); [a pull request](https://github.com/scummvm/scummvm/pull/2428) with adding keymapper to HDB engine; [a commit](https://github.com/scummvm/scummvm/commit/cce713ee4c73504e97eba8b0ca9190e47d279e69) with adding Keymapper to a simpler engine, Griffon.\n\nThe current status can be found at [Keymapper\\_and\\_TTS\\_status](https://wiki.scummvm.org/index.php?title=Keymapper_and_TTS_status \"Keymapper and TTS status\") page.\n\n### Add Text-to-Speech to more games\n\n*   Technical contacts: sev\n*   Difficulty: Easy\n*   Size: 175 or 350 hours, depending on the number of games\n\nScummVM has [Text-to-Speech](https://en.wikipedia.org/wiki/Text-to-speech) (TTS) functionality that we are using for the games that have no speech (or limited options for speech). That improved the usability of the games and, obviously, their accessibility.\n\nThe current status per engine can be found on the [Keymapper\\_and\\_TTS\\_status](https://wiki.scummvm.org/index.php?title=Keymapper_and_TTS_status \"Keymapper and TTS status\") page.\n\nFor each engine, the task varies from straightforward to a mid-complexity:\n\n1.  Identify routines that show text on the screen\n2.  Potentially, clean up text from things like colors and fonts\n3.  Feed this text to TTS\n4.  Define GUI options for triggering the option\n\n### Implementing minigame interface in qdEngine\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Difficulty level: Medium\n*   Size: 175 hours\n\nLast year, we successfully ported qdEngine to ScummVM. However, there are a few smaller tasks left:\n\n*   Implementing interface for advanced mini-games\n*   Fixing pathfinding\n*   Fixing actor lighting in some circumstances\n*   Adding more features to the debugger, written in ImGui\n\nThis could be a good introductory task into general engine development for a well-established engine codebase.\n\nIf you can understand Russian, you may also help with playtesting the rest of the games and perhaps fixing any issues that we discover.\n\n### Porting ALIS engine to ScummVM\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Difficulty level: Medium\n*   Size: 175 hours\n\nALIS (Actor Language Integrated System) is an engine that was used by [Simlarils](https://en.wikipedia.org/wiki/Silmarils_(company)) for most of their games and about 17 of them are expected to work on this engine. There is an engine that is almost complete, it is pretty small, less than 10k lines of code and is distributed under MIT license. [Engline](https://github.com/maestun/alis) and we also have Ghidra projects for the engine.\n\nThe purpose of this task is to port this engine to ScummVM as a separate engine engine.\n\n### YAGA engine\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\") or [strangerke](https://wiki.scummvm.org/index.php?title=User:Strangerke \"User:Strangerke\")\n*   Difficulty level: Medium.\n*   Size: 175 hours\n\nThis engine was used for two later [Humongous Entertainment](https://wiki.scummvm.org/index.php?title=Humongous_Entertainment \"Humongous Entertainment\") games, [Pajama Sam: Life is Rough When You Lose Your Stuff](https://wiki.scummvm.org/index.php?title=Pajama_Sam:_Life_is_Rough_When_You_Lose_Your_Stuff \"Pajama Sam: Life is Rough When You Lose Your Stuff\") and [Putt-Putt: Pep's Birthday Surprise](https://wiki.scummvm.org/index.php?title=Putt-Putt:_Pep%27s_Birthday_Surprise \"Putt-Putt: Pep's Birthday Surprise\"). The engine is basically an extension of Python 2.2. There exists an almost complete reimplementation by cyx [on GitHub](https://github.com/cyxx/linyaga) (which we have permission to use) that can be used as a base, and we also have the complete source code for the original game.\n\nThe task is relatively straightforward, the only difficulty with it is adding Python as an external dependency, but a mentor is there to help. Implementing the missing \"Lip Sync\" feature will be the main part of this task.\n\nThe goal is to bring cyx's code to ScummVM and use the original code as a reference later.\n\n### System for checking the game files integrity\n\n*   Technical contacts: [sev](https://wiki.scummvm.org/index.php?title=User:Sev \"User:Sev\")\n*   Languages: Python, optionally C++\n*   Difficulty: Medium\n*   Size: 175 hours\n\nScummVM requires game data files to operate. Very often, especially when copying from the old media, the files could be damaged. Thus, we need a system that could let the end-users compute all the checksums and compare them with the reference.\n\nThe solution consists of two parts: server and additional functionality within ScummVM. In order to avoid any potential problems with the copyrighted material, only checksums could be passed to the server.\n\nWe already have a bulk of this task implemented but not yet fully integrated with ScummVM. There are two parts: [Server](https://github.com/scummvm/scummvm-sites/tree/integrity), written in Python, and [the original ScummVM Pull Request](https://github.com/scummvm/scummvm/pull/5247).\n\nWe need to complete this task and make it fully functional.\n\nInfrastructure Tasks\n--------------------\n\nFinally, there are always plenty of other practical tasks on our wishlist!\n"}