{"name":"The ns-3 Network Simulator Project","description":"ns-3 is a simulation tool for computer networks.","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/the-ns-3-network-simulator-project","ideas_url":"https://www.nsnam.org/wiki/GSOC2025Projects","logo":"https://summerofcode.withgoogle.com/media/org/the-ns-3-network-simulator-project/0zmaec44y4jcfuj2-360.png","technologies":["python","django","c++"],"topics":["computer networking","network simulation"],"projects":[{"project_name":"Upgrade the AQM Evaluation Suite for ns-3","summary":"Enhances the existing AQM Evaluation Suite for ns-3 to support the latest algorithms and ns-3 functionalities, improving its utility for researchers in packet scheduling and AQM algorithms.","difficulty":"Medium"},{"project_name":"Implementation of Alternative Backoff with ECN (ABE)","summary":"Develops and implements the ABE feature in ns-3 to optimize TCP performance when using ECN by adjusting sender responses to ECN signals differently than traditional packet loss.","difficulty":"Medium"},{"project_name":"ICMP socket and generate/handle ICMP messages (host/net unreachable)","summary":"Introduces an ICMP socket for IPv4 and IPv6 in ns-3, streamlining the process for sending and receiving ICMP packets while avoiding the complexity of raw sockets.","difficulty":"Medium"},{"project_name":"Linux-like Loss Detection Techniques for ns-3 TCP","summary":"Implements advanced loss detection techniques such as FACK and DSACK for ns-3 TCP, aiming to enhance the performance and reliability of TCP packet loss handling.","difficulty":"Medium to Hard"},{"project_name":"AODVv2 Protocol enhancements","summary":"Improves the AODVv2 routing protocol in ns-3 by optimizing performance metrics, implementing address compression, and adding external network routing support.","difficulty":"Medium"},{"project_name":"IPv6 global routing","summary":"Develops a comprehensive global routing solution for IPv6 in ns-3, aiming to automate the configuration of routing tables in larger, more complex network topologies.","difficulty":"Medium"},{"project_name":"Mesh Link Establishment (MLE) protocol","summary":"Focuses on implementing the MLE protocol in ns-3 for establishing secure radio links in IoT networks, ensuring compliance with both IETF and Thread specifications.","difficulty":"Hard"},{"project_name":"5G NR module integration with ns-3-ai","summary":"Integrates the ns-3 5G NR module with AI frameworks to enhance 5G simulations using machine learning techniques, promoting research in network management and optimization.","difficulty":"Medium"},{"project_name":"Lr-WPAN (IEEE 802.15.4) preamble detection support","summary":"Implements preamble detection in the Lr-WPAN module, enhancing its functionality and allowing RSSI support, improving communication reliability in IoT scenarios.","difficulty":"Medium"},{"project_name":"Linux-like CAKE queue discipline for ns-3","summary":"Implements the CAKE queue management framework in ns-3, integrating various functionalities for effective traffic management in home gateways.","difficulty":"Medium to Hard"},{"project_name":"Switched Ethernet","summary":"Creates a switched Ethernet model in ns-3 to simulate high-speed Ethernet networks, providing better representation for complex wired network scenarios.","difficulty":"Medium"}],"jina_response":"Title: GSOC2025Projects - Nsnam\n\nURL Source: https://www.nsnam.org/wiki/GSOC2025Projects\n\nMarkdown Content:\nThis page contains 2025 Google Summer of Code project ideas for ns-3.\n\n*   [GSoC Frequently Asked Questions](https://developers.google.com/open-source/gsoc/faq)\n*   [ns-3's 2025 GSoC Contributor guide](https://www.nsnam.org/wiki/GSOC2025ContributorGuide \"GSOC2025ContributorGuide\")\n*   [GSoC contributor/student guide (not ns-3 specific)](https://developers.google.com/open-source/gsoc/resources/guide)\n*   [2025 GSoC Contributor application template](https://www.nsnam.org/wiki/GSOC2025ApplicationTemplate \"GSOC2025ApplicationTemplate\")\n*   [ns-3's GSoC Mentor guide](https://www.nsnam.org/wiki/GSOCMentorGuide \"GSOCMentorGuide\")\n*   [GSoC Mentor guide (not ns-3 specific)](https://archive.flossmanuals.net/gsocmentoring/index.html)\n*   [GSoC Contributor Selection Process](https://www.nsnam.org/wiki/GSOCSelectionProcess \"GSOCSelectionProcess\")\n*   _Get in contact with the ns-3 team_: [ns-developers mailing list](https://groups.google.com/g/ns-developers) | _chat_ [https://ns-3.zulipchat.com/](https://ns-3.zulipchat.com/)\n\n### About the ns-3 project\n\nns-3 is a discrete-event network simulator, with a particular emphasis on network research and education.\n\nUsers of ns-3 can construct simulations of computer networks using models of traffic generators, protocols such as TCP/IP, and devices and channels such as WiFi, and analyze or visualize the results. Simulation plays a vital role in the research and education process, because of the ability for simulations to obtain reproducible results (particularly for wireless protocol design), scale to large networks, and study systems that have not yet been implemented. A particular emphasis in ns-3 is the high degree of realism in the models (including frameworks for real application and kernel code) and integration of the tool with virtual machine environments and testbeds; we view that researchers need to move more effortlessly between simulation, testbeds, and live experiments, and ns-3 is designed to facilitate that.\n\nns-3 has participated in past GSoCs during 2008-10, 2012-15, and 2017-24. We seek contributors interested in the intersection of wireless and computer networking, performance analysis, and open source software.\n\n### Org admins\n\nGoogle Summer of Code organizational admins for ns-3 are [Tommaso Pecorella](mailto:tpecorella@mac.com) and [Mohit P. Tahiliani](mailto:tahiliani.nitk@gmail.com); contact them with any questions. They also hang out on [Zulip](https://ns-3.zulipchat.com/).\n\n### Mentors\n\nMentors will be paired with contributors based on the projects that are selected. Mentors from companies are welcome, if the employer will permit the mentor sufficient time to perform the mentoring. Prospective mentors should notify Mohit P. Tahiliani or Tommaso Pecorella of interest. Mentors familiar with ns-3 development practices will be preferred, to improve the chances of code merge. We are going to be seeking two-person or multiple-person mentoring teams for projects, to help with the mentoring workload and bring more expertise.\n\nThe current list of prospective mentors can be found among the ideas listed below.\n\n### How to apply\n\nFor students or contributors interested in applying to ns-3 for GSoC, please go through the following list to get started:\n\n*   Read the official [GSoC contributor guide](https://developers.google.com/open-source/gsoc/resources/guide).\n*   Read [ns-3's 2025 GSoC contributor guide](https://www.nsnam.org/wiki/GSOC2025ContributorGuide \"GSOC2025ContributorGuide\")\n*   Look through our [#Project Ideas](https://www.nsnam.org/wiki/GSOC2025Projects#Project_Ideas) below to see if you find a project that interests you.\n*   Review the [tutorial and contributing guide](https://www.nsnam.org/documentation/development-tree/) thoroughly, if you have not already done so.\n*   Once it is posted, look through the [GSoC application template](https://www.nsnam.org/wiki/GSOC2024ApplicationTemplate \"GSOC2024ApplicationTemplate\") to start preparing your proposal. We will wait to see whether we are actually part of GSoC before updating the above link for 2025, but it will be similar to last year's application.\n*   Next, proceed to get in touch with the developers on the mailing list or Zulip chat room and refine your proposal.\n*   In parallel, make sure you prepare a patch as per the patch requirement guidelines. Your application to ns-3 will not be considered if you do not fulfill this requirement.\n\nBelow is a list of [#Project Ideas](https://www.nsnam.org/wiki/GSOC2025Projects#Project_Ideas) proposed by the ns-3 team for Google Summer of Code 2025. Please note that these ideas are not limited to GSoC; anyone is welcome to work on them. Please email the [ns-developers list](https://groups.google.com/g/ns-developers) if you have a different idea that you'd like to work on, to see if a mentor may be interested. Applicants are encouraged to look over this list, pick one that especially interests them, think about it, and discuss potential approaches on the [ns-developers list](https://groups.google.com/g/ns-developers). Previous experience with the Google Summer of Code programs suggests that the more you discuss and refine your proposal on the mailing list beforehand, the stronger the proposal it will develop into, and the higher your chances of being accepted into the program.\n\n> Each project idea within a particular priority has been tagged with the following properties:\n> \n> *   _Required Experience:_ Languages, concepts, or packages with which applicants must be familiar.\n> *   _Bonus Experience:_ Other experience or familiarity which would be greatly helpful to applicants for this project.\n> *   _Interests:_ Areas of particular relevance to this project, and an indicator of where successful contributors might apply their experiences coming out of this project.\n> *   _Difficulty:_ easy, medium or difficult\n> *   _Recommended reading:_ pointers to documentation, papers, specific bugs, etc.\n> \n> Note that all of the projects require some experience and comfort with C++. Project ideas for which C++ is noted as a required experience will require more and deeper familiarity with the language. A similar notion applies to computer networking, BSD sockets, etc: Familiarity is strongly preferred, but is not required except where explicitly noted due to the topic being more advanced in that regard. A few projects are more Python-centric.\n\n### Patch requirement guidelines\n\nIn past years, we have asked applicants to submit a patch related to an open issue or a suggested coding exercise. We are undecided at this time whether we will ask for this in 2025; check back later.\n\n### Mentors: how to participate\n\nThe ns-3 project is open to the proposal of new project ideas by developers interested in being a GSoC mentor. For mentors who're adding project ideas to the list below, please ensure that:\n\n*   The projects are sized such that there can be a code merge by the end of the coding period. The scope of the project should be such that it is very difficult to \\*not\\* have a code merge by the end of the summer.\n*   The proposed projects are not too open-ended. That is, if the deliverables or a clear path to the same are not well understood, it is better kept outside GSOC.\n*   There should be a clear merge path to one of the main project code repositories (ns-3-dev, ns-3-dce, bake) by the end of the summer, either because the patches directly apply to these repositories, or because they apply to an ns-3 module that is in the process of being merged with ns-3-dev.\n\nProject Ideas\n-------------\n\n**Note to contributors:** These ideas are not listed in any priority order. The projects can be grouped depending on their scope and/or their size. Below they are organized according to their scope. Please check each idea for details about its foreseen difficulty level.\n\n### Internet models enhancements\n\n*   [#Upgrade the AQM Evaluation Suite for ns-3](https://www.nsnam.org/wiki/GSOC2025Projects#Upgrade_the_AQM_Evaluation_Suite_for_ns-3) (small size project, 90h)\n*   [#Implementation of Alternative Backoff with ECN (ABE)](https://www.nsnam.org/wiki/GSOC2025Projects#Implementation_of_Alternative_Backoff_with_ECN_(ABE)) (small size project, 90h)\n*   [#ICMP socket and generate/handle ICMP messages (host/net unreachable)](https://www.nsnam.org/wiki/GSOC2025Projects#ICMP_socket_and_generate/handle_ICMP_messages_(host/net_unreachable)) (medium size project, 175h)\n*   [#Linux-like Loss Detection Techniques for ns-3 TCP](https://www.nsnam.org/wiki/GSOC2025Projects#Linux-like_Loss_Detection_Techniques_for_ns-3_TCP) (medium size project, 175h)\n*   [#AODVv2 Protocol enhancements](https://www.nsnam.org/wiki/GSOC2025Projects#AODVv2_Protocol_enhancements) (medium size project, 175h)\n*   [#IPv6 global routing](https://www.nsnam.org/wiki/GSOC2025Projects#IPv6_global_routing) (large size project, 350h)\n*   [#Linux-like CAKE queue discipline for ns-3](https://www.nsnam.org/wiki/GSOC2025Projects#Linux-like_CAKE_queue_discipline_for_ns-3) (large size project, 350h)\n*   [#Switched Ethernet](https://www.nsnam.org/wiki/GSOC2025Projects#Switched_Ethernet) (large size project, 350h)\n\n### IoT models enhancements\n\n*   [#6LoWPAN mesh-under routing enhancements](https://www.nsnam.org/wiki/GSOC2025Projects#6LoWPAN_mesh-under_routing_enhancements) (medium size project, 175h)\n*   [#6LoWPAN neighbor discovery protocol](https://www.nsnam.org/wiki/GSOC2025Projects#6LoWPAN_neighbor_discovery_protocol) (medium size project, 175h)\n*   [#Mesh Link Establishment (MLE) protocol](https://www.nsnam.org/wiki/GSOC2025Projects#Mesh_Link_Establishment_(MLE)_protocol) (large size project, 350h)\n*   [#Lr-WPAN (IEEE 802.15.4) preamble detection support](https://www.nsnam.org/wiki/GSOC2025Projects#Lr-WPAN_(IEEE_802.15.4)_preamble_detection_support) (large size project, 350h)\n\n### 5G NR models enhancements\n\nThe general idea is to improve the usability of the 5G NR module by adding new examples that help users start building scenario scripts, such as an example for the NTN use case. Another way is to create new helpers that simplify the creation of new simulation scripts. Also, an interesting improvement could be integration with other modules, like those for AI or visualizations. Here are some project ideas. Depending on the contributor's interest and skills we can adjust these projects' definitions.\n\n*   [#NTN example for 5G NR](https://www.nsnam.org/wiki/GSOC2025Projects#NTN_example_for_5G_NR) (small size project, 90h)\n*   [#Enabling 5G NR examples visualization](https://www.nsnam.org/wiki/GSOC2025Projects#Enabling_5G_NR_examples_visualization) (medium size project, 175h)\n*   [#Improving 5G NR module usability through helpers](https://www.nsnam.org/wiki/GSOC2025Projects#Improving_5G_NR_module_usability_through_helpers) (medium size project, 175h)\n*   [#5G NR module integration with ns-3-ai](https://www.nsnam.org/wiki/GSOC2025Projects#5G_NR_module_integration_with_ns-3-ai) (large size project, 250h)\n\nSmall sized projects (90 hours)\n-------------------------------\n\n### NTN example for 5G NR\n\nMentors: [Gabriel Ferreira](mailto:gcarvalho@cttc.es), [Amir Ashtari Gargari](mailto:aashtari@cttc.es), [Biljana Bojovic](mailto:bbojovic@cttc.es) and [Katerina Koutlia](mailto:kkoutlia@cttc.es)\n\nThe objective of this project is the creation of a 5G NR example for the NTN use case. The example should provide a typical NTN topology, with a set of cells served by Low-Earth Orbit (LEO) satellites (e.g. Starlink, Kuiper), hence maybe an NTN topology helper could be created as a part of this project. The example should use the ns-3 3GPP NTN channel model. If handover is already functional, satellites should move at orbital speeds in their orbital planes, handing off users to the upcoming cell with LOS. We could explore scenarios (dense urban and urban).\n\nFor starters, we would suggest adding the CTTC 5G-LENA (nr module) to ns-3, in the typical way (as a module in the contrib/ directory), and building and running the examples. Documentation is available from here: [https://5g-lena.cttc.es/](https://5g-lena.cttc.es/). There is an overview tutorial video available here: [https://acmse.net/2021/tutorials-offered/#tut-work03](https://acmse.net/2021/tutorials-offered/#tut-work03). That is the background information.\n\n*   Required Experience: C++ programming, understanding of 5G NR, LTE, and wireless networks\n*   Interests: 5G NR simulations\n*   Difficulty: Medium.\n*   Patch requirement: See the [description](https://www.nsnam.org/wiki/GSOC2024PatchRequirement). You can also consider some of the [nr good to start issues](https://gitlab.com/cttc-lena/nr/-/issues/?label_name%5B%5D=good%20first%20issue). Or, you can start writing some APIs for the selected project proposal. Also, if you have some previous MRs to ns-3 or the nr module, you can contact us to check whether it is enough for the patch requirement.\n\n### Upgrade the AQM Evaluation Suite for ns-3\n\nMentors: [Mohit P. Tahiliani](mailto:tahiliani.nitk@gmail.com)\n\nAQM (Active Queue Management) evaluation suite for ns-3 helps to quickly study the performance of AQM algorithms based on the guidelines mentioned in RFC 7928. This suite automates simulation setup, topology creation, traffic generation, program execution, results collection and their graphical representation using ns-3 based on the scenarios mentioned in RFC 7928. It was designed and developed in 2017 and actively maintained till 2019. In the past few years, the traffic control model in ns-3 has grown significantly in terms of supporting state-of-the-art packet scheduling and AQM algorithms, and the ns-3 build system has changed from waf to cmake. This project has four main goals: (1) upgrade the AQM Evaluation Suite according to the latest ns-3-dev, (2) enable support for latest packet scheduling, AQM algorithms and ECN functionality (3) update the examples in AQM Evaluation Suite to better suit the needs of researchers working in this area, and (4) make AQM Evaluation Suite available on the ns-3 app store.\n\n*   _Required Experience:_ Familiarity with AQM and C++ programming.\n*   _Bonus Experience:_ Familiarity with traffic control model in ns-3.\n*   _Interests:_ Packet Scheduling algorithms, AQM algorithms and ECN.\n*   _Difficulty:_ Medium.\n*   _Recommended Reading:_\n    *   AQM Evaluation Suite \\[[Paper](https://dl.acm.org/doi/abs/10.1145/3067665.3067674)\\] \\[[Implementation](https://aqm-eval-suite.github.io/)\\]\n    *   [RFC 7928](https://tools.ietf.org/html/rfc7928)\n    *   [Traffic Control Model in ns-3](https://www.nsnam.org/docs/models/html/traffic-control-layer.html)\n*   _Patch requirement:_ Create a pull request to handle the case when an incorrect Scenario name or number is passed via command line.\n\n### Implementation of Alternative Backoff with ECN (ABE)\n\nMentors: [Mohit P. Tahiliani](mailto:tahiliani.nitk@gmail.com)\n\nAlternative Backoff with ECN (ABE) is a newly proposed feature to enhance the performance of TCP when ECN is deployed. The main idea of ABE is to make the TCP sender respond differently to an ECN signal than it does for a packet loss. This project intends to implement, test and document this feature in ns-3. Additonally, an example program must be developed to demonstrate the usage of ABE in ns-3.\n\n*   _Required Experience:_ Familiarity with ECN and C++ programming.\n*   _Bonus Experience:_ Familiarity with traffic control model in ns-3.\n*   _Interests:_ Packet Scheduling algorithms, AQM algorithms and ECN.\n*   _Difficulty:_ Medium.\n*   _Recommended Reading:_\n    *   Alternative Backoff with ECN \\[[RFC 8511](https://datatracker.ietf.org/doc/rfc8511)\\] \\[[Paper](http://heim.ifi.uio.no/~naeemk/research/ABE/Networking2017ABE.pdf)\\]\n    *   [ECN support in ns-3](https://www.nsnam.org/docs/models/html/tcp.html#support-for-explicit-congestion-notification-ecn)\n    *   [Traffic Control Model in ns-3](https://www.nsnam.org/docs/models/html/traffic-control-layer.html)\n\nMedium sized projects (175 hours)\n---------------------------------\n\n### ICMP socket and generate/handle ICMP messages (host/net unreachable)\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), [Manoj K. Rana](mailto:manoj24.rana@gmail.com).\n\nThe current IP stack in ns-3 does not provide an ICMP socket, and in order to send or receive ICMP packets (either IPV4 or IPv6) it is necessary to use a \"RAW\" socket. This approach works, but has a severe limitation: it does not work if the packet has been fragmented. Moreover, using a RAW socket is far more complex than a normal socket, as the receiver application must filter the incoming packets according to specific rules.\n\nThe goal of the idea is to create, test, and document an ICMP socket that works both for IPv4 and IPv6, mimicking the Linux sockets **socket(AF\\_INET, SOCK\\_DGRAM, IPPROTO\\_ICMP)** and **socket(AF\\_INET6, SOCK\\_DGRAM, IPPROTO\\_ICMPV6)**. Note that the choice of SOCK\\_DGRAM or SOCK\\_RAW (i.e., with or without the IP header) is totally left to the proposal.\n\nThe most important point of the implementation should be code duplicate minimization, in order to have the minimize maintenance efforts.\n\nOnce the sockets are in place, beside the \"normal\" tests, it will be necessary to modify the code that is actually made obsolete by the new sockets, e.g.:\n\n*   IPv6 ICMP messages (RA, RS, NA, NS, etc.),\n*   IPv4 ICMP messages,\n*   ICMP Echo and ICMPv6 Echo messages.\n\nand to handle properly ICMP error messages like Destination Unreachable in the Ping application.\n\n*   _Required Experience:_ Fundamentals of IPv4 and IPv6 sockets, C++ programming.\n*   _Interests:_ Sockets and API interface implementation.\n*   _Difficulty:_ Medium.\n*   _Recommended reading:_\n    *   [Linux socket](https://man7.org/linux/man-pages/man2/socket.2.html)\n    *   [Raw Sockets and ICMP, Srinidhi Varadarajan](https://courses.cs.vt.edu/cs4254/fall04/slides/raw_1.pdf)\n    *   [Issue #810](https://gitlab.com/nsnam/ns-3-dev/-/issues/810)\n\nPossible tasks to fulfill the patch requirement:\n\n*   Submit a patch to fix [Issue #809](https://gitlab.com/nsnam/ns-3-dev/-/issues/809)\n\n### 6LoWPAN mesh-under routing enhancements\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), \\[TBD\\].\n\nThe 6LoWPAN module offers a simple option to implement a multi-hop topology by using a contolled flooding. However, the implemented controlled flooding is very simple, and is not efficient in complex networks. This is mainly due to the lack of congestion control, or rather its naive implementation. A better approach would be to borrow some concepts and ideas from RFC 7731 Multicast Protocol for Low-Power and Lossy Networks (MPL), so that messages do not generate network congestions when the network is large.\n\nThe candidate should outline what parts of code are going to be affected, and how they can be enhanced thanks to RFC 7731.\n\n*   _Required Experience:_ Fundamentals of IPv6 addressing, C++ programming.\n*   _Bonus Experience:_ Familiarity with mesh routing and 6LoWPAN ns-3\n*   _Interests:_ IPv6 mesh routing\n*   _Difficulty:_ Easy.\n*   _Recommended reading:_\n    *   [Mesh-under in ns-3 6LoWPAN](https://www.nsnam.org/docs/models/html/sixlowpan.html#mesh-under-routing)\n    *   [RFC 7731](https://datatracker.ietf.org/doc/html/rfc7731)\n\nPossible tasks to fulfill the patch requirement:\n\n*   TBD\n\n### 6LoWPAN neighbor discovery protocol\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), \\[TBD\\].\n\nThe 6LoWPAN-ND (RFCs 4944, 6775, and 8505) is a replacement for IPv6 DAD and NDP for 6LoWPAN networks, and it is important to ensure address uniquness across a network that can potentially use different MAC/PHY layers.\n\nThere is a model for 6LoWPAN-ND, but it still not merged in the main ns-3 branch. The goal is to cleanup the implementation, remove an actual limitation due to a questionble assumption, and to add the support for multi-hop operations (EDAR and EDAC messages).\n\nThe candidate should outline in the proposal the parts of the code should be modified, and how. The repository for 6LoWPAN-ND is necessary, and the link will be shared upon request.\n\n*   _Required Experience:_ Fundamentals of IPv6 addressing, C++ programming.\n*   _Bonus Experience:_ Familiarity with 6LoWPAN and 6LoWPAN-ND\n*   _Interests:_ IPv6 and IoT networks\n*   _Difficulty:_ Easy.\n*   _Recommended reading:_\n    *   [RFC 8505](https://datatracker.ietf.org/doc/html/rfc8505)\n    *   [RFC 6775](https://datatracker.ietf.org/doc/html/rfc6775)\n    *   [RFC 4944](https://datatracker.ietf.org/doc/html/rfc4944)\n\nPossible tasks to fulfil the patch requirement:\n\n*   Patch the actual 6LoWPAN-ND to remove the limitation about concurrent address registrations.\n\n### Improving 5G NR module usability through helpers\n\nMentors: [Biljana Bojovic](mailto:bbojovic@cttc.es),[Gabriel Ferreira](mailto:gcarvalho@cttc.es), [Katerina Koutlia](mailto:kkoutlia@cttc.es) and [Amir Ashtari Gargari](mailto:aashtari@cttc.es)\n\nThis project would be focused on improving the usability of the 5G nr module by enabling new helper support. The new helpers should allow for simplifying the setup of NR applications, XR applications, scenarios, the management of the configuration of many parameters of the scenario, etc. All the NR examples should be updated to make use of these new helpers. The use of such helpers would help reduce significantly the code duplication in 5G NR examples.\n\nFor starters, we would suggest adding the CTTC 5G-LENA (nr module) to ns-3, in the typical way (as a module in the contrib/ directory), and building and running the examples. Documentation is available from here: [https://5g-lena.cttc.es/](https://5g-lena.cttc.es/). There is an overview tutorial video available here: [https://acmse.net/2021/tutorials-offered/#tut-work03](https://acmse.net/2021/tutorials-offered/#tut-work03). That is the background information.\n\n*   Required Experience: C++ programming, understanding of 5G NR, LTE, and wireless networks\n*   Interests: 5G NR simulations\n*   Difficulty: Medium.\n*   Patch requirement: See the [description](https://www.nsnam.org/wiki/GSOC2024PatchRequirement). You can also consider some of the [nr good to start issues](https://gitlab.com/cttc-lena/nr/-/issues/?label_name%5B%5D=good%20first%20issue). Or, you can start writing some APIs for the selected project proposal. Also, if you have some previous MRs to ns-3 or the nr module, you can contact us to check whether it is enough for the patch requirement.\n\n### Enabling 5G NR examples visualization\n\nMentors: [Amir Ashtari Gargari](mailto:aashtari@cttc.es), [Gabriel Ferreira](mailto:gcarvalho@cttc.es), [Biljana Bojovic](mailto:bbojovic@cttc.es) and [Katerina Koutlia](mailto:kkoutlia@cttc.es)\n\nThe main idea of this project is to allow easier visualization of 5G NR examples by integrating the NR module with some ns-3 visualization tools like NetAnim, or by implementing a kind of web-based visualization, e.g., through Jupyter notebook. The new feature should allow the visualization of already existing traces, visualization of topology, or even some new relevant simulation aspects could be considered. The idea is that users better understand how the metrics collection works, and how changing parameters can affect simulation results. In this project, we are open to other ideas on how to implement visualizations.\n\nFor starters, we would suggest adding the CTTC 5G-LENA (nr module) to ns-3, in the typical way (as a module in the contrib/ directory), then building and running the examples. After getting used to C++, then proceed to use the Python bindings, as described by the documentation: [https://www.nsnam.org/docs/manual/html/python.html#using-the-bindings-from-the-ns-3-source](https://www.nsnam.org/docs/manual/html/python.html#using-the-bindings-from-the-ns-3-source). Documentation is available here: [https://5g-lena.cttc.es/](https://5g-lena.cttc.es/). There is an overview tutorial video available here: [https://acmse.net/2021/tutorials-offered/#tut-work03](https://acmse.net/2021/tutorials-offered/#tut-work03). That is the background information. For more specific guidelines, please view this [Google document](https://docs.google.com/document/d/1cQLIF1cdft1yj3vyWrjrxN2xDJMx8PuWaa9NP_nKf64/edit?usp=sharing).\n\n*   Required Experience: C++ and Python programming, understanding of 5G NR, LTE, and wireless networks\n*   Interests: 5G NR simulations\n*   Difficulty: Medium.\n*   Patch requirement: See the [description](https://www.nsnam.org/wiki/GSOC2024PatchRequirement). You can also consider some of the [nr good to start issues](https://gitlab.com/cttc-lena/nr/-/issues/?label_name%5B%5D=good%20first%20issue). Or, you can start writing some APIs for the selected project proposal. Also, if you have some previous MRs to ns-3 or the nr module, you can contact us to check whether it is enough for the patch requirement.\n\n### Linux-like Loss Detection Techniques for ns-3 TCP\n\nMentors: [Mohit P. Tahiliani](mailto:tahiliani.nitk@gmail.com)\n\nForward Acknowledgement (FACK), Duplicate Selective Acknowledgement (DSACK), and Recent Acknowledgement (RACK) Tail Loss Probe (TLP) are the loss detection techniques implemented in the Linux kernel. These techniques have been already implemented for ns-3 TCP but their code is not yet merged into the mainline. This project has four main goals: (1) update the implementation of these techniques according to the latest ns-3-dev, (2) develop a framework to test the functionality of these techniques, (3) develop example program(s) to demonstrate the usage of these techniques in ns-3 and (4) merge these techniques in the mainline of ns-3.\n\n*   _Required Experience:_ Familiarity with TCP and C++ programming.\n*   _Bonus Experience:_ Familiarity with TCP implementation in Linux kernel.\n*   _Interests:_ TCP packet loss detection techniques.\n*   _Difficulty:_ Medium to Hard.\n*   _Recommended Reading:_\n    *   Forward Acknowledgement (FACK) \\[[Paper](https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.41.2559&rep=rep1&type=pdf)\\] \\[[Implementation](https://gitlab.com/nsnam/ns-3-dev/-/merge_requests/34/commits)\\]\n    *   Duplicate Selective Acknowledgment (DSACK) \\[[RFC 2883](https://tools.ietf.org/html/rfc2883)\\] \\[[Implementation](https://gitlab.com/nsnam/ns-3-dev/-/merge_requests/34/commits)\\]\n    *   RACK-TLP \\[[RFC 8985](https://datatracker.ietf.org/doc/html/rfc8985)\\] \\[[Implementation](https://gitlab.com/nsnam/ns-3-dev/-/merge_requests/34/commits)\\]\n\n### AODVv2 Protocol enhancements\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), \\[TBD\\].\n\nns-3 contains models for proactive (DSDV and OLSR) and reactive (AODV and DSR) ad hoc routing protocols. AODVv2 is currently an IETF draft, and its implementation in ns-3 is ongoing. This project aims at enhancing the AODVv2 model for ns-3.\n\nIn particular the project should address the following points: 1) AODVv2 performances, 2) AODV address compression, 3) \"external\" network routing support, 4) general model validation against the latest draft. Collaboration with the draft authors is also highly suggested.\n\n*   _Required Experience:_ Fundamentals of IPv6 addressing, C++ programming.\n*   _Bonus Experience:_ Familiarity with AODV implementations in ns-3 and AODVv2\n*   _Interests:_ Ad hoc routing\n*   _Difficulty:_ Medium.\n*   _Recommended reading:_\n    *   [IPv6 model in ns-3](https://www.nsnam.org/docs/models/html/ipv6.html)\n    *   [AODV model in ns-3](https://www.nsnam.org/docs/models/html/aodv.html)\n    *   [Ad Hoc On-demand Distance Vector Version 2 (AODVv2) Routing](https://datatracker.ietf.org/doc/draft-perkins-manet-aodvv2/05/)\n\nPossible tasks to fulfill the patch requirement:\n\n*   [Issue #368](https://gitlab.com/nsnam/ns-3-dev/-/issues/368) - aodv: aodv parameters can be set to \"impossible\" values\n\nLarge projects (350 hours)\n--------------------------\n\n### IPv6 global routing\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), \\[TBD\\].\n\nCreating a complex topology can be a problem, and sometimes the user do not want to be (also) concerned about setting up dynamic routing protocols (e.g., RIP, RIPng). For IPv4, ns-3 provides two alternatives: GlobalRouting, and NixRouting, which just \"do the trick\" - they simply fill the routing tables in intermediate nodes, GlobalRouting using an approach similar to OSPF, NixRouting by leveraging the \"abstract\" knowledge of the network. Neither actually use any message between the nodes, so they also reduce the network overhead - something that is useful in many cases.\n\nThe problem is that GlobalRouting don't work for IPv6 (NixRouting was migrated to IPv6 recently), and that's a huge limitation. The goal of the project is to fix that limitation. Note that the project must cope with different IPv6 address kinds (link-local, global, scoped multicast, etc.).\n\nThe most important point of the implementation should be code duplicate minimization, in order to have the minimize maintenance efforts. The proposer is advised to check the approach used for NixRouting, as it might be a starting point.\n\n*   _Required Experience:_ Fundamentals of IPv6 addressing, C++ programming.\n*   _Bonus Experience:_ Familiarity with GlobalRouting implementations in ns-3\n*   _Interests:_ IPv6 routing\n*   _Difficulty:_ Medium.\n*   _Recommended reading:_\n    *   [IPv6 model in ns-3](https://www.nsnam.org/docs/models/html/ipv6.html)\n    *   [GlobalRouting model in ns-3](https://www.nsnam.org/docs/models/html/routing-overview.html#global-centralized-routing)\n\nPossible tasks to fulfill the patch requirement:\n\n*   Add a function to print the path that a packet will use (according to Ipv4GlobalRouting), i.e., given source and destination IP print the IP addresses of the nodes that Ipv4GlobalRouting will use.\n\n### Mesh Link Establishment (MLE) protocol\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), TBD.\n\nThe Mesh Link Establishment (MLE) is a proposed IETF protocol for establishing and configuring secure radio links in IoT networks. It was originally proposed for IEEE 802.15.4, and the IETF draft seems to be not progressing. However, MLE is being used in Thread, and it can be useful to implement it.\n\nThe goal of the project is to study the differences between the IETF version of MLE and the one being used in Thread, and propose an implementation that complies with either, or both.\n\n*   _Required Experience:_ Fundamentals of IPv4 and IPv6 sockets, C++ programming.\n*   _Interests:_ Sockets and API interface implementation.\n*   _Difficulty:_ Hard.\n*   _Recommended reading:_\n    *   [MLE draft](https://datatracker.ietf.org/doc/html/draft-ietf-6lo-mesh-link-establishment)\n    *   [Thread primer](https://openthread.io/guides/thread-primer/network-discovery)\n    *   [Thread specifications](https://www.threadgroup.org/ThreadSpec)\n\nPossible tasks to fulfill the patch requirement:\n\n*   TBD, contact the mentors if interested.\n\n### Lr-WPAN (IEEE 802.15.4) preamble detection support\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), [Alberto Gallegos Ramonet](mailto:alramonet@is.tokushima-u.ac.jp).\n\nA preamble is a series of defined bits that signal the data transmission between two or more devices. The current Lr-WPAN module takes into consideration the preamble transmission time but it does not support preamble detection (hence there is no chance of detection failure). Implementing preamble detection would have the added benefit of adding RSSI support to the Lr-WPAN module which itself has many added benefits.\n\nThis project touches on some core PHY functions of the Lr-WPAN module (the detection of packets). Unlike similar ns-3 modules, Lr-WPAN is relatively simple, therefore, it is a good opportunity to learn about Lr-WPAN and how PHYs are handled in ns-3.\n\nAs usual, reduction of code duplicity and a flexible scalable design is desired (e.g. Allow the inclusion of different preambles in the future).\n\n*   _Required Experience:_ Basic understanding of IEEE 802.15.4, C++ programming.\n*   _Bonus Experience:_ PHY process familiarity, Familiarity with ns-3's Lr-WPAN\n*   _Interests:_ Lr-WPAN, MAC and PHY designs\n*   _Difficulty:_ Medium.\n*   _Recommended reading:_\n    *   [IEEE 802.15.4-2006](https://ieeexplore.ieee.org/document/1700009)\n    *   [IEEE 802.15.4-2015](https://ieeexplore.ieee.org/document/7460875)\n    *   [ns-3 lr-wpan module](https://www.nsnam.org/docs/models/html/lr-wpan.html)\n\nPossible tasks to fulfill the patch requirement:\n\n*   TBD, contact the mentors if interested.\n\n### 5G NR module integration with ns-3-ai\n\nMentors: [Katerina Koutlia](mailto:kkoutlia@cttc.es), [Gabriel Ferreira](mailto:gcarvalho@cttc.es), [Amir Ashtari Gargari](mailto:aashtari@cttc.es) and [Biljana Bojovic](mailto:bbojovic@cttc.es)\n\nThe objective of this project is to integrate the ns-3 5G NR module with [ns-3-ai](https://apps.nsnam.org/app/ns3-ai/). In GSoC 2024 we had a project in which 5G NR was integrated with [ns-3 gym](https://www.nsnam.org/wiki/GSOC2024RLUsability5G). While ns-3 gym is a popular ns-3 module for AI, it is limited to the application of reinforcement learning machine learning techniques in networking research. On the other hand, ns-3-ai module provides a more general solution that enables the data interaction between ns-3 and other Python-based AI frameworks, like [Tensorflow C++ APIs](https://www.tensorflow.org/api_docs/cc) and [PyTorch C++ APIs](https://pytorch.org/cppdocs/), which opens the door to the use different machine learning-based techniques in 5G NR models. The correct functioning of the integration should be tested, and documented, and a fully working example using ns-3-ai should be provided. The contributor can propose a use-case scenario for matching learning. One option is to use it for MAC scheduling, but it could be used for other research problems, and the contributor is encouraged to propose the use case of his/her interest.\n\nFor starters, we would suggest adding the CTTC 5G-LENA (nr module) to ns-3, in the typical way (as a module in the contrib/ directory), and building and running the examples. Documentation is available from here: [https://5g-lena.cttc.es/](https://5g-lena.cttc.es/). There is an overview tutorial video available here: [https://acmse.net/2021/tutorials-offered/#tut-work03](https://acmse.net/2021/tutorials-offered/#tut-work03). That is the background information. For more specific guidelines, please view this [Google document](https://docs.google.com/document/d/1cQLIF1cdft1yj3vyWrjrxN2xDJMx8PuWaa9NP_nKf64/edit?usp=sharing).\n\n*   Required Experience: C++ programming, understanding of 5G NR, LTE, and wireless networks\n*   Interests: 5G NR simulations\n*   Difficulty: Medium.\n*   Patch requirement: See the [description](https://www.nsnam.org/wiki/GSOC2024PatchRequirement). You can also consider some of the [nr good to start issues](https://gitlab.com/cttc-lena/nr/-/issues/?label_name%5B%5D=good%20first%20issue). Or, you can start writing some APIs for the selected project proposal. Also, if you have some previous MRs to ns-3 or the nr module, you can contact us to check whether it is enough for the patch requirement.\n\n### Linux-like CAKE queue discipline for ns-3\n\nMentors: [Mohit P. Tahiliani](mailto:tahiliani.nitk@gmail.com)\n\nCommon Applications Kept Enhanced (CAKE) is the most recent queue discipline added in Linux 4.19. It is a comprehensive queue management framework targeted for home Internet gateways, and integrates the following four components: bandwidth shaping, a new Active Queue Management (AQM) algorithm called COBALT (CoDel BLUE Alternate), handling Differentiated Services (DiffServ) and TCP ACK filtering. The main tasks in this project include: implementation, testing and documentation of individual components of CAKE in ns-3, followed by the integration of these components to form CAKE queue discipline in ns-3.\n\n*   _Required Experience:_ Familiarity with queue disciplines, TCP and C++ programming.\n*   _Bonus Experience:_ Familiarity with CAKE framework in Linux 4.19\n*   _Interests:_ Active Queue Management, Packet scheduling and TCP.\n*   _Difficulty:_ Medium to Hard\n*   _Recommended reading:_\n    *   [Piece of CAKE: A Comprehensive Queue Management Solution for Home Gateways](https://arxiv.org/pdf/1804.07617.pdf)\n    *   [Let them run CAKE](https://lwn.net/Articles/758353/)\n    *   [Queue disciplines in ns-3](https://www.nsnam.org/docs/models/html/queue-discs.html)\n\n### Switched Ethernet\n\nMentors: [Tommaso Pecorella](mailto:tommaso.pecorella@unifi.it), TBD.\n\nThe current ns-3 models for wired connections are fine for simple networks, but the lack of a switched Ethernet model is a limitation in some cases.\n\nThe goal of the idea is to create, test, and document a Switched Ethernet model, able to simulate (at least) 1, 10, and 40 GbE links and model for a switch.\n\nThe model of the NetDevice and Channel shall take into account the link delays and errors, similarly to what is done by the point-to-point model. Futhermore, it should be able to set the link speed and if it is full-duplex or half-duplex. Additional support for flow control is a bonus, but not strictly required. Link speed auto-negotiation is not considered to be interesting.\n\nThe model for the switch should be modular (i.e., allowing the development of different switch types), and include auto-learning of I/O ports based on the MAC address, i.e., have a MAC/port table, and a basic store-and-forward operation. Features like advanced I/O buffer handling and ARP/NDP spoofing detection are not a priority and shall be left for future implementations.\n\nThe model should consider the future implementaion of algorithms like VLANs (IEEE 802.1Q, 802.1ad), and the Spanning Tree Protocol (IEEE 802.1D, 802.1w, and 802.1s). Their implementaion is not required, but the model design should allow their development.\n\n*   _Required Experience:_ Fundamentals of Ethernet sitched networking, C++ programming.\n*   _Interests:_ Ethernet networks and switched data networks.\n*   _Difficulty:_ Medium.\n*   _Recommended reading:_\n    *   [Basic implementation (very old)](https://www2.nsnam.org/bugzilla/show_bug.cgi?id=2602)\n    *   [Full-duplex CSMA, somehow related](https://gitlab.com/nsnam/ns-3-dev/-/merge_requests/431)\n\nPossible tasks to fulfill the patch requirement:\n\n*   TBD, contact the mentors if interested.\n"}