{"name":"Open Science Initiative for Perfusion Imaging","description":"Open access resources for perfusion imaging","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/open-science-initiative-for-perfusion-imaging","ideas_url":"https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub","logo":"https://summerofcode.withgoogle.com/media/org/open-science-initiative-for-perfusion-imaging/bxlqptrs5g0ovtqz-360.png","technologies":["python","github"],"topics":["artificial intelligence","data visualization","data analysis","medical imaging","reproducible science"],"projects":[{"project_name":"OSIPI Unified Software Package Development","summary":"Develop a unified software package for quantitative MRI that consolidates different perfusion techniques into submodules, allowing for collaborative contributions and future expansion.","difficulty":"Moderate/Difficult"},{"project_name":"DCE Module","summary":"Create a module for Dynamic Contrast Enhanced (DCE) MRI to standardize data processing and implement pharmacokinetic modeling algorithms.","difficulty":"Moderate/Difficult"},{"project_name":"Blood-Brain Barrier Module","summary":"Focus on modeling blood-brain barrier water exchange to simplify estimation for ASL and DCE-MRI data.","difficulty":"Difficult"},{"project_name":"ASL Module","summary":"Redesign the ASL software architecture for modular testing and application in broader contexts beyond brain imaging.","difficulty":"Moderate"},{"project_name":"Preclinical ASL Module","summary":"Extend the ASL package for preclinical imaging, standardizing protocols and processing tools for small animals.","difficulty":"Moderate"},{"project_name":"Automated Testing for ASL Module","summary":"Develop automation for testing the ASL processing module, implementing CI/CD pipelines for streamlined updates and results publication.","difficulty":"Moderate"},{"project_name":"IVIM Module Testing Framework","summary":"Enhance the IVIM repository's testing framework for AI and Bayesian models, improving flexibility and usability across model architectures.","difficulty":"Moderate"},{"project_name":"Standardized Scoring Pipeline for Challenges","summary":"Create a standardized analysis pipeline for future OSIPI challenges to streamline data analysis across different studies.","difficulty":"Moderate"},{"project_name":"Methods Section Generator for ASL","summary":"Build a tool to extract ASL MRI metadata for easy generation of standard Methods sections in publications.","difficulty":"Moderate"},{"project_name":"Knowledge Atlas for OSIPI Lexicon","summary":"Migrate existing lexicons to a database for better accessibility and develop a web app to enhance user interaction with the content.","difficulty":"Moderate"},{"project_name":"Unified HTML Documentation Pages","summary":"Standardize OSIPI documentation into a unified style for better organization and accessibility across various projects.","difficulty":"Easy"},{"project_name":"Dockerized Data Processing Pipeline","summary":"Create a modular, containerized pipeline for medical imaging data processing, facilitating cross-platform integration and visual orchestration.","difficulty":"Moderate"},{"project_name":"GitHub Testing for ExploreASL Pipeline","summary":"Set up automated GitHub actions for the ExploreASL pipeline testing, improving software integrity through better automated testing workflows.","difficulty":"Easy"}],"jina_response":"Title: IdeasList_GSoC2025_OSIPI_Public\n\nURL Source: https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub\n\nMarkdown Content:\n![Image 1](https://lh7-rt.googleusercontent.com/docsz/AD_4nXcjwkQvsULJCC8B3C3es0WRzms7QPHj7Ce-21dG3MH1YkqSHR6lR256LqGg7bhekeEfnvPRze1qkU_cKImoaLz7abg-qMLFAkKkrnj6ilg6PuB11dz5Fnm_4xWiRZiNCQ?key=KiPSP1TEAIMd5fVyKUbpdqEH)\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nProject list of OSIPI for GSoC 2025\n-----------------------------------\n\nIntroduction\n------------\n\nOur organization deals with a sub-domain of medical imaging – quantitative MRI. Our projects then work with several different imaging techniques called DSC, DCE, ASL, and IVIM. While our project descriptions contain specific terminology, we do not require deep knowledge of the field, unless explicitly mentioned otherwise. Our mentors will provide all the necessary domain expertise so that the contributors will be able to focus on the tasks at hand.\n\nPython development:\n\nWhere the current software resources of OSIPI are in separate repositories split by perfusion technique (ASL, DCE/DSC, and IVIM), our overall aim is to develop a unified OSIPI software package, where each technique is a submodule in the overall package. This will require a collaborative effort from multiple developers and is not expected to be fully developed through GSoC. Here we defined multiple medium to large subprojects to make the next steps towards the unified project.\n\n*   Extend and consolidate previous packages to implement several modeling and data processing options: [DCE module](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.cxbwzvjsu91), [BBB module](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.h6g4dgb1zj4d).\n*   Implement a general interface for ASL pipelines: [ASL module](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.18yr59fdijal), [Preclinical extension](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.ul58hr8ma6vr), [Testing module](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.semje7cy4s3)\n*   Work on introducing a novel processing module: [IVIM package](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.nwg9lbhqk4nn)\n*   Implement a framework for scoring results from the [ASL challenge](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.lv03nys46nca), comparing several ASL pipelines.\n\nDatabase and web development:\n\n*   Extract ASL metadata and use them in a [Methods section generator](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.p4yrczf7z8c5)\n*   Web app to organize and display a [lexicon](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.2ym3lesf8lfk)\n*   Short project to work on [HTML page output](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.r831uhgcfk9r)\n\nAutomation and infrastructure:\n\n*   Create a dockerized version of the [IVIM pipeline](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.15139uollv6)\n*   A short project to implement [automatic ExploreASL pipeline testing](https://docs.google.com/document/d/e/2PACX-1vSuYh57hsLUXbmrA5tozX4Ucne0sRXnmFt5xBA88gzDZJKZYD4-Bq04J9acer2d_i6NP6xhimmz4m5i/pub#id.vu9vo4xa8cy9) on GitHub\n\nGeneral GitHub link: [https://github.com/OSIPI](https://www.google.com/url?q=https://github.com/OSIPI&sa=D&source=editors&ust=1740814660196194&usg=AOvVaw2re0ED3_GW636B0zi_eR65)\n\nPython development\n------------------\n\n### OSIPI package – DCE Module\n\nProposed mentors: Luis Torres, Sirisha Tadimalla\n\nLanguages/skills: Python\n\nEstimated project length: 350 hours\n\nDifficulty: Moderate/Difficult\n\nCategory: Core development\n\nRelevant links: [OSIPI python package](https://www.google.com/url?q=https://github.com/OSIPI/osipi&sa=D&source=editors&ust=1740814660197119&usg=AOvVaw3aNyqYzp9t8v0asavExKX6), [GSoC 2024 project](https://www.google.com/url?q=https://summerofcode.withgoogle.com/archive/2024/projects/2DW9kdMF&sa=D&source=editors&ust=1740814660197275&usg=AOvVaw3D5gxq4iQmerTVQYtgwYIe)\n\nDescription: Building on the foundational work from last year’s GSoC project—which [established the core infrastructure](https://www.google.com/url?q=https://summerofcode.withgoogle.com/archive/2024/projects/2DW9kdMF&sa=D&source=editors&ust=1740814660197522&usg=AOvVaw3Rcmue0D1zQKpKmTIl8z1M) for the OSIPI perfusion package—this project focuses on creating the Dynamic Contrast Enhanced (DCE) MRI module. In keeping with OSIPI’s lexicon and guidelines, the DCE module will introduce a standardized toolkit for processing DCE datasets. Specifically, the contributor will implement robust data read/write functionalities, standard pharmacokinetic modeling algorithms, and advanced deconvolution methods to derive quantitative perfusion parameters — providing an end-to-end solution that simplifies the DCE image processing pipeline.\n\nExpected outcomes:\n\nThe key outcome of this project will be the DCE module for our unified OSIPI package.\n\n*   Methods for handling DICOM and NIFTI/BIDS data.\n*   Methods for Pharmacokinetic Modeling for Estimation of Physiological Parameters\n*   Robust unit-testing\n*   Documentation\n\nRequirements:\n\n*   (Minimum) Background in linear algebra and python\n*   (Recommended) Git, Image Processing\n*   (Ideal) Background in medical image processing\n\n### OSIPI package – Blood-brain barrier module\n\nProposed mentors: Ben Dickie, Jan Petr\n\nLanguages/skills: Python\n\nEstimated project length: 350 hours\n\nDifficulty: Difficult\n\nCategory: Optimization\n\nRelevant links: [ExploreASL](https://www.google.com/url?q=https://github.com/ExploreASL/ExploreASL/&sa=D&source=editors&ust=1740814660199855&usg=AOvVaw0sIRzFSfY1PQWnZnX0-pIw), [DCE module - GSoC 2024 project](https://www.google.com/url?q=https://summerofcode.withgoogle.com/archive/2024/projects/2DW9kdMF&sa=D&source=editors&ust=1740814660200093&usg=AOvVaw0Kbue6aYcsNx8_fB9XxTfW)\n\nProject description: Building on the foundational work from last year’s GSoC project—which [established the core infrastructure](https://www.google.com/url?q=https://summerofcode.withgoogle.com/archive/2024/projects/2DW9kdMF&sa=D&source=editors&ust=1740814660200466&usg=AOvVaw0wS6XLEydmUzG8i1rtVxG1) for the OSIPI perfusion package—this project focuses on creating the functionality to model blood-brain barrier (BBB) water exchange. Specifically, the contributor will implement robust data read/write functionalities,and create Python functions to model BBB exchange — providing an end-to-end solution that simplifies and standardizes the estimation of BBB water exchange for ASL and DCE-MRI data.\n\nExpected outcomes:\n\nThe key outcome of this project will be the BBB module for our unified OSIPI package:\n\n*   Methods for handling DICOM and NIFTI/BIDS data.\n*   Methods for Pharmacokinetic Modeling for Estimation of Physiological Parameters of azeeBBB transfer in DCE and ASL data\n*   Robust unit-testing\n*   Documentation\n\nRequirements:\n\n*   (Minimum) Background in linear algebra\n*   (Recommended) Git, Image Processing and Python Modeling (e.g. SciPy, NumPy)\n*   (Optional) Background in medical image processing\n\n### OSIPI package - ASL module\n\nProposed mentors: Maria Mora, Zhiliang Wei\n\nLanguages/skills: Python\n\nEstimated project length: 350 hours\n\nDifficulty: Moderate\n\nCategory: Core development\n\nRelevant links: [OSIPI Task Force 2.2](https://www.google.com/url?q=https://osipi.ismrm.org/task-forces/task-force-2-2/&sa=D&source=editors&ust=1740814660203024&usg=AOvVaw3i6FPMnXC_jdRV4EifJdfy),  [ISMRM 2022 abstract](https://www.google.com/url?q=https://archive.ismrm.org/2022/0914.html&sa=D&source=editors&ust=1740814660203265&usg=AOvVaw2U0beNVgcVKYJrSQ0c0umM), [PyASLtoolbox](https://www.google.com/url?q=https://github.com/OSIPI/TF2.2_OSIPI-ASL-toolbox/tree/main/PyASL&sa=D&source=editors&ust=1740814660203485&usg=AOvVaw38DL1uk5PHXpoY8FlRbKG2), [GSoC 2024 project](https://www.google.com/url?q=https://summerofcode.withgoogle.com/archive/2024/projects/xz92GQuc&sa=D&source=editors&ust=1740814660203712&usg=AOvVaw3D14G70eE6BBNlWvcL0BJA)\n\nProject description: The current version of the ASL module has no modularity to explore and test different preprocessing snippets (i.e., algorithms) across pipelines. In addition, these tools are designed for brain imaging and lack adaptability for broader applications beyond the brain. A modular PyASL library will bridge this gap, providing researchers and developers with a versatile platform to test and integrate new functionalities more efficiently, tailor pipelines to specific research needs, and support algorithmic exploration for population- or organ-specific ASL imaging processing.\n\nExpected outcomes:\n\n1.  Redesign of the current PyASL architecture to incorporate modularity such that it can be integrated in the unified Python package, i.e., break down the existing pipelines into preprocessing snippets.\n2.  Modification of current CBF quantification methods is also needed to quantify perfusion in other organs.\n3.  Implementation of a framework for developers to add or modify specific preprocessing snippets or quantification approaches.\n4.  Documentation of the improved PyASL.\n\nRequirements:\n\n*   (Minimum) Python proficiency\n*   (Recommended) Experience in modular software design.\n*   (Ideal) Familiarity with neuroimaging preprocessing pipelines.\n\n### OSIPI package - ASL module extension for preclinical imaging\n\nProposed mentors: Zhiliang Wei, Maria Mora\n\nLanguages/skills: Python/Matlab\n\nEstimated project length: 175 h\n\nRelevant links: [OSIPI TF 2.2](https://www.google.com/url?q=https://osipi.ismrm.org/task-forces/task-force-2-2/&sa=D&source=editors&ust=1740814660205835&usg=AOvVaw26d53iG01r5vnyhQw5wUIf), [ISMRM abstract 2022](https://www.google.com/url?q=https://archive.ismrm.org/2022/0914.html&sa=D&source=editors&ust=1740814660206030&usg=AOvVaw2gSJqh991UJV1clo95mWH5), [PyASL at GitHub](https://www.google.com/url?q=https://github.com/OSIPI/TF2.2_OSIPI-ASL-toolbox/tree/main/PyASL&sa=D&source=editors&ust=1740814660206200&usg=AOvVaw30UHkvb1ZB6-Nfe1Y0pPUt), [GSoC 2024 project](https://www.google.com/url?q=https://summerofcode.withgoogle.com/archive/2024/projects/xz92GQuc&sa=D&source=editors&ust=1740814660206385&usg=AOvVaw1UQMZvrv5o20OUria0yAbB)\n\nDifficulty: Moderate\n\nCategory: Core development\n\nProject description: The first version of the library was done within GSoC 2024. This project aims to extend the current repository with a preclinical ASL package, including scanner method files, parameter protocols, and data processing codes. Harmonizing processing is difficult when data comes from various sequences. There are too many variations to be considered. The preclinical ASL is a good chance to try standardization from sequences to imaging parameters and subsequently to processing.\n\nExpected outcomes:\n\n1.  Established perfusion imaging package (including sequence, protocol, and processing tool) for small animals\n2.  Pulsed and pseudo-continuous ASL packages usable for preclinical studies\n\nRequirements:\n\n*   (Minimum) Python proficiency\n*   (Recommended) Experience in modular software design\n*   (Ideal) Basic knowledge of neuroimaging processing\n\n### OSIPI package - automated testing for ASL module\n\nProposed mentors: Azeez Adebimpe, Yifan Shuai, Maria Mora\n\nLanguages/skills: Python, CI/CD (GitHub Actions, Travis CI), pytest\n\nEstimated project length: 175\n\nLinks: [OSIPI TF 2.2](https://www.google.com/url?q=https://osipi.ismrm.org/task-forces/task-force-2-2/&sa=D&source=editors&ust=1740814660208866&usg=AOvVaw0owMXTbZZtaOo3YdWOTFzH), [ISMRM 2022 abstract,](https://www.google.com/url?q=https://archive.ismrm.org/2022/0914.html&sa=D&source=editors&ust=1740814660209045&usg=AOvVaw1tQpx5p7KKW6UQtQp0uWe8) [PyASL at GitHub](https://www.google.com/url?q=https://github.com/OSIPI/TF2.2_OSIPI-ASL-toolbox/tree/main/PyASL&sa=D&source=editors&ust=1740814660209240&usg=AOvVaw0o-Y5gXjHZ4YcZalxfiKvS), [GSoC 2024 project](https://www.google.com/url?q=https://summerofcode.withgoogle.com/archive/2024/projects/xz92GQuc&sa=D&source=editors&ust=1740814660209442&usg=AOvVaw2ZHwoeubLLm0XveZ9AXwvW)\n\nDifficulty: Moderate\n\nProject description: The first version of the library was done within GSoC 2024. Currently, TF members are testing these contributions manually. This manual process involves writing code specifically for testing purposes and publishing the test results on a separate website. As new code contributions are added, the test results need to be manually updated,  making the process time-consuming and error-prone. The primary objective of this project is to develop a comprehensive framework that automates the entire testing process, starting from the creation of individual tests to the publication of results on the dedicated website. The ultimate goal is to establish an automated testing algorithm for each step in the processing pipeline.\n\nExpected outcomes:\n\n1\\. Development of an automated testing framework for the ASL processing module.\n\n2. Integrate CI/CD pipelines to run tests automatically and dynamically publish results to a dedicated website.\n\nRequirements:\n\n*   (Minimum) Strong proficiency in Python. Experience with automated testing frameworks (e.g., pytest, unittest).\n*   (Recommended) Familiarity with MRI processing pipelines\n*   (Ideal) Knowledge of CI/CD tools (e.g., GitHub Actions, Travis CI, or Jenkins)\n\n### OSIPI package - IVIM module extends the testing framework for AI/Bayesian models\n\nProposed mentors: Eric Peterson, Daan Kuppens\n\nLanguages/skills: Python\n\nEstimated project length: 350 hours\n\nDifficulty: Moderate\n\nCategory: core development\n\nProject description: This project aims to significantly enhance the existing IVIM repository testing framework to effectively evaluate the performance and reliability of AI and Bayesian models. The current framework has limitations in testing models with diverse requirements, such as difficulty in adapting to different model architectures, training procedures, and evaluation metrics; inadequate support for testing deep learning models, Bayesian networks, reinforcement learning algorithms, etc; difficulty in testing models under various conditions, including noisy data, missing values, and extreme parameter settings.\n\nExpected outcomes:\n\nThis project will focus on refactoring the framework into reusable components to improve maintainability and facilitate customization; introducing flexible configuration options to allow for easy adjustment of testing parameters (e.g., dataset size, number of iterations, evaluation metrics); extensibility by developing a plugin system or similar mechanism to enable easy integration of new testing modules for different AI/ML algorithms.\n\nThis project will result in a significantly improved testing framework that empowers developers and researchers to rigorously evaluate the performance and reliability of AI and Bayesian models, leading to more robust and trustworthy IVIM fitting.\n\nRequirements:\n\n*   (Required) Unittest, PyTest, or similar\n*   Basic understanding of AI/ML concepts (e.g., supervised learning, Bayesian inference)\n*   Version control (Git), code style, documentation\n\n### Standardized scoring pipeline for OSIPI challenges\n\nProposed mentors: Andre Paschoal, Soudabeh Kargar\n\nLanguages/skills: Python, GitHub\n\nEstimated project length: 175 hours\n\nLinks: [OSIPI/TF6.2\\_DCE-DSC-MRI\\_Challenges: TF6.2](https://www.google.com/url?q=https://github.com/OSIPI/TF6.2_DCE-DSC-MRI_Challenges&sa=D&source=editors&ust=1740814660214053&usg=AOvVaw2wgC6h3g5z8X3ti9bJMErp), [ASL OSIPI Challenge](https://www.google.com/url?q=https://pubmed.ncbi.nlm.nih.gov/38502108/&sa=D&source=editors&ust=1740814660214272&usg=AOvVaw11lCd6J_xP3AcyJ--7tMOn), [DCE OSIPI Challenge](https://www.google.com/url?q=https://pubmed.ncbi.nlm.nih.gov/38115695/&sa=D&source=editors&ust=1740814660214426&usg=AOvVaw0qoVuxn8a2M496vJlSVNCv), [OSIPI TF 6.2](https://www.google.com/url?q=https://github.com/OSIPI/TF6.2_DCE-DSC-MRI_Challenges&sa=D&source=editors&ust=1740814660214614&usg=AOvVaw3Q72ZRXBQ5FqHw8cOYDKp4)\n\nDifficulty: Moderate\n\nCategory: Low hanging-fruit\n\nProject description: OSIPI has organized two challenges in the past that focused on the analysis of perfusion imaging data. The aim of the challenges is to understand where differences between analysis pipelines come from and to determine best practices in the analysis of perfusion analysis. We are currently preparing for follow-up challenges. The analysis of the challenge data was done separately for both challenges but based on similar methods. To make future challenges more efficient and standardized, we would like to develop a standardized pipeline for the analysis of challenge data. The code from previous challenges will serve as a starting point.\n\nExpected outcomes:\n\n*   Standardized pipeline in Python for evaluation of OSIPI challenges\n\nRequirements:\n\n*   Python proficiency, GitHub\n\nDatabase and web development\n----------------------------\n\n### Methods section generator for ASL\n\nProposed mentors: David Thomas, Jan Petr, Hanliang Xu\n\nLanguages/skills: Python\n\nEstimated project length: 175 hours\n\nDifficulty: Moderate\n\nCategory: Core development\n\nRelevant links: [OSIPI TF4.1](https://www.google.com/url?q=https://osipi.ismrm.org/task-forces/tf4-1/&sa=D&source=editors&ust=1740814660216992&usg=AOvVaw1ogXo1tAjUK7i3_cygoATP), [ASL Lexicon](https://www.google.com/url?q=https://pubmed.ncbi.nlm.nih.gov/37876299/&sa=D&source=editors&ust=1740814660217171&usg=AOvVaw11QQI23-c3Lbssjncg9aM7), [GSoC 2024 project](https://www.google.com/url?q=https://summerofcode.withgoogle.com/programs/2024/projects/tCvIb4VX&sa=D&source=editors&ust=1740814660217379&usg=AOvVaw2JzvizP-BGwtnRr--Fbako), [GSoC 2024 final report](https://www.google.com/url?q=https://github.com/Hanliang-Xu/Hanliang-Xu.github.io/blob/main/README.md&sa=D&source=editors&ust=1740814660217585&usg=AOvVaw2PQZ4exjj1du7tWfovWP42)\n\nProject description: For transparency and reproducibility in MRI research studies, it is important to report the sequence acquisition parameters accurately. Accessing these parameters from the image file headers requires familiarity with file formats and interpretation of the information they contain. The aim of this project is to provide a simple-to-use Python-based software tool that reads the metadata from ASL MRI image files, extracts the important data acquisition parameters, and formats them in a short text paragraph that can be ‘cut-and-pasted’ into the “Methods/Acquisition” section of a scientific publication. The tool will work with known and standardized data definitions and will be able to handle exceptions and missing data, handle several different data types, and check/report data consistency.\n\nExpected outcomes:\n\nThe backend currently handles input from BIDS data (Brain imaging data structure = NiFTI and JSON data) and DICOM data (in a pilot mode). The web-based GUI allows file uploads and automated report generation. We would like to add the following features:\n\n*   Current GUI reports missing required parameters. Add a new feature that interactively asks the user to provide the missing parameters;\n*   Improve the testing framework for comparing the input database with manually checked reference reports;\n*   Improve and finalize the module for the DICOM input to handle hidden and private tags that are specific for different input data (mentors will provide the keys to interpret these tags);\n*   Improve the modularity of the software to make future extensions to other sequences (DSC/DCE/IVIM) easy.\n\nRequirements:\n\n*   (Minimal) Python and basic experience in the development of web-based frontends\n*   (Willing to) Learn and understand the basics of the particular MRI sequences\n*   (Optional) Experience in medical imaging, MRI, or DICOM format\n\n### Knowledge Atlas for OSIPI perfusion lexicons\n\nProposed mentors: Ben Dickie, Patricia Clement\n\nLanguages/skills: SQL\n\nEstimated project length: 350 hours\n\nDifficulty: Moderate\n\nCategory: Core development\n\nLanguages/skills: Python, databases, web development\n\nRelevant links:\n\nProject description: A key problem in imaging science is the lack of reproducibility, which can arise from a number of sources, from the acquisition method itself, or simply whether or not the process is described clearly enough for others to follow. To address this, OSIPI has developed 2 lexicons (one for DCE/DSC and one for ASL). The contrast agent-based lexicon (CAPLEX) is currently hosted on a GitHub documentation site, whereas the ASL lexicon is still only accessible through Google Docs. This project will continue preliminary work to overhaul how the two lexicons are displayed and accessed by migrating to a database and building a web app to display the lexicon content and tools.\n\nExpected outcomes:\n\n*   A database consisting of lexicons, as well as providing room for future database projects\n*   Web app to display lexicon content and tools\n\nRequirements:\n\n*   Databases (e.g. SQL), Experience with data handling and manipulation (e.g., file I/O, databases)\n*   Basic knowledge of web development frameworks (e.g., Flask, Django, FastAPI) for API development\n*   Basic understanding of medical imaging concepts\n\n### Unified HTML pages for OSIPI output\n\nProposed mentors: Petra van Houdt, Luis Torres\n\nLanguages/skills: Python, Markdown\n\nEstimated project length: 90 hours\n\nDifficulty: Easy\n\nCategory: Low-hanging fruit\n\nRelevant links: [OSIPI\\_CAPLEX](https://www.google.com/url?q=https://osipi.github.io/OSIPI_CAPLEX/&sa=D&source=editors&ust=1740814660221430&usg=AOvVaw1nI2AA82MZ5gbAnAFPaScu), [OSIPI DCE-DSC code](https://www.google.com/url?q=https://osipi.github.io/DCE-DSC-MRI_TestResults/intro.html&sa=D&source=editors&ust=1740814660221565&usg=AOvVaw3_CSh5MPsiNW0ci_JjTPGo)\n\nProject description: Over time, OSIPI has produced several projects with published documentation.  However, due to the nature of our organization’s organic growth, their styles, structure, and fundamental set-ups are different, which leads to difficulty organizing, searching, and finding relevant information in our docs. In this project, we will standardize our approach by leveraging current best practices for HTML generation and styling and then subsequently port all of the existing documentation to this new approach. One of the outcomes of this project is to provide recommendations for future documentation tasks that comply with our styling.\n\nExpected outcomes:\n\n*   The main outcome of this project is to create a unified standard/style for our documentation hosted via GitHub.\n*   A secondary outcome will be to unify current documentation with our defined standard.\n\nRequirements:\n\n*   (Required) Python, Markdown\n*   (Optional) HTML/CSS\n*   (Ideal) Github Pages, MkDocs, Admonitions\n\nInfrastructure/Automation\n-------------------------\n\n### Dockerized Data Processing Pipeline for Medical Imaging\n\nProposed mentors: Eric Peterson, Luis Torres\n\nLanguages/skills: Python\n\nEstimated project length: 350 hours\n\nDifficulty: Moderate\n\nCategory: Infrastructure/automation\n\nProject description:\n\nThis project aims to develop a containerized pipeline that can efficiently process medical imaging data using IVIM or other tools. The modularized docker images will encapsulate all necessary dependencies, enabling cross-platform deployment, execution and integration with clinical imaging pipelines. Finally, we want to enable visual orchestration of the resulting pipeline through a web-based interface.\n\nExpected outcomes:\n\nKey outcomes will include:\n\n*   Modular, containerized processing pipelines with support for reading and writing data as DICOM and NIfTI from local disks, cloud storage, and DICOM server integrations (such as PACS).\n*   A simple web-based interface for orchestrating the image processing pipeline enabling users to monitor the status of processing jobs, view logs, and configure runtime parameters.\n\nUltimately this project will result in a valuable tool for medical imaging researchers and practitioners. The containerized pipeline will streamline data processing workflows, improve efficiency, and facilitate collaboration by providing a standardized and reproducible environment for image analysis tasks.\n\nRequirements:\n\n*   (Required) Unittest, pytest, Docker\n*   (Optional) Kubernetes, Airflow/Argo\n*   Basic understanding of medical imaging concepts (e.g., DICOM format)\n*   Experience with data handling and manipulation (e.g., file I/O, databases)\n*   Basic knowledge of web development frameworks (e.g., Flask, Django, FastAPI) for API development\n\n### GitHub testing for ExploreASL pipeline \n\nProposed mentors: Henk-Jan Mutsaerts, Mathijs Dijsselhof, Jan Petr\n\nLanguages/skills: GitHub, Matlab\n\nEstimated project length: 90 hours\n\nDifficulty: Easy\n\nRelevant links: [ExploreASL code](https://www.google.com/url?q=https://github.com/ExploreASL/ExploreASL&sa=D&source=editors&ust=1740814660224627&usg=AOvVaw2gD8wXrNvO-PfC2ebMpvDm), [ExploreASL publication](https://www.google.com/url?q=https://www.sciencedirect.com/science/article/pii/S1053811920305176&sa=D&source=editors&ust=1740814660224780&usg=AOvVaw2dANhjQgOFA4x-MmqgJcSp)\n\nCategory: Low hanging-fruit\n\nProject description: While basic processing of ASL perfusion MRI data can be done using in-house scripts or GUIs, a dedicated pipeline able to batch-process large heterogeneous datasets is needed to process large clinical studies efficiently. ExploreASL is an open-source package that was developed specifically for this task. Testing is of the highest importance in sustaining further software development in a larger group of collaborators. While we have several tests in place, we lack their joint integration and automation.\n\nExpected outcomes:\n\nWe need to configure GitHub actions to run the collection of our test automatically:\n\n*   Configure and debug GitHub actions to run our Matlab test scripts on different OSes.\n*   Adapt the test result to the JUnit or similar format\n\nRequirements:\n\n*   (Minimal) GitHub and Matlab experience\n*   (Optional) Experience with GitHub actions and JUnit testing\n"}