{"name":"Unikraft","description":"A Fast and Secure Unikernel SDK","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/unikraft","ideas_url":"https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md","logo":"https://summerofcode.withgoogle.com/media/org/unikraft/5nx7anuq3iixdm54.png","technologies":["c","xen","golang","kvm","assembly language"],"topics":["virtualization","cloud","software reuse","software configurability"],"projects":[{"project_name":"Expanding the Unikraft Software Support Ecosystem","summary":"Focuses on enhancing application support for Unikraft by adding new applications primarily in binary-compatibility mode, improving POSIX compatibility and validating syscall implementations.","difficulty":"3/5"},{"project_name":"Software Quality Assurance of Unikraft Codebase","summary":"Aims to improve the quality and stability of Unikraft's codebase through unit tests, static analysis, and enhanced CI/CD processes to ensure robust contributions.","difficulty":"3/5"},{"project_name":"Supporting macOS networking","summary":"Intends to enhance Unikraft's capabilities on macOS by developing new networking packages for better integration with local environments.","difficulty":"3/5"},{"project_name":"Converting the eroFS library to Golang and testing it","summary":"Aims to reimplement the `mkfs.erofs` command in Golang to allow easier creation of Enhanced Read-Only File System files while ensuring full functionality through testing.","difficulty":"3/5"},{"project_name":"Fine-Tuning Unikraft's Performance","summary":"Seeks to evaluate Unikraft's performance, identify bottlenecks, and propose targeted solutions to enhance its efficiency.","difficulty":"3/5"},{"project_name":"Testing Framework for Unikraft Builds","summary":"Focuses on developing a comprehensive testing framework in Python to streamline testing Unikraft builds across multiple configurations and ensure compatibility.","difficulty":"3/5"},{"project_name":"Update Newlib and Pthread-embedded Libraries","summary":"Aims to bring the Newlib and pthread-embedded libraries up to date with the latest Unikraft standards, enhancing compatibility for applications.","difficulty":"3/5"},{"project_name":"Update Unikraft Core External Libraries","summary":"Seeks to update core external libraries used by Unikraft to their latest upstream versions, ensuring that new features and fixes are applied.","difficulty":"3/5"},{"project_name":"Update Unikraft Application Libraries","summary":"Aims to refresh various application libraries used within Unikraft to maintain support and performance improvements for these components.","difficulty":"3/5"},{"project_name":"Add FreeBSD Libc as Unikraft External Library","summary":"Focuses on integrating FreeBSD's standard C library into Unikraft, enabling building and running applications with this alternative libc variant.","difficulty":"3/5"}],"jina_response":"Title: gsoc/gsoc-2025/ideas.md at staging · unikraft/gsoc\n\nURL Source: https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md\n\nMarkdown Content:\n| title |\n| --- |\n| Google Summer of Code 2025 Ideas List\n |\n\nUnikraft Project Ideas\n----------------------\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#unikraft-project-ideas)\n\nThank you for your interest in participating in [Google Summer of Code 2025 (GSoC25)](https://summerofcode.withgoogle.com/programs/2025)!\n\nUnikernels are a novel Operating System (OS) model providing unprecedented optimization for software services. The technology offers a clean slate OS design which improves the efficiency of cloud services, IoT and embedded system applications by removing unnecessary software layers by specializing the OS image. One unikernel framework which provides minimal runtime footprint and fast (millisecond-level) boot times is Unikraft, and aims as a means to reduce operating costs for all services that utilize it as a runtime mechanism.\n\nUnikraft is a Unikernel Development Kit and consists of an extensive build system in addition to core and external library ecosystem which facilitate the underlying functionality of a unikernel.\n\nMentors of the projects\n-----------------------\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#mentors-of-the-projects)\n\nMentors will be assigned when the project is initiated. Please feel free to reach out beforehand to discuss the project.\n\n| Mentor | Email |\n| --- | --- |\n| [Razvan Deaconescu](https://github.com/razvand) | [razvan.deaconescu@upb.ro](mailto:razvan.deaconescu@upb.ro) |\n| [Alexander Jung](https://github.com/nderjung) | [alex@unikraft.io](mailto:alex@unikraft.io) |\n| [Cezar Crăciunoiu](https://github.com/craciunoiuc) | [cezar@unikraft.io](mailto:cezar@unikraft.io) |\n| [Michalis Pappas](https://github.com/michpappas) | [michalis@unikraft.io](mailto:michalis@unikraft.io) |\n| [Ștefan Jumărea](https://github.com/StefanJum) | [stefanjumarea02@gmail.com](mailto:stefanjumarea02@gmail.com) |\n| [Răzvan Vîrtan](https://github.com/razvanvirtan) | [virtanrazvan@gmail.com](mailto:virtanrazvan@gmail.com) |\n| [Hugo Lefeuvre](https://github.com/hlef) | [hugo.lefeuvre@ubc.ca](mailto:hugo.lefeuvre@ubc.ca) |\n\nBelow are a list of open projects for Unikraft which can be developed as part of GSoC25.\n\n* * *\n\n### Expanding the Unikraft Software Support Ecosystem\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#expanding-the-unikraft-software-support-ecosystem)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 2 |\n| **Constraints/requirements** | Basic OS concepts, familiarity with POSIX and system calls, build systems and tool stacks. |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description)\n\nOne of the weak points of most unikernel projects has always been application support, often requiring that applications be ported to the target unikernel OS. With Unikraft we have been making a strong push towards POSIX compatibility so that applications can run unmodified on Unikraft. We have been doing this in two different ways:\n\n1.  by adding support for the Musl libc library such that applications can be compiled against it, using their native build systems, and then linked into Unikraft\n2.  through [binary-compatibility mode](https://unikraft.org/docs/concepts/compatibility), where unmodified ELFs are directly executed in Unikraft and the resulting syscalls trapped and redirected to the Unikraft core, via the [`app-elfloader`](https://github.com/unikraft/app-elfloader).\n\nThis has lead to the creation of the [application `catalog` repository](https://github.com/unikraft/catalog) where running applications and examples are brought together.\n\nThis project focuses on expanding Unikraft's software support ecosystem by [adding new applications](https://unikraft.org/docs/contributing/adding-to-the-app-catalog) to the [application `catalog` repository](https://github.com/unikraft/catalog), primarily in binary-compatibility mode. While doing this, you will also:\n\n1.  implement and extend system calls\n2.  add extensive testing for the application or framework that is to be included in the catalog\n3.  add benchmarking scripts to measure the performance and resource consumption of the application running with Unikraft\n4.  conduct synthetic tests using tools such as [the Linux Test Project](https://linux-test-project.github.io/)\n\nThe success of this project will directly impact Unikraft adoption. The project length can be varied depending on which of these items are covered by the project.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material)\n\n*   [https://www.musl-libc.org/](https://www.musl-libc.org/)\n*   [https://unikraft.org/guides/using-the-app-catalog](https://unikraft.org/guides/using-the-app-catalog)\n*   [https://github.com/unikraft/catalog](https://github.com/unikraft/catalog)\n*   [https://unikraft.org/docs/contributing/adding-to-the-app-catalog](https://unikraft.org/docs/contributing/adding-to-the-app-catalog)\n\n* * *\n\n### Software Quality Assurance of Unikraft Codebase\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#software-quality-assurance-of-unikraft-codebase)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 2 |\n| **Constraints/requirements** | C programming skills, Linux command-line experience, build tools |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-1)\n\nDuring its 6 years of existence, Unikraft, now at version 0.16.1, has grown in features, application support and codebase. As it matures, a high quality of the code and robust behavior are a must to provide a stable solution for its user base.\n\nThe aim of this project is to assist in the software quality assurance of the Unikraft codebase, by tackling one of the following ideas:\n\n1.  The use of the [`uktest` framework](https://github.com/unikraft/unikraft/tree/staging/lib/uktest) to create unit tests for [internal libraries](https://github.com/unikraft/unikraft/tree/staging/lib/) and [external libraries](https://github.com/search?q=topic%3Alibrary+org%3Aunikraft+fork%3Atrue&type=repositories). Not many libraries have unit tests, those that do are mostly exceptions. This will directly impact the stability of the code base and allow quick validation of new features that may break existing functionality.\n    \n2.  Inclusion of static and dynamic analysis tools that highlight potential spots of faulty or undefined behavior.\n    \n3.  The use of compiler builtins and compiler flags providing constraints on the code to increase its resilience to faulty behavior.\n    \n4.  Augmenting the CI/CD system used by Unikraft (based on [GitHub Actions](https://github.com/features/actions)) to feature automatic testing, validation and vetting of contributions to Unikraft repositories: core, libraries, applications. Potential items are:\n    \n    1.  handling running of unikernels instead of simple builds\n    2.  static analysis of images to be delivered as reports to GitHub pull requests\n    3.  regression checks on performance (delivered as % change from the current upstream version)\n\nAny other project that is targeted towards increasing the robustness of Unikraft source code is welcome. These will both increase the viability of Unikraft as a stable solution and increase the quality of future contributions, by enforcing good practices on submitted code.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-1)\n\n*   [Writing Tests in Unikraft](https://unikraft.org/docs/develop/writing-tests/)\n*   [https://www.guru99.com/unit-testing-guide.html](https://www.guru99.com/unit-testing-guide.html)\n*   [https://docs.kernel.org/dev-tools/kunit/index.html](https://docs.kernel.org/dev-tools/kunit/index.html)\n*   [https://github.com/features/actions](https://github.com/features/actions)\n*   [https://unikraft.org/docs/contributing/review-process/](https://unikraft.org/docs/contributing/review-process/)\n\n* * *\n\n### Supporting macOS networking (medium-large, 175-350hrs)\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#supporting-macos-networking-medium-large-175-350hrs)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 1 |\n| **Constraints/requirements** | Good Go skills, familiarity with virtualization, macOS and networking, good OS knowledge |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-2)\n\n[KraftKit](https://github.com/unikraft/kraftkit), the supporting codebase for the modular library operating system Unikraft designed for cloud native applications, provides users with the ability to build, package and run unikernels. As a Swiss-army-knife of unikernel development, it eases both the construction and deployment of unikernels. To this end, supporting diverse user environments and their ability to run unikernels locally supports the ultimate goal of the project. One such environment which requires more attention is macOS.\n\nTowards better facilitating the execution of unikernel virtual machine images on macOS, this project aims to introduce new packages which interface directly with macOS environments by interfacing natively with the local networking environment such that the execution of unikernels is accessible through a more direct communication mechanisms of the host. Until now, the project only supports Linux bridge networking with accommodation (albeit \"stubs\") in the codebase for Darwin.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-2)\n\n*   [unikraft/kraftkit#841](https://github.com/unikraft/kraftkit/issues/841)\n\n* * *\n\n### Converting the eroFS library to Golang and testing it\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#converting-the-erofs-library-to-golang-and-testing-it)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 1 |\n| **Constraints/requirements** | Good Go skills, decent C skills, familiarity with file systems, basic testing knowledge |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-3)\n\n[EROFS](https://docs.kernel.org/filesystems/erofs.html) (Enhanced Read-Only File System) is a lightweight, high-performance read-only filesystem tailored for Linux environments. It is designed to provide fast and efficient access to data while supporting built-in transparent compression, which helps reduce storage overhead. Currently, Golang has support through [libraries](https://pkg.go.dev/gvisor.dev/gvisor/pkg/erofs) only for reading EROFS files and no support for creating them.\n\nTowards better support in [KraftKit](https://github.com/unikraft/kraftkit/pull/2007), this project aims to introduce a new library that reimplements the `mkfs.erofs` command with all its functionality. This is [currently](https://github.com/erofs/erofs-utils/blob/dev/mkfs/main.c) implemented in C which can only be imported into Golang with C to Go bindings. Some [attempts](https://github.com/dpeckett/archivefs/tree/main/erofs) have been made to implement this, but are incomplete and do not offer all arguments, of which some we need. Finally, at all steps tests should be implemented that compare original functionality to the ported library functionality.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-3)\n\n*   [https://docs.kernel.org/filesystems/erofs.html](https://docs.kernel.org/filesystems/erofs.html)\n*   [https://github.com/erofs/erofs-utils/blob/dev/mkfs/main.c](https://github.com/erofs/erofs-utils/blob/dev/mkfs/main.c)\n*   [unikraft/kraftkit#2007](https://github.com/unikraft/kraftkit/pull/2007)\n*   [https://pkg.go.dev/gvisor.dev/gvisor/pkg/erofs](https://pkg.go.dev/gvisor.dev/gvisor/pkg/erofs)\n*   [https://github.com/dpeckett/archivefs/tree/main/erofs](https://github.com/dpeckett/archivefs/tree/main/erofs)\n\n* * *\n\n### Fine-Tuning Unikraft's Performance\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#fine-tuning-unikrafts-performance)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 1 |\n| **Constraints/requirements** | Good C skills, familiarity with general operating system concepts, good testing knowledge |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-4)\n\nOver the past releases the development focus of Unikraft has been set on improving its compatibility with existing code bases and adding missing operating system features. This means that less efforts were dedicated to performance-testing Unikraft, resulting in a potential loss of performance in recent releases. Now that Unikraft is reaching the desired level of maturity and compatibility, it is time to go back to evaluating and fine-tuning its performance.\n\nThe aim of this project is to 1) evaluate the current performance of Unikraft, 2) identify potential performance bottlenecks, and 3) address these bottlenecks through targeted patches.\n\n*   To evaluate the performance of Unikraft, this project will base on the evaluation of the Unikraft EuroSys paper, re-running experiments with the latest release of Unikraft. The first phase of the project will be to create a new repository with updated experiments that can easily be run in a push-button manner (deliverable 1).\n*   Following this, bottlenecks will be identified. Performance bottlenecks may lie in any Unikraft component: this will be a unique opportunity to touch on many operating system concepts. Performance bottlenecks will be reported in the form of GitHub issues (deliverable 2).\n*   Finally, the project will aim to provide self-contained, targeted fixes for these bottlenecks in the form of GitHub Pull-Requests (deliverable 3).\n\nThis project is a unique opportunity to learn about performance evaluation and optimization in a production-grade operating system. It is also an opportunity to participate in a potential academic journal submission of Unikraft by refreshing its evaluation.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-4)\n\n*   The Unikraft EuroSys 2021 paper (see the Evaluation, Section 5): [https://dl.acm.org/doi/10.1145/3447786.3456248](https://dl.acm.org/doi/10.1145/3447786.3456248)\n*   The EuroSys 2021 evaluation repository: [https://github.com/unikraft/eurosys21-artifacts](https://github.com/unikraft/eurosys21-artifacts)\n\n* * *\n\n### Testing Framework for Unikraft Builds\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#testing-framework-for-unikraft-builds)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 1 |\n| **Constraints/requirements** | Python knowledge, Linux CLI |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-5)\n\nWe are currently developing a [testing framework](https://github.com/unikraft-upb/catalog/tree/razvand/generator/new-design/utils/new-design) that is able to multiplex the variety of configuration options, VMMs, hypervisors, architectures, boot protocols, to validate the successful building and running of unikernel images. This framework is able to configure, build, run and test the variety of Unikraft builds. It is written in Python and is subject to improvements and refactoring.\n\nWe are looking to augment the testing infrastructure to make it seamless to be used by Unikraft developers and users. To this end we aim to:\n\n*   Consolidate the testing framework as a separate project inside its own repository.\n*   Have the testing framework work out-of-the-box with the [`catalog`](https://github.com/unikraft/catalog) and [`catalog-core`](https://github.com/unikraft/catalog-core) repositories.\n*   Integrate the testing framework with the CI/CD system used in the [Unikraft organization repositories](https://github.com/unikraft) to automatically validate builds for contributions. Tests are to be triggered each time a pull request is open in the [`unikraft`](https://github.com/unikraft/unikraft) and in core library repositories.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-5)\n\n*   [https://github.com/unikraft/catalog](https://github.com/unikraft/catalog)\n*   [https://github.com/unikraft/catalog-core](https://github.com/unikraft/catalog-core)\n*   [https://github.com/unikraft-upb/catalog/tree/razvand/generator/new-design/utils/new-design](https://github.com/unikraft-upb/catalog/tree/razvand/generator/new-design/utils/new-design)\n\n* * *\n\n### Update Newlib and Pthread-embedded Libraries\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#update-newlib-and-pthread-embedded-libraries)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 1 |\n| **Constraints/requirements** | C, assembly, Linux CLI, GNU build tools |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-6)\n\nThe default Unikraft standard C library (libc) is [Musl](https://github.com/unikraft/lib-musl), a lightweight libc providing a POSIX interface. Up until 2022, the default libc was [Newlib](https://github.com/unikraft/lib-newlib). Starting with [release 0.11.0](https://unikraft.org/blog/2022-12-02-unikraft-releases-janus) the default libc switched to Musl.\n\nEver since that point, Newlib supported hasn't been updated to keep up with the recent version of Unikraft.\n\nThe goal of this project is to update [Newlib](https://github.com/unikraft/lib-newlib) and [`pthread-embedded`](https://github.com/unikraft/lib-pthread-embedded) support to the recent Unikraft versions. Such as current builds would work out-of-the-box with Newlib and pthread-embedded as well as Musl.\n\nThe steps to be done are:\n\n1.  Update Newlib and pthread-embedded to build with the most recent Unikraft version.\n2.  Update Newlib version to the [most recent upstream version](https://sourceware.org/newlib/).\n3.  Build and run applications on the [`catalog-core`](https://github.com/unikraft/catalog-core) and [`catalog`](https://github.com/unikraft/catalog) repositories.\n4.  (Optionally) Add CI pipelines to work with Newlib and pthread-embedded.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-6)\n\n*   [https://github.com/unikraft/lib-newlib](https://github.com/unikraft/lib-newlib)\n*   [https://github.com/unikraft/lib-pthread-embedded](https://github.com/unikraft/lib-pthread-embedded)\n*   [https://github.com/RWTH-OS/pthread-embedded](https://github.com/RWTH-OS/pthread-embedded)\n*   [https://sourceware.org/newlib/](https://sourceware.org/newlib/)\n\n* * *\n\n### Update Unikraft Core External Libraries\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#update-unikraft-core-external-libraries)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 2 |\n| **Constraints/requirements** | C, assembly, Linux CLI, GNU build tools |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-7)\n\nThe Unikraft core external libraries haven't been updated in the past 2 years. We aim to update them to their latest version. That means:\n\n*   Update [`lib-musl`](https://github.com/unikraft/lib-musl) from 1.2.3 to 1.2.5 (the most recent [upstream Musl](https://musl.libc.org/) version).\n*   Update [`lib-lwip`](https://github.com/unikraft/lib-lwip) from 2.1.2 to 2.2.1 (the most recent [upstream LWIP](https://savannah.nongnu.org/projects/lwip/) version).\n*   Update [`lib-gcc`](https://github.com/unikraft/lib-gcc) from 7.3.0 to 14.2.0 (the most recent [upstream GCC](https://ftp.gnu.org/gnu/gcc/) version).\n*   Update [`lib-libcxx`](https://github.com/unikraft/lib-libcxx) from 14.0.6 to 19.1.7 (the most recent [upstream LLVM](https://github.com/llvm/llvm-project/releases) version).\n*   Update [`lib-libcxxabi`](https://github.com/unikraft/lib-libcxxabi) from 14.0.6 to 19.1.7 (the most recent [upstream LLVM](https://github.com/llvm/llvm-project/releases) version).\n*   Update [`lib-compiler-rt`](https://github.com/unikraft/lib-compiler-rt) from 14.0.6 to 19.1.7 (the most recent [upstream LLVM](https://github.com/llvm/llvm-project/releases) version).\n*   Update [`lib-libunwind`](https://github.com/unikraft/lib-libunwind) from 14.0.6 to 19.1.7 (the most recent [upstream LLVM](https://github.com/llvm/llvm-project/releases) version).\n\nThe update is aimed to use the [workflow for Unikraft microlibrary version](https://docs.google.com/document/d/1A-CAss5RvgYapg3YO8GNCdMki6cgq_7XG5om8nVWWGk/edit?usp=sharing). As part of the update effort, we aim to also test and validate builds for the [`catalog-core`](https://github.com/unikraft/catalog-core) and [`catalog`](https://github.com/unikraft/catalog) repositories.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-7)\n\n*   [RFC: Unikraft Microlibrary Versioning](https://docs.google.com/document/d/1A-CAss5RvgYapg3YO8GNCdMki6cgq_7XG5om8nVWWGk/edit?usp=sharing)\n\n* * *\n\n### Update Unikraft Application Libraries\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#update-unikraft-application-libraries)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 2 |\n| **Constraints/requirements** | C, assembly, Linux CLI, GNU build tools |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-8)\n\nThe Unikraft application libraries haven't been updated in the past 2 years. We aim to update them to their latest upstream version. Target libraries / applications are:\n\n*   [`lib-nginx`](https://github.com/unikraft/lib-nginx)\n*   [`lib-redis`](https://github.com/unikraft/lib-redis)\n*   [`lib-sqlite`](https://github.com/unikraft/lib-sqlite)\n*   [`lib-python3`](https://github.com/unikraft/lib-python3)\n*   [`lib-libgo`](https://github.com/unikraft/lib-libgo)\n*   [`lib-lua`](https://github.com/unikraft/lib-lua)\n\nThe update is aimed to use the [workflow for Unikraft microlibrary version](https://docs.google.com/document/d/1A-CAss5RvgYapg3YO8GNCdMki6cgq_7XG5om8nVWWGk/edit?usp=sharing). As part of the update effort, we aim to also test and validate builds for the [`catalog-core`](https://github.com/unikraft/catalog-core) and [`catalog`](https://github.com/unikraft/catalog) repositories.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-8)\n\n*   [RFC: Unikraft Microlibrary Versioning](https://docs.google.com/document/d/1A-CAss5RvgYapg3YO8GNCdMki6cgq_7XG5om8nVWWGk/edit?usp=sharing)\n\n* * *\n\n### Add FreeBSD Libc as Unikraft External Library\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#add-freebsd-libc-as-unikraft-external-library)\n\n|  |  |\n| --- | --- |\n| **Difficulty** | 3/5 |\n| **Project Size** | Variable (175 or 350 hours) |\n| **Maximum instances** | 1 |\n| **Constraints/requirements** | C, assembly, Linux CLI, GNU build tools |\n\n#### Description\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#description-9)\n\nThe default Unikraft standard C library (libc) is [Musl](https://github.com/unikraft/lib-musl), a lightweight libc providing a POSIX interface. [FreeBSD Libc](https://github.com/freebsd/freebsd-src/tree/main/lib/libc) is the default libc used by default by FreeBSD, with a compatible license with Unikraft.\n\nThe goal of this project is have a FreeBSD libc build repository for Unikraft and build existing applications against it. In the end, you would be able to build and run applications on the [`catalog-core`](https://github.com/unikraft/catalog-core) and [`catalog`](https://github.com/unikraft/catalog) repositories using the FreeBSD libc variant.\n\n#### Reading & Related Material\n\n[](https://github.com/unikraft/gsoc/blob/staging/gsoc-2025/ideas.md#reading--related-material-9)\n\n*   [https://github.com/freebsd/freebsd-src/tree/main/lib/libc](https://github.com/freebsd/freebsd-src/tree/main/lib/libc)\n\n* * *\n"}