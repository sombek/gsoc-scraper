{"name":"Micro Electronics Research Lab - UITU","description":"Accelerating Engineering Innovation","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/micro-electronics-research-lab-uitu","ideas_url":"https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List","logo":"https://summerofcode.withgoogle.com/media/org/micro-electronics-research-lab-uitu/el9byq6f4dfc1y77-360.png","technologies":["RISCV","Processor","Hardware","systemonchip","memory"],"topics":["iot","embedded","Processor","System on Chip","RISC-V"],"projects":[{"project_name":"Integrating TCAM IP into Chipyard via MMIO and RoCC Interfaces","summary":"This project focuses on integrating Ternary Content Addressable Memory (TCAM) IP into the Chipyard architecture as both an MMIO peripheral and a RoCC accelerator. The integration will enhance speed and efficiency for applications like networking and security.","difficulty":"Hard"},{"project_name":"A.U.T.O.V.A.R. - Automated UVM Tuning Orchestrated Via AI Reasoning","summary":"A.U.T.O.V.A.R. aims to leverage AI to automate the adjustment of UVM components by analyzing changes in DUT specifications, thus reducing manual errors and accelerating the verification cycle through intelligent component adaptation.","difficulty":"Hard"},{"project_name":"AEGIS - AI-Enhanced Generation of Intelligent Scenarios","summary":"AEGIS seeks to develop an AI-driven framework for generating optimized test scenarios to verify hardware, focusing on corner cases and protocol compliance to enhance the efficiency of the verification process.","difficulty":"Hard"},{"project_name":"AURUM - Automated UVM Reference of Userspec Model","summary":"AURUM is designed to automate the creation of high-accuracy golden models based on specifications, employing AI and NLP to ensure correctness and minimize manual inputs during model development for verification.","difficulty":"Hard"},{"project_name":"General Test Bench for RISC-V CPUs Using PYUVM","summary":"This project aims to develop a generic test bench framework for RISC-V CPUs using PYUVM to enhance accessibility and automated verification processes across various RISC-V implementations, ensuring functional validation and compliance testing.","difficulty":"Medium"}],"jina_response":"Title: GSoC'25 Project Ideas List\n\nURL Source: https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List\n\nMarkdown Content:\nWelcome to the project ideas list for GSoC'25. You are allowed to choose any given project to work on with us or you can suggest your own idea as well.\n\nWe encourage you to join our [Gitter Chat Room (general)](https://matrix.to/#/#merledu_community:gitter.im) to discuss ideas. Please use the recommended [Proposal Format](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC-Proposal-Template) for all projects and you can see the detailed timeline [here](https://developers.google.com/open-source/gsoc/timeline).\n\nProject 01: Integrating TCAM IP into Chipyard via MMIO and RoCC Interfaces\n--------------------------------------------------------------------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#project-01-integrating-tcam-ip-into-chipyard-via-mmio-and-rocc-interfaces)\n\n**Difficulty:** Hard\n\n**Designation**: 350 hours (large)\n\n**Required Skills & Tools:** CHISEL, Verilog, C/C++.\n\n**Mentors:** [Shahzaib Kashif](mailto:shazaib@alumni.uit.edu), [Dr. Ali Ahmed](mailto:aahmed@uitu.edu.pk)\n\n**Chat Channel:** posting soon\n\nOverview:\n---------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#overview)\n\nThis project aims to integrate a Ternary Content Addressable Memory (TCAM) IP with our forked version of Chipyard as both a Memory-Mapped I/O (MMIO) peripheral and a RoCC (Rocket Custom Coprocessor) accelerator. The TCAM is a high-speed search memory that enables efficient lookup operations, making it useful for applications such as networking, security, and database acceleration.\n\nThe key objectives of this project are:\n\n1.  **MMIO Integration:** Attach the TCAM IP as an MMIO device within the Chipyard SoC. This will allow the core to communicate with the TCAM using standard memory operations.\n2.  **RoCC Integration:** Implement the TCAM as a RoCC accelerator, leveraging the Rocket Coreâ€™s RoCC interface for direct communication with the processor.\n3.  **Software Interface:** Develop a user-space software library or API that enables applications to interact with the TCAM seamlessly. This should include functions for writing, reading, and searching within the TCAM.\n4.  **Testing & Verification:** Validate the correctness and performance of the integration by writing test programs that run on the generated SoC containing (Core + TCAM as MMIO) and (Core + TCAM as RoCC).\n\nExpected Outcomes:\n------------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#expected-outcomes)\n\n*   A fully integrated TCAM IP with Chipyard, accessible via both MMIO and RoCC.\n*   A software library that provides an easy-to-use interface for interacting with TCAM.\n*   Test programs that demonstrate TCAM functionality on the generated SoC.\n*   Documentation to help future contributors extend or modify the TCAM integration.\n\n### Skills Required:\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#skills-required)\n\n*   Familiarity with RISC-V and Chipyard framework.\n*   Experience with Chisel/Verilog for hardware design.\n*   Knowledge of SoC integration, MMIO, and RoCC interfaces.\n*   Proficiency in C/C++ for writing the software interface.\n\nProject 02: A.U.T.O.V.A.R. - Automated UVM Tuning Orchestrated Via AI Reasoning\n-------------------------------------------------------------------------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#project-02-autovar---automated-uvm-tuning-orchestrated-via-ai-reasoning)\n\n**Difficulty:** Hard\n\n**Designation**: 350 hours (large)\n\n**Required Skills & Tools:** UVM, SystemVerilog, Python, Machine Learning, NLP, Transformers, Reinforcement Learning, Regression Testing, Hardware Verification.\n\n**Mentors:** [Dr. Farhan Ahmed Karim](mailto:faahmed@uitu.edu.pk)\n\n**Chat Channel:** posting soon\n\nOverview:\n---------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#overview-1)\n\nA.U.T.O.V.A.R. is an AI-powered framework designed to automate the modification of UVM components (drivers, monitors, scoreboards, sequences) based on evolving DUT specifications. By leveraging NLP and ML, the system extracts key parameters from DUT documentation and updates verification environments accordingly. Reinforcement learning ensures that the generated UVM components are validated against regression tests and optimized for coverage. This project aims to minimize manual effort, reduce human error, and accelerate the verification cycle in hardware design.\n\nMethodology\n-----------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#methodology)\n\n1.  DUT Specification Analysis\n    *   Use natural language processing (NLP) and machine learning (ML) to parse DUT specifications (e.g. interface documents, or protocol standards).\n    *   Extract key parameters: signal names, timing requirements, protocol rules, and transaction formats.\n2.  UVM Component Modification\n    *   Train an A.I. model (e.g., a transformer-based architecture) to map DUT changes to UVM component updates:\n        *   Drivers/Monitors: Adjust transaction generation/collection logic based on new signal timing or protocol rules.\n        *   Scoreboards: Update reference models and error-checking algorithms to reflect DUT functionality.\n        *   Sequences: Regenerate test sequences to cover new scenarios or constraints.\n    *   Use reinforcement learning (RL) to validate modified components against regression tests and optimize for coverage.\n    *   Enable real-time feedback loops: Test failures trigger iterative AI refinement of UVM components.\n\nExpected Outcomes:\n------------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#expected-outcomes-1)\n\n*   AI-powered parser for DUT specifications using NLP\n*   Automated UVM component adaptation based on DUT changes\n*   Integration of reinforcement learning for optimizing verification environments\n*   Real-time feedback loops for iterative UVM refinement\n*   Improved verification efficiency and reduced manual workload\n\nProject 03: AEGIS - AI-Enhanced Generation of Intelligent Scenarios\n-------------------------------------------------------------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#project-03-aegis---ai-enhanced-generation-of-intelligent-scenarios)\n\n**Difficulty:** Hard\n\n**Designation**: 350 hours (large)\n\n**Required Skills & Tools:** UVM, SystemVerilog, Python, Machine Learning, NLP, Reinforcement Learning, Hardware Verification, ASIC/FPGA Design, AXI/PCIe/USB Protocols.\n\n**Mentors:** [Dr. Farhan Ahmed Karim](mailto:faahmed@uitu.edu.pk), [Shahzaib Kashif](mailto:shazaib@alumni.uit.edu)\n\n**Chat Channel:** posting soon\n\nOverview\n--------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#overview-2)\n\nAEGIS is an AI-driven framework designed to automate the generation of optimized test cases for hardware verification. Using NLP, the system extracts key features from DUT specifications and synthesizes test scenarios targeting corner cases, protocol compliance, and functional coverage. Reinforcement learning helps prioritize high-impact tests to maximize verification efficiency. The generated test cases are integrated into UVM environments with automated sequences, scoreboard checks, and assertions.\n\nMethodology\n-----------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#methodology-1)\n\n1.  DUT Specification Parsing\n    *   Use NLP to analyze DUT specifications (e.g. protocol standards, or natural-language requirements).\n    *   Extract critical features: interfaces, timing diagrams, protocol rules, and functional modes.\n2.  Test Case Synthesis\n    *   Train an A.I. model to map DUT specifications to test scenarios, including:\n        *   Corner Cases: Stress tests for boundary conditions (e.g., FIFO overflow, clock domain crossings).\n        *   Protocol Compliance: Tests for adherence to standards like AXI, PCIe, or USB.\n        *   Functional Coverage: Scenarios targeting untested logic in the DUT.\n    *   Use reinforcement learning (RL) to prioritize high-impact tests that maximize coverage metrics.\n3.  Integration with Verification Environment\n    *   Generate UVM-compatible test sequences, scoreboard checks, and assertions.\n\nExpected Outcomes\n-----------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#expected-outcomes-2)\n\n*   AI-powered DUT specification parser using NLP\n*   Automated test scenario generation covering corner cases, protocol compliance, and functional coverage\n*   Reinforcement learning-based test prioritization for enhanced coverage\n*   UVM-compatible test sequences, assertions, and scoreboard integration\n*   Improved verification speed and reduced manual test generation effort\n\nProject 04: AURUM - Automated UVM Reference of Userspec Model\n-------------------------------------------------------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#project-04-aurum---automated-uvm-reference-of-userspec-model)\n\n**Difficulty:** Hard\n\n**Designation**: 350 hours (large)\n\n**Required Skills & Tools:** UVM, SystemVerilog, Python, NLP, Machine Learning, Formal Verification, SMT Solvers, Hardware Verification, Behavioral Modeling.\n\n**Mentors:** [Talha Ahmed](mailto:tahmed@alumni.uit.edu)\n\n**Chat Channel:** posting soon\n\nOverview\n--------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#overview-3)\n\nAURUM is an AI-driven framework that automates the generation of high-accuracy golden/reference models from DUT specifications. Using NLP, the system extracts functional requirements, protocols, and constraints to generate executable golden models. AI-based behavioral cloning ensures high-fidelity mapping from specifications to code, while self-validation techniques, including formal verification and adaptive learning, ensure correctness. This approach reduces manual model development efforts, minimizes human error, and accelerates verification cycles.\n\nMethodology\n-----------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#methodology-2)\n\n1.  Specification Analysis\n    *   NLP Parsing: Extract functional requirements, protocols, and timing constraints from DUT specifications (text documents, or UML diagrams).\n    *   Contextual Understanding: Use A.I. model to infer implicit requirements (e.g., \"FIFO depth = 16\" implies overflow/underflow conditions).\n2.  Model Generation\n    *   Code Synthesis: Convert parsed specifications into executable golden models.\n        *   Example: Translate \"32-bit CRC32 calculator\" into a Python function using the IEEE 802.3 polynomial.\n    *   Behavioral Cloning: Train A.I. models on existing golden model-DUT pairs to learn specification-to-code mappings.\n3.  Self-Validation\n    *   Consistency Checks: Use formal methods (e.g., SMT solvers) to verify AI-generated models against specifications.\n    *   Adaptive Learning: Refine models using test failures and coverage feedback from verification environments.\n\nExpected Outcomes\n-----------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#expected-outcomes-3)\n\n*   AI-powered specification parser to extract DUT functionalities\n*   Automated synthesis of golden/reference models from specifications\n*   Behavioral cloning for learning specification-to-code mappings\n*   Formal verification and self-validation using SMT solvers\n*   Integration with UVM-based verification environments\n\nProject 05: General Test Bench for RISC-V CPUs Using PYUVM\n----------------------------------------------------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#project-05-general-test-bench-for-risc-v-cpus-using-pyuvm)\n\n**Difficulty:** Medium\n\n**Designation**: 350 hours (large)\n\n**Required Skills & Tools:** UVM, SystemVerilog, Python, Functional Verification, Hardware Verification, Behavioral Modeling.\n\n**Mentors:** [Zeeshan Rafique](mailto:zrafique.uit.edu)\n\n**Chat Channel:** posting soon\n\nOverview\n--------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#overview-4)\n\nWith the increasing adoption of RISC-V as an open-source Instruction Set Architecture (ISA), there is a growing need for effective and reusable verification methodologies. This project aims to develop a general test bench for RISC-V CPUs using pyuvm, a Python-based Universal Verification Methodology (UVM) framework. The goal is to create a structured, reusable, and automated verification environment that facilitates CPU validation, functional correctness, and compliance testing.\n\n### Benefits to the Community\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#benefits-to-the-community)\n\n*   Unified Verification Framework : Provides a consistent and reusable test environment across different RISC-V CPU implementations.\n*   Accessibility: Uses Python and pyuvm, making UVM-based verification more accessible to a broader audience.\n*   Automation: Supports automated test execution and result analysis, reducing the manual effort in CPU verification.\n*   Compliance and Debugging: Ensures conformance with the RISC-V specification and aids in debugging CPU designs.\n\nMethodology\n-----------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#methodology-3)\n\n**Test Bench Architecture:**\n\n*   Modular design with transaction-level modeling.\n*   Sequence generation for instruction execution.\n*   Coverage collection and analysis.\n*   Integration with RISC-V Simulators:\n*   Support for Verilator and Spike.\n*   Automated simulation result analysis.\n\n**Test Suite Development:**\n\n*   Basic functional tests (ALU, control flow, memory access, etc.).\n*   Compliance tests for RISC-V ISA validation.\n*   Directed and random instruction sequences for robustness.\n\n**Automation and Reporting:**\n\n*   Python-based scripting for test execution.\n*   Logging and result visualization.\n\nExpected Outcomes\n-----------------\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#expected-outcomes-4)\n\n*   A generic test bench framework for RISC-V CPUs using pyuvm.\n*   A set of reusable test cases covering core CPU functionalities.\n*   Integration with open-source RISC-V simulators (e.g., Verilator, Spike).\n*   Scripts for automated testing and reporting.\n*   Documentation on usage and extension.\n\n**Skills Required to standout:**\n\n*   Familiarity with RISC-V architecture and CPU design.\n*   Experience with Python-based verification frameworks.\n*   Knowledge of UVM and hardware simulation tools.\n*   Basic understanding of Formal verification.\n*   Understanding of Verilator, Spike, or other RISC-V simulators (preferred).\n\n**Future Enhancements:**\n\n*   Extend coverage to advanced RISC-V features (e.g., vector extensions, privileged mode testing).\n*   Integrate with formal verification tools.\n*   Support multi-core RISC-V CPU verification.\n\n### References:\n\n[](https://github.com/merledu/Google-Summer-of-Code/wiki/GSoC'25-Project-Ideas-List#references)\n\n*   [PYUVM Documentation](https://github.com/pyuvm/pyuvm)\n*   [Cocotb](https://github.com/cocotb/cocotb)\n*   [RISC-V Specifications](https://riscv.org/specifications/)\n*   [RISC-V Spike Simulator](https://github.com/riscv-software-src/riscv-isa-sim)\n*   [Verilator](https://www.veripool.org/wiki/verilator)\n"}