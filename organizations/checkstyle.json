{"name":"checkstyle","description":"Helps to adheres of Java coding standard","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/checkstyle","ideas_url":"https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas","logo":"https://summerofcode.withgoogle.com/media/org/checkstyle/e8ubktvaft8eljli-360.png","technologies":["java","antlr","artificial-intelligence"],"topics":["static code analysis\\u200e","code review tool","coding standards","coding conventions","artificial-intelligence"],"projects":[{"project_name":"AI-Powered XPath Generator for Checkstyle Suppressions","summary":"Develop a solution using machine learning to generate XPath queries for suppressing Checkstyle violations based on user prompts and code context.","difficulty":"hard"},{"project_name":"Improve Modules used in Google Style","summary":"Enhance the quality and reduce false positives of modules in Checkstyle that implement the Google style guide.","difficulty":"hard"},{"project_name":"Auto-fix Module","summary":"Implement an auto-fix functionality in Checkstyle to automatically correct formatting issues in code, improving user experience and reducing manual work.","difficulty":"hard"},{"project_name":"Markdown Javadoc Support","summary":"Integrate support for Markdown-style Javadoc comments in Checkstyle, aligning with modern documentation practices introduced by JEP 467.","difficulty":"hard"},{"project_name":"Improve Performance of Html-formatted Javadoc parser and create new Markdown Javadocs parser","summary":"Enhance the performance of existing Javadoc parsing while adding support for Markdown Javadocs, modernizing the documentation capabilities of Checkstyle.","difficulty":"hard"},{"project_name":"Optimization of distance between methods in single Java class","summary":"Develop a feature that minimizes the distance between method declarations and their first usage in code to improve readability.","difficulty":"hard"},{"project_name":"Reconcile formatters of Eclipse, NetBeans and IntelliJ IDEA IDEs by Checkstyle config","summary":"Create a unified Checkstyle configuration that works consistently across multiple IDEs to prevent formatting conflicts within teams.","difficulty":"hard"},{"project_name":"Coverage of Documentation Comments Style Guide and performance improvement","summary":"Automate the validation of Javadoc comments against style guidelines and improve the performance of the Javadoc parser in Checkstyle.","difficulty":"hard"},{"project_name":"Open JDK Code convention coverage","summary":"Ensure that Checkstyle covers the Open JDK Code conventions by reviewing and integrating rules from both existing and new guidelines.","difficulty":"hard"},{"project_name":"Spellcheck of Identifiers by English dictionary","summary":"Implement spell-checking for Java identifiers in Checkstyle to improve code readability and prevent typos.","difficulty":"hard"},{"project_name":"Patch Suppression improvement","summary":"Improve Checkstyle's filtering of suppressions to allow existing code to remain until developers address new issues, easing the integration of Checkstyle into active projects.","difficulty":"hard"},{"project_name":"Extend Checker Framework Integration","summary":"Enhance the integration of the Checker Framework into Checkstyle's codebase to improve code quality and maintainability.","difficulty":"hard"},{"project_name":"Upgrade dependencies to use latest version of libraries and use their features","summary":"Upgrade Checkstyle’s dependencies to the latest versions of libraries and integrate new features available in those libraries.","difficulty":"intermediate"},{"project_name":"Enhance Mutation Testing Coverage","summary":"Improve mutation testing coverage in Checkstyle by reducing existing suppressions and creating additional tests for untested areas.","difficulty":"intermediate"},{"project_name":"Automated Website Generation","summary":"Automate the documentation generation process to ensure that information is consistent, accurate, and easy to maintain for the Checkstyle project.","difficulty":"intermediate"},{"project_name":"Eliminate Maven Plugin Usage","summary":"Remove dependencies on the Maven Checkstyle plugin to allow for more flexibility and independence in the Checkstyle development process.","difficulty":"intermediate"}],"jina_response":"Title: Checkstyle GSoC 2025 Project Ideas\n\nURL Source: https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas\n\nMarkdown Content:\n*   [AI-Powered XPath Generator for Checkstyle Suppressions](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-ai-powered-xpath-generator-for-checkstyle-suppressions)\n    \n*   [Improve Modules used in Google Style](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-improve-modules-used-in-google-style)\n    \n*   [Auto-fix Module](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-auto-fix-module)\n    \n*   [Markdown Javadoc Support](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-markdown-javadoc-support)\n    \n*   [Improve Performance of Html-formatted Javadoc parser and create new Markdown Javadocs parser](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-improve-performance-of-html-formatted-javadoc-parser-and-create-new-markdown-javadocs-parser)\n    \n*   [Optimization of distance between methods in single Java class](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-optimization-of-distance-between-methods-in-single-java-class)\n    \n*   [Reconcile formatters of Eclipse , NetBeans and IntelijIdea IDEs by Checkstyle config](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-reconcile-formatters-of-eclipse--netbeans-and-intellij-idea-ides-by-checkstyle-config)\n    \n*   [Coverage of Documentation Comments Style Guide and performance improvement](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-coverage-of-documentation-comments-style-guide-and-performance-improvement)\n    \n*   [Open JDK Code convention coverage](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-open-jdk-code-convention-coverage)\n    \n*   [Spellcheck of Identifiers by English dictionary](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-spellcheck-of-identifiers-by-english-dictionary)\n    \n*   [Patch Suppression improvement](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-patch-suppression-improvement)\n    \n*   [Extend Checker Framework Integration](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-extend-checker-framework-integration)\n    \n*   [Upgrade dependencies to use latest version of libraries and use their features](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-upgrade-dependencies-to-use-latest-version-of-libraries-and-use-their-features)\n    \n*   [Enhance Mutation Testing Coverage](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-enhance-mutation-testing-coverage)\n    \n*   [Eliminate Maven Plugin Usage](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-eliminate-maven-plugin-usage)\n    \n*   [Automated Website Generation](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-automated-website-generation)\n    \n\n* * *\n\n### Project Name: AI-Powered XPath Generator for Checkstyle Suppressions\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-ai-powered-xpath-generator-for-checkstyle-suppressions)\n\n**Skills required**:\n\n*   Java (advanced)\n*   Knowledge of XPath\n*   Experience with machine learning frameworks\n*   Basic understanding of Abstract Syntax Trees (AST)\n*   Familiarity with Docker\n\n**Project goal**: Develop a local LLM-based solution that generates optimal XPath queries to suppress specific Checkstyle violations based on user prompts, violation details, and code context.\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Ruslan Diachenko, Roman Ivanov, Andrei Paikin, Timur Tibeyev\n\n**Description**: Creating XPath expressions to suppress Checkstyle violations is a complex task requiring deep understanding of both XPath syntax and AST structure. This leads to either overly broad suppressions hiding important issues or overly specific rules needing frequent updates. This project aims to create an AI-powered system to convert Checkstyle violations and user instructions into precise XPath expressions for violation suppression. The core focus is on developing a containerized LLM-based solution that can understand both the violation context and user intent to generate accurate XPath queries.\n\nA preliminary [proof of concept (PoC)](https://github.com/rdiachenko/checkstyle-xpath-llm-poc) demonstrates the basic feasibility of using LLMs for XPath generation. While this PoC serves as an experimental starting point, the GSoC project will require a complete redesign and implementation to create a production-ready solution.\n\n**Deliverables**:\n\n*   Containerized LLM-based solution for XPath generation\n*   Command-line interface for basic interaction\n*   Basic documentation for setup and usage\n*   Fix for all issues with \"xpath\" label in the Checkstyle repository\n\n**QnA**: [https://discord.com/channels/845645228467159061/1338507765207007242](https://discord.com/channels/845645228467159061/1338507765207007242) ([invite](https://discord.gg/FWBzr9kZZE))\n\n* * *\n\n### Project Name: Upgrade dependencies to use latest version of libraries and use their features\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-upgrade-dependencies-to-use-latest-version-of-libraries-and-use-their-features)\n\n**Skills required**: Java, Groovy, BASH, continuous integration, basic understanding of testing principles\n\n**Project goal**: upgrade our jdk to 17 and 21, bump all other dependencies\n\n**Project size**: medium (175 hours)\n\n**Complexity Rating**: intermediate\n\n**Mentors**: Roman Ivanov,\n\n**Description**:\n\nwe use jdk11, whole world already use jdk21 , we need to bump minimal jdk usage to jdk17 and than to jdk21. Bump version of apache doxia, and other dependencies.\n\n**Deliverables**:\n\n*   bump jdk dependency\n*   bump for doxia dependencies\n*   bump for intelij idea inspection\n*   activate Checks UnusedLambdaParameterShouldBeUnnamed, UnusedCatchParameterShouldBeUnnamed, SealedShouldHavePermitsList, WhenShouldBeUsed, MissingNullCaseInSwitch\n*   [use maven wrapper](https://maven.apache.org/wrapper/)\n*   migrate our code base to new nio jdk api - [https://github.com/checkstyle/checkstyle/issues/16155](https://github.com/checkstyle/checkstyle/issues/16155)\n*   create module-info.java, see initial activity [https://github.com/checkstyle/checkstyle/pull/14139](https://github.com/checkstyle/checkstyle/pull/14139)\n\n**QnA**: [https://discord.com/channels/845645228467159061/1338509064669495377](https://discord.com/channels/845645228467159061/1338509064669495377) ([invite](https://discord.gg/BgSrwjRmtj))\n\n* * *\n\n### Project Name: Markdown Javadoc Support\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-markdown-javadoc-support)\n\n**Skills required:** Java, basic understanding of testing principles, basic understanding of static analysis\n\n**Project type:** new feature implementation.\n\n**Project goal:** Integrate support for Markdown Javadoc comments in Checkstyle.\n\n**Project size:** large (350 hours)\n\n**Complexity Rating:** hard\n\n**Mentors**: Roman Ivanov, Nick Mancuso\n\n**Description:**\n\nWith the introduction of [JEP 467](https://openjdk.org/jeps/467), Java supports Markdown-style documentation comments. This feature modernise Java's documentation capabilities but is not currently supported in Checkstyle. The current Javadoc parsing in Checkstyle is tightly coupled to the traditional `/** ... */` syntax and HTML-based formatting, presenting challenges in extending support for Markdown's structure. This project aims to enhance Checkstyle by introducing new grammar and update exisiting checks to support Markdown Javadoc comments.\n\n**Deliverables**\n\n*   New implementation of grammar for Markdown Javadoc Comments\n*   New tokens to identify and validate elements specific to Markdown Javadoc syntax.\n*   New Checkstyle Checks for new format of javadoc, ideas on what should be validated should be taken from existing Checks.\n*   Creation of new checks (if necessary): Create new checks to enforce Markdown-specific best practices.\n\n**QnA**: [https://discord.com/channels/845645228467159061/1338509670255562772](https://discord.com/channels/845645228467159061/1338509670255562772) ([invite](https://discord.gg/8Pwv8RPKqs))\n\n* * *\n\n### Project Name: Improve Performance of Html-formatted Javadoc parser and create new Markdown Javadocs parser\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-improve-performance-of-html-formatted-javadoc-parser-and-create-new-markdown-javadocs-parser)\n\n**Skills required:** strong Java, deep understanding of testing principles, understanding of how language grammar works\n\n**Project type:** improvement and new feature implementation.\n\n**Project goal:** improve Performance of Html formatted Javadoc Check and parsing support of Markdown Javadocs.\n\n**Project size:** large (350 hours)\n\n**Complexity Rating:** hard\n\n**Mentors**: Roman Ivanov\n\n**Description:**\n\nPerformance improvement of existing javadoc parser are expected, see details at [https://github.com/checkstyle/checkstyle/issues/11193](https://github.com/checkstyle/checkstyle/issues/11193) .\n\nWith the introduction of [JEP 467](https://openjdk.org/jeps/467), Java supports Markdown-style documentation comments. This feature modernise Java's documentation capabilities but is not currently supported in Checkstyle. This project aims to enhance Checkstyle by introducing new grammar, implementation of few basic validations just as prove of concept and example of new parser posibilities.\n\n**Deliverables**\n\n*   Improved implementation of html based javadoc Checks, possible breaking changes is fine.\n*   Update for all AST based existing Checks to use new html based parser (we can update some Checks only if there will be time constraints).\n*   New implementation of grammar for Markdown Javadoc Comments\n*   New tokens to identify and validate elements specific to Markdown Javadoc syntax.\n*   Few Checkstyle Checks for new format of javadoc, ideas on what should be validated should be taken from existing Checks.\n*   New documentation html page to explain how to write Check for markdown javadoc validation.\n\n**QnA**: [https://discord.com/channels/845645228467159061/1338849908211580969](https://discord.com/channels/845645228467159061/1338849908211580969) ([invite](https://discord.gg/FN5mUX2YmH))\n\n* * *\n\nProject Name: Improve Modules used in Google Style\n--------------------------------------------------\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-improve-modules-used-in-google-style)\n\n**Skills required**: Java, basic understanding of testing principles, basic understanding of static analysis\n\n**Project goal**: improve quality of google style guide implementation\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Mauryan Kansara\n\n**Description**:\n\nUser reported numeour issues for modules that are in use in Google style. We need to fix all of them to improve user experience and have less false positives.\n\n**Deliverables**:\n\n*   Investigate whole issue tracker of checkstyle repository for modules/Checks that are in use in [Google style config](https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml) , and if configuration is same as in issue, issue should be qualified for project and marked by label [https://github.com/checkstyle/checkstyle/labels/google%20style](https://github.com/checkstyle/checkstyle/labels/google%20style) .\n*   We already started process of triaging issues that affects user experience, see list it [https://github.com/orgs/checkstyle/projects/10](https://github.com/orgs/checkstyle/projects/10), this work should be continued and finished.\n*   Resolve all reported [issues with Google Style config](https://github.com/checkstyle/checkstyle/labels/google%20style)\n\n**QnA**: [https://discord.com/channels/845645228467159061/1338510140277522442](https://discord.com/channels/845645228467159061/1338510140277522442) ([invite](https://discord.gg/EqbuAmZA3q))\n\n* * *\n\n### Project Name: Auto-fix Module\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-auto-fix-module)\n\n**Skills required**: intermediate Java\n\n**Project type**: new feature implementation.\n\n**Project goal**: implement new module, test it on real projects\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Baratali Izmailov, Vyom Yadav\n\n**Description**: Checkstyle is known as tool that raises numerous minor issues. There are so many of these and they are so minor that it is hard to find time and engineer to fix them. Most of the issues are so easy to fix but navigation to certain part of the code and making the fix takes time. Engineers could spend this time doing something more valuable. Implementation of an auto-fix functionality could significantly simplify introduction of checkstyle to project as it will do most tedious work automatically.\n\nThe major part of checkstyle violations are specifically targeting the formatting of the code. It is often that IDE formatting settings are not in sync with the checkstyle configuration. The IDE can fix the code itself as part of it’s auto-formatting. The same should be done by Checkstyle. Each Check that is targeting the formatting part of the code should have “Fix” functionality built-in. This functionality will convert the code with the violation to compliant code without any user interaction. Such functionality is in huge demand by users.\n\nIn scope of this project, it is required to review all existing functionality of auto-fix of code in plugins and tools to learn challenges they have and see the whole list of requirements to resolve such a task. Make implementation of auto-fix for formatting Checks as part of a special Module that takes all reported violations and fix them that will support auto-fix. If the resulting functionality proves to be easy to maintain, and might be reused by checkstyle plugins, then propose API changes can be brought to the core library and allow any plugins to reuse it.\n\nMore details at [https://github.com/checkstyle/checkstyle/issues/7427](https://github.com/checkstyle/checkstyle/issues/7427)\n\nLinks to similar tools: [https://docs.openrewrite.org/tutorials/automatically-fix-checkstyle-violations](https://docs.openrewrite.org/tutorials/automatically-fix-checkstyle-violations), [https://github.com/solven-eu/cleanthat](https://github.com/solven-eu/cleanthat)\n\nAi autofix for checkstyle: [https://link.springer.com/article/10.1007/s10664-021-10107-0](https://link.springer.com/article/10.1007/s10664-021-10107-0)\n\nAuto fix in Eclipse [https://github.com/checkstyle/eclipse-cs/pull/566/files#diff-13e277cb135ea2a474dad0b4ac46b5cb020f9c03a2eb6676b15de010f8aec369R549](https://github.com/checkstyle/eclipse-cs/pull/566/files#diff-13e277cb135ea2a474dad0b4ac46b5cb020f9c03a2eb6676b15de010f8aec369R549)\n\nOpenRewrite project - example of enabling at eclipse-cs [https://github.com/checkstyle/eclipse-cs/pull/805](https://github.com/checkstyle/eclipse-cs/pull/805)\n\n**Deliverables**:\n\n*   selection of existing library that will do code modification or making our own implementation\n*   defining api for triggering code changes\n*   selection of Checks that can produce violations that are auto fixable\n*   implementation of auto fix for selected Checks\n*   find a model to avoid conflicts of auto fixes\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214569225247793282](https://discord.com/channels/845645228467159061/1214569225247793282) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Optimization of distance between methods in single Java class\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-optimization-of-distance-between-methods-in-single-java-class)\n\n**Skills required**: basic Java , good analytical abilities, good background in mathematics.\n\n**Project type**: new feature implementation.\n\n**Project goal**: to make quality practices automated and publicly available.\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Baratali Izmailov, Ruslan Diachenko\n\n**Description**:\n\nThis task is ambitious attempt to improve code read-ability by minimizing user jump/scrolls in source file to look at details of method implementation when user looks at method first usage.\n\nIt is required to analyse a lot of code and find a model to minimize distance between methods first usage and method declaration in the same file and respect users preferences to keep grouped overloaded and overridden methods together. Some other preferences may appear during investigation of open-source projects.\n\nFirst step is already done by our team, we created a web service that already calculate distances between methods and make [DSM](https://en.wikipedia.org/wiki/Design_structure_matrix) matrix to ease analysis - [methods-distance](https://github.com/sevntu-checkstyle/methods-distance). We already practice it in our project.\n\nAs a second step it is required to use a matrix of distances between methods and optimize it by some empiric algorithm to allow user define expected model of class by arguments. This will allow to use this algorithm as a Check to enforce code structure automatically during build time.\n\n**Prove of necessity**: we have a number of PRs where contributors put new methods at any possible place in a class but better place is close to first usage. [Example #1](https://github.com/checkstyle/checkstyle/pull/2845#issuecomment-176775813), [Example #2](https://github.com/checkstyle/checkstyle/pull/1518#issuecomment-137070056), [Example #3](https://github.com/checkstyle/checkstyle/pull/1228#issuecomment-113699926), ....\n\n**Deliverables**:\n\n*   new Checkstyle's Check with optimization algorithm to share the algorithm with whole java community.\n*   analytical report that proves reason why default values for Check parameters are selected\n*   article with all details of analysis and algorithm details;\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214569693336182864](https://discord.com/channels/845645228467159061/1214569693336182864) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Reconcile formatters of Eclipse , NetBeans and IntelliJ IDEA IDEs by Checkstyle config.\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-reconcile-formatters-of-eclipse--netbeans-and-intellij-idea-ides-by-checkstyle-config)\n\n**Skills required**: basic Java.\n\n**Project type**: new feature implementation, analysis of existing IDE features.\n\n**Project goal**: to make well-known quality practices publicly available.\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Andrei Paikin, Mauryan Kansara\n\n**Description**:\n\nUsage of different IDEs in the same team is already a serious problem, as different IDEs format code base on their own rules and configurations. Unwanted formatting changes happen to code which complicate code-review process. Problem become more acute when project use static analysis tool like Checkstyle that has a wide range of code formatting Checks.\n\nIt is required to make it possible to use the same Checkstyle config to work in IDEs without conflicts with IDEs internal formatters. This will help team members be independent on IDE choice but at the same time keep the same format and code style throughout the team.\n\nMain focus of this project is the analysis of formatting abilities of IDEs (indentation, imports order, declaration order, separator/operator wrap, .....) . Update existing Checkstyle Rules to be able to work in the similar and non-conflicting way.\n\n**Deliverables**:\n\n*   create configuration for IDEs for Checkstyle project to let Checkstyle team use it and auto-format code to conform with checkstyle\\_check.xml file that is used by Continuous Integration.\n*   create Checkstyle config that follows default Eclipse formatting + inspection rules\n*   create Checkstyle config that follows default IntelliJ IDEA formatting + inspection rules\n*   create Checkstyle config that follows default NetBeans formatting + inspection rules\n*   Deep refactoring of Indentation Check to fix its numerous problems.\n\n**Prove of necessity**: [mail-list post #1](https://groups.google.com/forum/#!searchin/sevntu-checkstyle/formatter/sevntu-checkstyle/tl7ZKsk-Lss/UK0IAvb-j7oJ), [mail-list post #2](http://checkstyle.2069334.n4.nabble.com/CheckStyle-to-Eclipse-formatter-td2070054.html), [mail-list post #3](https://groups.google.com/forum/#!searchin/checkstyle/Idea/checkstyle/7zJ4drblSd8/fu1kyJHMGpAJ) , [discussion #1](https://github.com/google/styleguide/issues/27#issuecomment-104002872)\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214571037451100180](https://discord.com/channels/845645228467159061/1214571037451100180) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Open JDK Code convention coverage\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-open-jdk-code-convention-coverage)\n\n**Skills required**: basic Java.\n\n**Project type**: new feature implementation.\n\n**Project goal**: to make well-known quality practices publicly available.\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Baratali Izmailov, Vyom Yadav\n\n**Description**:\n\n[OpenJdk Code Convention](https://www.oracle.com/java/technologies/javase/codeconventions-contents.html) was one of the first guidelines on how to write Java code. OpenJdk Code Convention is marked as outdated (because of date of last update made in it) but best practices described there do not have an expiration date. [New OpenJDK Java Style Guidelines](http://cr.openjdk.java.net/~alundblad/styleguide/) is close to the final version and most likely will be successor of OpenJdk Code Convention. But there is a number of projects in Apache that still follow OpenJdk rules, so both configurations are in need by community.\n\nOpenJdk Code Convention is already partly covered by Checkstyle, known as Sun Code Convention. A lot of validation Rules were added and changed in Checkstyle from the time when Sun's configuration was created ([2004 year](https://github.com/checkstyle/checkstyle/commits/18f6ebbcad23e88e3ae30fc79be464b8b7772a0d/sun_checks.xml)).\n\nDuring the project it is required to review both documents in detail and prove publicly that Checkstyle covers all guideline rules. Missed functionality needs to be created, blocking bugs need to be fixed. Page [OpenJdk Java Style Checkstyle Coverage](http://checkstyle.sourceforge.net/sun_style.html) needs to be updated. New page \"New OpenJDK's Java Style Checkstyle Coverage\" need to be created. Both pages need to be formatted in the same way as it is done for [Google's Java Style Checkstyle Coverage](http://checkstyle.sourceforge.net/reports/google-style/guava/).\n\n**Prove of necessity**: [javadoc issues on github](https://github.com/checkstyle/checkstyle/issues?labels=javadoc&page=1&state=open); [results of open survey](https://www.surveymonkey.com/results/SM-8MYVFYL7/); [request from users for Openjdk coverage support](https://github.com/checkstyle/checkstyle/issues/6490).\n\n**Deliverables**:\n\n*   embedded config file with all modules that are required for coverage\n*   html page that explains how each paragraph in style guide is covered by Checkstyle\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214571550783840307](https://discord.com/channels/845645228467159061/1214571550783840307) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Coverage of Documentation Comments Style Guide and performance improvement\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-coverage-of-documentation-comments-style-guide-and-performance-improvement)\n\n**Skills required**: basic Java.\n\n**Project type**: new feature implementation.\n\n**Project goal**: to make well-known quality practices publicly available.\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Baratali Izmailov\n\n**Description**:\n\nProject will mainly be focusing on automation of [Documentation Comments (javadoc) guidelines](http://www.oracle.com/technetwork/articles/java/index-137868.html) by Checkstyle Checks. Reliable comments parsing was a major improvement in Checkstyle during GSoC 2014, archived results need to be reused to reliably implement automation of Javadoc best practices.\n\nSeparate configuration file with newly created Checks need to be created. Best practices in documentation make sense not for all projects. Javadoc validation matters only for library projects that need to expose online documentation in web publicly.\n\nPerformance improvement of existing javadoc parser are expected, see details at [https://github.com/checkstyle/checkstyle/issues/11193](https://github.com/checkstyle/checkstyle/issues/11193) .\n\n**Deliverables**: The result of this project will be a configuration file with the maximum possible coverage of Comment style guide. Report should look like [Google's Java Style Checkstyle Coverage](http://checkstyle.sourceforge.net/google_style.html). Performance improvements of javadoc parsing. If there will be time left we can focus on coverage of guidelines from [https://blog.joda.org/2012/11/javadoc-coding-standards.html](https://blog.joda.org/2012/11/javadoc-coding-standards.html)\n\n**Prove of necessity**: [javadoc issues on github](https://github.com/checkstyle/checkstyle/issues?labels=javadoc&page=1&state=open).\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214571282776064130](https://discord.com/channels/845645228467159061/1214571282776064130) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Spellcheck of Identifiers by English dictionary\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-spellcheck-of-identifiers-by-english-dictionary)\n\n**Skills required**: intermediate Java.\n\n**Project type**: new feature implementation.\n\n**Project goal**: implement spell checking for java code for all identifiers .\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Andrei Paikin\n\n**Description**:\n\nThe correct spelling of words in code is very important, since a typo in the name of method that is part of API could result in serious problem. Mistakes in names also make reading of code frustrating and misleading, especially when a typo in one letter makes developer to read javadoc or even implementation of the method. Two most popular IDEs (Eclipse and IntelliJ IDEA) already have spell-check ability. It will be beneficial for Checkstyle to have the same functionality that could be used in any Continuous Integration system by Command Line Interface or as part of build tool (maven, ant, gradle, ....) with wide range of options to customize to users needs. Features of existing spell-checkers need to be analyzed -  \n[IntelliJ IDEA Spellchecking](https://www.jetbrains.com/help/idea/using-code-editor.html#spellchecking) , [Eclipse Spelling](http://help.eclipse.org/mars/index.jsp?topic=%2Forg.eclipse.platform.doc.user%2Freference%2Fref-36.htm). There are numbers of open-source projects that do spell-check. It is ok to reuse them if license is compatible. Examples: [https://code.google.com/archive/p/bspell/](https://code.google.com/archive/p/bspell/) , [http://www.softcorporation.com/products/spellcheck/](http://www.softcorporation.com/products/spellcheck/), ... [https://github.com/giraciopide/shellcheck-maven-plugin](https://github.com/giraciopide/shellcheck-maven-plugin), [https://github.com/codespell-project/codespell](https://github.com/codespell-project/codespell)\n\n**Deliverables**:\n\n*   regular Checkstyle module that does validation\n*   such module should be applied to all sources of our Code\n*   disablement of shell based implemnetation of spellcheck in our project for java sources.\n*   documentation on how to use module\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214572273038786631](https://discord.com/channels/845645228467159061/1214572273038786631) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Automated Website Generation\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-automated-website-generation)\n\n**Skills required**: Java, basic understanding of testing principles, technical writing, continuous integration\n\n**Project goal**: organize documentation and automate its maintenance\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: intermediate\n\n**Mentors**: Roman Ivanov, Vyom Yadav\n\n**Description**:\n\nThis project is designed to tackle the persistent challenge of maintaining accurate and current documentation in our dynamic development environment. Acknowledging the limitations of manual documentation processes, this initiative introduces automation to streamline content creation, with a focus on ensuring consistent formats and robust verification checks. The project's goal is to provide users with reliable, standardized, and regularly updated information while equipping contributors with templates and automated tools to simplify the incorporation of details for new modules. By elevating documentation practices, this project aligns with industry best practices, fostering clarity for both users and contributors within the Checkstyle project.\n\n**Deliverables**:\n\n*   migration to latest maven site plugin and doxia library.\n*   Reusage of xdoc templates model that we already have.\n*   Introduction of description macros that would take content from javadoc of module\n*   Resolution of edge cases in documentation generation\n*   Extend and make consistent all check usage examples\n*   Reduce/eliminate manual documentation updates for examples\n*   Introduce checks to ensure that all configuration options are covered in examples\n*   Moving website generation logic to separate project to avoid extra classes and dependencies in checkstyle jar artifact.\n*   HTML Enhancements for our website to ease navigation and user experience by [search toolbar](https://github.com/checkstyle/checkstyle/discussions/16214)\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214574452021530686](https://discord.com/channels/845645228467159061/1214574452021530686) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Enhance Mutation Testing Coverage\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-enhance-mutation-testing-coverage)\n\n**Project goal**: reduce technical debt and improve code quality\n\n**Skills required**: Java, basic understanding of testing principles\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: intermediate\n\n**Mentors**: Roman Ivanov, Vyom Yadav\n\n**Description**:\n\nCheckstyle has recently enriched its mutation testing suite with a set of new [mutators](https://pitest.org/quickstart/mutators/) powered by [pitest](https://pitest.org/), a state-of-the-art mutation testing system renowned for providing gold standard test coverage in Java and the JVM. This project focuses on a meticulous review of suppressions employed within Checkstyle to manage pitest violations, aiming to identify opportunities for new tests or adjustments to existing ones that can effectively resolve these suppressions. The objective is to ensure the continued functional soundness of the code, potentially involving a deep dive into module logic to facilitate test identification and contribute to the resolution of suppression-related issues.\n\n**Deliverables**:\n\n*   Review of existing suppressions of pitest survivals\n*   New tests or improvements to existing tests\n*   Resolution of 100% of existing suppressions\n*   usage of new mutators [https://docs.arcmutate.com/docs/extended-operators.html](https://docs.arcmutate.com/docs/extended-operators.html)\n*   Documentation, including examples\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214573720056762468](https://discord.com/channels/845645228467159061/1214573720056762468) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Eliminate Maven Plugin Usage\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-eliminate-maven-plugin-usage)\n\n**Skills required**: Java, Groovy, Maven\n\n**Project goal**: remove all usages of maven-checkstyle-plugin in our tools\n\n**Project size**: medium (175 hours)\n\n**Complexity Rating**: intermediate\n\n**Mentors**: Roman Ivanov, Vyom Yadav\n\n**Description**:\n\nCheckstyle serves as a widely used library across various tools, with a notable dependency on the [maven-checkstyle-plugin](https://maven.apache.org/plugins/maven-checkstyle-plugin/) for continuous integration and regression testing. However, this reliance on an external tool has restricted our ability to introduce breaking changes to the Checkstyle project, given the potential disruptions it causes in testing. Consequently, we've had to implement workarounds to maintain the connection and dependence on the maven-checkstyle-plugin. To foster autonomy and minimize dependencies, Checkstyle is undertaking efforts to break away from this plugin and shift towards relying solely on tools under our maintenance. The list of connected issues below outlines specific areas that require modification to facilitate this transition.\n\n**Deliverables**:\n\n*   Remove all usages of maven-checkstyle-plugin in our tools\n*   Update documentation to reflect changes\n*   Update build, CI, and regression testing to use internal tools exclusively\n\n**Connected Issues**:\n\n*   [Launch/Diff Groovy should remove use of maven-checkstyle-plugin](https://github.com/checkstyle/contribution/issues/273)\n*   [Convert sevntu-checkstyle-check to ant run](https://github.com/checkstyle/checkstyle/issues/5385)\n*   [Convert regressions that use maven-checkstyle-plugin to CLI based](https://github.com/checkstyle/checkstyle/issues/11602)\n\n**Example of Plugin Issue**: [Upgrade XML logger to XML 1.1](https://github.com/checkstyle/checkstyle/issues/5168)\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214574180591214592](https://discord.com/channels/845645228467159061/1214574180591214592) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Patch Suppression improvement\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-patch-suppression-improvement)\n\n**Skills required**: basic Java\n\n**Project type**: extension of existing feature implementation.\n\n**Project goal**: implement new strategies for existing filter/suppression module or improve existing\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov, Ruslan Diachenko\n\n**Description**: Introducing Checkstyle to a project can be a challenging and NOT an easy job, especially when a project has massive amount of code, very active in development, and there are no resources to start a new process of code cleanup. It may require an extensive effort, especially when there is legacy code from previous contributors that becomes a monotonous job, that everyone tries to avoid. It is easy to say how code should look like, but may be hard to actually enforce rules in existing codebase.\n\nFor example [Guava is not following google style](https://github.com/google/guava/issues/1891), and it is easy to say how code should look like but hard to assign somebody to fix ALL problems from previous contributors. It is very boring activity that all will try to avoid. [Good practice from openjdk](http://cr.openjdk.java.net/~alundblad/styleguide/index-v6.html#toc-when-to-reformat-code) actually discourage code changes without good reason.\n\nBetter approach is to let existing code be as is and validate only new code. Checkstyle already has a wide array of filter functionality that could suppress certain violations if user classify a violation as “won’t fix”. Just getting started with setting up the initial suppressions still requires a huge effort to review all the violations, or organize a team on special cleanup process.\n\nThis project was originally done at [GSOC 2020](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2020-Project-Ideas#project-name-patch-suppression), but during usage of this [project](https://github.com/checkstyle/patch-filters) we found problems that checkstyle violations are still going beyond changed code that creates avalanche of change so it complicate usage of it in real project.\n\nWe need to invest focus on parsing of patch files to get more precise location of changes and be able skip violation if fix for it goes outside of changed lines. For example: user changing line wrapping of long signature of method and we should not demand decreasing of amount of parameters or fixing names, as this will trigger changes in other part of code.\n\nAs proof of success for this project, it is required to get some open source project onboard to use checkstyle and this new feature. It would be good to try collaborate one more time with Guava project or we can ask our friends in Eclipse-CS or Spring or Hbase project.\n\n**Deliverables**:\n\n*   new Filter in Chekstyle that is applied to our code base.\n*   documentation on how to use new filter.\n*   apply filer to eclpse-cs project to work on each update (address feedback from usage).\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214572538043043890](https://discord.com/channels/845645228467159061/1214572538043043890) ([invite](https://discord.gg/F6MkcwvZT8))\n\n* * *\n\n### Project Name: Extend Checker Framework Integration\n\n[](https://github.com/checkstyle/checkstyle/wiki/Checkstyle-GSoC-2025-Project-Ideas#project-name-extend-checker-framework-integration)\n\n**Skills required**: Java, basic understanding of testing principles, basic understanding of Java type system\n\n**Project goal**: Further usage of Checker Framework and increase internal knowledge base\n\n**Project size**: large (350 hours)\n\n**Complexity Rating**: hard\n\n**Mentors**: Roman Ivanov\n\n**Description**:\n\nThe goal of this project is to advance the integration of the [Checker Framework](https://checkerframework.org/) into our existing codebase, enhancing code quality, correctness, and maintainability. In addition to refining the setup already present in our build, the project will focus on incorporating the Checker Framework's type system into key components of our code and creating comprehensive documentation and best practices to guide developers in utilizing the framework effectively.\n\n**Deliverables**:\n\n*   Integrate Checker type system with codebase\n*   Refine existing build\n*   Develop internal documentation about our usage of Checker\n*   Provides examples, guidelines and best practices for developers to follow\n\n**QnA**: [https://discord.com/channels/845645228467159061/1214572824736571472](https://discord.com/channels/845645228467159061/1214572824736571472) ([invite](https://discord.gg/F6MkcwvZT8))\n"}