{"name":"JabRef e.V.","description":"Open Source bibliography manager","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/jabref-ev","ideas_url":"https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list","logo":"https://summerofcode.withgoogle.com/media/org/jabref-ev/ylevworrwqf9bw9g-360.png","technologies":["java","javafx","ai","bibtex"],"topics":["science","library","literature","latex","bibliography"],"projects":[{"project_name":"Improve Handling of Ancient Documents by OCR and AI","summary":"Integrate OCR technology into JabRef to allow full-text search of scanned PDFs, enhancing accessibility to historical literature.","difficulty":"Medium"},{"project_name":"Integrating JabRef's Integrity Check with VS Code via Language Server Protocol (LSP)","summary":"Develop a VS Code extension that utilizes JabRef's integrity check for real-time feedback while editing bibliography files, improving data quality.","difficulty":"Medium"},{"project_name":"Welcome Walkthrough","summary":"Create an engaging welcome screen for JabRef that helps new users configure settings, access features, and understand the software better.","difficulty":"Medium"},{"project_name":"Using PostgreSQL as Full Backend for JabRef","summary":"Transition JabRef from in-memory data storage to using PostgreSQL, reducing memory consumption and facilitating more efficient data handling.","difficulty":"Medium"},{"project_name":"Improved LibreOffice-JabRef Integration","summary":"Enhance JabRef's integration with LibreOffice for better citation management, including support for additional citation styles and seamless switching between them.","difficulty":"Large"},{"project_name":"Improved SLR Support","summary":"Enhance JabRef's features for conducting systematic literature reviews, improving the tool's efficiency for researchers.","difficulty":"Medium"},{"project_name":"Improved Journal Abbreviations","summary":"Redesign the journal abbreviation interface in JabRef, allowing users to customize and select from multiple lists more easily.","difficulty":"Small"},{"project_name":"Your Own Project","summary":"Propose and develop a new project idea that enhances JabRef based on user needs or feedback.","difficulty":"Varies"}],"jina_response":"Title: GSoC 2025 ideas list\n\nURL Source: https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list\n\nMarkdown Content:\nJabRef in Google Summer of Code 2025\n------------------------------------\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#jabref-in-google-summer-of-code-2025)\n\nJabRef is a powerful, open-source, cross-platform citation and reference management tool designed to help researchers stay organized and efficient. With JabRef, you can effortlessly collect, organize, and manage your literature sources, giving you more time to focus on what truly matters: your research.\n\nBy contributing to JabRef, you contribute to advancing global research. Trusted by over 10,000 researchers worldwide, JabRef plays a vital role in shaping the future of academic and scientific discovery. Your skills and creativity can help push the boundaries of what JabRef can achieve.\n\nBuilt in Java, JabRef is designed with a strong emphasis on high-quality, modern, and maintainable code. As a contributor, you’ll have the opportunity to enhance your technical skills, deepen your understanding of Java development, and learn best practices in open source collaboration. Whether you're a beginner or an experienced developer, working on JabRef will help you grow as a programmer while making a meaningful impact on a tool that supports researchers around the globe.\n\nWe are passionate about open source and pride ourselves on fostering collaboration within a diverse and inclusive community. JabRef is dedicated to providing a welcoming environment for newcomers to open source, making it an ideal starting point for anyone eager to contribute. With [four successful years](https://www.gsocorganizations.dev/organization/jabref-e.v./) of [Google Summer of Code (GSoC)](https://summerofcode.withgoogle.com/) participation, we’ve achieved significant milestones in enhancing JabRef as a user-friendly research tool. Each project has been a meaningful step toward empowering researchers worldwide. As a GSoC participant with JabRef, you'll have the opportunity to grow your technical skills, coding expertise, and open source experience. Beyond the invaluable learning, participants receive a stipend from Google and gain access to a global professional network that can open doors for their future.\n\nBelow, you’ll find some project ideas to inspire your contributions to JabRef through GSoC. We’ve also included links to provide more background information and context.\n\n### Links\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#links)\n\n*   [What is Google Summer of Code?](https://google.github.io/gsocguides/student/index)\n*   [GSoC timeline](https://developers.google.com/open-source/gsoc/timeline)\n    *   latest proposal deadline: TBA\n    *   coding until: TBA 18:00 UTC (can be extended under conditions)\n*   [GSoC stipends](https://developers.google.com/open-source/gsoc/help/student-stipends?hl=en): starting at 750 USD, depending on the country.\n*   [Google's guide on making first contact](https://google.github.io/gsocguides/student/making-first-contact)\n*   [Checklist for items contained in the proposal](https://github.com/JabRef/jabref/wiki/GSoC-Application)\n*   [Google's guide on wrting a good proposal](https://google.github.io/gsocguides/student/writing-a-proposal)\n\n(All summarized information is tentative. The definitive information is on the linked pages.)\n\nProjects\n--------\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#projects)\n\nThis page lists a number of **ideas** for potential projects to be carried out by the persons participating in Google Summer of Code 2025. This is by no means a closed list, so the possible contributors can **feel free to propose alternative activities related to the project** (the [list of feature requests](http://discourse.jabref.org/c/features) and the [GitHub issue tracker](https://github.com/JabRef/jabref/issues) might serve as an additional source of inspiration). Students are strongly encouraged to discuss their ideas with the developers and the community to improve their proposal until submission (e.g., using the [Gitter Channel](https://gitter.im/JabRef/jabref) or the [forum](http://discourse.jabref.org/)). It's also a good idea to start working on [one of the smaller issues](https://github.com/JabRef/jabref/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) to make yourself familiar with [the contribution process](https://github.com/JabRef/jabref/blob/master/CONTRIBUTING.md). Successful pull requests increase the chance of being accepted as a mentee.\n\n### Improve handling of ancient documents by OCR and AI\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#improve-handling-of-ancient-documents-by-ocr-and-ai)\n\nJabRef, a comprehensive literature management software, currently supports both handling metadata and text-based PDF documents. However, a significant limitation arises with scanned PDFs, particularly historical articles, which are not text-searchable due to their image-based format. This project aims to bridge this gap by integrating advanced OCR (Optical Character Recognition) technology, enabling full-text search in scanned PDFs.\n\n**Useful links:**\n\n*   A Document AI Package: [https://github.com/deepdoctection/deepdoctection](https://github.com/deepdoctection/deepdoctection)\n*   Hand-written text recognition in historical documents: [https://github.com/githubharald/SimpleHTR#handwritten-text-recognition-with-tensorflow](https://github.com/githubharald/SimpleHTR#handwritten-text-recognition-with-tensorflow)\n*   Java OCR with Tesseract: [Baeldung Guide](https://www.baeldung.com/java-ocr-tesseract)\n*   OCRmyPDF Installation and Usage: [GitHub Repository](https://github.com/ocrmypdf/OCRmyPDF#installation)\n*   ChatOCR and ChatGPT Integration: [Blog Article](https://www.blogmojo.de/chatgpt-plugin/chatocr/)\n*   AI-Powered OCR: [Addepto Blog](https://addepto.com/blog/ai-powered-ocr-optical-character-recognition-enhancing-accuracy-and-efficiency-in-document-analysis/)\n*   Tika OCR Integration: [Apache Tika Wiki](https://cwiki.apache.org/confluence/display/tika/tikaocr)\n*   Tesseract OCR Library: [Official Documentation](https://tesseract-ocr.github.io/)\n*   Surya AI powered SOTA OCR, better than Tesseract but coded in python [https://github.com/VikParuchuri/surya](https://github.com/VikParuchuri/surya)\n\n**Some aspects:**\n\n1.  Add an option to call an OCR engine from JabRef, e.g., cloud based or local installs\n2.  Define a common interface to support multiple OCR engines\n3.  Provide a good default set of settings for the OCR engines\n4.  Support expert configuration of the settings\n5.  Add the extracted text as a layer to the pdf so that Apache Lucene can parse it\n6.  Add an option to further process the text with Grobid for training and metadata extraction\n\n**Expected outcome:**\n\nA) Develop a common interface within JabRef to accommodate multiple OCR engines, ensuring flexibility and expandability. B) Enable expert users to fine-tune OCR settings, catering to specific needs or document formats.  \nC) Incorporate the OCR-extracted text as a searchable layer in PDFs, allowing Apache Lucene to index and look for the content.\n\n**Skills required:**\n\n*   Proficiency in Java programming.\n*   A keen interest and curiosity in document processing and AI technologies.\n\n**Possible mentors:**\n\n[@Siedlerchr](https://github.com/Siedlerchr), [@InAnYan](https://github.com/InAnYan/), [@calixtus](https://github.com/calixtus)\n\n**Project size:**\n\n175h (medium)\n\n### **Integrating JabRef's Integrity Check with VS Code via Language Server Protocol (LSP)**\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#integrating-jabrefs-integrity-check-with-vs-code-via-language-server-protocol-lsp)\n\n**Synopsis**\n\nJabRef is a widely used open-source reference manager supporting BibTeX and BibLaTeX. One of its features is the _Integrity Check_, which helps users identify potential issues in their bibliographic entries. This project aims to leverage JabRef's Integrity Check to provide real-time feedback in Visual Studio Code (VS Code) by implementing a Language Server Protocol (LSP)-based extension.\n\n**Benefits to the Community**\n\nCurrently, users rely on JabRef’s graphical interface to run integrity checks manually. By integrating these checks into VS Code, users can receive immediate feedback while editing BibTeX/BibLaTeX files, improving the quality of bibliographic data and ensuring compliance with best practices. The integration will also make JabRef’s functionality more accessible to users who prefer VS Code for LaTeX editing.\n\n**Deliverables**\n\n*   A **VS Code extension** that communicates with an LSP server to analyze BibTeX/BibLaTeX files.\n*   An **LSP server** that integrates JabRef’s Integrity Check and returns structured diagnostics (e.g., warnings and errors).\n*   **Real-time feedback** in VS Code’s Problems panel, highlighting issues in bibliography files.\n*   **Unit tests** and documentation to ensure maintainability and ease of use.\n\n**Technical Details**\n\n*   The **LSP server** will be implemented in Java, leveraging JabRef’s existing Integrity Check logic.\n*   The **VS Code extension** will be written in TypeScript and communicate with the LSP server.\n*   Diagnostics will be provided in **real-time** as users edit `.bib` files.\n*   Optional: **Quick fixes** for common integrity issues.\n*   Related work: [https://plugins.jetbrains.com/plugin/9473-texify-idea](https://plugins.jetbrains.com/plugin/9473-texify-idea) offers BibTeX error reporting in IntelliJ idea.\n\n**Expected Outcomes**\n\nBy the end of GSoC, the VS Code extension should be functional and capable of detecting integrity issues in `.bib` files. The project will enhance the JabRef ecosystem by expanding its usability in modern LaTeX workflows.\n\n**Skills Required**\n\n*   Java (for LSP server and integration with JabRef)\n*   TypeScript (for VS Code extension development)\n*   Experience with Language Server Protocol (LSP) is a plus\n*   Familiarity with LaTeX/BibTeX/BibLaTeX is beneficial\n\n**Possible mentors:**\n\n[@koppor](https://github.com/koppor), [@calixtus](https://github.com/calixtus)\n\n**Project size:**\n\n175h (medium)\n\n### Welcome Walkthrough\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#welcome-walkthrough)\n\nThis project aims to create an engaging and informative first start screen for JabRef, enhancing the initial user experience and showcasing the best features of the software. This screen will differ from the standard interface displayed when no database is open, providing a tailored introduction for new users.\n\n**Hints**\n\n1.  Configuration of Paper Directory:\n    *   Implement a feature allowing users to easily set up and manage their [paper directory](https://docs.jabref.org/finding-sorting-and-cleaning-entries/filelinks#directories-for-files).\n    *   This should include a dialog asking for a directory if none is set.\n2.  Integration of Online Services:\n    *   Include options for update checks, connecting with online services like Grobid, fetchers, and full-text search capabilities.\n    *   Incorporate telemetry features with a clear and concise privacy statement.\n3.  Creation of Example Library:\n    *   Develop a feature to create an example library, helping new users quickly understand JabRef's functionality.\n4.  Community Engagement Tools:\n    *   Add links to the JabRef forum for support and Mastodon for community interaction.\n5.  Donation Prompt:\n    *   Encourage support for JabRef through a tastefully integrated donation option.\n6.  User Group-Specific Defaults:\n    *   Offer pre-configured default preferences catering to different user groups, such as \"relaxed users\" wanting all features, and \"pro-users\" who prefer managing BibTeX files without additional features\n\n(These are just ideas, during the pro, this needs to be refined )\n\n**Expected Outcome:**\n\nA welcome dialog with nice and welcoming UX\n\nExamples:\n\n1.  The welcome dialog should ask for: Configuration of Paper Direction, Integration of Online Services (Grobid, Telemetry), Creation of Example Library, Community Engagement Tool, Link to Donation page\n2.  The welcome dialog should offer some sensitive User Group-Specific Defaults: Offer pre-configured default preferences catering to different user groups, such as \"relaxed users\" wanting all features, and \"pro-users\" who prefer managing BibTeX files without additional features (as per [Issue #9491](https://github.com/JabRef/jabref/issues/9491)).\n\n**Skills required:**\n\n*   Java, JavaFX\n\n**Possible Mentors:**\n\n[@koppor](https://github.com/koppor), [@tobiasdiez](https://github.com/tobiasdiez)\n\n**Project size:**\n\n*   175h (medium)\n\n### Using PostgreSQL as full backend for JabRef\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#using-postgresql-as-full-backend-for-jabref)\n\nCurrently, JabRef holds all entries in memory. It even converts LaTeX to Unicode and vice versa to support better search. While this is a great UX, this leads to a huge memory consumption. The more \"proper\" way is to use a database (such as PostgreSQL) to store the entries. Then, not all entries need to be loaded in memory. The first step is to introduce a data-access layer: The maintable should read from SQL database, not from all in-memory. Possible future work may be: [https://www.zotero.org/support/dev/client\\_coding/direct\\_sqlite\\_database\\_access](https://www.zotero.org/support/dev/client_coding/direct_sqlite_database_access)\n\nThere can be an initial phase to evluate whether PostgreSQL is the right DBMS as backend for JabRef. For instance, DuckDB and SQLite were also discussed. Currently, PostgeSQL turned out best (especially for handling regular expression search on the database itself), but things may have changed in 2025.\n\nInternal note: This is issue [https://github.com/JabRef/jabref/issues/10209](https://github.com/JabRef/jabref/issues/10209)\n\n**Skills required:**\n\n*   PostgreSQL, Java, JavaFX\n\n**Possible Mentors:**\n\n[@koppor](https://github.com/koppor), [@InAnYan](https://github.com/InAnYan/), [@calixtus](https://github.com/calixtus)\n\n**Project size:**\n\n*   175h (medium)\n\n### Improved LibreOffice-JabRef integration\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#improved-libreoffice-jabref-integration)\n\n**Description:**\n\nJabRef can connect to LibreOffice to offer premier reference management by allowing users to cite library entries directly into the document, and then generate bibliographies based on the cited entries. See [JabRef LibreOffice Integration](https://docs.jabref.org/cite/openofficeintegration).\n\nWe have a collection of independent projects available for the LibreOffice/OpenOffice integration feature of JabRef.\n\n1.  **BST style support:** Currently, custom styles (JStyles) and CSL styles are supported. In the LaTeX-world, BST styles (specified via `.bst` files) are still popular. JabRef already has BST support, but it is currently not accessible via the UI.\n    \n    *   Expected deliverable: It should be possible to select a `.bst` file, which is then used for rendering into the LibreOffice document. \\[Details: [#624](https://github.com/JabRef/jabref/issues/624)\\]\n2.  **Footnote-based citation support for CSL styles:** Currently, using CSL styles in footnotes of the LibreOffice document causes unexpected behavior, especially for numeric styles. There should be a proper definition of the \"global order\" of the citations so that they can be used in footnotes. This problem is already solved for JStyles (see a high-level overview [here](https://devdocs.jabref.org/code-howtos/openoffice/order-of-appearance.html)), so the solution needs to be extended/adapted for CSL styles (and BST styles, if project 1 is also undertaken).\n    \n    *   Expected deliverable: It is possible to use CSL styles in the footnotes of the documents, without any unexpected/broken ordering in the bibliography or numeric citations. \\[Tracking issue: [#12484](https://github.com/JabRef/jabref/issues/12484)\\]\n3.  **Cross-compatibility with other reference management software**: In case of CSL styles, reference management software like [Zotero](https://www.zotero.org/) and [Mendeley](https://www.mendeley.com/) can read each other's citations in LibreOffice. This is made possible by following a specific format of document annotations, embedding information in CSL JSON. In JabRef, the internal format of references is currently a JabRef-custom format. It should be changed to a format used by Zotero, so that cross-compatibility can be ensured. See the discussion at [https://github.com/JabRef/jabref/issues/2146#issuecomment-891432507](https://github.com/JabRef/jabref/issues/2146#issuecomment-891432507) for details. This includes: i) Implementation of that format, ii) Implementation of a converter from the \"old\" JabRef-Format to the new one. The converter could be implemented within OpenOffice (similar to [JabRef\\_LibreOffice\\_Converter](https://github.com/teertinker/JabRef_LibreOffice_Converter?tab=readme-ov-file#jabref_libreoffice_converter)).\n    \n    *   Expected deliverable: One can seamlessly switch working with LibreOffice documents having citations from Zotero and JabRef.\n4.  **Seamless citation style type switching:** JabRef in LibreOffice should support auto-updation of references when switching from CSL-based formats to JStyle (or BST)-based formats and back. Currently, if the user messes up and realizes that they had to use another style family, the workaround is to re-cite all entries again with the new style, then refresh the bibliography. This may not be very user-friendly when citation styles need to be updated when submitting papers to different journals (one use-case), or simply because of last-minute change in decisions. For this project, the starting step will be unifying the \"reference mark\" (document annotation) format for all these style types, so that the entry information can be parsed across styles. This project thus goes very well coupled with Project 1.\n    \n    *   Expected deliverable: On changing style type (CSL/BST/JStyle), all references in the documents should seamlessly adapt to the new style.\n\n**Skills required:**\n\n*   Java, JavaFX\n\n**Possible Mentors:**\n\n[@Siedlerchr](https://github.com/Siedlerchr), [@subhramit](https://github.com/subhramit)\n\n**Project size:**\n\n*   **350h (large)**: If (Project 1 + Project 2 + Project 3) **OR** (Project 1 + Project 2 + Project 4) **OR** (Project 2 + Project 3 + Project 4) **OR** (Project 1 + Project 3 + Project 4)\n    \n*   **175h (medium)**: If (Project 1 + Project 2) **OR** (Project 2 + Project 3) **OR** (Project 1 + Project 3)\n    \n*   **90h (small)**: If Project 1 **OR** Project 2 **OR** Project 3\n    \n\n### Improved SLR Support\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#improved-slr-support)\n\n**Description:**\n\nWith the ever-growing number of publications in computer science and other fields of research, conducting secondary studies becomes necessary to summarize the current state of the art. For software engineering research, Kitchenham popularized the systematic literature review (SLR) method to address this issue. The main idea is to systematically identify and analyze the majority of relevant publications on a specific topic. This is usually an activity that takes extensive manual effort. Some tool support does exist, but the full potential of tools has not been exploited yet. JabRef also offers basic functionality for systematic literature reviews that is used by a number of researchers to systematically \"harvest\" related work based on the fetching capabilities of JabRef. While using the feature, various additional feature requests came up. For instance, created search queries are currently transformed internally by JabRef to the query format of the publisher. It should also be possible to directly input a query at the publisher site, e.g., for IEEE or ACM. More information: [Dominik Voigt, Oliver Kopp, Karoline Wild: Systematic Literature Tools: Are we there yet? ZEUS 2021: 83-88](https://ceur-ws.org/Vol-2839/paper13.pdf)\n\nOne key aspect would be the improvement of the fetcher Infrastructure in JabRef to better adapt to new and changing Publisher/Journal websites and to offer a more direct integration. As an inspiration, see [BibDesk](https://bibdesk.sourceforge.io/).\n\n**Expected outcome:**\n\nAn advanced SLR functionality, where a researcher is supported to execute a systematic-literature-review.\n\nWe did an initial project organization at [https://github.com/users/koppor/projects/2](https://github.com/users/koppor/projects/2).\n\n**Skills required:**\n\n*   Java, JavaFX\n\n**Possible mentors:**\n\n[@koppor](https://github.com/koppor), [@calixtus](https://github.com/calixtus)\n\n**Project size:**\n\n175h (medium)\n\n### Improved Journal Abbreviations\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#improved-journal-abbreviations)\n\nCurrently, JabRef has a single list of journal abbreviations. This list is a combined list of the `.csv` files at [https://github.com/JabRef/abbrv.jabref.org/tree/main/journals](https://github.com/JabRef/abbrv.jabref.org/tree/main/journals). Instead of the dropdown of JabRef should not show a single \"JabRef built in list\", but should show the various lists we offer: built-in lists, external lists, custom lists. Then, one can enable and disable with a click. This eases the users to find issues in abbreviation lists and allows users to customize the lists according to their field (e.g., physics, information science, ...).\n\nFore more context, see: [https://github.com/JabRef/jabref/issues/12364](https://github.com/JabRef/jabref/issues/12364)\n\n**Skills required:**\n\n*   Java, JavaFX\n\n**Possible Mentors:**\n\n[@calixtus](https://github.com/calixtus), [@koppor](https://github.com/koppor)\n\n**Project size:**\n\n*   90h (small)\n\n**Expected Outcome:**\n\nA UI view which allows selecting/including journal abbreviations by category.\n\n### {Your own project}\n\n[](https://github.com/JabRef/jabref/wiki/GSoC-2025-ideas-list#your-own-project)\n\nYou can propose another projects. JabRef offers various places where it can be improved. Think as a user or talk to other users. The following places are a good start:\n\n*   Feature requests prioritized: [https://github.com/orgs/JabRef/projects/6](https://github.com/orgs/JabRef/projects/6)\n*   General list of feature requests: [http://discourse.jabref.org/c/features](http://discourse.jabref.org/c/features)\n*   Candidates of university projects, the large ones: [https://github.com/orgs/JabRef/projects/3/views/3?filterQuery=status%3A%22free+to+take%22+size-of-project%3Alarge&sortedBy%5Bdirection%5D=desc&sortedBy%5BcolumnId%5D=8246261](https://github.com/orgs/JabRef/projects/3/views/3?filterQuery=status%3A%22free+to+take%22+size-of-project%3Alarge&sortedBy%5Bdirection%5D=desc&sortedBy%5BcolumnId%5D=8246261)\n"}