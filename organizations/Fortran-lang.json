{"name":"Fortran-lang","description":"High-performance parallel programming language","gsoc_url":"https://summerofcode.withgoogle.com/programs/2025/organizations/fortran-lang","ideas_url":"https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas","logo":"https://summerofcode.withgoogle.com/media/org/fortran-lang/ay9se7mc6vgdwgbn-360.png","technologies":["python","c++","fortran"],"topics":["compilers","programming languages","build systems","libraries","Fortran"],"projects":[{"project_name":"Version Constraint Resolution (fpm)","summary":"This project aims to implement a manifest syntax for version compatibility requirements in the Fortran Package Manager and resolve version compatibility constraints across dependencies.","difficulty":"Intermediate"},{"project_name":"Build Process Enhancements (fpm)","summary":"Improving the build process of the Fortran Package Manager through enhanced dependency detection, shared library support, and custom build configurations.","difficulty":"Intermediate"},{"project_name":"Extended Testing Support (fpm)","summary":"Creating a manifest specification for executable targets in fpm projects that includes resource management, environment variable definitions, and runner support.","difficulty":"Easy"},{"project_name":"Export build order and compile_commands.json (fpm)","summary":"Implementing a feature in fpm to export build orders and generate `compile_commands.json` for compatibility with external tools.","difficulty":"Hard"},{"project_name":"Support of external third-party preprocessors (fpm)","summary":"Allowing fpm to invoke external preprocessors before code compilation, enhancing flexibility for building complex packages.","difficulty":"Easy"},{"project_name":"File system library (stdlib)","summary":"Developing a cross-platform library for file system operations which would standardize directory traversal and content listing in Fortran.","difficulty":"Intermediate"},{"project_name":"Library to work with OS processes (stdlib)","summary":"Creating a cross-platform solution in Fortran to manage subprocesses through an abstraction of POSIX and Windows APIs.","difficulty":"Intermediate"},{"project_name":"Linear algebra and sparse matrices (stdlib)","summary":"Enhancing the standard library's APIs for linear algebra to support both dense and sparse matrices coherently.","difficulty":"Hard"},{"project_name":"String to number conversion (stdlib)","summary":"Improving performance and robustness of the stdlib module for converting strings to numerical types, including benchmarking and performance analysis.","difficulty":"Hard"},{"project_name":"Compile benchmarking code written in Fortran with LFortran","summary":"Focusing on compiling benchmark codes with LFortran and improving its performance to match or exceed traditional Fortran compilers.","difficulty":"Intermediate/Hard"},{"project_name":"Compile any Fortran code (LFortran)","summary":"Aiming to compile a wide range of Fortran codes using LFortran to evaluate its ability to handle diverse Fortran programs.","difficulty":"Intermediate/Hard"},{"project_name":"Compiling SciPy with LFortran","summary":"Completing the capability of LFortran to compile all Fortran packages within SciPy, which would significantly enhance LFortran's utility.","difficulty":"Intermediate"},{"project_name":"Compiling LAPACK with LFortran","summary":"Working on implementing the necessary semantics for LFortran to compile all LAPACK routines to increase its support for scientific computing.","difficulty":"Intermediate"},{"project_name":"Allow running Fortran in the browser (LFortran)","summary":"Enhancing the existing capabilities of LFortran to run Fortran code within a web browser, improving its accessibility and usability.","difficulty":"Intermediate"},{"project_name":"Implementation of features on the ASR and LLVM level (LFortran)","summary":"Implementing various Fortran features at the ASR and LLVM levels, accommodating multiple student projects focused on feature development.","difficulty":"Variable"},{"project_name":"MPI support (fortls)","summary":"Adding support for MPI in fortls to provide completions and documentation for MPI functions and variables in Fortran development.","difficulty":"Intermediate"},{"project_name":"Semantic highlighting and collapsable scopes (fortls)","summary":"Enhancing fortls to support advanced syntax highlighting and code folding features for better code readability and navigation.","difficulty":"Intermediate"},{"project_name":"Replace explicit LSP interface with pygls (fortls)","summary":"Refactoring fortls to utilize the pygls library for managing Language Server Protocol interfaces, improving maintainability.","difficulty":"Hard"},{"project_name":"Python environment manager (vscode-fortran-support)","summary":"Creating a robust Python environment manager for the Modern Fortran VS Code extension, aimed at managing dependencies and tool integrations.","difficulty":"Hard"},{"project_name":"vscode integration with fpm (vscode-fortran-support)","summary":"Integrating fpm into VS Code's Modern Fortran extension to streamline building and running projects through a graphical interface.","difficulty":"Hard"},{"project_name":"Standard Conformance Suite","summary":"Automating the generation of a comprehensive test suite to assess and report the conformance of Fortran compilers with ISO standards.","difficulty":"Hard"},{"project_name":"Coarray Fortran Framework of Efficient Interfaces to Network Environments (Caffeine)","summary":"Expanding the Caffeine framework to support grouping images in parallel environments, enhancing Fortran's coarray capabilities.","difficulty":"Intermediate"},{"project_name":"Get fortran-lang/minpack to be used in SciPy","summary":"Facilitating the inclusion of fortran-lang/minpack in SciPy to enhance its numerical methods functionality.","difficulty":"Easy"},{"project_name":"Improving fastGPT: Making it Faster, Easier to Use, and More General","summary":"Enhancing the fastGPT project by optimizing its speed, usability, and general capabilities, including potential support for GPU acceleration.","difficulty":"Intermediate"},{"project_name":"Fortran Graphics Library","summary":"Creating a modern object-oriented library for graphics handling in Fortran to provide standardized graphics capabilities across platforms.","difficulty":"Intermediate"},{"project_name":"Improved generation of Fortran interfaces for PETSc","summary":"Automating the generation of Fortran interfaces from PETSc's C code to reduce manual labor and improve quality and reliability.","difficulty":"Intermediate"}],"jina_response":"Title: GSoC 2025 Project ideas\n\nURL Source: https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas\n\nMarkdown Content:\nWelcome to the Fortran-Lang ideas page for contributors applying for Google Summer of Code (GSoC). If you are interested in applying for GSoC, see the [Contributor Instructions](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Contributor-Instructions) for more information on how to apply.\n\nThe list here is based on priorities identified by Fortran-Lang contributors and should inform you about the state and direction of each project. If you are interested in an idea on this page, please contact us on our [Discourse](https://fortran-lang.discourse.group/c/project/gsoc-2025/30) to ask any questions and get the latest information about the project idea. Please read the existing discussion(s) in any linked issues.\n\nThe project ideas on this page are grouped by the repository. Please familiarize yourself with each repository before exploring the ideas here.\n\nWe are not limited to the project ideas listed on this page. If you have your own project idea that is not listed here, let us know.\n\nContacts for prospective mentors: [Mentors list](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Mentors)\n\nProject Index\n-------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#project-index)\n\n*   fpm - Fortran Package Manager\n    *   [Version Constraint Resolution](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#version-constraint-resolution-fpm)\n    *   [Build Process Enhancements](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#build-process-enhancements-fpm)\n    *   [Extended Testing Support](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#extended-testing-support-fpm)\n    *   [Export build order and `compile_commands.json`](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#export-build-order-and-compile_commandsjson-fpm)\n    *   [Support of external third-party preprocessors](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#support-of-external-third-party-preprocessors)\n*   stdlib - Fortran Standard Library\n    *   [File system library](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#file-system-library-stdlib)\n    *   [Library to work with OS processes](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#library-to-work-with-os-processes-stdlib)\n    *   [Linear algebra and sparse matrices](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#linear-algebra-and-sparse-matrices-stdlib)\n    *   [String to number conversion](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#string-to-number-conversion-stdlib)\n*   LFortran\n    *   [Compile any Fortran code](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compile-any-fortran-code-LFortran)\n    *   [Compile benchmarking code written in Fortran with LFortran and improving LFortran's performance on these benchmarks](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compile-benchmarking-code-written-in-fortran-with-lfortran-and-improving-lfortrans-performance-on-these-benchmarks-lfortran)\n    *   [Compiling SciPy with LFortran](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compiling-scipy-with-lfortran-lfortran)\n    *   [Compiling LAPACK with LFortran](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compiling-lapack-with-lfortran-lfortran)\n    *   [Allow running Fortran in the browser](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#allow-running-fortran-in-the-browser-lfortran)\n    *   [Implementation of features on the ASR and LLVM level](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#Implementation-of-features-on-the-ASR-and-LLVM-level-lfortran)\n    *   [Other LFortran ideas](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#other-lfortran-ideas-lfortran)\n*   fortls - Fortran Language Server\n    *   [MPI support](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#mpi-support-fortls)\n    *   [Semantic highlighting and collapsable scopes](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#semantic-highlighting-and-collapsable-scopes-fortls)\n    *   [Replace explicit LSP interface with pygls](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#replace-explicit-lsp-interface-with-pygls-fortls)\n*   vscode-fortran-support - Modern Fortran for VS Code\n    *   [Python environment manager](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#python-environment-manager-vscode-fortran-support)\n    *   [vscode integration with fpm](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#vscode-integration-with-fpm-vscode-fortran-support)\n*   Other\n    *   [Standard Conformance Suite](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#standard-conformance-suite)\n    *   [Coarray Fortran Framework of Efficient Interfaces to Network Environments (Caffeine)](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#coarray-fortran-framework-of-efficient-interfaces-to-network-environments-caffeine)\n    *   [Get fortran-lang/minpack to be used in SciPy](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#get-fortran-langminpack-to-be-used-in-scipy)\n    *   [Improving fastGPT: Making it Faster, Easier to Use, and More General](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#improving-fastgpt-making-it-faster-easier-to-use-and-more-general)\n    *   [Fortran Graphics Library](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#fortran-graphics-library)\n    *   [Improved generation of Fortran interfaces for PETSc](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#improved-generation-of-fortran-interfaces-for-petsc)\n\n* * *\n\nVersion Constraint Resolution (fpm)\n-----------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#version-constraint-resolution-fpm)\n\nThe current decentralized package system in fpm allows dependencies to be fetched via a git repository URL. As part of this, a git tag or commit can be given to require a specific version of a dependency. There is however no way of specifying version compatibility requirements (_e.g._ `>= 1.0.0, <2.0.0`) and no way to resolve such requirements across a dependency tree.\n\nThis project will involve:\n\n*   Defining a manifest syntax for version compatibility matching\n*   Implementing support in fpm for solving a set of version compatibility constraints\n\nA possible approach would be to interface with an existing satisfiability solver such as:\n\n*   [libsolv](https://github.com/openSUSE/libsolv): interface via `iso_c_binding` as a separate fpm package\n\n**See also:** existing options for version matching syntax:\n\n*   [conda](https://docs.conda.io/projects/conda-build/en/latest/resources/package-spec.html#package-match-specifications)\n*   [npm](https://docs.npmjs.com/about-semantic-versioning/)\n*   [cargo](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html)\n\n**Expected outcomes:** Implemented a working version constraint mechanism in fpm\n\n**Skills preferred:** Fortran programming, experience with one or more build systems\n\n**Difficulty:** Intermediate, 350 hours\n\n**Mentors:** Brad Richardson ([@everythingfunctional](https://github.com/everythingfunctional)), Sebastian Ehlert ([@awvwgk](https://github.com/awvwgk)), Umashankar Sivakumar ([@usivakum](https://github.com/usivakum))\n\nBuild Process Enhancements (fpm)\n--------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#build-process-enhancements-fpm)\n\nFortran Package Manager (fpm) is pivotal for long-term Fortran success. This GSoC project aims to improve fpm’s build process by improving dependency detection, optimizing linking, implementing shared libraries, ensuring safe concurrent builds, and introducing external Makefile generation.\n\nThe project will address the following tasks:\n\n1.  **Custom flags and configurations**\n    *   Implement custom and compiler-dependent flags, and configurations\n2.  **External build system Generation:**\n    *   Enable generation of external Makefiles akin to `cmake -G` for advanced project configuration.\n3.  **Linking Optimization:**\n    *   Replace one-liner linking with static libraries to prevent line buffer overflow in Windows builds.\n4.  **Shared Library Implementation:**\n    *   Introduce support for shared library targets for project flexibility.\n5.  **Dependency Detection**:\n    *   Enhance fpm’s dependency detection to minimize rebuilds by parsing or hashing module/submodule files or parsing procedure interfaces in module files. fpm should not rebuild dependencies to a module whose public interface has not changed.\n\n**Expected Outcomes**:\n\n*   Enhanced dependency tracking and reduced rebuild times.\n*   Improved reliability in linking, particularly in Windows.\n*   Increased project versatility with shared library support.\n*   Safer concurrent builds through file locking.\n*   Greater project configuration flexibility with external Makefile generation.\n\n**Difficulty:** Intermediate, 175 hours.\n\n**Skills preferred:** Fortran programming, experience with one or more build systems\n\n**Mentors:** Federico Perini ([@perazz](https://github.com/perazz)), José Alves ([@jalvesz](https://github.com/jalvesz)), Henil Panchal ([@henilp105](https://github.com/henilp105))\n\nExtended Testing Support (fpm)\n------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#extended-testing-support-fpm)\n\nThe aim of this project is to create a manifest specification to provide defaults to executable targets in fpm projects. Information can be passed as environment variables, command-line arguments or as a runner. Desired features include:\n\n*   Programs should have a way to find resources of which the relative position within the project source directory is known.\n*   The current binary directory to access other targets within a project.\n*   Default runners like `mpirun`/`cafrun` or scripts from test frameworks should be usable to launch programs.\n*   A general syntax to define environment variables and command-line arguments should be defined.\n\nSome features should be implemented directly in fpm, while more elaborated functionality could be implemented in a separate fpm package as an official Fortran-lang fpm package.\n\n**Related issues:**\n\n*   [fpm#179](https://github.com/fortran-lang/fpm/issues/179): Testing with fpm test\n\n**Related discussions:**\n\n*   [fpm#328](https://github.com/fortran-lang/fpm/discussions/328): Example which requires external data\n\n**Expected outcomes:** fpm has broader and deeper testing functionality\n\n**Skills preferred:** Fortran programming and writing unit tests\n\n**Difficulty:** Easy, 175 hours\n\n**Mentors:** Sebastian Ehlert ([@awvwgk](https://github.com/awvwgk)), Brad Richardson ([@everythingfunctional](https://github.com/everythingfunctional))\n\nExport build order and `compile_commands.json` (fpm)\n----------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#export-build-order-and-compile_commandsjson-fpm)\n\n`fpm` has the ability to automatically determine the build order of a project's source files. This information is valuable to third party tools such as language servers and code analysis tools. The goal of this project is to export the build order of a project's source files in the `compile_commands.json`.\n\nThe second leg of this project is to implement the full syntax of `compile_commands.json` as described in the [Clang documentation](https://clang.llvm.org/docs/JSONCompilationDatabase.html). This would bring `fpm` a step closer to being compatible with other build tools.\n\n**Expected outcomes:** `fpm` will export a complete `compile_commands.json` file.\n\n**Skills preferred:** Fortran programming, experience with one or more build systems\n\n**Difficulty:** Hard, 350 hours\n\n**Mentors**: Giannis Nikiteas ([@gnikit](https://github.com/gnikit))\n\nSupport of external third-party preprocessors\n---------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#support-of-external-third-party-preprocessors)\n\nAdding support for external third-party preprocessors is important for fpm due to the additional flexibility they provide when building complex packages. In particular, the Fortran-lang [stdlib](https://github.com/fortran-lang/stdlib) project exploits the powerful [fypp](https://github.com/aradi/fypp) preprocessor for code generation and the support of fypp by fpm is required for stdlib to eventually be compatible as an fpm package.\n\nThis project will require to:\n\n*   Modify fpm to optionally invoke a third-party preprocessor before compiling sources;\n*   Extend the current manifest syntax of fpm for defining preprocessor variables in a preprocessor-independent manner, if necessary;\n*   Extend the current manifest syntax of fpm for specifying a third-party preprocessor and the corresponding file suffixes, if necessary;\n*   Passe defined preprocessor variables to built-in preprocessors if necessary;\n\nThird-party preprocessors should be specified on a per-project basis, _i.e._ multiple preprocessors might be required, and fpm should be able to report useful errors for missing third-party preprocessors.\n\n**Related issues:**\n\n*   [fpm#78](https://github.com/fortran-lang/fpm/issues/78): support for third-party preprocessors (_e.g._ fypp)\n*   [fpm#308](https://github.com/fortran-lang/fpm/issues/308): Fortran-based smart code generation in fpm\n*   [fpm#469](https://github.com/fortran-lang/fpm/issues/469): Source pre-processing prior to determining dependencies\n\n**Expected outcomes:** fpm has a working preprocessing capability\n\n**Skills preferred:** Fortran, C, or Python programming, experience using one or more preprocessors\n\n**Difficulty:** easy, 175 hours\n\n**Mentors:** Laurence Kedward ([@lkedward](https://github.com/lkedward)), Milan Curcic ([@milancurcic](https://github.com/milancurcic)), Federico Perini ([@perazz](https://github.com/perazz)), Jeremie Vandenplas ([@jvdp1](https://github.com/jvdp1))\n\nFile system library (stdlib)\n----------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#file-system-library-stdlib)\n\nCurrently, file system operations such as listing contents of directories, traversing directories, and similar, are restricted to 3rd party libraries and compiler extensions that are platform-specific and not portable. This project will entail designing and implementing a cross-platform solution for file system operations.\n\n**Related issues:**\n\n*   [stdlib#201](https://github.com/fortran-lang/stdlib/issues/201): File system operations\n*   [stdlib#220](https://github.com/fortran-lang/stdlib/issues/220): API for file system operations, directory manipulation\n\n**WIP implementation:**\n\n*   [stdlib\\_os](https://github.com/MarDiehl/stdlib_os)\n\n**Expected outcomes:** Implemented an stdlib module that provides cross-platform file-system utilities\n\n**Skills preferred:** Fortran and C programming, experience using Linux, macOS, and Windows\n\n**Difficulty:** Intermediate, 350 hours\n\n**Mentors**: Arjen Markus ([@arjenmarkus](https://github.com/arjenmarkus)), Milan Curcic ([@milancurcic](https://github.com/milancurcic))\n\nLibrary to work with OS processes (stdlib)\n------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#library-to-work-with-os-processes-stdlib)\n\nCross-platform solution to abstract POSIX and Windows API for creating subprocesses.\n\n**Related issues:**\n\n*   [stdlib#22](https://github.com/fortran-lang/stdlib/issues/22): Interface to POSIX I/O API\n*   [stdlib#308](https://github.com/fortran-lang/stdlib/issues/308): Subprocesses and Multiprocessing\n\n**Discourse thread:**\n\n*   [Ideas for command module](https://fortran-lang.discourse.group/t/ideas-for-command-module/439)\n\n**Skills preferred:** Fortran and C programming, experience using Linux, macOS, and Windows\n\n**Difficulty:** Intermediate, 350 hours\n\n**Mentors:** Sebastian Ehlert ([@awvwgk](https://github.com/awvwgk))\n\nLinear algebra and sparse matrices (stdlib)\n-------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#linear-algebra-and-sparse-matrices-stdlib)\n\nImprove dense and sparse linear algebra APIs in the Fortran Standard Library.\n\nThe API development should closely follow the developements on dense [linear algebra](https://stdlib.fortran-lang.org/page/specs/stdlib_linalg.html) in order to keep a coherent interface for sparse and dense matrices.\n\n**Related issue**: [#931](https://github.com/fortran-lang/stdlib/issues/931) [#930](https://github.com/fortran-lang/stdlib/issues/930) [#910](https://github.com/fortran-lang/stdlib/issues/910) [#898](https://github.com/fortran-lang/stdlib/issues/898) [#891](https://github.com/fortran-lang/stdlib/issues/891) [#763](https://github.com/fortran-lang/stdlib/issues/763) [#934](https://github.com/fortran-lang/stdlib/issues/934)\n\n**WIP implementations**: [#915](https://github.com/fortran-lang/stdlib/pull/915) [#844](https://github.com/fortran-lang/stdlib/pull/844) [FSPARSE](https://github.com/jalvesz/FSPARSE)\n\n**Expected outcomes:** Improved linear algebra and sparse matrix functionality in the `stdlib_linalg` module\n\n**Skills preferred:** Fortran programming, understanding of linear algebra\n\n**Difficulty:** Hard, 350 hours\n\n**Mentors:** Ondřej Čertík ([@certik](https://github.com/certik)), Ivan Pribec ([@ivan-pi](https://github.com/ivan-pi/)), Jeremie Vandenplas ([@jvdp1](https://github.com/jvdp1)), Jose Alves ([@jalvesz](https://github.com/jalvesz)), Federico Perini ([@perazz](https://github.com/perazz))\n\nString to number conversion (stdlib)\n------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#string-to-number-conversion-stdlib)\n\nThis project will enhance stdlib's string handling capabilities for fast number parsing in Fortran.\n\nRecently, a new module was added to stdlib called [`stdlib_str2num`](https://github.com/fortran-lang/stdlib/blob/master/src/stdlib_str2num.fypp) which implements fast routines for converting strings to numerical types. The participant would get familiar with these implementations and subsequently:\n\n*   Create a full benchmark suite for the string to number conversion, across compiler vendors, operating systems, and CPU architectures.\n*   Explore ways to improve robustness and efficiency, e.g. error handling.\n*   Propose a shallow interface for the [string\\_type](https://github.com/fortran-lang/stdlib/blob/master/src/stdlib_string_type.fypp) facility in stdlib.\n*   Propose an enhancement to the [loadtxt](https://github.com/fortran-lang/stdlib/blob/master/src/stdlib_io.fypp) facility function to speed-up file reading.\n*   Depending on the advancement, the participant is also encouraged to include a roadmap for inclusion of the inverse conversion by following the intitiative in this thread [ryu-based to\\_string function](https://github.com/fortran-lang/stdlib/issues/627)\n\n**Relevant thread on Fortran Discrouse**: [Faster string to double](https://fortran-lang.discourse.group/t/faster-string-to-double/2208)\n\n**Expected outcomes:** Enhancement of stdlib fast string to number conversion\n\n**Skills preferred:** Fortran and C programming, understanding of floating-point arithmetic\n\n**Difficulty:** Hard, 350 hours\n\n**Mentors:** Jose Alves ([@jalvesz](https://github.com/jalvesz)), Carl Burkert ([@carltoffel](https://github.com/carltoffel)) Brad Richardson ([@everythingfunctional](https://github.com/everythingfunctional)), Ivan Pribec ([@ivan-pi](https://github.com/ivan-pi/))\n\nCompile benchmarking code written in Fortran with LFortran and improving LFortran's performance on these benchmarks (LFortran)\n------------------------------------------------------------------------------------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compile-benchmarking-code-written-in-fortran-with-lfortran-and-improving-lfortrans-performance-on-these-benchmarks-lfortran)\n\n[https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/fortran.html](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/fortran.html) contains all the benchmark codes written for various problems such as `n-body`, `sepctral norm`, `mandelbrot`. The workflow would involve first doing bug fixes to compile the code (modifying the input code would be okay) with LFortran and producing correct outputs. Then, improving LFortran to perform better or equivalent to other Fortran compilers such as GFortran.\n\n`n-body` already compiles with workarounds with LFortran main. See, [https://github.com/lfortran/lfortran/pull/1213](https://github.com/lfortran/lfortran/pull/1213). More work needs to be done for other benchmark codes.\n\n**Expected outcomes:** LFortran can compile as many benchmark codes as possible. Performing better than other compilers would be an additional plus.\n\n**Skills preferred:** Fortran and C++ programming\n\n**Difficulty:** intermediate/hard, 350 hours\n\n**Mentors** - Gagandeep Singh (Github - [@czgdp1807](https://github.com/czgdp1807))\n\nCompile any Fortran code (LFortran)\n-----------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compile-any-fortran-code-lfortran)\n\nThe primary goal is to compile as many codes as possible. We have identified and listed those at [label:code-to-be-compiled](https://github.com/lfortran/lfortran/labels/Code%20to%20be%20Compiled).\n\nThis project aims to pick up a code and get it compiled to ASR, then to LLVM, binary and assure that values align with GFortran (or other Fortran compilers). We can have several of these projects at the same time.\n\n**Expected outcomes:** LFortran can compile chosen code.\n\n**Skills preferred:** Fortran and C++ programming\n\n**Difficulty:** intermediate/hard, 350 hours\n\n**Mentors** - Pranav Goswami\n\nCompiling SciPy with LFortran (LFortran)\n----------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compiling-scipy-with-lfortran-lfortran)\n\nCurrently LFortran compiles about 60% of all SciPy Fortran packages and can parse all the Fortran source code in SciPy. The goal of this project is to compile the rest of them. This project involves implementing the rest of the semantics that is needed to compile the Fortran files with LFortran.\n\nBeing able to compile SciPy with LFortran would make a huge impact on both LFortran and SciPy.\n\n**Expected outcomes:** LFortran can compile all Fortran code in SciPy.\n\n**Skills preferred:** Fortran and C++ programming\n\n**Difficulty:** intermediate, 350 hours\n\n**Mentors** - Ondřej Čertík, Pranav Goswami\n\nCompiling LAPACK with LFortran (LFortran)\n-----------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#compiling-lapack-with-lfortran-lfortran)\n\nProgressing towards beta we need to compile as much of the LAPACK routines as possible. The goal of this project is to compile LAPACK Fortran codes. It involves implementing the rest of the semantics that is needed to compile the Fortran files with LFortran.\n\n**Expected outcomes:** LFortran can compile all code in LAPACK.\n\n**Skills preferred:** Fortran and C++ programming\n\n**Difficulty:** intermediate, 350 hours\n\n**Mentors** - Ondřej Čertík, Pranav Goswami\n\nAllow running Fortran in the browser (LFortran)\n-----------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#allow-running-fortran-in-the-browser-lfortran)\n\nWe have LFortran running in the browser using WASM here: [https://dev.lfortran.org/](https://dev.lfortran.org/), the goal of this project would be to improve the user interface. Here is a list of issues that the project can work on fixing: [https://github.com/lfortran/lcompilers\\_frontend/issues](https://github.com/lfortran/lcompilers_frontend/issues)\n\nThis project would entail working with LFortran, LLVM, Emscripten, and Webassembly to allow running Fortran in the browser.\n\n**Skills preferred:** Fortran and C++ programming\n\n**Difficulty:** intermediate, 350 hours\n\n**Mentors** - Ondřej Čertík\n\nImplementation of features on the ASR and LLVM level (LFortran)\n---------------------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#implementation-of-features-on-the-asr-and-llvm-level-lfortran)\n\nThe roadmap [https://gitlab.com/lfortran/lfortran/-/issues/272](https://gitlab.com/lfortran/lfortran/-/issues/272) issue contains a list of Fortran features that we want implemented. Each feature should be implemented at the ASR level and in the LLVM backend to be complete. If AST is missing for a given feature, then it has to be implemented also.\n\nHere you can pick a feature or a set of features from the list and propose it as a GSoC project. In other words, this project idea can accommodate multiple student projects.\n\nList of resources for more information and background:\n\n*   [ASR.asdl](https://gitlab.com/lfortran/lfortran/-/blob/0391231553932e7df230c7c88bc05528d5348f85/grammar/ASR.asdl), the comment at the top explains the design motivation\n*   [asr\\_to\\_llvm.cpp](https://gitlab.com/lfortran/lfortran/-/blob/0391231553932e7df230c7c88bc05528d5348f85/src/lfortran/codegen/asr_to_llvm.cpp) is the LLVM backend\n*   [ast\\_to\\_asr.cpp](https://gitlab.com/lfortran/lfortran/-/blob/0391231553932e7df230c7c88bc05528d5348f85/src/lfortran/semantics/ast_to_asr.cpp) is the AST -\\> ASR conversion where all semantics checks are being done and compiler errors reported to the user\n*   [Developer Tutorial](https://docs.lfortran.org/developer_tutorial)\n\nIf you have any questions, please do not hesitate to ask, we can discuss or provide more details.\n\n**Mentors:** Ondrej Certik ([@certik](https://github.com/certik))\n\nOther LFortran ideas (LFortran)\n-------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#other-lfortran-ideas-lfortran)\n\nMore LFortran project ideas for GSoC can be found at: [https://github.com/lfortran/lfortran/wiki/GSoC-2025-Ideas](https://github.com/lfortran/lfortran/wiki/GSoC-2025-Ideas)\n\nMPI support (fortls)\n--------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#mpi-support-fortls)\n\n`fortls` has support for Fortran intrinsics, Standard modules and OpenMP. It does not however support MPI. The goal of this project is to add full support for completions, hover and signature help for MPI variables, subroutines and functions.\n\nDue to the size of the MPI standard, the process of extracting the necessary information from the standard such as names, interfaces and documentation will be automated. The student will be responsible for creating a scraper/parser to fetch the necessary information from the MPI standard and then create the serialised data (JSON) to be used by `fortls`.\n\n**Discourse thread:** [MPI documentation and interfaces](https://fortran-lang.discourse.group/t/mpi-documentation-and-interfaces/7252)\n\n**Expected outcomes:** `fortls` will have completion and hover support for MPI.\n\n**Skills preferred:** Python programming and understanding of Fortran\n\n**Difficulty:** Intermediate, 175 hours\n\n**Mentors**: Giannis Nikiteas ([@gnikit](https://github.com/gnikit))\n\nSemantic highlighting and collapsable scopes (fortls)\n-----------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#semantic-highlighting-and-collapsable-scopes-fortls)\n\nAs part of this project the student will add support to `fortls` for the Semantics Tokens request, which is used to provide improved syntax highlighting and the Folding Range request, which is used to provide collapsable scopes.\n\n**Related Issues:**\n\n*   [fortls#56](https://github.com/fortran-lang/fortls/issues/56)\n\n**Expected outcomes:** `fortls` will serve for semantic highlighting and collapsable scopes requests.\n\n**Skills preferred:** Python programming and understanding of Fortran\n\n**Difficulty:** Intermediate, 175 hours\n\n**Mentors**: Giannis Nikiteas ([@gnikit](https://github.com/gnikit))\n\nReplace explicit LSP interface with pygls (fortls)\n--------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#replace-explicit-lsp-interface-with-pygls-fortls)\n\n`fortls` uses explicit interfaces to the Language Server Protocol (LSP). To decrease code duplication and increase maintainability, the work of maintaining the explicit interfaces should be replaced with the use of `pygls`' module.\n\n**Related Issues:**\n\n*   [fortls#96](https://github.com/fortran-lang/fortls/issues/96)\n\n**Expected outcomes:** `fortls` uses `pygls`' to define LSP interfaces, types and requests.\n\n**Skills preferred:** Python programming and understanding of the Language Server Protocol\n\n**Difficulty:** Hard, 350 hours\n\n**Mentors**: Giannis Nikiteas ([@gnikit](https://github.com/gnikit))\n\nPython environment manager (vscode-fortran-support)\n---------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#python-environment-manager-vscode-fortran-support)\n\nIn the Modern Fortran for VS Code extension, the use of Python as a means to install third party tools is essential. The goal of this project is to create a robust Python environment manager for installing and running third party tools such as `fortls`, `fpm`, `findent`, etc., taking into account the user's setup (venv, conda, system Python, etc.).\n\n**Expected outcomes:** Modern Fortran for VS Code will have a robust Python environment manager for installing and running third party tools.\n\n**Skills preferred:** Typescript, Python programming\n\n**Difficulty:** Hard, 175 hours\n\n**Mentors**: Giannis Nikiteas ([@gnikit](https://github.com/gnikit))\n\nvscode integration with fpm (vscode-fortran-support)\n----------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#vscode-integration-with-fpm-vscode-fortran-support)\n\nThe goal of this project is to allow `fpm` integration with the Modern Fortran extension for Visual Studio Code, similar to how CMake and Meson are integrated in VS Code.\n\nUsing an Activity bar icon, the user will be able to build and run projects, tests and examples. The student will be responsible for creating the GUI integration and the necessary backend to communicate with `fpm`.\n\n**Expected outcomes:** Modern Fortran for VS Code will have a GUI integration with `fpm` to build and run projects, tests and examples.\n\n**Skills preferred:** Typescript, Fortran programming\n\n**Difficulty:** Hard, 350 hours\n\n**Mentors**: Giannis Nikiteas ([@gnikit](https://github.com/gnikit))\n\nStandard Conformance Suite\n--------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#standard-conformance-suite)\n\nFortran compilers' support for ISO Fortran standards generally lag the publication of the standard by several years or longer. Fortran consultants Ian Chivers and Jane Sleightholme periodically publish a [paper](https://dl.acm.org/doi/10.1145/3432987.3432991) containing a table detailing the standard features supported by 10 compilers. Gathering the tabulated data requires a considerable amount of effort on the part of the authors and the compiler developers. The chosen venue for publishing the table also puts it behind a paywall: access requires a subscription to ACM SIGPLAN Fortran Forum. The project will automate the generation of the table, make it more detailed and empower the community to contribute to by submitting small tests to an open-source conformance test suite.\n\n**Prior work:**\n\n*   [fortran-compiler-tests](https://github.com/nncarlson/fortran-compiler-tests)\n*   [flibs chkfeatures](https://sourceforge.net/p/flibs/svncode/HEAD/tree/trunk/chkfeatures/)\n*   [Defunct](https://github.com/sourceryinstitute/Defunct)\n*   [Fortran Testsuite Proposal](https://github.com/j3-fortran/fortran_proposals/issues/57)\n\n**Expected outcomes:** A comprehensive test suite that generates a report of standard conformance for any Fortran compiler. The suite is not expected to be 100% complete by the end of the project, but should be significant in terms of standard coverage.\n\n**Skills preferred:** Fortran programming, experience reading and interpreting the Fortran Standard, and writing tests\n\n**Difficulty:** Hard, 350 hours\n\n**Mentors:** Damian Rouson ([@rouson](https://github.com/rouson)), Arjen Markus ([@arjenmarkus](https://github.com/arjenmarkus)), Ondřej Čertík ([@certik](https://github.com/certik))\n\nCoarray Fortran Framework of Efficient Interfaces to Network Environments ([Caffeine](https://github.com/berkeleylab/caffeine))\n-------------------------------------------------------------------------------------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#coarray-fortran-framework-of-efficient-interfaces-to-network-environments-caffeine)\n\nThis project would add support for grouping images (parallel processes) into teams that allow submodes to execute independently. Caffeine 0.1.0 uses the [GASNet-EX](https://go.lbl.gov/gasnet) networking middleware software as a back end for supporting most of the non-coarray parallel features of Fortran 2018 except for the intrinsic derived `team_type` and related features. Work is underway to support the coarray features that most applications will need for expressing custom parallel algorithms. The teams feature set is the one significant non-coarray parallel group of features not yet implemented in Caffeine.\n\n**Expected outcomes:** Caffeine can be used to create images groups in execution parallel programs\n\n**Skills preferred:** Fortran and C programming\n\n**Difficulty:** Intermediate, 175 hours\n\n**Mentors:** Damian Rouson ([@rouson](https://github.com/rouson))\n\nGet fortran-lang/minpack to be used in SciPy\n--------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#get-fortran-langminpack-to-be-used-in-scipy)\n\n[fortran-lang/minpack #14](https://github.com/fortran-lang/minpack/issues/14)\n\nThe participant would work with Fortran-lang and SciPy teams toward implementing fortran-lang/minpack in SciPy.\n\n**Expected outcomes:** fortran-lang/minpack is incorporated into SciPy.\n\n**Skills preferred:** Fortran-C interop, Python programming\n\n**Difficulty:** Easy, 175 hours\n\n**Mentors:** Sebastian Ehlert ([@awvwgk](https://github.com/awvwgk))\n\nImproving fastGPT: Making it Faster, Easier to Use, and More General\n--------------------------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#improving-fastgpt-making-it-faster-easier-to-use-and-more-general)\n\nThe [fastGPT](https://github.com/certik/fastGPT) project is a Fortran implementation of GPT-2 that is comparable in speed to PyTorch. Although it is already very fast on CPUs, there is still room for improvement in terms of usability and performance on CPU and other architectures, such as GPUs.\n\nThis project aims to explore various aspects of fastGPT to improve its usability and performance. Some potential areas of exploration include:\n\n*   _Parallelism_: Investigate the use of parallelism in fastGPT, including MPI and coarrays, to potentially make it even faster. Given that GPT inference is dominated by large matrix-matrix multiplications over a few layers, we will carefully investigate which parallel approach is the best (whether MPI, coarrays, OpenMP or just parallel BLAS that we already have).\n    \n*   _Reduced precision models_: Experiment with using reduced precision models (e.g., 16-bit or 8-bit floats) instead of the default 32-bit to potentially speed up inference.\n    \n*   _GPU acceleration_: Explore how to optimize fastGPT for GPU architectures to potentially make it even faster.\n    \n*   _UI improvements_: Add a chat mode (similar to chatGPT). Explore how to make it easier to use as a grammar checker, or creating summaries, or other areas where GPT-2 is strong. Make it a nice Fortran library, installable using fpm, usable in other projects. Investigate how to use it with the `neural-fortran` project.\n    \n\n**Expected outcomes:** Create an improved fastGPT implementation that is faster, easier to use, and more general.\n\n**Skills preferred:** Fortran, linear algebra\n\n**Difficulty:** Intermediate, 175 hours\n\n**Mentors:** Ondřej Čertík ([@certik](https://github.com/certik)), Milan Curcic ([@milancurcic](https://github.com/milancurcic))\n\nFortran Graphics Library\n------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#fortran-graphics-library)\n\nFortran does not have native graphics handling capabilities. While several bindings interfacing Fortran to graphics and plotting libraries are available (e.g., [f03gl](https://www-stone.ch.cam.ac.uk/pub/f03gl/index.xhtml), [sdl](https://github.com/interkosmos/fortran-sdl2), [pyplot](https://github.com/jacobwilliams/pyplot-fortran), [dislin](https://www.dislin.de/exa_f90.html#section_12d), [plplot](https://plplot.sourceforge.net/) ), no up-to-date open-source graphics package with a pure, modern Fortran API is available.\n\nThe aim of this project is to lay out the basics of an object-oriented \"canvas\" representation in object-oriented Fortran. The contributor would implement, document, and test basic graphics classes (2d points, lines, brushes, etc.), an abstract graphics canvas API with backends to both file and graphics devices (i.e., bitmap, PNG, OpenGL, SVG, etc.) The outcome of this project would be a contribution to the development of a platform-agnostic graphics library for Fortran.\n\n**Expected outcomes:** Design and implement classes for 2d graphics primitives, a unified graphics canvas API, and several backend implementations.\n\n**Skills preferred:** Fortran, C, 2D graphics basics\n\n**Difficulty:** Intermediate, 350 hours\n\n**Mentors:** Federico Perini ([@perazz](https://github.com/perazz))\\*\n\nImproved generation of Fortran interfaces for PETSc\n---------------------------------------------------\n\n[](https://github.com/fortran-lang/webpage/wiki/GSoC-2025-Project-ideas#improved-generation-of-fortran-interfaces-for-petsc)\n\n[PETSc](https://petsc.org/), the Portable, Extensible Toolkit for Scientific Computation, pronounced PET-see, is for the scalable (parallel) solution of scientific applications modeled by partial differential equations (PDEs). It has bindings for C, Fortran, and Python (via petsc4py). PETSc also contains TAO, the Toolkit for Advanced Optimization, software library. It supports MPI, and GPUs through CUDA, HIP, Kokkos, or OpenCL, as well as hybrid MPI-GPU parallelism; it also supports the NEC-SX Tsubasa Vector Engine.\n\nCurrently, only a part of the Fortran interfaces can be generated automatically using [bfort](http://wgropp.cs.illinois.edu/projects/software/sowing/bfort/bfort.htm). Since the manual generation of the remaining interfaces is tedious and error prone, this project is about an improved generation of Fortran interfaces from PETSc's C code.\n\nThe main tasks of this project are\n\n*   Definition of a robust and future-proof structure for the Fortran interfaces\n*   Selection and/or development of a tool that creates the interfaces automatically\n\nMore specifically, the first task is about finding a suitable structure of the C-to-Fortran interface that reduces the need of 'stubs' on the C and Fortran side making use of modern Fortran features where appropriate. This task will involve evaluating different approaches found in other projects taking into account the object-oriented approach of PETSc. Prototypes will be implemented manually and evaluated with the help of the PETSc community. The second task is then the automated generation of the Fortran interfaces using the approach selected in the first task. To this end, it will be evaluated whether an extension of bfort, the use of another existing tool, or the development of a completely new tool (probably in Python) is the most suitable approach.\n\n**Links**:\n\n*   [PETSc](https://petsc.org/)\n*   [bfort](http://wgropp.cs.illinois.edu/projects/software/sowing/bfort/bfort.htm)\n*   [Fortran Wiki: Generating C Interfaces](https://fortranwiki.org/fortran/show/Generating+C+Interfaces)\n*   [Fortran Discourse: ISO\\_C\\_binding](https://fortran-lang.discourse.group/t/iso-c-binding-looking-for-practical-example-of-how-it-helps-with-mangling/3393)\n\n**Expected outcomes**: Stable and robust autogeneration of Fortran interfaces for PETSc that works for almost all routines\n\n**Skills preferred**: Programming experience in multiple languages, ideally C and/or Fortran\n\n**Difficulty**: Intermediate, 350 hours\n\n**Mentors**: Martin Diehl ([@MarDiehl](https://github.com/MarDiehl))\n"}